entity self;
entity other;
entity world;
float time;
float frametime;
float force_retouch;
string mapname;
float deathmatch;
float coop;
float teamplay;
float serverflags;
float total_secrets;
float total_monsters;
float found_secrets;
float killed_monsters;
float parm1;
float parm2;
float parm3;
float parm4;
float parm5;
float parm6;
float parm7;
float parm8;
float parm9;
float parm10;
float parm11;
float parm12;
float parm13;
float parm14;
float parm15;
float parm16;
vector v_forward;
vector v_up;
vector v_right;
float trace_allsolid;
float trace_startsolid;
float trace_fraction;
vector trace_endpos;
vector trace_plane_normal;
float trace_plane_dist;
entity trace_ent;
float trace_inopen;
float trace_inwater;
entity msg_entity;
void () main;
void () StartFrame;
void () PlayerPreThink;
void () PlayerPostThink;
void () ClientKill;
void () ClientConnect;
void () PutClientInServer;
void () ClientDisconnect;
void () SetNewParms;
void () SetChangeParms;
void end_sys_globals;
.float modelindex;
.vector absmin;
.vector absmax;
.float ltime;
.float movetype;
.float solid;
.vector origin;
.vector oldorigin;
.vector velocity;
.vector angles;
.vector avelocity;
.vector punchangle;
.string classname;
.string model;
.float frame;
.float skin;
.float effects;
.vector mins;
.vector maxs;
.vector size;
.void() touch;
.void() use;
.void() think;
.void() blocked;
.float nextthink;
.entity groundentity;
.float health;
.float frags;
.float weapon;
.string weaponmodel;
.float weaponframe;
.float currentammo;
.float ammo_shells;
.float ammo_nails;
.float ammo_rockets;
.float ammo_cells;
.float items;
.float takedamage;
.entity chain;
.float deadflag;
.vector view_ofs;
.float button0;
.float button1;
.float button2;
.float impulse;
.float fixangle;
.vector v_angle;
.float idealpitch;
.string netname;
.entity enemy;
.float flags;
.float colormap;
.float team;
.float max_health;
.float teleport_time;
.float armortype;
.float armorvalue;
.float waterlevel;
.float watertype;
.float ideal_yaw;
.float yaw_speed;
.entity aiment;
.entity goalentity;
.float spawnflags;
.string target;
.string targetname;
.float dmg_take;
.float dmg_save;
.entity dmg_inflictor;
.entity owner;
.vector movedir;
.string message;
.float sounds;
.string noise;
.string noise1;
.string noise2;
.string noise3;
float CHSCAM_FAR = 8.000;
float CHSCAM_ALT = 4.000;
float CHSCAM_ON = 2.000;
float LASERTARG_ON = 1.000;
void end_sys_fields;
.float ammo_roobar;
float FALSE = 0.000;
float TRUE = 1.000;
float FL_FLY = 1.000;
float FL_SWIM = 2.000;
float FL_CLIENT = 8.000;
float FL_INWATER = 16.000;
float FL_MONSTER = 32.000;
float FL_GODMODE = 64.000;
float FL_NOTARGET = 128.000;
float FL_ITEM = 256.000;
float FL_ONGROUND = 512.000;
float FL_PARTIALGROUND = 1024.000;
float FL_WATERJUMP = 2048.000;
float FL_JUMPRELEASED = 4096.000;
float FL_UPSIDE_DOWN = 8192.000;
float MOVETYPE_NONE = 0.000;
float MOVETYPE_WALK = 3.000;
float MOVETYPE_STEP = 4.000;
float MOVETYPE_FLY = 5.000;
float MOVETYPE_TOSS = 6.000;
float MOVETYPE_PUSH = 7.000;
float MOVETYPE_NOCLIP = 8.000;
float MOVETYPE_FLYMISSILE = 9.000;
float MOVETYPE_BOUNCE = 10.000;
float MOVETYPE_BOUNCEMISSILE = 11.000;
float SOLID_NOT = 0.000;
float SOLID_TRIGGER = 1.000;
float SOLID_BBOX = 2.000;
float SOLID_SLIDEBOX = 3.000;
float SOLID_BSP = 4.000;
float RANGE_MELEE = 0.000;
float RANGE_NEAR = 1.000;
float RANGE_MID = 2.000;
float RANGE_FAR = 3.000;
float DEAD_NO = 0.000;
float DEAD_DYING = 1.000;
float DEAD_DEAD = 2.000;
float DEAD_RESPAWNABLE = 3.000;
float DAMAGE_NO = 0.000;
float DAMAGE_YES = 1.000;
float DAMAGE_AIM = 2.000;
float IT_AXE = 4096.000;
float IT_SHOTGUN = 1.000;
float IT_SUPER_SHOTGUN = 2.000;
float IT_NAILGUN = 4.000;
float IT_SUPER_NAILGUN = 8.000;
float IT_GRENADE_LAUNCHER = 16.000;
float IT_ROCKET_LAUNCHER = 32.000;
float IT_LIGHTNING = 64.000;
float IT_EXTRA_WEAPON = 128.000;
float IT_SHELLS = 256.000;
float IT_NAILS = 512.000;
float IT_ROCKETS = 1024.000;
float IT_CELLS = 2048.000;
float IT_ARMOR1 = 8192.000;
float IT_ARMOR2 = 16384.000;
float IT_ARMOR3 = 32768.000;
float IT_SUPERHEALTH = 65536.000;
float IT_NULL = 0.000;
float IT_ROOBAR = 4096.000;
float IT_DETONATOR = 4.000;
float IT_MINE_LAUNCHER = 16.000;
float IT_LASER_GUN = 8192.000;
float IT_ROOBAR_STRENGTH = 64.000;
float IT_MINES = 256.000;
float IT_DETONATORS = 2048.000;
float IT_KEY1 = 131072.000;
float IT_KEY2 = 262144.000;
float IT_INVISIBILITY = 524288.000;
float IT_INVULNERABILITY = 1048576.000;
float IT_SUIT = 2097152.000;
float IT_QUAD = 4194304.000;
float CONTENT_EMPTY = -1.000;
float CONTENT_SOLID = -2.000;
float CONTENT_WATER = -3.000;
float CONTENT_SLIME = -4.000;
float CONTENT_LAVA = -5.000;
float CONTENT_SKY = -6.000;
float STATE_TOP = 0.000;
float STATE_BOTTOM = 1.000;
float STATE_UP = 2.000;
float STATE_DOWN = 3.000;
vector VEC_ORIGIN = '0.000 0.000 0.000';
vector VEC_HULL_MIN = '-16.000 -16.000 -24.000';
vector VEC_HULL_MAX = '16.000 16.000 32.000';
vector VEC_HULL2_MIN = '-32.000 -32.000 -24.000';
vector VEC_HULL2_MAX = '32.000 32.000 64.000';
float SVC_TEMPENTITY = 23.000;
float SVC_KILLEDMONSTER = 27.000;
float SVC_FOUNDSECRET = 28.000;
float SVC_INTERMISSION = 30.000;
float SVC_FINALE = 31.000;
float SVC_CDTRACK = 32.000;
float SVC_SELLSCREEN = 33.000;
float TE_SPIKE = 0.000;
float TE_SUPERSPIKE = 1.000;
float TE_GUNSHOT = 2.000;
float TE_EXPLOSION = 3.000;
float TE_TAREXPLOSION = 4.000;
float TE_LIGHTNING1 = 5.000;
float TE_LIGHTNING2 = 6.000;
float TE_WIZSPIKE = 7.000;
float TE_KNIGHTSPIKE = 8.000;
float TE_LIGHTNING3 = 9.000;
float TE_LAVASPLASH = 10.000;
float TE_TELEPORT = 11.000;
float CHAN_AUTO = 0.000;
float CHAN_WEAPON = 1.000;
float CHAN_VOICE = 2.000;
float CHAN_ITEM = 3.000;
float CHAN_BODY = 4.000;
float ATTN_NONE = 0.000;
float ATTN_NORM = 1.000;
float ATTN_IDLE = 2.000;
float ATTN_STATIC = 3.000;
float UPDATE_GENERAL = 0.000;
float UPDATE_STATIC = 1.000;
float UPDATE_BINARY = 2.000;
float UPDATE_TEMP = 3.000;
float EF_BRIGHTFIELD = 1.000;
float EF_MUZZLEFLASH = 2.000;
float EF_BRIGHTLIGHT = 4.000;
float EF_DIMLIGHT = 8.000;
float MSG_BROADCAST = 0.000;
float MSG_ONE = 1.000;
float MSG_ALL = 2.000;
float MSG_INIT = 3.000;
float movedist;
float gameover;
string string_null;
float empty_float;
entity newmis;
entity activator;
entity damage_attacker;
float framecount;
float skill;
.string wad;
.string map;
.float worldtype;
.string killtarget;
.float light_lev;
.float style;
.void() th_stand;
.void() th_walk;
.void() th_run;
.void() th_missile;
.void() th_melee;
.void(entity attacker, float take) th_pain;
.void() th_die;
.entity oldenemy;
.float speed;
.float lefty;
.float search_time;
.float attack_state;
float AS_STRAIGHT = 1.000;
float AS_SLIDING = 2.000;
float AS_MELEE = 3.000;
float AS_MISSILE = 4.000;
.float walkframe;
.float attack_finished;
.float pain_finished;
.float invincible_finished;
.float invisible_finished;
.float super_damage_finished;
.float radsuit_finished;
.float invincible_time;
.float invincible_sound;
.float invisible_time;
.float invisible_sound;
.float super_time;
.float super_sound;
.float rad_time;
.float fly_sound;
.float axhitme;
.float show_hostile;
.float jump_flag;
.float swim_flag;
.float air_finished;
.float bubble_count;
.string deathtype;
.string mdl;
.vector mangle;
.float t_length;
.float t_width;
.vector dest;
.vector dest1;
.vector dest2;
.float wait;
.float delay;
.entity trigger_field;
.string noise4;
.float pausetime;
.entity movetarget;
.float aflag;
.float dmg;
.float cnt;
.void() think1;
.vector finaldest;
.vector finalangle;
.float count;
.float lip;
.float state;
.vector pos1;
.vector pos2;
.float height;
.float waitmin;
.float waitmax;
.float distance;
.float volume;
void(vector ang) makevectors = #1;
void(entity e, vector o) setorigin = #2;
void(entity e, string m) setmodel = #3;
void(entity e, vector min, vector max) setsize = #4;
void() break = #6;
float() random = #7;
void(entity e, float chan, string samp, float vol, float atten) sound = #8;
vector(vector v) normalize = #9;
void(string e) error = #10;
void(string e) objerror = #11;
float(vector v) vlen = #12;
float(vector v) vectoyaw = #13;
entity() spawn = #14;
void(entity e) remove = #15;
void(vector v1, vector v2, float nomonsters, entity forent) traceline = #16;
entity() checkclient = #17;
entity(entity start, .string fld, string match) find = #18;
string(string s) precache_sound = #19;
string(string s) precache_model = #20;
void(entity client, string s) stuffcmd = #21;
entity(vector org, float rad) findradius = #22;
void(string s) bprint = #23;
void(entity client, string s) sprint = #24;
void(string s) dprint = #25;
string(float f) ftos = #26;
string(vector v) vtos = #27;
void() coredump = #28;
void() traceon = #29;
void() traceoff = #30;
void(entity e) eprint = #31;
float(float yaw, float dist) walkmove = #32;
float() droptofloor = #34;
void(float style, string value) lightstyle = #35;
float(float v) rint = #36;
float(float v) floor = #37;
float(float v) ceil = #38;
float(entity e) checkbottom = #40;
float(vector v) pointcontents = #41;
float(float f) fabs = #43;
vector(entity e, float speed) aim = #44;
float(string s) cvar = #45;
void(string s) localcmd = #46;
entity(entity e) nextent = #47;
void(vector o, vector d, float color, float count) particle = #48;
void() ChangeYaw = #49;
vector(vector v) vectoangles = #51;
void(float to, float f) WriteByte = #52;
void(float to, float f) WriteChar = #53;
void(float to, float f) WriteShort = #54;
void(float to, float f) WriteLong = #55;
void(float to, float f) WriteCoord = #56;
void(float to, float f) WriteAngle = #57;
void(float to, string s) WriteString = #58;
void(float to, entity s) WriteEntity = #59;
void(float step) movetogoal = #67;
string(string s) precache_file = #68;
void(entity e) makestatic = #69;
void(string s) changelevel = #70;
void(string var, string val) cvar_set = #72;
void(entity client, string s) centerprint = #73;
void(vector pos, string samp, float vol, float atten) ambientsound = #74;
string(string s) precache_model2 = #75;
string(string s) precache_sound2 = #76;
string(string s) precache_file2 = #77;
void(entity e) setspawnparms = #78;
void (vector tdest, float tspeed, void() func) SUB_CalcMove;
void (entity ent, vector tdest, float tspeed, void() func) SUB_CalcMoveEnt;
void (vector destangle, float tspeed, void() func) SUB_CalcAngleMove;
void () SUB_CalcMoveDone;
void () SUB_CalcAngleMoveDone;
void () SUB_Null;
void () SUB_UseTargets;
void () SUB_Remove;
void (entity targ, entity inflictor, entity attacker, float damage) T_Damage;
float (entity e, float healamount, float ignore) T_Heal;
float (entity targ, entity inflictor) CanDamage;
entity (entity bot) FindGoalMarker;
void () BecomeExplosion;
void () W_Attack;
void () ImpulseCommands;
vector plyr_angles;
vector plyr_velocity;
.entity veh_tail;
.entity veh_body;
.entity fwhl;
.entity rwhl;
.entity hl_l;
.entity hl_r;
.entity hl_m;
.entity gun;
.vector veh_dir;
.vector steer_angles;
.vector old_angles;
.vector old_velocity;
.vector back_vel;
.vector lastmove;
.float num_skins;
.vector body_roll;
.float body_lean;
.vector body_roll_vel;
.float use_surface_angle;
.float last_speed;
.float last_engine;
.float last_jump_z;
.float slide_ratio;
.float slide_donut_vel;
.vector roll_velocity;
.vector last_roll;
.float old_dir;
.float reversing;
.float reversekey;
.float accelerating;
.float zoomin;
.float zoomout;
.float reverse_release;
.float current_surface;
.float cam;
.float tracking_speed;
.float chasecam_zoom;
.float last_prevsurf;
.float prev_surfangle1;
.float prev_surfangle2;
.float prev_surfangle3;
.float prev_surfangle4;
.float prev_surfangle5;
.float last_jump_touch;
.vector last_velocity;
.entity chasecam;
.float last_flat_z;
.string is_racer;
.float car_index;
.vector fwhl_offset;
.vector rwhl_offset;
.float last_marker_num;
.entity last_marker;
.entity next_marker;
.float last_lap;
.float last_lap_time;
.float fastest_lap;
.float race_time;
.float racing_flags;
.float horn_time;
.float slide_time;
.float last_idle;
.float last_rev;
.float last_backrev;
.float last_slide;
.float last_steerchange;
.float last_engine1;
.float last_engine2;
.float last_engine_ratio;
.float last_engine_chan;
.float last_crash;
.float last_boost;
.float last_turnaround;
.float last_bot_marker;
.float last_comment;
.float last_land;
.float last_flags;
.float last_drift;
.float leave_ground_time;
.float ignition_time;
.float position;
.entity ahead;
.entity behind;
.float SNDLEN_ENGINE1;
.float SNDLEN_ENGINE2;
.string SAMP_ENGINE1;
.string SAMP_ENGINE2;
.entity mine_attached;
.entity death_thinker;
.float last_heading;
.float steering;
.float time_remaining;
.float last_time_remaining;
.float nailfire;
.float client_settings;
.float full_traction_time;
.float cult_cars;
.float bot_flags;
.float misc_flags;
.float basemodel;
.string nexttrack;
.string race_type;
.float start_challenge;
float challenge;
float QR_NOT_RACING = 1.000;
float QR_FINISHED_RACE = 2.000;
float QR_START_READY = 4.000;
float QR_RACING = 8.000;
float QR_HEADLIGHTS_ON = 16.000;
float QR_SOMEONE_FINISHED = 32.000;
float QR_NO_STARTFINISH = 64.000;
float QR_JUST_LANDED = 128.000;
float QR_OBSERVER = 256.000;
float QR_FULL_TRACTION = 512.000;
float QR_MINE_EXPLODED = 1024.000;
float QR_NO_SIDEWAYS_ROLL = 2048.000;
float QR_OUT_OF_TIME = 4096.000;
float QR_RESPAWN_FLAG = 8192.000;
float MISC_HORN_ON = 1.000;
float CS_CAM = 1.000;
float CS_CAR = 2.000;
float CS_WHEEL = 4.000;
float CS_ZOOM = 8.000;
float CS_TRACKING = 16.000;
float BF_STUCK = 1.000;
float BF_AVOID = 2.000;
float BF_STARTJUMP = 4.000;
float CAM_CHASECLOSE = 1.000;
float CAM_CHASEFAR = 2.000;
float CAM_INCAR = 3.000;
float CAM_TEST = 4.000;
float RT_TIME_TRIAL = 1.000;
float RT_BEAT_BOTS = 2.000;
float hold_flag;
entity starter;
entity positioner;
float all_fastest_lap;
float global_racing_flags;
float first_startfinish_flag;
float first_engine_start;
entity current_leader;
float race_start_time;
float race_finish_time;
float inter_race_time;
float allow_newplayer;
float init_done;
float SetInterRaceTime;
float num_markers;
float num_bots;
float lose_speed_on_slide;
float num_finished;
float racing_type;
float rally_type_index;
entity last_roo_spawn;
entity last_dude_spawn;
entity last_observer_cam;
entity first_observer_cam;
float cult_kills;
entity server_client;
float SVC_SETVIEWPORT = 5.000;
float SVC_SOUND = 6.000;
float SVC_SETVIEWANGLES = 10.000;
float VEH_WIDTH = 30.000;
float VEH_LENGTH = 30.000;
float VEH_HEIGHT = 34.000;
float TAIL_DIST = 60.000;
float SURFACE_ANGLE_WIDTH = 12.000;
float SURFACE_ANGLE_LENGTH = -19.000;
vector VEH_MIN = '-16.000 -16.000 -24.000';
vector VEH_MAX = '16.000 16.000 32.000';
float GUN_ZOFS = 6.000;
float STEERING_CENTERSPEED = 35.000;
float STEERING_TURNSPEED = 25.000;
vector VEH_WHEEL_MIN = '-4.000 -14.000 -14.000';
vector VEH_WHEEL_MAX = '4.000 14.000 14.000';
vector VEH_BODY_OFFSET = '0.000 0.000 -5.000';
vector VEH_WHEEL_OFFSET = '0.000 -4.000 -1.000';
float VEH_MAX_STEER = 30.000;
float VEH_ACCEL_SLOWDOWN = 0.100;
float REAR_TRACTION = 15.000;
float MAX_SPEED = 900.000;
float REVERSE_SPEED = 1200.000;
float MAX_SLIDING_ANGLE = 90.000;
float STEER_CORRECTION_RATIO = 0.400;
float SLIDING_LOSE_CONTROL_ANGLE = 25.000;
vector ROLL_PER_SECOND = '60.000 0.000 80.000';
float MAX_ANGLE_PER_SECOND = 5.000;
float dist_infront;
float SLIDING_SLOWDOWN = 0.900;
float ZOOM_SPEED = 60.000;
float DEFAULT_CHASECAM_ZOOM = 30.000;
float NUM_CARS = 5.000;
float NUM_DUKES = 20.000;
float DEFAULT_TRACKING_SPEED = 10.000;
float TIMETRIAL_STARTTIME = 25.000;
float OUT_OF_TIME_SLOWDOWN = 300.000;
float SNDLEN_IDLE = 0.700;
float SNDLEN_REV = 0.900;
float SNDLEN_HIGHREV = 3.000;
float SNDLEN_SLIDE = 0.300;
float SNDLEN_IGNITION = 1.200;
float SNDLEN_CRASH = 0.500;
float SNDLEN_HORN = 0.400;
float SNDLEN_BOOST = 1.000;
float SNDLEN_TURNAROUND = 2.000;
float SNDLEN_LAND = 1.000;
float SNDLEN_DRIFT = 1.500;
float SURF_UNKNOWN = 0.000;
float SURF_MUD = 1.000;
float SURF_ASPHALT = 2.000;
float SURF_GRASS = 3.000;
float STEER_CENTER = 0.000;
float STEER_LEFT = 1.000;
float STEER_RIGHT = 2.000;
float FRAGS_PER_LAP = 5.000;
float FRAGS_FASTEST_LAP = 5.000;
// rally_centre
// function begins at statement 1, parm_start=817
// OP_STATE	817	816	0
// OP_DONE	0	0	0
void () rally_centre = [0.000, rally_centre]
{
};

// rally_right10
// function begins at statement 3, parm_start=819
// OP_STATE	819	818	0
// OP_DONE	0	0	0
void () rally_right10 = [1.000, rally_right10]
{
};

// rally_right20
// function begins at statement 5, parm_start=821
// OP_STATE	821	820	0
// OP_DONE	0	0	0
void () rally_right20 = [2.000, rally_right20]
{
};

// rally_right30
// function begins at statement 7, parm_start=823
// OP_STATE	823	822	0
// OP_DONE	0	0	0
void () rally_right30 = [3.000, rally_right30]
{
};

// rally_left10
// function begins at statement 9, parm_start=825
// OP_STATE	825	824	0
// OP_DONE	0	0	0
void () rally_left10 = [4.000, rally_left10]
{
};

// rally_left20
// function begins at statement 11, parm_start=827
// OP_STATE	827	826	0
// OP_DONE	0	0	0
void () rally_left20 = [5.000, rally_left20]
{
};

// rally_left30
// function begins at statement 13, parm_start=829
// OP_STATE	829	828	0
// OP_DONE	0	0	0
void () rally_left30 = [6.000, rally_left30]
{
};

// steer_centre
// function begins at statement 15, parm_start=831
// OP_STATE	831	830	0
// OP_ADDRESS	28	156	832
// OP_STOREP_F	827	832	0
// OP_DONE	0	0	0
void () steer_centre = [11.000, steer_centre]
{
    self.weaponframe = 5.000;
};

// steer_right10
// function begins at statement 19, parm_start=834
// OP_STATE	834	833	0
// OP_ADDRESS	28	156	835
// OP_STOREP_F	829	835	0
// OP_DONE	0	0	0
void () steer_right10 = [12.000, steer_right10]
{
    self.weaponframe = 6.000;
};

// steer_right20
// function begins at statement 23, parm_start=837
// OP_STATE	837	836	0
// OP_ADDRESS	28	156	838
// OP_STOREP_F	839	838	0
// OP_DONE	0	0	0
void () steer_right20 = [13.000, steer_right20]
{
    self.weaponframe = 7.000;
};

// steer_right30
// function begins at statement 27, parm_start=841
// OP_STATE	841	840	0
// OP_ADDRESS	28	156	842
// OP_STOREP_F	843	842	0
// OP_DONE	0	0	0
void () steer_right30 = [14.000, steer_right30]
{
    self.weaponframe = 8.000;
};

// steer_right40
// function begins at statement 31, parm_start=845
// OP_STATE	845	844	0
// OP_ADDRESS	28	156	846
// OP_STOREP_F	847	846	0
// OP_DONE	0	0	0
void () steer_right40 = [15.000, steer_right40]
{
    self.weaponframe = 9.000;
};

// steer_left10
// function begins at statement 35, parm_start=849
// OP_STATE	839	848	0
// OP_ADDRESS	28	156	849
// OP_STOREP_F	819	849	0
// OP_DONE	0	0	0
void () steer_left10 = [7.000, steer_left10]
{
    self.weaponframe = 1.000;
};

// steer_left20
// function begins at statement 39, parm_start=851
// OP_STATE	843	850	0
// OP_ADDRESS	28	156	851
// OP_STOREP_F	821	851	0
// OP_DONE	0	0	0
void () steer_left20 = [8.000, steer_left20]
{
    self.weaponframe = 2.000;
};

// steer_left30
// function begins at statement 43, parm_start=853
// OP_STATE	847	852	0
// OP_ADDRESS	28	156	853
// OP_STOREP_F	823	853	0
// OP_DONE	0	0	0
void () steer_left30 = [9.000, steer_left30]
{
    self.weaponframe = 3.000;
};

// steer_left40
// function begins at statement 47, parm_start=855
// OP_STATE	855	854	0
// OP_ADDRESS	28	156	856
// OP_STOREP_F	825	856	0
// OP_DONE	0	0	0
void () steer_left40 = [10.000, steer_left40]
{
    self.weaponframe = 4.000;
};

void () StartDemoCredits;
void (vector org) spawn_tfog;
float (float v) anglemod;
// angle_diff
// function begins at statement 51, parm_start=861
// OP_GT	862	861	863
// OP_IFNOT	863	11	0
// OP_SUB_F	862	861	864
// OP_GT	864	865	866
// OP_IFNOT	866	5	0
// OP_SUB_F	862	867	868
// OP_SUB_F	861	868	869
// OP_RETURN	869	0	0
// OP_GOTO	3	0	0
// OP_SUB_F	861	862	870
// OP_RETURN	870	0	0
// OP_GOTO	10	0	0
// OP_SUB_F	861	862	871
// OP_GT	871	865	872
// OP_IFNOT	872	5	0
// OP_ADD_F	862	867	873
// OP_SUB_F	861	873	874
// OP_RETURN	874	0	0
// OP_GOTO	3	0	0
// OP_SUB_F	861	862	875
// OP_RETURN	875	0	0
// OP_DONE	0	0	0
float (float a1, float a2) angle_diff = 
{
    if(a2 > a1)
    {
        if((a2 - a1) > 180.000)
        {
            return a1 - (a2 - 360.000);
        }
        else
        {
            return a1 - a2;
        }
        
    }
    else
    {
        if((a1 - a2) > 180.000)
        {
            return a1 - (a2 + 360.000);
        }
        else
        {
            return a1 - a2;
        }
        
    }
    
};

// commentary
// function begins at statement 73, parm_start=877
// OP_LOAD_S	877	129	879
// OP_EQ_S	879	880	881
// OP_LOAD_F	28	660	882
// OP_SUB_F	31	883	884
// OP_LT	882	884	885
// OP_AND	881	885	886
// OP_IFNOT	886	12	0
// OP_STORE_V	877	4	0
// OP_STORE_V	887	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	877	4	0
// OP_STORE_V	878	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	877	4	0
// OP_STORE_V	888	7	0
// OP_CALL2	480	0	0
// OP_ADDRESS	28	660	889
// OP_STOREP_F	31	889	0
// OP_DONE	0	0	0
void (entity player, string sample) commentary = 
{
    
    if((player.classname == "player") && (self.last_comment < (time - 1.500)))
    {
        stuffcmd(player, "play rally/");
        stuffcmd(player, sample);
        stuffcmd(player, "\n");
        self.last_comment = time;
    }
    
};

// SpawnPart
// function begins at statement 92, parm_start=891
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	897	0
// OP_ADDRESS	897	117	905
// OP_LOAD_V	28	117	908
// OP_STOREP_V	908	905	0
// OP_ADDRESS	897	104	911
// OP_STOREP_F	243	911	0
// OP_ADDRESS	897	103	912
// OP_STOREP_F	239	912	0
// OP_STORE_V	897	4	0
// OP_STORE_V	891	7	0
// OP_STORE_V	894	10	0
// OP_CALL3	464	0	0
// OP_STORE_V	897	4	0
// OP_LOAD_V	28	105	913
// OP_ADD_V	913	916	919
// OP_STORE_V	919	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	897	201	922
// OP_STOREP_ENT	28	922	0
// OP_ADDRESS	897	113	923
// OP_STOREP_V	926	923	0
// OP_STORE_ENT	28	904	0
// OP_STORE_ENT	897	28	0
// OP_ADDRESS	897	182	929
// OP_STOREP_F	228	929	0
// OP_STORE_ENT	904	28	0
// OP_RETURN	897	0	0
// OP_DONE	0	0	0
entity (vector vec_min, vector vec_max) SpawnPart = 
{
    local entity w;
    local vector vect_offset_fwd;
    local vector vect_offset_side;
    local entity temp_e;
    w = spawn();
    w.angles = self.angles;
    w.solid = SOLID_NOT;
    w.movetype = MOVETYPE_NOCLIP;
    setsize(w, vec_min, vec_max);
    setorigin(w, self.origin + '0.000 0.000 4.000');
    w.owner = self;
    w.velocity = '0.000 0.000 0.000';
    temp_e = self;
    self = w;
    w.flags = FL_ONGROUND;
    self = temp_e;
    return w;
};

void (entity plyr) CallClientPrefs;
void () W_SetCurrentAmmo;
// SetCarDetails
// function begins at statement 121, parm_start=933
// OP_LOAD_ENT	28	550	933
// OP_NE_E	933	30	934
// OP_IFNOT	934	4	0
// OP_LOAD_ENT	28	550	935
// OP_ADDRESS	935	131	936
// OP_STOREP_F	817	936	0
// OP_LOAD_F	28	628	937
// OP_LE	937	821	938
// OP_IFNOT	938	52	0
// OP_ADDRESS	28	579	939
// OP_STOREP_F	821	939	0
// OP_LOAD_ENT	28	548	940
// OP_ADDRESS	940	132	941
// OP_LOAD_F	28	132	942
// OP_STOREP_F	942	941	0
// OP_ADDRESS	28	631	943
// OP_STOREP_F	829	943	0
// OP_ADDRESS	28	635	944
// OP_STOREP_F	945	944	0
// OP_ADDRESS	28	632	946
// OP_STOREP_F	947	946	0
// OP_ADDRESS	28	636	948
// OP_STOREP_F	947	948	0
// OP_STORE_V	949	4	0
// OP_CALL1	501	0	0
// OP_NOT_F	1	0	950
// OP_EQ_F	738	819	951
// OP_AND	950	951	952
// OP_IFNOT	952	6	0
// OP_LOAD_ENT	28	548	953
// OP_STORE_V	953	4	0
// OP_STORE_V	954	7	0
// OP_CALL2	463	0	0
// OP_GOTO	9	0	0
// OP_LOAD_ENT	28	548	955
// OP_STORE_V	955	4	0
// OP_STORE_V	956	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	685	957
// OP_LOAD_ENT	28	548	958
// OP_LOAD_F	958	93	959
// OP_STOREP_F	959	957	0
// OP_LOAD_ENT	28	548	960
// OP_LOAD_V	960	105	961
// OP_STORE_V	961	4	0
// OP_CALL1	858	0	0
// OP_LOAD_S	28	129	964
// OP_EQ_S	964	880	965
// OP_IFNOT	965	11	0
// OP_LOAD_F	28	132	966
// OP_EQ_F	966	817	967
// OP_IFNOT	967	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	968	7	0
// OP_CALL2	520	0	0
// OP_GOTO	4	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	969	7	0
// OP_CALL2	520	0	0
// OP_GOTO	161	0	0
// OP_LOAD_F	28	628	970
// OP_EQ_F	970	823	971
// OP_IFNOT	971	45	0
// OP_ADDRESS	28	579	972
// OP_STOREP_F	819	972	0
// OP_LOAD_ENT	28	548	973
// OP_ADDRESS	973	132	974
// OP_LOAD_F	28	132	975
// OP_STOREP_F	975	974	0
// OP_ADDRESS	28	631	976
// OP_STOREP_F	829	976	0
// OP_ADDRESS	28	635	977
// OP_STOREP_F	945	977	0
// OP_ADDRESS	28	632	978
// OP_STOREP_F	947	978	0
// OP_ADDRESS	28	636	979
// OP_STOREP_F	947	979	0
// OP_LOAD_S	28	129	980
// OP_EQ_S	980	880	981
// OP_IFNOT	981	4	0
// OP_STORE_V	28	4	0
// OP_STORE_V	982	7	0
// OP_CALL2	520	0	0
// OP_STORE_V	949	4	0
// OP_CALL1	501	0	0
// OP_NOT_F	1	0	983
// OP_EQ_F	738	819	984
// OP_AND	983	984	985
// OP_IFNOT	985	6	0
// OP_LOAD_ENT	28	548	986
// OP_STORE_V	986	4	0
// OP_STORE_V	987	7	0
// OP_CALL2	463	0	0
// OP_GOTO	9	0	0
// OP_LOAD_ENT	28	548	988
// OP_STORE_V	988	4	0
// OP_STORE_V	989	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	685	990
// OP_LOAD_ENT	28	548	991
// OP_LOAD_F	991	93	992
// OP_STOREP_F	992	990	0
// OP_LOAD_ENT	28	548	993
// OP_LOAD_V	993	105	994
// OP_STORE_V	994	4	0
// OP_CALL1	858	0	0
// OP_GOTO	114	0	0
// OP_LOAD_F	28	628	997
// OP_EQ_F	997	825	998
// OP_IFNOT	998	58	0
// OP_ADDRESS	28	579	999
// OP_STOREP_F	821	999	0
// OP_LOAD_ENT	28	548	1000
// OP_ADDRESS	1000	132	1001
// OP_LOAD_F	28	132	1002
// OP_STOREP_F	1002	1001	0
// OP_ADDRESS	28	631	1003
// OP_STOREP_F	829	1003	0
// OP_ADDRESS	28	635	1004
// OP_STOREP_F	1005	1004	0
// OP_ADDRESS	28	632	1006
// OP_STOREP_F	947	1006	0
// OP_ADDRESS	28	636	1007
// OP_STOREP_F	947	1007	0
// OP_STORE_V	949	4	0
// OP_CALL1	501	0	0
// OP_NOT_F	1	0	1008
// OP_EQ_F	738	819	1009
// OP_AND	1008	1009	1010
// OP_IFNOT	1010	6	0
// OP_LOAD_ENT	28	548	1011
// OP_STORE_V	1011	4	0
// OP_STORE_V	1012	7	0
// OP_CALL2	463	0	0
// OP_GOTO	9	0	0
// OP_LOAD_ENT	28	548	1013
// OP_STORE_V	1013	4	0
// OP_STORE_V	1014	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	685	1015
// OP_LOAD_ENT	28	548	1016
// OP_LOAD_F	1016	93	1017
// OP_STOREP_F	1017	1015	0
// OP_LOAD_ENT	28	550	1018
// OP_NE_E	1018	30	1019
// OP_IFNOT	1019	4	0
// OP_LOAD_ENT	28	550	1020
// OP_ADDRESS	1020	131	1021
// OP_STOREP_F	839	1021	0
// OP_LOAD_ENT	28	548	1022
// OP_LOAD_V	1022	105	1023
// OP_STORE_V	1023	4	0
// OP_CALL1	858	0	0
// OP_LOAD_S	28	129	1026
// OP_EQ_S	1026	880	1027
// OP_IFNOT	1027	11	0
// OP_LOAD_F	28	132	1028
// OP_EQ_F	1028	817	1029
// OP_IFNOT	1029	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	1030	7	0
// OP_CALL2	520	0	0
// OP_GOTO	4	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	1031	7	0
// OP_CALL2	520	0	0
// OP_GOTO	54	0	0
// OP_LOAD_F	28	628	1032
// OP_EQ_F	1032	827	1033
// OP_IFNOT	1033	51	0
// OP_ADDRESS	28	579	1034
// OP_STOREP_F	821	1034	0
// OP_LOAD_ENT	28	548	1035
// OP_ADDRESS	1035	132	1036
// OP_LOAD_F	28	132	1037
// OP_STOREP_F	1037	1036	0
// OP_ADDRESS	28	631	1038
// OP_STOREP_F	829	1038	0
// OP_ADDRESS	28	635	1039
// OP_STOREP_F	945	1039	0
// OP_ADDRESS	28	632	1040
// OP_STOREP_F	947	1040	0
// OP_ADDRESS	28	636	1041
// OP_STOREP_F	947	1041	0
// OP_STORE_V	949	4	0
// OP_CALL1	501	0	0
// OP_NOT_F	1	0	1042
// OP_EQ_F	738	819	1043
// OP_AND	1042	1043	1044
// OP_IFNOT	1044	6	0
// OP_LOAD_ENT	28	548	1045
// OP_STORE_V	1045	4	0
// OP_STORE_V	1046	7	0
// OP_CALL2	463	0	0
// OP_GOTO	9	0	0
// OP_LOAD_ENT	28	548	1047
// OP_STORE_V	1047	4	0
// OP_STORE_V	1048	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	685	1049
// OP_LOAD_ENT	28	548	1050
// OP_LOAD_F	1050	93	1051
// OP_STOREP_F	1051	1049	0
// OP_LOAD_ENT	28	548	1052
// OP_LOAD_V	1052	105	1053
// OP_STORE_V	1053	4	0
// OP_CALL1	858	0	0
// OP_LOAD_S	28	129	1056
// OP_EQ_S	1056	880	1057
// OP_IFNOT	1057	11	0
// OP_LOAD_F	28	132	1058
// OP_EQ_F	1058	817	1059
// OP_IFNOT	1059	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	1060	7	0
// OP_CALL2	520	0	0
// OP_GOTO	4	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	1061	7	0
// OP_CALL2	520	0	0
// OP_GT	738	819	1062
// OP_IFNOT	1062	2	0
// OP_CALL0	931	0	0
// OP_DONE	0	0	0
void () SetCarDetails = 
{
    
    if(self.rwhl != world)
    {
        self.rwhl.frame = 0.000;
    }
    
    if(self.car_index <= 2.000)
    {
        self.num_skins = 2.000;
        self.veh_body.skin = self.skin;
        self.fwhl_offset_y = 6.000;
        self.rwhl_offset_y = -26.500;
        self.fwhl_offset_z = -2.000;
        self.rwhl_offset_z = -2.000;
        if(!cvar("deathmatch") && (rally_type_index == 1.000))
        {
            setmodel(self.veh_body, "models/sumacar.mdl");
        }
        else
        {
            setmodel(self.veh_body, "models/sumabase.mdl");
            self.basemodel = self.veh_body.modelindex;
        }
        
        spawn_tfog(self.veh_body.origin);
        
        if(self.classname == "player")
        {
            if(self.skin == 0.000)
            {
                centerprint(self, "Stock Car selected");
            }
            else
            {
                centerprint(self, "Commodore selected");
            }
            
        }
        
    }
    else
    {
        if(self.car_index == 3.000)
        {
            self.num_skins = 1.000;
            self.veh_body.skin = self.skin;
            self.fwhl_offset_y = 6.000;
            self.rwhl_offset_y = -26.500;
            self.fwhl_offset_z = -2.000;
            self.rwhl_offset_z = -2.000;
            
            if(self.classname == "player")
            {
                centerprint(self, "4WD Hatchback selected");
            }
            
            if(!cvar("deathmatch") && (rally_type_index == 1.000))
            {
                setmodel(self.veh_body, "models/zumacar.mdl");
            }
            else
            {
                setmodel(self.veh_body, "models/zumabase.mdl");
                self.basemodel = self.veh_body.modelindex;
            }
            
            spawn_tfog(self.veh_body.origin);
        }
        else
        {
            if(self.car_index == 4.000)
            {
                self.num_skins = 2.000;
                self.veh_body.skin = self.skin;
                self.fwhl_offset_y = 6.000;
                self.rwhl_offset_y = -22.000;
                self.fwhl_offset_z = -2.000;
                self.rwhl_offset_z = -2.000;
                if(!cvar("deathmatch") && (rally_type_index == 1.000))
                {
                    setmodel(self.veh_body, "models/mycar.mdl");
                }
                else
                {
                    setmodel(self.veh_body, "models/mgnabase.mdl");
                    self.basemodel = self.veh_body.modelindex;
                }
                
                
                if(self.rwhl != world)
                {
                    self.rwhl.frame = 7.000;
                }
                
                spawn_tfog(self.veh_body.origin);
                
                if(self.classname == "player")
                {
                    if(self.skin == 0.000)
                    {
                        centerprint(self, "Magna selected");
                    }
                    else
                    {
                        centerprint(self, "BMW Z3 selected");
                    }
                    
                }
                
            }
            else
            {
                
                if(self.car_index == 5.000)
                {
                    self.num_skins = 2.000;
                    self.veh_body.skin = self.skin;
                    self.fwhl_offset_y = 6.000;
                    self.rwhl_offset_y = -26.500;
                    self.fwhl_offset_z = -2.000;
                    self.rwhl_offset_z = -2.000;
                    if(!cvar("deathmatch") && (rally_type_index == 1.000))
                    {
                        setmodel(self.veh_body, "models/triton.mdl");
                    }
                    else
                    {
                        setmodel(self.veh_body, "models/tritbase.mdl");
                        self.basemodel = self.veh_body.modelindex;
                    }
                    
                    spawn_tfog(self.veh_body.origin);
                    
                    if(self.classname == "player")
                    {
                        if(self.skin == 0.000)
                        {
                            centerprint(self, "Triton selected");
                        }
                        else
                        {
                            centerprint(self, "Hilux selected");
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
    }
    
    
    if(rally_type_index > 1.000)
    {
        W_SetCurrentAmmo();
    }
    
};

// CallClientPrefs
// function begins at statement 345, parm_start=1063
// OP_LOAD_S	1063	129	1065
// OP_NE_S	1065	880	1066
// OP_IFNOT	1066	2	0
// OP_RETURN	0	0	0
// OP_STORE_ENT	28	1064	0
// OP_STORE_ENT	1063	28	0
// OP_LOAD_F	28	680	1067
// OP_BITAND	1067	705	1068
// OP_NOT_F	1068	0	1069
// OP_IFNOT	1069	9	0
// OP_STORE_V	1063	4	0
// OP_STORE_V	1070	7	0
// OP_CALL2	480	0	0
// OP_ADDRESS	28	680	1071
// OP_LOAD_F	28	680	1072
// OP_BITOR	1072	705	1073
// OP_STOREP_F	1073	1071	0
// OP_GOTO	48	0	0
// OP_LOAD_F	28	680	1074
// OP_BITAND	1074	707	1075
// OP_NOT_F	1075	0	1076
// OP_IFNOT	1076	9	0
// OP_STORE_V	1063	4	0
// OP_STORE_V	1077	7	0
// OP_CALL2	480	0	0
// OP_ADDRESS	28	680	1078
// OP_LOAD_F	28	680	1079
// OP_BITOR	1079	707	1080
// OP_STOREP_F	1080	1078	0
// OP_GOTO	36	0	0
// OP_LOAD_F	28	680	1081
// OP_BITAND	1081	706	1082
// OP_NOT_F	1082	0	1083
// OP_IFNOT	1083	9	0
// OP_STORE_V	1063	4	0
// OP_STORE_V	1084	7	0
// OP_CALL2	480	0	0
// OP_ADDRESS	28	680	1085
// OP_LOAD_F	28	680	1086
// OP_BITOR	1086	706	1087
// OP_STOREP_F	1087	1085	0
// OP_GOTO	24	0	0
// OP_LOAD_F	28	680	1088
// OP_BITAND	1088	708	1089
// OP_NOT_F	1089	0	1090
// OP_IFNOT	1090	9	0
// OP_STORE_V	1063	4	0
// OP_STORE_V	1091	7	0
// OP_CALL2	480	0	0
// OP_ADDRESS	28	680	1092
// OP_LOAD_F	28	680	1093
// OP_BITOR	1093	708	1094
// OP_STOREP_F	1094	1092	0
// OP_GOTO	12	0	0
// OP_LOAD_F	28	680	1095
// OP_BITAND	1095	709	1096
// OP_NOT_F	1096	0	1097
// OP_IFNOT	1097	8	0
// OP_STORE_V	1063	4	0
// OP_STORE_V	1098	7	0
// OP_CALL2	480	0	0
// OP_ADDRESS	28	680	1099
// OP_LOAD_F	28	680	1100
// OP_BITOR	1100	709	1101
// OP_STOREP_F	1101	1099	0
// OP_STORE_ENT	1064	28	0
// OP_DONE	0	0	0
void (entity plyr) CallClientPrefs = 
{
    local entity oself;
    
    if(plyr.classname != "player")
    {
        return;
    }
    
    oself = self;
    self = plyr;
    if(!(self.client_settings & CS_CAM))
    {
        stuffcmd(plyr, "setcam\n");
        self.client_settings = self.client_settings | CS_CAM;
    }
    else
    {
        if(!(self.client_settings & CS_WHEEL))
        {
            stuffcmd(plyr, "setwheel\n");
            self.client_settings = self.client_settings | CS_WHEEL;
        }
        else
        {
            if(!(self.client_settings & CS_CAR))
            {
                stuffcmd(plyr, "setcar\n");
                self.client_settings = self.client_settings | CS_CAR;
            }
            else
            {
                if(!(self.client_settings & CS_ZOOM))
                {
                    stuffcmd(plyr, "setzoom\n");
                    self.client_settings = self.client_settings | CS_ZOOM;
                }
                else
                {
                    
                    if(!(self.client_settings & CS_TRACKING))
                    {
                        stuffcmd(plyr, "settracking\n");
                        self.client_settings = self.client_settings | CS_TRACKING;
                    }
                    
                }
                
            }
            
        }
        
    }
    
    self = oself;
};

// FindFirstMarker
// function begins at statement 412, parm_start=1103
// OP_STORE_ENT	30	1103	0
// OP_STORE_V	1103	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	1104	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	1103	0
// OP_NE_E	1	30	1105
// OP_IFNOT	1105	6	0
// OP_LOAD_F	1103	158	1106
// OP_EQ_F	1106	819	1107
// OP_IFNOT	1107	2	0
// OP_RETURN	1103	0	0
// OP_GOTO	-11	0	0
// OP_RETURN	30	0	0
// OP_DONE	0	0	0
entity () FindFirstMarker = 
{
    local entity trav;
    trav = world;
    trav = find(trav, classname, "rally_marker");
    
    while(find(trav, classname, "rally_marker") != world)
    {
        
        if(trav.ammo_shells == 1.000)
        {
            return trav;
        }
        
    }
    
    return world;
};

// angle_think
// function begins at statement 427, parm_start=1109
// OP_LOAD_ENT	28	201	1109
// OP_STORE_ENT	1109	81	0
// OP_STORE_V	352	4	0
// OP_STORE_V	745	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	352	4	0
// OP_LOAD_ENT	28	201	1110
// OP_LOAD_ENT	1110	625	1111
// OP_STORE_V	1111	7	0
// OP_CALL2	514	0	0
// OP_STORE_V	352	4	0
// OP_STORE_V	747	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	352	4	0
// OP_STORE_V	1112	7	0
// OP_CALL2	512	0	0
// OP_STORE_V	352	4	0
// OP_LOAD_F	81	119	1113
// OP_STORE_V	1113	7	0
// OP_CALL2	512	0	0
// OP_STORE_V	352	4	0
// OP_LOAD_F	81	120	1114
// OP_STORE_V	1114	7	0
// OP_CALL2	512	0	0
// OP_STORE_V	81	4	0
// OP_STORE_V	1115	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	81	4	0
// OP_STORE_V	1116	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	81	4	0
// OP_STORE_V	1117	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	81	4	0
// OP_STORE_V	1118	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	81	4	0
// OP_STORE_V	1119	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	81	4	0
// OP_STORE_V	1120	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	81	4	0
// OP_STORE_V	1121	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	81	4	0
// OP_STORE_V	1122	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	81	4	0
// OP_STORE_V	1123	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	81	4	0
// OP_STORE_V	1124	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	81	4	0
// OP_STORE_V	1125	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	81	4	0
// OP_STORE_V	1126	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	81	4	0
// OP_STORE_V	1123	7	0
// OP_CALL2	483	0	0
// OP_LOAD_ENT	28	201	1127
// OP_STORE_V	1127	4	0
// OP_CALL1	930	0	0
// OP_LT	738	823	1128
// OP_IFNOT	1128	5	0
// OP_LOAD_ENT	28	201	1129
// OP_ADDRESS	1129	639	1130
// OP_CALL0	1102	0	0
// OP_STOREP_ENT	1	1130	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_DONE	0	0	0
void () angle_think = 
{
    msg_entity = self.owner;
    WriteByte(MSG_ONE, SVC_SETVIEWPORT);
    WriteEntity(MSG_ONE, self.owner.chasecam);
    WriteByte(MSG_ONE, SVC_SETVIEWANGLES);
    WriteAngle(MSG_ONE, 20.000);
    WriteAngle(MSG_ONE, msg_entity.angles_y);
    WriteAngle(MSG_ONE, msg_entity.angles_z);
    stuffcmd(msg_entity, "+mlook\n");
    stuffcmd(msg_entity, "cl_movespeedkey 1\n");
    stuffcmd(msg_entity, "cl_anglespeedkey 1.5\n");
    stuffcmd(msg_entity, "cl_forwardspeed 2300\n");
    stuffcmd(msg_entity, "cl_rollangle 0\n");
    stuffcmd(msg_entity, "cl_sidespeed 0\n");
    stuffcmd(msg_entity, "cl_backspeed 0\n");
    stuffcmd(msg_entity, "cl_bob 0\n");
    sprint(msg_entity, "-----------------------------------\n");
    sprint(msg_entity, " Welcome to QuakeRally!       v1.2 \n");
    sprint(msg_entity, " Brought to you by the IMPACT TEAM \n");
    sprint(msg_entity, "  ->  http://impact.frag.com  <-   \n");
    sprint(msg_entity, "-----------------------------------\n");
    CallClientPrefs(self.owner);
    
    if(rally_type_index < 3.000)
    {
        self.owner.next_marker = FindFirstMarker();
    }
    
    remove(self);
};

// fade_to_normal
// function begins at statement 502, parm_start=1132
// OP_ADDRESS	28	378	1133
// OP_LOAD_F	28	378	1134
// OP_LOAD_F	28	647	1136
// OP_SUB_F	31	1136	1137
// OP_MUL_F	1135	1137	1138
// OP_SUB_F	1134	1138	1139
// OP_STOREP_F	1139	1133	0
// OP_LOAD_F	28	378	1140
// OP_LT	1140	817	1141
// OP_IFNOT	1141	3	0
// OP_ADDRESS	28	378	1142
// OP_STOREP_F	817	1142	0
// OP_LOAD_F	28	378	1143
// OP_STORE_V	1143	4	0
// OP_CALL1	485	0	0
// OP_STORE_S	1	1132	0
// OP_LOAD_ENT	28	201	1144
// OP_STORE_V	1144	4	0
// OP_STORE_V	1145	7	0
// OP_CALL2	480	0	0
// OP_LOAD_ENT	28	201	1146
// OP_STORE_V	1146	4	0
// OP_STORE_V	1132	7	0
// OP_CALL2	480	0	0
// OP_LOAD_ENT	28	201	1147
// OP_STORE_V	1147	4	0
// OP_STORE_V	888	7	0
// OP_CALL2	480	0	0
// OP_LOAD_F	28	378	1148
// OP_EQ_F	1148	817	1149
// OP_IFNOT	1149	4	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	647	1150
// OP_STOREP_F	31	1150	0
// OP_ADDRESS	28	150	1151
// OP_ADD_F	31	1152	1153
// OP_STOREP_F	1153	1151	0
// OP_DONE	0	0	0
void () fade_to_normal = 
{
    local string intensity;
    self.speed = self.speed - (250.000 * (time - self.last_idle));
    
    if(self.speed < 0.000)
    {
        self.speed = 0.000;
    }
    
    intensity = ftos(self.speed);
    stuffcmd(self.owner, "v_cshift 0 0 0 ");
    stuffcmd(self.owner, intensity);
    stuffcmd(self.owner, "\n");
    
    if(self.speed == 0.000)
    {
        remove(self);
        return;
    }
    
    self.last_idle = time;
    self.nextthink = time + 0.200;
};

void () MoveVehicle;
void (entity targ_owner) LaserTargeterToggle;
// CreateVehicleEntities
// function begins at statement 542, parm_start=1157
// OP_STORE_V	1171	4	0
// OP_STORE_V	1172	7	0
// OP_CALL2	519	0	0
// OP_STORE_V	1173	4	0
// OP_STORE_V	1172	7	0
// OP_CALL2	519	0	0
// OP_LOAD_S	28	129	1174
// OP_EQ_S	1174	880	1175
// OP_IFNOT	1175	14	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	1160	0
// OP_ADDRESS	1160	378	1176
// OP_STOREP_F	1177	1176	0
// OP_ADDRESS	1160	201	1178
// OP_STOREP_ENT	28	1178	0
// OP_ADDRESS	1160	647	1179
// OP_STOREP_F	31	1179	0
// OP_ADDRESS	1160	148	1180
// OP_STOREP_FNC	1131	1180	0
// OP_ADDRESS	1160	150	1181
// OP_ADD_F	31	1182	1183
// OP_STOREP_F	1183	1181	0
// OP_STORE_F	817	735	0
// OP_ADDRESS	28	627	1184
// OP_STOREP_S	1185	1184	0
// OP_LOAD_S	28	129	1186
// OP_EQ_S	1186	1187	1188
// OP_IFNOT	1188	8	0
// OP_ADDRESS	28	628	1189
// OP_CALL0	466	0	0
// OP_MUL_F	1	1190	1191
// OP_STORE_V	1191	4	0
// OP_CALL1	495	0	0
// OP_ADD_F	1	821	1192
// OP_STOREP_F	1192	1189	0
// OP_MUL_VF	303	1182	1193
// OP_STORE_V	1193	4	0
// OP_MUL_VF	306	1182	1196
// OP_STORE_V	1196	7	0
// OP_CALL2	890	0	0
// OP_STORE_ENT	1	1157	0
// OP_NE_E	1	30	1199
// OP_IFNOT	1199	33	0
// OP_ADDRESS	1157	129	1200
// OP_STOREP_S	1201	1200	0
// OP_ADDRESS	1157	103	1202
// OP_STOREP_F	236	1202	0
// OP_LOAD_V	28	117	1203
// OP_STORE_V	1203	4	0
// OP_CALL1	461	0	0
// OP_STORE_V	1157	4	0
// OP_LOAD_V	28	105	1206
// OP_MUL_VF	59	751	1209
// OP_SUB_V	1206	1209	1212
// OP_ADD_V	1212	1215	1218
// OP_STORE_V	1218	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	1157	555	1221
// OP_STOREP_V	1224	1221	0
// OP_ADDRESS	1157	192	1227
// OP_STOREP_F	777	1227	0
// OP_STORE_F	1228	1162	0
// OP_STORE_F	1228	1163	0
// OP_STORE_F	756	1164	0
// OP_STORE_F	819	1165	0
// OP_STORE_F	819	1166	0
// OP_STORE_F	759	1167	0
// OP_STORE_V	1157	4	0
// OP_STORE_V	1162	7	0
// OP_STORE_V	1165	10	0
// OP_CALL3	464	0	0
// OP_ADDRESS	1157	593	1229
// OP_STOREP_F	817	1229	0
// OP_ADDRESS	28	547	1230
// OP_STOREP_ENT	1157	1230	0
// OP_STORE_V	754	4	0
// OP_STORE_V	757	7	0
// OP_CALL2	890	0	0
// OP_STORE_ENT	1	1158	0
// OP_NE_E	1	30	1231
// OP_IFNOT	1231	31	0
// OP_ADDRESS	1158	129	1232
// OP_STOREP_S	1233	1232	0
// OP_ADDRESS	28	548	1234
// OP_STOREP_ENT	1158	1234	0
// OP_LOAD_S	28	129	1235
// OP_EQ_S	1235	1187	1236
// OP_IFNOT	1236	3	0
// OP_CALL0	932	0	0
// OP_GOTO	4	0	0
// OP_ADDRESS	28	628	1237
// OP_STOREP_F	823	1237	0
// OP_CALL0	932	0	0
// OP_STORE_V	1158	4	0
// OP_LOAD_V	1158	105	1238
// OP_ADD_V	1238	769	1241
// OP_STORE_V	1241	7	0
// OP_CALL2	462	0	0
// OP_LOAD_ENT	28	548	1244
// OP_ADDRESS	1244	117	1245
// OP_STOREP_V	926	1245	0
// OP_LOAD_ENT	28	548	1248
// OP_ADDRESS	1248	121	1249
// OP_STOREP_V	926	1249	0
// OP_LOAD_ENT	28	548	1252
// OP_ADDRESS	1252	595	1253
// OP_STOREP_V	926	1253	0
// OP_LOAD_ENT	28	548	1256
// OP_ADDRESS	1256	555	1257
// OP_STOREP_V	926	1257	0
// OP_GOTO	3	0	0
// OP_STORE_V	1260	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	949	4	0
// OP_CALL1	501	0	0
// OP_NOT_F	1	0	1261
// OP_IFNOT	1261	32	0
// OP_STORE_V	763	4	0
// OP_STORE_V	766	7	0
// OP_CALL2	890	0	0
// OP_STORE_ENT	1	1160	0
// OP_NE_E	1	30	1262
// OP_IFNOT	1262	8	0
// OP_ADDRESS	1160	129	1263
// OP_STOREP_S	1264	1263	0
// OP_STORE_V	1160	4	0
// OP_STORE_V	1265	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	549	1266
// OP_STOREP_ENT	1160	1266	0
// OP_STORE_V	763	4	0
// OP_STORE_V	766	7	0
// OP_CALL2	890	0	0
// OP_STORE_ENT	1	1160	0
// OP_NE_E	1	30	1267
// OP_IFNOT	1267	13	0
// OP_ADDRESS	1160	129	1268
// OP_STOREP_S	1264	1268	0
// OP_STORE_V	1160	4	0
// OP_STORE_V	1265	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	550	1269
// OP_STOREP_ENT	1160	1269	0
// OP_LOAD_F	28	628	1270
// OP_EQ_F	1270	825	1271
// OP_IFNOT	1271	3	0
// OP_ADDRESS	1160	131	1272
// OP_STOREP_F	839	1272	0
// OP_EQ_F	689	821	1273
// OP_NOT_F	35	0	1274
// OP_OR	1273	1274	1275
// OP_IFNOT	1275	68	0
// OP_ADDRESS	28	644	1276
// OP_LOAD_F	28	644	1277
// OP_BITOR	1277	694	1278
// OP_STOREP_F	1278	1276	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	1159	0
// OP_NE_E	1	30	1279
// OP_IFNOT	1279	18	0
// OP_ADDRESS	1159	129	1280
// OP_STOREP_S	1281	1280	0
// OP_ADDRESS	1159	201	1282
// OP_STOREP_ENT	28	1282	0
// OP_STORE_V	1159	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	926	10	0
// OP_CALL3	464	0	0
// OP_STORE_V	1159	4	0
// OP_STORE_V	1283	7	0
// OP_CALL2	463	0	0
// OP_EQ_F	689	821	1284
// OP_IFNOT	1284	3	0
// OP_ADDRESS	1159	133	1285
// OP_STOREP_F	350	1285	0
// OP_ADDRESS	28	552	1286
// OP_STOREP_ENT	1159	1286	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	1159	0
// OP_NE_E	1	30	1287
// OP_IFNOT	1287	18	0
// OP_ADDRESS	1159	129	1288
// OP_STOREP_S	1281	1288	0
// OP_ADDRESS	1159	201	1289
// OP_STOREP_ENT	28	1289	0
// OP_STORE_V	1159	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	926	10	0
// OP_CALL3	464	0	0
// OP_STORE_V	1159	4	0
// OP_STORE_V	1283	7	0
// OP_CALL2	463	0	0
// OP_EQ_F	689	821	1290
// OP_IFNOT	1290	3	0
// OP_ADDRESS	1159	133	1291
// OP_STOREP_F	350	1291	0
// OP_ADDRESS	28	551	1292
// OP_STOREP_ENT	1159	1292	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	1159	0
// OP_NE_E	1	30	1293
// OP_IFNOT	1293	18	0
// OP_ADDRESS	1159	129	1294
// OP_STOREP_S	1281	1294	0
// OP_ADDRESS	1159	201	1295
// OP_STOREP_ENT	28	1295	0
// OP_STORE_V	1159	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	926	10	0
// OP_CALL3	464	0	0
// OP_STORE_V	1159	4	0
// OP_STORE_V	1283	7	0
// OP_CALL2	463	0	0
// OP_EQ_F	689	821	1296
// OP_IFNOT	1296	3	0
// OP_ADDRESS	1159	133	1297
// OP_STOREP_F	350	1297	0
// OP_ADDRESS	28	553	1298
// OP_STOREP_ENT	1159	1298	0
// OP_ADDRESS	28	620	1299
// OP_STOREP_F	817	1299	0
// OP_LOAD_F	28	614	1300
// OP_ADDRESS	28	615	1301
// OP_STOREP_F	817	1301	0
// OP_ADDRESS	28	616	1302
// OP_STOREP_F	817	1302	0
// OP_ADDRESS	28	617	1303
// OP_STOREP_F	817	1303	0
// OP_ADDRESS	28	618	1304
// OP_STOREP_F	817	1304	0
// OP_ADDRESS	28	619	1305
// OP_STOREP_F	817	1305	0
// OP_CALL0	492	0	0
// OP_LOAD_V	28	117	1306
// OP_STORE_V	1306	4	0
// OP_CALL1	461	0	0
// OP_ADDRESS	28	109	1309
// OP_LOAD_V	28	105	1312
// OP_MUL_VF	59	843	1315
// OP_SUB_V	1312	1315	1318
// OP_STOREP_V	1318	1309	0
// OP_LOAD_ENT	28	547	1321
// OP_ADDRESS	1321	555	1322
// OP_STOREP_V	59	1322	0
// OP_LOAD_ENT	28	547	1325
// OP_STORE_V	1325	4	0
// OP_LOAD_V	28	105	1326
// OP_MUL_VF	59	751	1329
// OP_SUB_V	1326	1329	1332
// OP_STORE_V	1332	7	0
// OP_CALL2	462	0	0
// OP_LOAD_F	28	119	1335
// OP_STORE_F	1335	542	0
// OP_ADDRESS	28	580	1336
// OP_STOREP_V	926	1336	0
// OP_ADDRESS	28	585	1339
// OP_STOREP_V	1342	1339	0
// OP_ADDRESS	28	604	1345
// OP_STOREP_F	218	1345	0
// OP_ADDRESS	28	609	1346
// OP_STOREP_F	817	1346	0
// OP_ADDRESS	28	610	1347
// OP_LOAD_F	30	610	1348
// OP_STOREP_F	1348	1347	0
// OP_LOAD_F	28	610	1349
// OP_EQ_F	1349	817	1350
// OP_IFNOT	1350	3	0
// OP_ADDRESS	28	610	1351
// OP_STOREP_F	808	1351	0
// OP_ADDRESS	28	613	1352
// OP_STOREP_F	790	1352	0
// OP_ADDRESS	28	611	1353
// OP_STOREP_F	713	1353	0
// OP_ADDRESS	28	638	1354
// OP_STOREP_ENT	30	1354	0
// OP_ADDRESS	28	594	1355
// OP_STOREP_F	817	1355	0
// OP_EQ_F	737	717	1356
// OP_IFNOT	1356	3	0
// OP_ADDRESS	28	157	1357
// OP_STOREP_F	794	1357	0
// OP_ADDRESS	28	674	1358
// OP_CALL0	473	0	0
// OP_STOREP_ENT	1	1358	0
// OP_LOAD_ENT	28	674	1359
// OP_ADDRESS	1359	201	1360
// OP_STOREP_ENT	28	1360	0
// OP_EQ_F	738	825	1361
// OP_IFNOT	1361	3	0
// OP_ADDRESS	28	682	1362
// OP_STOREP_F	791	1362	0
// OP_ADDRESS	28	612	1363
// OP_STOREP_F	793	1363	0
// OP_CALL0	1154	0	0
// OP_LOAD_S	28	129	1364
// OP_EQ_S	1364	880	1365
// OP_IFNOT	1365	39	0
// OP_ADDRESS	28	155	1366
// OP_STOREP_S	1367	1366	0
// OP_ADDRESS	28	156	1368
// OP_STOREP_F	827	1368	0
// OP_LOAD_ENT	28	547	1369
// OP_ADDRESS	1369	555	1370
// OP_LOAD_V	28	555	1373
// OP_STOREP_V	1373	1370	0
// OP_LOAD_ENT	28	548	1376
// OP_LOAD_V	1376	117	1377
// OP_STORE_V	1377	1168	0
// OP_STORE_ENT	28	81	0
// OP_STORE_V	352	4	0
// OP_STORE_V	747	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	352	4	0
// OP_STORE_V	1380	7	0
// OP_CALL2	512	0	0
// OP_STORE_V	352	4	0
// OP_STORE_V	1169	7	0
// OP_CALL2	512	0	0
// OP_STORE_V	352	4	0
// OP_STORE_V	1170	7	0
// OP_CALL2	512	0	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	880	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	1157	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	1161	0
// OP_ADDRESS	1161	201	1381
// OP_STOREP_ENT	28	1381	0
// OP_ADDRESS	1161	148	1382
// OP_STOREP_FNC	1108	1382	0
// OP_ADDRESS	1161	150	1383
// OP_ADD_F	31	1182	1384
// OP_STOREP_F	1384	1383	0
// OP_DONE	0	0	0
void () CreateVehicleEntities = 
{
    local entity tail;
    local entity body;
    local entity hl;
    local entity w;
    local entity angle_think_ent;
    local vector plyrBoxMin;
    local vector plyrBoxMax;
    local vector cam_angles;
    cvar_set("cl_rollangle", "0");
    cvar_set("cl_bob", "0");
    
    if(self.classname == "player")
    {
        w = spawn();
        w.speed = 254.000;
        w.owner = self;
        w.last_idle = time;
        w.think = fade_to_normal;
        w.nextthink = time + 0.500;
    }
    
    lose_speed_on_slide = 0.000;
    self.is_racer = "yes";
    
    if(self.classname == "rally_bot")
    {
        self.car_index = (floor(random() * 3.900)) + 2.000;
    }
    
    tail = SpawnPart(VEC_HULL_MIN * 0.500, VEC_HULL_MAX * 0.500);
    
    if((SpawnPart(VEC_HULL_MIN * 0.500, VEC_HULL_MAX * 0.500)) != world)
    {
        tail.classname = "veh_tail";
        tail.movetype = MOVETYPE_FLY;
        makevectors(self.angles);
        setorigin(tail, (self.origin - (v_forward * TAIL_DIST)) + '0.000 0.000 1.000');
        tail.veh_dir = '0.000 1.000 0.000';
        tail.yaw_speed = REAR_TRACTION;
        plyrBoxMin_x = -1.000;
        plyrBoxMin_y = -1.000;
        plyrBoxMin_z = -24.000;
        plyrBoxMax_x = 1.000;
        plyrBoxMax_y = 1.000;
        plyrBoxMax_z = 32.000;
        setsize(tail, plyrBoxMin, plyrBoxMax);
        tail.slide_ratio = 0.000;
        self.veh_tail = tail;
    }
    
    body = SpawnPart(VEH_MIN, VEH_MAX);
    if(SpawnPart(VEH_MIN, VEH_MAX) != world)
    {
        body.classname = "veh_body";
        self.veh_body = body;
        if(self.classname == "rally_bot")
        {
            SetCarDetails();
        }
        else
        {
            self.car_index = 3.000;
            SetCarDetails();
        }
        
        setorigin(body, body.origin + VEH_BODY_OFFSET);
        self.veh_body.angles = '0.000 0.000 0.000';
        self.veh_body.avelocity = '0.000 0.000 0.000';
        self.veh_body.roll_velocity = '0.000 0.000 0.000';
        self.veh_body.veh_dir = '0.000 0.000 0.000';
    }
    else
    {
        bprint("couldn't create vehicle body\n");
    }
    
    
    if(!cvar("deathmatch"))
    {
        w = SpawnPart(VEH_WHEEL_MIN, VEH_WHEEL_MAX);
        
        if(SpawnPart(VEH_WHEEL_MIN, VEH_WHEEL_MAX) != world)
        {
            w.classname = "veh_wheel";
            setmodel(w, "models/fwhl.mdl");
            self.fwhl = w;
        }
        
        w = SpawnPart(VEH_WHEEL_MIN, VEH_WHEEL_MAX);
        
        if(SpawnPart(VEH_WHEEL_MIN, VEH_WHEEL_MAX) != world)
        {
            w.classname = "veh_wheel";
            setmodel(w, "models/fwhl.mdl");
            self.rwhl = w;
            
            if(self.car_index == 4.000)
            {
                w.frame = 7.000;
            }
            
        }
        
    }
    
    
    if((challenge == 2.000) || !deathmatch)
    {
        self.racing_flags = self.racing_flags | QR_HEADLIGHTS_ON;
        hl = spawn();
        
        if(spawn() != world)
        {
            hl.classname = "veh_headlight";
            hl.owner = self;
            setsize(hl, '0.000 0.000 0.000', '0.000 0.000 0.000');
            setmodel(hl, "models/null.mdl");
            
            if(challenge == 2.000)
            {
                hl.effects = EF_DIMLIGHT;
            }
            
            self.hl_r = hl;
        }
        
        hl = spawn();
        
        if(spawn() != world)
        {
            hl.classname = "veh_headlight";
            hl.owner = self;
            setsize(hl, '0.000 0.000 0.000', '0.000 0.000 0.000');
            setmodel(hl, "models/null.mdl");
            
            if(challenge == 2.000)
            {
                hl.effects = EF_DIMLIGHT;
            }
            
            self.hl_l = hl;
        }
        
        hl = spawn();
        
        if(spawn() != world)
        {
            hl.classname = "veh_headlight";
            hl.owner = self;
            setsize(hl, '0.000 0.000 0.000', '0.000 0.000 0.000');
            setmodel(hl, "models/null.mdl");
            
            if(challenge == 2.000)
            {
                hl.effects = EF_DIMLIGHT;
            }
            
            self.hl_m = hl;
        }
        
    }
    
    self.last_jump_touch = 0.000;
    self.prev_surfangle1 = 0.000;
    self.prev_surfangle2 = 0.000;
    self.prev_surfangle3 = 0.000;
    self.prev_surfangle4 = 0.000;
    self.prev_surfangle5 = 0.000;
    droptofloor();
    makevectors(self.angles);
    self.oldorigin = self.origin - (v_forward * 8.000);
    self.veh_tail.veh_dir = v_forward;
    setorigin(self.veh_tail, self.origin - (v_forward * TAIL_DIST));
    plyr_angles_y = self.angles_y;
    self.body_roll = '0.000 0.000 0.000';
    self.body_roll_vel = '2.000 0.000 5.000';
    self.reversing = FALSE;
    self.reverse_release = 0.000;
    self.current_surface = world.current_surface;
    
    if(self.current_surface == 0.000)
    {
        self.current_surface = SURF_MUD;
    }
    
    self.chasecam_zoom = DEFAULT_CHASECAM_ZOOM;
    self.cam = CAM_CHASECLOSE;
    self.last_marker = world;
    self.slide_donut_vel = 0.000;
    
    if(racing_type == RT_TIME_TRIAL)
    {
        self.currentammo = TIMETRIAL_STARTTIME;
    }
    
    self.death_thinker = spawn();
    self.death_thinker.owner = self;
    
    if(rally_type_index == 4.000)
    {
        self.cult_cars = NUM_CARS;
    }
    
    self.tracking_speed = DEFAULT_TRACKING_SPEED;
    MoveVehicle();
    
    if(self.classname == "player")
    {
        self.weaponmodel = "models/wheel.mdl";
        self.weaponframe = 5.000;
        self.veh_tail.veh_dir = self.veh_dir;
        cam_angles = self.veh_body.angles;
        msg_entity = self;
        WriteByte(MSG_ONE, SVC_SETVIEWANGLES);
        WriteAngle(MSG_ONE, 25.000);
        WriteAngle(MSG_ONE, 0.000);
        WriteAngle(MSG_ONE, 0.000);
        tail = find(world, classname, "player");
        angle_think_ent = spawn();
        angle_think_ent.owner = self;
        angle_think_ent.think = angle_think;
        angle_think_ent.nextthink = time + 0.500;
    }
    
};

// CalcVehPosition
// function begins at statement 878, parm_start=1386
// OP_LOAD_ENT	28	548	1404
// OP_LOAD_V	1404	117	1405
// OP_LOAD_V	28	580	1408
// OP_SUB_V	1405	1408	1411
// OP_STORE_V	1411	1401	0
// OP_GT	1401	865	1414
// OP_IFNOT	1414	3	0
// OP_SUB_F	1401	867	1415
// OP_STORE_F	1415	1401	0
// OP_MUL_F	1228	1401	1416
// OP_STORE_F	1416	1401	0
// OP_STORE_V	1401	4	0
// OP_CALL1	461	0	0
// OP_MUL_VF	59	1390	1417
// OP_MUL_VF	59	787	1420
// OP_SUB_V	1417	1420	1423
// OP_STORE_V	1423	1392	0
// OP_MUL_VF	65	1389	1426
// OP_STORE_V	1426	1395	0
// OP_MUL_VF	62	1391	1429
// OP_STORE_V	1429	1398	0
// OP_ADD_V	1386	1392	1432
// OP_STORE_V	1432	1401	0
// OP_ADD_V	1401	1395	1435
// OP_STORE_V	1435	1401	0
// OP_ADD_V	1401	1398	1438
// OP_STORE_V	1438	1401	0
// OP_RETURN	1401	0	0
// OP_DONE	0	0	0
vector (vector source, float right, float forward, float up) CalcVehPosition = 
{
    local vector vect_offset_fwd;
    local vector vect_offset_side;
    local vector vect_offset_up;
    local vector temp;
    temp = self.veh_body.angles - self.body_roll;
    
    if(temp_x > 180.000)
    {
        temp_x = temp_x - 360.000;
    }
    
    temp_x = -1.000 * temp_x;
    makevectors(temp);
    vect_offset_fwd = (v_forward * forward) - (v_forward * dist_infront);
    vect_offset_side = v_right * right;
    vect_offset_up = v_up * up;
    temp = source + vect_offset_fwd;
    temp = temp + vect_offset_side;
    temp = temp + vect_offset_up;
    return temp;
};

// SetVehPosition
// function begins at statement 907, parm_start=1442
// OP_LOAD_V	1442	105	1450
// OP_STORE_V	1450	4	0
// OP_STORE_V	1444	7	0
// OP_STORE_V	1445	10	0
// OP_STORE_V	1446	13	0
// OP_CALL4	1385	0	0
// OP_STORE_V	1	1447	0
// OP_STORE_V	1443	4	0
// OP_STORE_V	1447	7	0
// OP_CALL2	462	0	0
// OP_DONE	0	0	0
void (entity source, entity w, float right, float forward, float up) SetVehPosition = 
{
    local vector newpos;
    newpos = CalcVehPosition(source.origin, right, forward, up);
    setorigin(w, newpos);
};

// MoveToAngle
// function begins at statement 918, parm_start=1454
// OP_GT	1454	1455	1458
// OP_SUB_F	1454	1455	1459
// OP_GT	1459	865	1460
// OP_AND	1458	1460	1461
// OP_IFNOT	1461	4	0
// OP_ADD_F	1455	867	1462
// OP_STORE_F	1462	1455	0
// OP_GOTO	8	0	0
// OP_GT	1455	1454	1463
// OP_SUB_F	1455	1454	1464
// OP_GT	1464	865	1465
// OP_AND	1463	1465	1466
// OP_IFNOT	1466	3	0
// OP_ADD_F	1454	867	1467
// OP_STORE_F	1467	1454	0
// OP_GT	1454	1455	1468
// OP_IFNOT	1468	8	0
// OP_MUL_F	1456	32	1469
// OP_SUB_F	1454	1469	1470
// OP_STORE_F	1470	1457	0
// OP_LT	1457	1455	1471
// OP_IFNOT	1471	2	0
// OP_STORE_F	1455	1457	0
// OP_GOTO	7	0	0
// OP_MUL_F	1456	32	1472
// OP_ADD_F	1454	1472	1473
// OP_STORE_F	1473	1457	0
// OP_GT	1457	1455	1474
// OP_IFNOT	1474	2	0
// OP_STORE_F	1455	1457	0
// OP_GE	1457	867	1475
// OP_IFNOT	1475	3	0
// OP_SUB_F	1457	867	1476
// OP_STORE_F	1476	1457	0
// OP_LT	1457	817	1477
// OP_IFNOT	1477	3	0
// OP_ADD_F	1457	867	1478
// OP_STORE_F	1478	1457	0
// OP_RETURN	1457	0	0
// OP_DONE	0	0	0
float (float s_angle, float e_angle, float rate) MoveToAngle = 
{
    local float result;
    if((s_angle > e_angle) && ((s_angle - e_angle) > 180.000))
    {
        e_angle = e_angle + 360.000;
    }
    else
    {
        
        if((e_angle > s_angle) && ((e_angle - s_angle) > 180.000))
        {
            s_angle = s_angle + 360.000;
        }
        
    }
    
    if(s_angle > e_angle)
    {
        result = s_angle - (rate * frametime);
        
        if(result < e_angle)
        {
            result = e_angle;
        }
        
    }
    else
    {
        result = s_angle + (rate * frametime);
        
        if(result > e_angle)
        {
            result = e_angle;
        }
        
    }
    
    
    if(result >= 360.000)
    {
        result = result - 360.000;
    }
    
    
    if(result < 0.000)
    {
        result = result + 360.000;
    }
    
    return result;
};

// BodyRoll
// function begins at statement 958, parm_start=1480
// OP_LOAD_F	28	120	1480
// OP_LT	1480	827	1481
// OP_LOAD_F	28	120	1482
// OP_GT	1482	1483	1484
// OP_AND	1481	1484	1485
// OP_IFNOT	1485	5	0
// OP_ADDRESS	28	124	1486
// OP_STOREP_F	817	1486	0
// OP_ADDRESS	28	120	1487
// OP_STOREP_F	817	1487	0
// OP_LOAD_F	28	118	1488
// OP_LT	1488	827	1489
// OP_LOAD_F	28	118	1490
// OP_GT	1490	1483	1491
// OP_AND	1489	1491	1492
// OP_IFNOT	1492	5	0
// OP_ADDRESS	28	122	1493
// OP_STOREP_F	817	1493	0
// OP_ADDRESS	28	118	1494
// OP_STOREP_F	817	1494	0
// OP_DONE	0	0	0
void () BodyRoll = 
{
    
    if((self.angles_z < 5.000) && (self.angles_z > -5.000))
    {
        self.avelocity_z = 0.000;
        self.angles_z = 0.000;
    }
    
    
    if((self.angles_x < 5.000) && (self.angles_x > -5.000))
    {
        self.avelocity_x = 0.000;
        self.angles_x = 0.000;
    }
    
};

vector (float dm) VelocityForDamage;
void () MoveWheels;
// CheckCultCars
// function begins at statement 979, parm_start=1498
// OP_NOT_F	689	0	1499
// OP_IFNOT	1499	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	682	1500
// OP_LE	1500	817	1501
// OP_IFNOT	1501	7	0
// OP_STORE_V	28	4	0
// OP_STORE_V	1502	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	34	4	0
// OP_CALL1	518	0	0
// OP_GOTO	21	0	0
// OP_LOAD_F	28	682	1503
// OP_STORE_V	1503	4	0
// OP_CALL1	485	0	0
// OP_STORE_S	1	1498	0
// OP_STORE_V	28	4	0
// OP_STORE_V	1504	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	1498	7	0
// OP_CALL2	483	0	0
// OP_LOAD_F	28	682	1505
// OP_GT	1505	819	1506
// OP_IFNOT	1506	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	1507	7	0
// OP_CALL2	483	0	0
// OP_GOTO	4	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	1508	7	0
// OP_CALL2	483	0	0
// OP_DONE	0	0	0
void () CheckCultCars = 
{
    local string str;
    
    if(!challenge)
    {
        return;
    }
    
    if(self.cult_cars <= 0.000)
    {
        sprint(self, "You are out of cars!\nYou failed to destroy the Cult.\n");
        changelevel(mapname);
    }
    else
    {
        str = ftos(self.cult_cars);
        sprint(self, "You have ");
        sprint(self, str);
        if(self.cult_cars > 1.000)
        {
            sprint(self, " cars left\n");
        }
        else
        {
            sprint(self, " car left\n");
        }
        
    }
    
};

// SpawnDeathWheel
// function begins at statement 1012, parm_start=1510
// OP_LOAD_ENT	28	201	1513
// OP_LOAD_ENT	1513	548	1514
// OP_LOAD_V	1514	117	1515
// OP_STORE_V	1515	4	0
// OP_CALL1	461	0	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	1512	0
// OP_ADDRESS	1512	103	1518
// OP_STOREP_F	241	1518	0
// OP_ADDRESS	1512	104	1519
// OP_STOREP_F	243	1519	0
// OP_ADDRESS	1512	117	1520
// OP_LOAD_ENT	28	201	1523
// OP_LOAD_ENT	1523	548	1524
// OP_LOAD_V	1524	117	1525
// OP_STOREP_V	1525	1520	0
// OP_STORE_V	1512	4	0
// OP_STORE_V	1528	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	1512	4	0
// OP_ADD_V	303	1529	1532
// OP_STORE_V	1532	7	0
// OP_SUB_V	306	1535	1538
// OP_STORE_V	1538	10	0
// OP_CALL3	464	0	0
// OP_STORE_V	1512	4	0
// OP_LOAD_ENT	28	201	1541
// OP_LOAD_ENT	1541	548	1542
// OP_LOAD_V	1542	105	1543
// OP_MUL_VF	65	1510	1546
// OP_DIV_F	748	821	1549
// OP_MUL_VF	1546	1549	1550
// OP_ADD_V	1543	1550	1553
// OP_MUL_VF	59	1511	1556
// OP_DIV_F	749	821	1559
// OP_MUL_VF	1556	1559	1560
// OP_ADD_V	1553	1560	1563
// OP_STORE_V	1563	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	1512	113	1566
// OP_CALL0	466	0	0
// OP_MUL_FV	1	1569	1572
// OP_CALL0	466	0	0
// OP_MUL_FV	1	1575	1578
// OP_ADD_V	1572	1578	1581
// OP_CALL0	466	0	0
// OP_MUL_FV	1	1584	1587
// OP_ADD_V	1581	1587	1590
// OP_ADD_V	1590	1593	1596
// OP_SUB_V	1596	1599	1602
// OP_STOREP_V	1602	1566	0
// OP_ADDRESS	1512	121	1605
// OP_LOAD_V	1512	113	1608
// OP_STOREP_V	1608	1605	0
// OP_ADDRESS	1512	124	1611
// OP_STOREP_F	843	1611	0
// OP_ADDRESS	1512	121	1612
// OP_LOAD_V	1512	121	1615
// OP_MUL_VF	1615	827	1618
// OP_STOREP_V	1618	1612	0
// OP_ADDRESS	1512	148	1621
// OP_STOREP_FNC	533	1621	0
// OP_ADDRESS	1512	150	1622
// OP_ADD_F	31	823	1623
// OP_STOREP_F	1623	1622	0
// OP_DONE	0	0	0
void (float right, float forward) SpawnDeathWheel = 
{
    local entity part;
    makevectors(self.owner.veh_body.angles);
    part = spawn();
    part.movetype = MOVETYPE_BOUNCE;
    part.solid = SOLID_NOT;
    part.angles = self.owner.veh_body.angles;
    setmodel(part, "models/whl.mdl");
    setsize(part, VEC_HULL_MIN + '0.000 0.000 12.000', VEC_HULL_MAX - '0.000 0.000 16.000');
    setorigin(part, (self.owner.veh_body.origin + ((v_right * right) * (VEH_WIDTH / 2.000))) + ((v_forward * forward) * (VEH_LENGTH / 2.000)));
    part.velocity = ((((random() * '128.000 0.000 0.000') + (random() * '0.000 128.000 0.000')) + (random() * '0.000 0.000 200.000')) + '0.000 0.000 150.000') - '64.000 64.000 0.000';
    part.avelocity = part.velocity;
    part.avelocity_z = 8.000;
    part.avelocity = part.avelocity * 5.000;
    part.think = SUB_Remove;
    part.nextthink = time + 3.000;
};

// DeathThink
// function begins at statement 1078, parm_start=1625
// OP_LOAD_F	28	378	1628
// OP_NOT_F	1628	0	1629
// OP_LOAD_ENT	28	201	1630
// OP_LOAD_F	1630	152	1631
// OP_LT	1631	1632	1633
// OP_LOAD_F	28	647	1634
// OP_SUB_F	31	821	1635
// OP_LT	1634	1635	1636
// OP_OR	1633	1636	1637
// OP_AND	1629	1637	1638
// OP_IFNOT	1638	134	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	1626	0
// OP_ADDRESS	1626	103	1639
// OP_STOREP_F	241	1639	0
// OP_ADDRESS	1626	104	1640
// OP_STOREP_F	243	1640	0
// OP_ADDRESS	1626	117	1641
// OP_LOAD_ENT	28	548	1644
// OP_LOAD_V	1644	117	1645
// OP_STOREP_V	1645	1641	0
// OP_ADDRESS	1626	183	1648
// OP_LOAD_ENT	28	548	1649
// OP_LOAD_F	1649	183	1650
// OP_STOREP_F	1650	1648	0
// OP_LOAD_ENT	28	201	1651
// OP_LOAD_F	1651	628	1652
// OP_EQ_F	1652	821	1653
// OP_IFNOT	1653	5	0
// OP_STORE_V	1626	4	0
// OP_STORE_V	954	7	0
// OP_CALL2	463	0	0
// OP_GOTO	24	0	0
// OP_LOAD_ENT	28	201	1654
// OP_LOAD_F	1654	628	1655
// OP_EQ_F	1655	823	1656
// OP_IFNOT	1656	5	0
// OP_STORE_V	1626	4	0
// OP_STORE_V	987	7	0
// OP_CALL2	463	0	0
// OP_GOTO	16	0	0
// OP_LOAD_ENT	28	201	1657
// OP_LOAD_F	1657	628	1658
// OP_EQ_F	1658	825	1659
// OP_IFNOT	1659	5	0
// OP_STORE_V	1626	4	0
// OP_STORE_V	1012	7	0
// OP_CALL2	463	0	0
// OP_GOTO	8	0	0
// OP_LOAD_ENT	28	201	1660
// OP_LOAD_F	1660	628	1661
// OP_EQ_F	1661	827	1662
// OP_IFNOT	1662	4	0
// OP_STORE_V	1626	4	0
// OP_STORE_V	1046	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	1626	132	1663
// OP_LOAD_ENT	28	548	1664
// OP_LOAD_F	1664	132	1665
// OP_STOREP_F	1665	1663	0
// OP_STORE_V	1626	4	0
// OP_ADD_V	303	1666	1669
// OP_STORE_V	1669	7	0
// OP_STORE_V	306	10	0
// OP_CALL3	464	0	0
// OP_STORE_V	1626	4	0
// OP_LOAD_ENT	28	548	1672
// OP_LOAD_V	1672	105	1673
// OP_STORE_V	1673	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	1626	113	1676
// OP_CALL0	466	0	0
// OP_MUL_FV	1	1679	1682
// OP_CALL0	466	0	0
// OP_MUL_FV	1	1685	1688
// OP_ADD_V	1682	1688	1691
// OP_CALL0	466	0	0
// OP_MUL_FV	1	1584	1694
// OP_ADD_V	1691	1694	1697
// OP_ADD_V	1697	1700	1703
// OP_SUB_V	1703	1706	1709
// OP_STOREP_V	1709	1676	0
// OP_ADDRESS	1626	121	1712
// OP_LOAD_V	1626	113	1715
// OP_STOREP_V	1715	1712	0
// OP_ADDRESS	1626	122	1718
// OP_STOREP_F	817	1718	0
// OP_ADDRESS	1626	148	1719
// OP_STOREP_FNC	533	1719	0
// OP_ADDRESS	1626	150	1720
// OP_ADD_F	31	827	1721
// OP_STOREP_F	1721	1720	0
// OP_STORE_V	819	4	0
// OP_STORE_V	819	7	0
// OP_CALL2	1509	0	0
// OP_STORE_V	1228	4	0
// OP_STORE_V	819	7	0
// OP_CALL2	1509	0	0
// OP_STORE_V	819	4	0
// OP_STORE_V	1228	7	0
// OP_CALL2	1509	0	0
// OP_STORE_V	1228	4	0
// OP_STORE_V	1228	7	0
// OP_CALL2	1509	0	0
// OP_LOAD_ENT	28	201	1722
// OP_LOAD_F	1722	152	1723
// OP_LE	1723	817	1724
// OP_IFNOT	1724	33	0
// OP_LOAD_ENT	28	201	1725
// OP_LOAD_ENT	1725	548	1726
// OP_STORE_V	1726	4	0
// OP_STORE_V	1727	7	0
// OP_CALL2	462	0	0
// OP_LOAD_ENT	28	201	1730
// OP_LOAD_ENT	1730	549	1731
// OP_NE_E	1731	30	1732
// OP_IFNOT	1732	6	0
// OP_LOAD_ENT	28	201	1733
// OP_LOAD_ENT	1733	549	1734
// OP_STORE_V	1734	4	0
// OP_STORE_V	1727	7	0
// OP_CALL2	462	0	0
// OP_LOAD_ENT	28	201	1735
// OP_LOAD_ENT	1735	550	1736
// OP_NE_E	1736	30	1737
// OP_IFNOT	1737	6	0
// OP_LOAD_ENT	28	201	1738
// OP_LOAD_ENT	1738	550	1739
// OP_STORE_V	1739	4	0
// OP_STORE_V	1727	7	0
// OP_CALL2	462	0	0
// OP_LOAD_ENT	28	201	1740
// OP_LOAD_ENT	1740	554	1741
// OP_NE_E	1741	30	1742
// OP_IFNOT	1742	6	0
// OP_LOAD_ENT	28	201	1743
// OP_LOAD_ENT	1743	554	1744
// OP_STORE_V	1744	4	0
// OP_STORE_V	1727	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	28	548	1745
// OP_STOREP_ENT	1626	1745	0
// OP_ADDRESS	28	378	1746
// OP_STOREP_F	819	1746	0
// OP_LOAD_F	28	647	1747
// OP_SUB_F	31	1748	1749
// OP_GT	1747	1749	1750
// OP_IFNOT	1750	5	0
// OP_ADDRESS	28	150	1751
// OP_ADD_F	31	1182	1752
// OP_STOREP_F	1752	1751	0
// OP_GOTO	3	0	0
// OP_ADDRESS	28	150	1753
// OP_STOREP_F	1228	1753	0
// OP_DONE	0	0	0
void () DeathThink = 
{
    local entity exp;
    local entity part;
    local float rnd;
    
    if(!self.speed && ((self.owner.health < 40.000) || (self.last_idle < (time - 2.000))))
    {
        part = spawn();
        part.movetype = MOVETYPE_BOUNCE;
        part.solid = SOLID_NOT;
        part.angles = self.veh_body.angles;
        part.colormap = self.veh_body.colormap;
        if(self.owner.car_index == 2.000)
        {
            setmodel(part, "models/sumacar.mdl");
        }
        else
        {
            if(self.owner.car_index == 3.000)
            {
                setmodel(part, "models/zumacar.mdl");
            }
            else
            {
                if(self.owner.car_index == 4.000)
                {
                    setmodel(part, "models/mycar.mdl");
                }
                else
                {
                    
                    if(self.owner.car_index == 5.000)
                    {
                        setmodel(part, "models/triton.mdl");
                    }
                    
                }
                
            }
            
        }
        
        part.skin = self.veh_body.skin;
        setsize(part, VEC_HULL_MIN + '0.000 0.000 8.000', VEC_HULL_MAX);
        setorigin(part, self.veh_body.origin);
        part.velocity = ((((random() * '32.000 0.000 0.000') + (random() * '0.000 32.000 0.000')) + (random() * '0.000 0.000 200.000')) + '0.000 0.000 400.000') - '16.000 16.000 0.000';
        part.avelocity = part.velocity;
        part.avelocity_x = 0.000;
        part.think = SUB_Remove;
        part.nextthink = time + 5.000;
        SpawnDeathWheel(1.000, 1.000);
        SpawnDeathWheel(-1.000, 1.000);
        SpawnDeathWheel(1.000, -1.000);
        SpawnDeathWheel(-1.000, -1.000);
        
        if(self.owner.health <= 0.000)
        {
            setorigin(self.owner.veh_body, '0.000 0.000 -3900.000');
            
            if(self.owner.fwhl != world)
            {
                setorigin(self.owner.fwhl, '0.000 0.000 -3900.000');
            }
            
            
            if(self.owner.rwhl != world)
            {
                setorigin(self.owner.rwhl, '0.000 0.000 -3900.000');
            }
            
            
            if(self.owner.gun != world)
            {
                setorigin(self.owner.gun, '0.000 0.000 -3900.000');
            }
            
        }
        
        self.veh_body = part;
        self.speed = 1.000;
    }
    
    if(self.last_idle > (time - 2.500))
    {
        self.nextthink = time + 0.500;
    }
    else
    {
        self.nextthink = -1.000;
    }
    
};

.float spawn_time;
// DestroyVehicle
// function begins at statement 1233, parm_start=1756
// OP_LOAD_F	28	1754	1757
// OP_SUB_F	31	819	1758
// OP_GT	1757	1758	1759
// OP_IFNOT	1759	2	0
// OP_RETURN	0	0	0
// OP_LOAD_ENT	28	548	1760
// OP_ADDRESS	1760	595	1761
// OP_STOREP_V	926	1761	0
// OP_LOAD_ENT	28	548	1764
// OP_ADDRESS	1764	121	1765
// OP_STOREP_V	926	1765	0
// OP_LOAD_ENT	28	548	1768
// OP_STORE_V	1768	4	0
// OP_STORE_V	754	7	0
// OP_STORE_V	757	10	0
// OP_CALL3	464	0	0
// OP_LOAD_ENT	28	548	1769
// OP_ADDRESS	1769	118	1770
// OP_STOREP_F	817	1770	0
// OP_LOAD_ENT	28	548	1771
// OP_STORE_ENT	1771	28	0
// OP_CALL0	492	0	0
// OP_LOAD_ENT	28	201	1772
// OP_STORE_ENT	1772	28	0
// OP_LOAD_ENT	28	548	1773
// OP_LOAD_V	1773	117	1774
// OP_STORE_V	1774	4	0
// OP_CALL1	461	0	0
// OP_LT	64	817	1777
// OP_IFNOT	1777	10	0
// OP_LOAD_ENT	28	548	1778
// OP_STORE_V	1778	4	0
// OP_LOAD_ENT	28	548	1779
// OP_LOAD_V	1779	105	1780
// OP_MUL_VF	1783	1228	1786
// OP_MUL_VF	1786	64	1789
// OP_ADD_V	1780	1789	1792
// OP_STORE_V	1792	7	0
// OP_CALL2	462	0	0
// OP_STORE_V	64	4	0
// OP_CALL1	499	0	0
// OP_STORE_F	1	1756	0
// OP_LOAD_ENT	28	548	1795
// OP_STORE_V	1795	4	0
// OP_LOAD_ENT	28	548	1796
// OP_LOAD_V	1796	105	1797
// OP_SUB_F	819	1756	1800
// OP_MUL_FV	1800	1666	1801
// OP_ADD_V	1797	1801	1804
// OP_STORE_V	1804	7	0
// OP_CALL2	462	0	0
// OP_LOAD_ENT	28	548	1807
// OP_LOAD_V	1807	117	1808
// OP_STORE_V	1808	4	0
// OP_CALL1	461	0	0
// OP_ADDRESS	28	555	1811
// OP_STOREP_V	59	1811	0
// OP_CALL0	1496	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	1814	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	338	7	0
// OP_STORE_V	1815	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	407	1816
// OP_STOREP_S	1817	1816	0
// OP_LOAD_F	28	152	1818
// OP_GT	1818	817	1819
// OP_IFNOT	1819	6	0
// OP_STORE_V	28	4	0
// OP_STORE_V	30	7	0
// OP_STORE_V	30	10	0
// OP_STORE_V	1820	13	0
// OP_CALL4	534	0	0
// OP_DONE	0	0	0
void () DestroyVehicle = 
{
    local float ftemp;
    
    if(self.spawn_time > (time - 1.000))
    {
        return;
    }
    
    self.veh_body.roll_velocity = '0.000 0.000 0.000';
    self.veh_body.avelocity = '0.000 0.000 0.000';
    setsize(self.veh_body, VEH_MIN, VEH_MAX);
    self.veh_body.angles_x = 0.000;
    self = self.veh_body;
    droptofloor();
    self = self.owner;
    makevectors(self.veh_body.angles);
    
    if(0.000 < 0.000)
    {
        setorigin(self.veh_body, self.veh_body.origin + (('0.000 0.000 6.000' * -1.000) * 0.000));
    }
    
    ftemp = fabs(0.000);
    setorigin(self.veh_body, self.veh_body.origin + ((1.000 - ftemp) * '0.000 0.000 8.000'));
    makevectors(self.veh_body.angles);
    self.veh_dir = v_forward;
    MoveWheels();
    sound(self, CHAN_VOICE, "player/lburn1.wav", 1.000, ATTN_STATIC);
    sound(self, CHAN_BODY, "player/lburn2.wav", 1.000, ATTN_STATIC);
    self.deathtype = "rolled_car";
    
    if(self.health > 0.000)
    {
        T_Damage(self, world, world, 500.000);
    }
    
};

// GetAveragePrevRoll
// function begins at statement 1314, parm_start=1822
// OP_LOAD_F	28	615	1823
// OP_STORE_V	1823	4	0
// OP_LOAD_F	28	619	1824
// OP_STORE_V	1824	7	0
// OP_CALL2	860	0	0
// OP_DIV_F	1	825	1825
// OP_STORE_F	1825	1822	0
// OP_LT	1822	1826	1827
// OP_IFNOT	1827	3	0
// OP_STORE_F	1826	1822	0
// OP_GOTO	4	0	0
// OP_GT	1822	855	1828
// OP_IFNOT	1828	2	0
// OP_STORE_F	855	1822	0
// OP_RETURN	1822	0	0
// OP_DONE	0	0	0
float () GetAveragePrevRoll = 
{
    local float ave_roll;
    ave_roll = angle_diff(self.prev_surfangle1, self.prev_surfangle5) / 4.000;
    if(ave_roll < -10.000)
    {
        ave_roll = -10.000;
    }
    else
    {
        
        if(ave_roll > 10.000)
        {
            ave_roll = 10.000;
        }
        
    }
    
    return ave_roll;
};

// CarAirborne
// function begins at statement 1330, parm_start=1830
// OP_LOAD_ENT	28	548	1835
// OP_LOAD_V	1835	117	1836
// OP_STORE_V	1836	4	0
// OP_CALL1	461	0	0
// OP_LT	64	817	1839
// OP_IFNOT	1839	2	0
// OP_RETURN	0	0	0
// OP_LOAD_ENT	28	547	1840
// OP_LOAD_V	1840	555	1841
// OP_STORE_V	1841	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	1831	0
// OP_LOAD_ENT	28	547	1844
// OP_ADDRESS	1844	612	1845
// OP_LOAD_ENT	28	548	1846
// OP_LOAD_F	1846	119	1847
// OP_STORE_V	1847	4	0
// OP_STORE_V	1832	7	0
// OP_CALL2	860	0	0
// OP_STOREP_F	1	1845	0
// OP_LOAD_F	28	620	1848
// OP_SUB_F	31	1848	1849
// OP_GE	1849	821	1850
// OP_LOAD_F	28	578	1851
// OP_DIV_F	1851	32	1852
// OP_GT	1852	825	1853
// OP_AND	1850	1853	1854
// OP_IFNOT	1854	85	0
// OP_LT	738	823	1855
// OP_IFNOT	1855	6	0
// OP_LOAD_ENT	28	548	1856
// OP_ADDRESS	1856	598	1857
// OP_CALL0	1821	0	0
// OP_STOREP_F	1	1857	0
// OP_GOTO	6	0	0
// OP_LOAD_ENT	28	548	1858
// OP_ADDRESS	1858	598	1859
// OP_LOAD_ENT	28	548	1860
// OP_LOAD_F	1860	558	1861
// OP_STOREP_F	1861	1859	0
// OP_LOAD_F	28	112	1862
// OP_LOAD_F	28	108	1863
// OP_GE	1862	1863	1864
// OP_IFNOT	1864	7	0
// OP_LOAD_ENT	28	548	1865
// OP_ADDRESS	1865	598	1866
// OP_LOAD_ENT	28	548	1867
// OP_LOAD_F	1867	598	1868
// OP_DIV_F	1868	855	1869
// OP_STOREP_F	1869	1866	0
// OP_LOAD_ENT	28	548	1870
// OP_LOAD_F	1870	598	1871
// OP_GT	1871	865	1872
// OP_IFNOT	1872	7	0
// OP_LOAD_ENT	28	548	1873
// OP_ADDRESS	1873	598	1874
// OP_LOAD_ENT	28	548	1875
// OP_LOAD_F	1875	598	1876
// OP_SUB_F	1876	867	1877
// OP_STOREP_F	1877	1874	0
// OP_LOAD_ENT	28	548	1878
// OP_ADDRESS	1878	598	1879
// OP_LOAD_ENT	28	548	1880
// OP_LOAD_F	1880	598	1881
// OP_MUL_F	1881	855	1882
// OP_STOREP_F	1882	1879	0
// OP_LOAD_ENT	28	548	1883
// OP_LOAD_F	1883	598	1884
// OP_GT	1884	1885	1886
// OP_IFNOT	1886	5	0
// OP_LOAD_ENT	28	548	1887
// OP_ADDRESS	1887	598	1888
// OP_STOREP_F	1885	1888	0
// OP_GOTO	8	0	0
// OP_LOAD_ENT	28	548	1889
// OP_LOAD_F	1889	598	1890
// OP_LT	1890	1891	1892
// OP_IFNOT	1892	4	0
// OP_LOAD_ENT	28	548	1893
// OP_ADDRESS	1893	598	1894
// OP_STOREP_F	1891	1894	0
// OP_BITAND	723	701	1895
// OP_NOT_F	1895	0	1896
// OP_IFNOT	1896	13	0
// OP_LOAD_ENT	28	548	1897
// OP_ADDRESS	1897	597	1898
// OP_LOAD_ENT	28	548	1899
// OP_LOAD_F	1899	565	1900
// OP_STORE_V	1900	4	0
// OP_LOAD_ENT	28	548	1901
// OP_LOAD_F	1901	119	1902
// OP_STORE_V	1902	7	0
// OP_CALL2	860	0	0
// OP_MUL_F	1228	1	1903
// OP_DIV_F	1903	32	1904
// OP_STOREP_F	1904	1898	0
// OP_LOAD_ENT	28	548	1905
// OP_LOAD_F	1905	597	1906
// OP_GT	1906	1380	1907
// OP_IFNOT	1907	5	0
// OP_LOAD_ENT	28	548	1908
// OP_ADDRESS	1908	597	1909
// OP_STOREP_F	1380	1909	0
// OP_GOTO	8	0	0
// OP_LOAD_ENT	28	548	1910
// OP_LOAD_F	1910	597	1911
// OP_LT	1911	1912	1913
// OP_IFNOT	1913	4	0
// OP_LOAD_ENT	28	548	1914
// OP_ADDRESS	1914	597	1915
// OP_STOREP_F	1912	1915	0
// OP_GOTO	4	0	0
// OP_LOAD_ENT	28	548	1916
// OP_ADDRESS	1916	598	1917
// OP_STOREP_F	817	1917	0
// OP_ADDRESS	28	664	1918
// OP_STOREP_F	31	1918	0
// OP_ADDRESS	28	592	1919
// OP_STOREP_F	817	1919	0
// OP_LOAD_ENT	28	548	1920
// OP_LOAD_V	1920	117	1921
// OP_STORE_V	1921	4	0
// OP_CALL1	461	0	0
// OP_LOAD_ENT	28	548	1924
// OP_ADDRESS	1924	596	1925
// OP_DIV_F	1830	778	1926
// OP_MUL_F	1926	847	1927
// OP_SUB_F	1927	855	1928
// OP_MUL_F	1928	827	1929
// OP_STOREP_F	1929	1925	0
// OP_GT	61	1930	1931
// OP_IFNOT	1931	8	0
// OP_LOAD_ENT	28	548	1932
// OP_ADDRESS	1932	596	1933
// OP_LOAD_ENT	28	548	1934
// OP_LOAD_F	1934	596	1935
// OP_MUL_F	61	827	1936
// OP_ADD_F	1935	1936	1937
// OP_STOREP_F	1937	1933	0
// OP_LOAD_F	28	112	1938
// OP_LOAD_F	28	108	1939
// OP_LT	1938	1939	1940
// OP_LOAD_F	28	620	1941
// OP_SUB_F	31	1941	1942
// OP_LT	1942	821	1943
// OP_AND	1940	1943	1944
// OP_IFNOT	1944	30	0
// OP_LOAD_S	30	130	1945
// OP_EQ_S	1945	1946	1947
// OP_GT	1830	1948	1949
// OP_AND	1947	1949	1950
// OP_IFNOT	1950	15	0
// OP_ADDRESS	28	113	1951
// OP_LOAD_V	28	113	1954
// OP_STORE_V	1954	4	0
// OP_CALL1	468	0	0
// OP_MUL_VF	1	1957	1958
// OP_STOREP_V	1958	1951	0
// OP_ADDRESS	28	621	1961
// OP_ADDRESS	28	567	1964
// OP_LOAD_V	28	113	1967
// OP_STOREP_V	1967	1964	0
// OP_STOREP_V	1967	1961	0
// OP_ADDRESS	28	590	1970
// OP_STOREP_F	1957	1970	0
// OP_GOTO	5	0	0
// OP_ADDRESS	28	113	1971
// OP_LOAD_V	28	113	1974
// OP_MUL_VF	1974	883	1977
// OP_STOREP_V	1977	1971	0
// OP_ADDRESS	28	116	1980
// OP_LOAD_F	28	116	1981
// OP_ADD_F	1981	1135	1982
// OP_STOREP_F	1982	1980	0
// OP_ADDRESS	28	620	1983
// OP_STOREP_F	817	1983	0
// OP_DONE	0	0	0
void () CarAirborne = 
{
    local float vspeed;
    local vector tail_angle;
    local string str;
    makevectors(self.veh_body.angles);
    
    if(0.000 < 0.000)
    {
        return;
    }
    
    tail_angle = vectoangles(self.veh_tail.veh_dir);
    self.veh_tail.tracking_speed = angle_diff(self.veh_body.angles_y, 0.000);
    if(((time - self.last_jump_touch) >= 2.000) && ((self.lastmove_z / frametime) > 4.000))
    {
        if(rally_type_index < 3.000)
        {
            self.veh_body.roll_velocity_z = GetAveragePrevRoll();
        }
        else
        {
            self.veh_body.roll_velocity_z = self.veh_body.veh_dir_z;
        }
        
        
        if(self.oldorigin_z >= self.origin_z)
        {
            self.veh_body.roll_velocity_z = self.veh_body.roll_velocity_z / 10.000;
        }
        
        
        if(self.veh_body.roll_velocity_z > 180.000)
        {
            self.veh_body.roll_velocity_z = self.veh_body.roll_velocity_z - 360.000;
        }
        
        self.veh_body.roll_velocity_z = self.veh_body.roll_velocity_z * 10.000;
        if(self.veh_body.roll_velocity_z > 150.000)
        {
            self.veh_body.roll_velocity_z = 150.000;
        }
        else
        {
            
            if(self.veh_body.roll_velocity_z < -150.000)
            {
                self.veh_body.roll_velocity_z = -150.000;
            }
            
        }
        
        
        if(!(global_racing_flags & QR_NO_SIDEWAYS_ROLL))
        {
            self.veh_body.roll_velocity_y = (-1.000 * angle_diff(self.veh_body.old_angles_y, self.veh_body.angles_y)) / frametime;
        }
        
        if(self.veh_body.roll_velocity_y > 25.000)
        {
            self.veh_body.roll_velocity_y = 25.000;
        }
        else
        {
            
            if(self.veh_body.roll_velocity_y < -25.000)
            {
                self.veh_body.roll_velocity_y = -25.000;
            }
            
        }
        
    }
    else
    {
        self.veh_body.roll_velocity_z = 0.000;
    }
    
    self.leave_ground_time = time;
    self.last_jump_z = 0.000;
    makevectors(self.veh_body.angles);
    self.veh_body.roll_velocity_x = (((vspeed / MAX_SPEED) * 9.000) - 10.000) * 5.000;
    
    if(0.000 > 0.400)
    {
        self.veh_body.roll_velocity_x = self.veh_body.roll_velocity_x + (0.000 * 5.000);
    }
    
    
    if((self.oldorigin_z < self.origin_z) && ((time - self.last_jump_touch) < 2.000))
    {
        if((world.model == "maps/qrally02.bsp") && (vspeed > 400.000))
        {
            self.velocity = normalize(self.velocity) * 100.000;
            self.last_velocity = self.old_velocity = self.velocity;
            self.last_speed = 100.000;
        }
        else
        {
            self.velocity = self.velocity * 1.500;
        }
        
        self.velocity_z = self.velocity_z + 250.000;
        self.last_jump_touch = 0.000;
    }
    
};

void () dirt9;
// dirt1
// function begins at statement 1507, parm_start=1986
// OP_STATE	821	1986	0
// OP_ADDRESS	28	150	1987
// OP_ADD_F	31	1988	1989
// OP_STOREP_F	1989	1987	0
// OP_DONE	0	0	0
void () dirt1 = [2.000, dirt2]
{
    self.nextthink = time + 0.050;
};

// dirt2
// function begins at statement 1512, parm_start=1990
// OP_STATE	823	1990	0
// OP_ADDRESS	28	150	1991
// OP_ADD_F	31	1992	1993
// OP_STOREP_F	1993	1991	0
// OP_DONE	0	0	0
void () dirt2 = [3.000, dirt3]
{
    self.nextthink = time + 0.150;
};

// dirt3
// function begins at statement 1517, parm_start=1994
// OP_STATE	825	1994	0
// OP_ADDRESS	28	150	1995
// OP_ADD_F	31	1988	1996
// OP_STOREP_F	1996	1995	0
// OP_LOAD_ENT	28	201	1997
// OP_LOAD_V	1997	113	1998
// OP_STORE_V	1998	4	0
// OP_CALL1	471	0	0
// OP_LT	1	1957	2001
// OP_IFNOT	2001	3	0
// OP_ADDRESS	28	148	2002
// OP_STOREP_FNC	1984	2002	0
// OP_DONE	0	0	0
void () dirt3 = [4.000, dirt5]
{
    self.nextthink = time + 0.050;
    
    if(vlen(self.owner.velocity) < 100.000)
    {
        self.think = dirt9;
    }
    
};

// dirt5
// function begins at statement 1530, parm_start=2003
// OP_STATE	827	2003	0
// OP_LOAD_ENT	28	201	2004
// OP_LOAD_V	2004	113	2005
// OP_STORE_V	2005	4	0
// OP_CALL1	471	0	0
// OP_LT	1	1957	2008
// OP_IFNOT	2008	6	0
// OP_ADDRESS	28	148	2009
// OP_STOREP_FNC	1984	2009	0
// OP_ADDRESS	28	150	2010
// OP_ADD_F	31	1988	2011
// OP_STOREP_F	2011	2010	0
// OP_DONE	0	0	0
void () dirt5 = [5.000, dirt6]
{
    
    if(vlen(self.owner.velocity) < 100.000)
    {
        self.think = dirt9;
        self.nextthink = time + 0.050;
    }
    
};

// dirt6
// function begins at statement 1543, parm_start=2012
// OP_STATE	825	2012	0
// OP_DONE	0	0	0
void () dirt6 = [4.000, dirt7]
{
};

// dirt7
// function begins at statement 1545, parm_start=2013
// OP_STATE	827	2013	0
// OP_DONE	0	0	0
void () dirt7 = [5.000, dirt8]
{
};

// dirt8
// function begins at statement 1547, parm_start=2014
// OP_STATE	825	1984	0
// OP_DONE	0	0	0
void () dirt8 = [4.000, dirt9]
{
};

// dirt9
// function begins at statement 1549, parm_start=2014
// OP_STATE	823	2014	0
// OP_DONE	0	0	0
void () dirt9 = [3.000, dirt10]
{
};

// dirt10
// function begins at statement 1551, parm_start=2015
// OP_STATE	821	2015	0
// OP_DONE	0	0	0
void () dirt10 = [2.000, dirt11]
{
};

// dirt11
// function begins at statement 1553, parm_start=2016
// OP_STATE	823	2016	0
// OP_DONE	0	0	0
void () dirt11 = [3.000, dirt12]
{
};

// dirt12
// function begins at statement 1555, parm_start=2017
// OP_STATE	821	2017	0
// OP_DONE	0	0	0
void () dirt12 = [2.000, dirt13]
{
};

// dirt13
// function begins at statement 1557, parm_start=2018
// OP_STATE	819	2018	0
// OP_DONE	0	0	0
void () dirt13 = [1.000, dirt14]
{
};

// dirt14
// function begins at statement 1559, parm_start=2019
// OP_STATE	817	2018	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_DONE	0	0	0
void () dirt14 = [0.000, dirt14]
{
    remove(self);
};

// SpawnDirt
// function begins at statement 1563, parm_start=2020
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	2030	0
// OP_STORE_V	2030	4	0
// OP_STORE_V	2021	7	0
// OP_CALL2	462	0	0
// OP_STORE_V	2030	4	0
// OP_STORE_V	2037	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	2030	113	2038
// OP_STOREP_V	2024	2038	0
// OP_LOAD_V	2020	113	2041
// OP_STORE_V	2041	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	2034	0
// OP_STORE_V	2034	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	2031	0
// OP_ADDRESS	2030	117	2044
// OP_STOREP_V	2027	2044	0
// OP_ADDRESS	2030	119	2047
// OP_STOREP_F	2032	2047	0
// OP_ADDRESS	2030	201	2048
// OP_STOREP_ENT	2020	2048	0
// OP_ADDRESS	2030	148	2049
// OP_STOREP_FNC	1985	2049	0
// OP_ADDRESS	2030	150	2050
// OP_ADD_F	31	1988	2051
// OP_STOREP_F	2051	2050	0
// OP_DONE	0	0	0
void (entity own, vector org, vector vel, vector ang) SpawnDirt = 
{
    local entity dirt;
    local vector vang;
    local vector vunit;
    dirt = spawn();
    setorigin(dirt, org);
    setmodel(dirt, "models/dirt.mdl");
    dirt.velocity = vel;
    vunit = normalize(own.velocity);
    vang = vectoangles(vunit);
    dirt.angles = ang;
    dirt.angles_y = 0.000;
    dirt.owner = own;
    dirt.think = dirt1;
    dirt.nextthink = time + 0.050;
};

// MoveTail
// function begins at statement 1592, parm_start=2053
// OP_LOAD_F	28	662	2099
// OP_BITAND	2099	228	2100
// OP_LOAD_F	28	182	2101
// OP_BITAND	2101	228	2102
// OP_NOT_F	2102	0	2103
// OP_AND	2100	2103	2104
// OP_IFNOT	2104	2	0
// OP_CALL0	1829	0	0
// OP_LOAD_ENT	28	547	2105
// OP_STORE_ENT	2105	2080	0
// OP_LOAD_V	28	113	2106
// OP_STORE_V	2106	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	2092	0
// OP_ADDRESS	28	662	2109
// OP_LOAD_F	28	182	2110
// OP_STOREP_F	2110	2109	0
// OP_LOAD_ENT	28	548	2111
// OP_ADDRESS	2111	563	2112
// OP_LOAD_ENT	28	548	2115
// OP_LOAD_V	2115	117	2116
// OP_STOREP_V	2116	2112	0
// OP_LOAD_F	28	182	2119
// OP_BITAND	2119	228	2120
// OP_LOAD_F	2080	182	2121
// OP_BITAND	2121	228	2122
// OP_AND	2120	2122	2123
// OP_STORE_V	28	4	0
// OP_CALL1	497	0	0
// OP_NOT_F	1	0	2124
// OP_AND	2123	2124	2125
// OP_IFNOT	2125	25	0
// OP_CALL0	466	0	0
// OP_LT	1	1930	2126
// OP_GT	2092	2127	2128
// OP_AND	2126	2128	2129
// OP_IFNOT	2129	14	0
// OP_LOAD_V	28	105	2130
// OP_STORE_V	2130	4	0
// OP_LOAD_V	28	105	2133
// OP_SUB_V	2133	2136	2139
// OP_STORE_V	2139	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_GT	70	1182	2142
// OP_IFNOT	2142	4	0
// OP_STORE_V	28	4	0
// OP_STORE_V	2143	7	0
// OP_CALL2	876	0	0
// OP_ADDRESS	28	182	2144
// OP_LOAD_F	28	182	2145
// OP_SUB_F	2145	228	2146
// OP_STOREP_F	2146	2144	0
// OP_CALL0	1829	0	0
// OP_GOTO	160	0	0
// OP_LOAD_F	28	182	2147
// OP_BITAND	2147	228	2148
// OP_NOT_F	2148	0	2149
// OP_IFNOT	2149	156	0
// OP_LOAD_ENT	28	547	2150
// OP_ADDRESS	2150	593	2151
// OP_STOREP_F	817	2151	0
// OP_LOAD_F	28	108	2152
// OP_LOAD_F	28	112	2153
// OP_LT	2152	2153	2154
// OP_IFNOT	2154	8	0
// OP_ADDRESS	28	592	2155
// OP_LOAD_F	28	592	2156
// OP_LOAD_F	28	112	2157
// OP_LOAD_F	28	108	2158
// OP_SUB_F	2157	2158	2159
// OP_ADD_F	2156	2159	2160
// OP_STOREP_F	2160	2155	0
// OP_LOAD_ENT	28	547	2161
// OP_STORE_V	2161	4	0
// OP_LOAD_V	28	105	2162
// OP_LOAD_V	28	555	2165
// OP_MUL_VF	2165	751	2168
// OP_SUB_V	2162	2168	2171
// OP_STORE_V	2171	7	0
// OP_CALL2	462	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	497	0	0
// OP_LOAD_F	28	683	2174
// OP_AND	2174	712	2175
// OP_NOT_F	2175	0	2176
// OP_AND	1	2176	2177
// OP_IFNOT	2177	108	0
// OP_ADDRESS	28	182	2178
// OP_LOAD_F	28	182	2179
// OP_ADD_F	2179	228	2180
// OP_STOREP_F	2180	2178	0
// OP_ADDRESS	28	644	2181
// OP_LOAD_F	28	644	2182
// OP_BITOR	2182	697	2183
// OP_STOREP_F	2183	2181	0
// OP_LOAD_F	2080	182	2184
// OP_BITAND	2184	228	2185
// OP_IFNOT	2185	5	0
// OP_ADDRESS	2080	182	2186
// OP_LOAD_F	2080	182	2187
// OP_SUB_F	2187	228	2188
// OP_STOREP_F	2188	2186	0
// OP_LOAD_ENT	28	548	2189
// OP_LOAD_V	2189	117	2190
// OP_STORE_V	2190	4	0
// OP_CALL1	461	0	0
// OP_LOAD_ENT	28	547	2193
// OP_STORE_V	2193	4	0
// OP_LOAD_V	28	105	2194
// OP_MUL_VF	59	751	2197
// OP_SUB_V	2194	2197	2200
// OP_STORE_V	2200	7	0
// OP_CALL2	462	0	0
// OP_LOAD_V	28	555	2203
// OP_STORE_V	2203	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	2056	0
// OP_LOAD_ENT	28	548	2206
// OP_LOAD_F	2206	119	2207
// OP_LOAD_ENT	28	547	2208
// OP_LOAD_F	2208	612	2209
// OP_SUB_F	2207	2209	2210
// OP_STORE_V	2210	4	0
// OP_CALL1	859	0	0
// OP_STORE_F	1	2057	0
// OP_STORE_V	2056	4	0
// OP_CALL1	461	0	0
// OP_LOAD_ENT	28	547	2211
// OP_ADDRESS	2211	555	2212
// OP_STOREP_V	59	2212	0
// OP_LOAD_F	28	661	2215
// OP_SUB_F	31	805	2216
// OP_LT	2215	2216	2217
// OP_LOAD_F	28	664	2218
// OP_SUB_F	31	1930	2219
// OP_LT	2218	2219	2220
// OP_AND	2217	2220	2221
// OP_IFNOT	2221	56	0
// OP_LOAD_F	28	592	2222
// OP_DIV_F	2222	2223	2224
// OP_STORE_F	2224	2094	0
// OP_GT	2094	819	2225
// OP_IFNOT	2225	2	0
// OP_STORE_F	819	2094	0
// OP_LOAD_ENT	28	548	2226
// OP_LOAD_F	2226	120	2227
// OP_STORE_V	2227	4	0
// OP_CALL1	499	0	0
// OP_LT	1	2228	2229
// OP_IFNOT	2229	7	0
// OP_STORE_V	28	4	0
// OP_STORE_V	337	7	0
// OP_STORE_V	2230	10	0
// OP_STORE_V	2094	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_CALL0	466	0	0
// OP_STORE_F	1	2097	0
// OP_LT	2097	1930	2231
// OP_IFNOT	2231	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	335	7	0
// OP_STORE_V	2232	10	0
// OP_STORE_V	2094	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_GOTO	25	0	0
// OP_LT	2097	2233	2234
// OP_IFNOT	2234	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	335	7	0
// OP_STORE_V	2235	10	0
// OP_STORE_V	2094	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_GOTO	16	0	0
// OP_LT	2097	2236	2237
// OP_IFNOT	2237	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	335	7	0
// OP_STORE_V	2238	10	0
// OP_STORE_V	2094	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_GOTO	7	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	335	7	0
// OP_STORE_V	2239	10	0
// OP_STORE_V	2094	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	661	2240
// OP_STOREP_F	31	2240	0
// OP_GOTO	13	0	0
// OP_LOAD_V	2080	105	2241
// OP_LOAD_V	28	105	2244
// OP_SUB_V	2241	2244	2247
// OP_STORE_V	2247	4	0
// OP_CALL1	468	0	0
// OP_MUL_VF	1	751	2250
// OP_STORE_V	2250	2053	0
// OP_STORE_V	2080	4	0
// OP_LOAD_V	28	105	2253
// OP_ADD_V	2253	2053	2256
// OP_STORE_V	2256	7	0
// OP_CALL2	462	0	0
// OP_LOAD_F	28	683	2259
// OP_AND	2259	712	2260
// OP_IFNOT	2260	5	0
// OP_ADDRESS	28	683	2261
// OP_LOAD_F	28	683	2262
// OP_SUB_F	2262	712	2263
// OP_STOREP_F	2263	2261	0
// OP_LOAD_F	28	644	2264
// OP_BITAND	2264	697	2265
// OP_LOAD_F	28	182	2266
// OP_BITAND	2266	228	2267
// OP_AND	2265	2267	2268
// OP_IFNOT	2268	93	0
// OP_LOAD_ENT	28	548	2269
// OP_LOAD_V	2269	117	2270
// OP_STORE_V	2270	4	0
// OP_CALL1	461	0	0
// OP_LT	64	1152	2273
// OP_IFNOT	2273	87	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	2274	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	407	2275
// OP_STOREP_S	1817	2275	0
// OP_STORE_V	28	4	0
// OP_STORE_V	30	7	0
// OP_STORE_V	30	10	0
// OP_STORE_V	821	13	0
// OP_CALL4	534	0	0
// OP_LOAD_F	28	152	2276
// OP_LT	2276	817	2277
// OP_IFNOT	2277	3	0
// OP_CALL0	1755	0	0
// OP_RETURN	817	0	0
// OP_LOAD_V	28	105	2278
// OP_STORE_V	2278	4	0
// OP_LOAD_V	28	105	2281
// OP_SUB_V	2281	2284	2287
// OP_STORE_V	2287	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	30	13	0
// OP_CALL4	475	0	0
// OP_GT	76	1182	2290
// OP_IFNOT	2290	16	0
// OP_ADDRESS	28	116	2291
// OP_LOAD_F	28	592	2292
// OP_DIV_F	2292	821	2293
// OP_STOREP_F	2293	2291	0
// OP_LOAD_F	28	116	2294
// OP_LT	2294	2295	2296
// OP_IFNOT	2296	4	0
// OP_ADDRESS	28	116	2297
// OP_STOREP_F	2295	2297	0
// OP_GOTO	6	0	0
// OP_LOAD_F	28	116	2298
// OP_GT	2298	2299	2300
// OP_IFNOT	2300	3	0
// OP_ADDRESS	28	116	2301
// OP_STOREP_F	2299	2301	0
// OP_LOAD_ENT	28	548	2302
// OP_LOAD_F	2302	598	2303
// OP_STORE_V	2303	4	0
// OP_CALL1	499	0	0
// OP_LT	1	845	2304
// OP_IFNOT	2304	7	0
// OP_LOAD_ENT	28	548	2305
// OP_ADDRESS	2305	598	2306
// OP_LOAD_ENT	28	548	2307
// OP_LOAD_F	2307	598	2308
// OP_MUL_F	2308	2309	2310
// OP_STOREP_F	2310	2306	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	2311
// OP_ADD_V	2311	1215	2314
// OP_STORE_V	2314	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	28	592	2317
// OP_LOAD_F	28	592	2318
// OP_MUL_F	2318	2319	2320
// OP_STOREP_F	2320	2317	0
// OP_ADDRESS	28	182	2321
// OP_LOAD_F	28	182	2322
// OP_SUB_F	2322	228	2323
// OP_STOREP_F	2323	2321	0
// OP_LOAD_F	28	598	2324
// OP_LT	2324	817	2325
// OP_LOAD_F	28	598	2326
// OP_GT	2326	1826	2327
// OP_AND	2325	2327	2328
// OP_IFNOT	2328	4	0
// OP_ADDRESS	28	598	2329
// OP_STOREP_F	1826	2329	0
// OP_GOTO	9	0	0
// OP_LOAD_F	28	598	2330
// OP_GT	2330	817	2331
// OP_LOAD_F	28	598	2332
// OP_LT	2332	855	2333
// OP_AND	2331	2333	2334
// OP_IFNOT	2334	3	0
// OP_ADDRESS	28	598	2335
// OP_STOREP_F	855	2335	0
// OP_RETURN	819	0	0
// OP_ADDRESS	28	644	2336
// OP_LOAD_F	28	644	2337
// OP_LOAD_F	28	644	2338
// OP_BITAND	2338	697	2339
// OP_SUB_F	2337	2339	2340
// OP_STOREP_F	2340	2336	0
// OP_LOAD_F	28	182	2341
// OP_BITAND	2341	228	2342
// OP_IFNOT	2342	80	0
// OP_STORE_F	817	2096	0
// OP_LOAD_V	28	105	2343
// OP_LOAD_ENT	28	547	2346
// OP_LOAD_V	2346	105	2347
// OP_SUB_V	2343	2347	2350
// OP_STORE_V	2350	2053	0
// OP_STORE_V	2053	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	2077	0
// OP_STORE_V	2053	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	2074	0
// OP_STORE_F	817	2055	0
// OP_STORE_V	2053	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	2053	0
// OP_LOAD_V	28	105	2353
// OP_MUL_VF	2053	841	2356
// OP_ADD_V	2353	2356	2359
// OP_ADD_V	2359	1529	2362
// OP_STORE_V	2362	2065	0
// OP_STORE_V	2065	4	0
// OP_SUB_V	2065	2365	2368
// OP_STORE_V	2368	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_LT	70	819	2371
// OP_IFNOT	2371	3	0
// OP_STORE_V	71	2065	0
// OP_GOTO	2	0	0
// OP_STORE_F	819	2096	0
// OP_STORE_V	2053	2071	0
// OP_LOAD_V	28	105	2372
// OP_MUL_VF	2071	751	2375
// OP_SUB_V	2372	2375	2378
// OP_ADD_V	2378	1529	2381
// OP_STORE_V	2381	2068	0
// OP_STORE_V	2065	4	0
// OP_STORE_V	2068	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_LT	70	819	2384
// OP_IFNOT	2384	6	0
// OP_LOAD_V	28	105	2385
// OP_MUL_VF	2053	841	2388
// OP_SUB_V	2385	2388	2391
// OP_ADD_V	2391	1529	2394
// OP_STORE_V	2394	2068	0
// OP_STORE_V	2068	4	0
// OP_SUB_V	2068	2365	2397
// OP_STORE_V	2397	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_LT	70	819	2400
// OP_IFNOT	2400	3	0
// OP_STORE_V	71	2068	0
// OP_GOTO	2	0	0
// OP_STORE_F	819	2096	0
// OP_SUB_V	2068	2065	2401
// OP_STORE_V	2401	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	2062	0
// OP_IFNOT	2096	8	0
// OP_STORE_V	2080	4	0
// OP_LOAD_V	28	105	2404
// OP_MUL_VF	2074	2077	2407
// OP_SUB_V	2404	2407	2410
// OP_STORE_V	2410	7	0
// OP_CALL2	462	0	0
// OP_GOTO	7	0	0
// OP_STORE_V	2080	4	0
// OP_LOAD_V	28	105	2413
// OP_MUL_VF	2062	2077	2416
// OP_ADD_V	2413	2416	2419
// OP_STORE_V	2419	7	0
// OP_CALL2	462	0	0
// OP_LOAD_F	28	182	2422
// OP_BITAND	2422	228	2423
// OP_NOT_F	2423	0	2424
// OP_IFNOT	2424	2	0
// OP_RETURN	819	0	0
// OP_LOAD_V	28	113	2425
// OP_STORE_V	2425	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	2053	0
// OP_LOAD_F	28	604	2428
// OP_LT	2092	1957	2429
// OP_LOAD_V	28	555	2430
// OP_ADD_V	2053	2430	2433
// OP_STORE_V	2433	4	0
// OP_CALL1	471	0	0
// OP_LT	1	883	2436
// OP_OR	2429	2436	2437
// OP_AND	2428	2437	2438
// OP_IFNOT	2438	12	0
// OP_LOAD_ENT	28	547	2439
// OP_STORE_V	2439	4	0
// OP_LOAD_ENT	28	547	2440
// OP_LOAD_V	2440	105	2441
// OP_LOAD_V	28	105	2444
// OP_LOAD_V	28	109	2447
// OP_SUB_V	2444	2447	2450
// OP_ADD_V	2441	2450	2453
// OP_STORE_V	2453	7	0
// OP_CALL2	462	0	0
// OP_GOTO	515	0	0
// OP_LOAD_V	28	105	2456
// OP_LOAD_ENT	28	547	2459
// OP_LOAD_V	2459	105	2460
// OP_SUB_V	2456	2460	2463
// OP_STORE_V	2463	2053	0
// OP_STORE_V	2053	4	0
// OP_CALL1	471	0	0
// OP_SUB_F	1	751	2466
// OP_STORE_F	2466	2077	0
// OP_LOAD_V	28	113	2467
// OP_STORE_V	2467	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	2092	0
// OP_STORE_V	2053	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	2053	0
// OP_LOAD_V	28	105	2470
// OP_LOAD_V	28	109	2473
// OP_SUB_V	2470	2473	2476
// OP_STORE_V	2476	4	0
// OP_CALL1	471	0	0
// OP_MUL_VF	2053	1	2479
// OP_STORE_V	2479	2053	0
// OP_LOAD_V	28	105	2482
// OP_LOAD_V	28	109	2485
// OP_NE_V	2482	2485	2488
// OP_IFNOT	2488	6	0
// OP_DIV_F	2092	778	2489
// OP_SUB_F	819	2489	2490
// OP_MUL_VF	2053	2490	2491
// OP_MUL_VF	2491	827	2494
// OP_STORE_V	2494	2053	0
// OP_LOAD_ENT	28	547	2497
// OP_LOAD_V	2497	555	2498
// OP_STORE_V	2498	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	2056	0
// OP_LOAD_F	28	182	2501
// OP_BITAND	2501	228	2502
// OP_IFNOT	2502	2	0
// OP_STORE_F	817	2056	0
// OP_STORE_V	2053	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	2059	0
// OP_LOAD_F	28	119	2503
// OP_STORE_V	2503	4	0
// OP_CALL1	859	0	0
// OP_STORE_V	1	4	0
// OP_STORE_V	2060	7	0
// OP_CALL2	860	0	0
// OP_STORE_F	1	2093	0
// OP_GT	2093	865	2504
// OP_IFNOT	2504	3	0
// OP_SUB_F	2093	867	2505
// OP_STORE_F	2505	2093	0
// OP_STORE_V	2060	4	0
// OP_ADD_F	2060	2093	2506
// OP_STORE_V	2506	4	0
// OP_CALL1	859	0	0
// OP_STORE_V	1	7	0
// OP_STORE_V	867	10	0
// OP_CALL3	1453	0	0
// OP_STORE_F	1	2093	0
// OP_LOAD_F	2080	192	2507
// OP_LOAD_F	28	611	2508
// OP_EQ_F	2508	715	2509
// OP_MUL_F	2509	821	2510
// OP_ADD_F	2510	819	2511
// OP_MUL_F	2507	2511	2512
// OP_STORE_F	2512	2088	0
// OP_LOAD_F	28	610	2513
// OP_EQ_F	2513	809	2514
// OP_IFNOT	2514	3	0
// OP_MUL_F	2088	821	2515
// OP_STORE_F	2515	2088	0
// OP_DIV_F	778	823	2516
// OP_GT	2092	2516	2517
// OP_LOAD_F	28	644	2518
// OP_BITAND	2518	699	2519
// OP_AND	2517	2519	2520
// OP_IFNOT	2520	15	0
// OP_LOAD_F	28	681	2521
// OP_SUB_F	31	2522	2523
// OP_LT	2521	2523	2524
// OP_IFNOT	2524	9	0
// OP_STORE_V	28	4	0
// OP_STORE_V	2525	7	0
// OP_CALL2	483	0	0
// OP_ADDRESS	28	644	2526
// OP_LOAD_F	28	644	2527
// OP_SUB_F	2527	699	2528
// OP_STOREP_F	2528	2526	0
// OP_GOTO	3	0	0
// OP_MUL_F	2088	821	2529
// OP_STORE_F	2529	2088	0
// OP_STORE_V	2057	4	0
// OP_LOAD_F	28	119	2530
// OP_STORE_V	2530	7	0
// OP_CALL2	860	0	0
// OP_STORE_F	1	2089	0
// OP_STORE_V	2089	4	0
// OP_CALL1	499	0	0
// OP_STORE_F	1	2089	0
// OP_GT	2089	865	2531
// OP_IFNOT	2531	3	0
// OP_SUB_F	867	2089	2532
// OP_STORE_F	2532	2089	0
// OP_STORE_V	2057	4	0
// OP_STORE_V	2060	7	0
// OP_CALL2	860	0	0
// OP_STORE_F	1	2095	0
// OP_STORE_V	2095	4	0
// OP_CALL1	499	0	0
// OP_STORE_F	1	2090	0
// OP_GT	2090	865	2533
// OP_IFNOT	2533	3	0
// OP_SUB_F	867	2090	2534
// OP_STORE_F	2534	2090	0
// OP_GT	2090	821	2535
// OP_LT	2089	2090	2536
// OP_AND	2535	2536	2537
// OP_IFNOT	2537	9	0
// OP_DIV_F	778	821	2538
// OP_LT	2092	2538	2539
// OP_MUL_F	2539	825	2540
// OP_STORE_F	2540	2094	0
// OP_SUB_F	2090	2089	2541
// OP_MUL_F	2541	781	2542
// OP_MUL_F	2088	2542	2543
// OP_STORE_F	2543	2088	0
// OP_GT	2090	827	2544
// OP_GT	2092	1957	2545
// OP_AND	2544	2545	2546
// OP_LOAD_F	28	182	2547
// OP_BITAND	2547	228	2548
// OP_AND	2546	2548	2549
// OP_NOT_F	719	0	2550
// OP_AND	2549	2550	2551
// OP_LOAD_F	28	604	2552
// OP_NOT_F	2552	0	2553
// OP_AND	2551	2553	2554
// OP_LOAD_S	28	129	2555
// OP_EQ_S	2555	880	2556
// OP_AND	2554	2556	2557
// OP_IFNOT	2557	96	0
// OP_DIV_F	2090	2558	2559
// OP_STORE_F	2559	2094	0
// OP_GT	2094	819	2560
// OP_IFNOT	2560	2	0
// OP_STORE_F	819	2094	0
// OP_LOAD_F	28	646	2561
// OP_SUB_F	31	799	2562
// OP_LT	2561	2562	2563
// OP_LOAD_S	28	129	2564
// OP_EQ_S	2564	880	2565
// OP_AND	2563	2565	2566
// OP_IFNOT	2566	70	0
// OP_LOAD_F	28	610	2567
// OP_EQ_F	2567	808	2568
// OP_IFNOT	2568	36	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	2569	10	0
// OP_MUL_F	2094	1930	2570
// OP_STORE_V	2570	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_CALL0	466	0	0
// OP_STORE_F	1	2097	0
// OP_LOAD_F	28	646	2571
// OP_MUL_F	799	821	2572
// OP_SUB_F	31	2572	2573
// OP_GT	2571	2573	2574
// OP_LT	2097	2575	2576
// OP_AND	2574	2576	2577
// OP_LOAD_S	28	129	2578
// OP_EQ_S	2578	880	2579
// OP_AND	2577	2579	2580
// OP_IFNOT	2580	16	0
// OP_LT	2097	1992	2581
// OP_IFNOT	2581	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	2582	10	0
// OP_STORE_V	2094	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_GOTO	7	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	2583	10	0
// OP_STORE_V	2094	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_GOTO	30	0	0
// OP_CALL0	466	0	0
// OP_MUL_F	1	823	2584
// OP_STORE_F	2584	2097	0
// OP_LE	2097	819	2585
// OP_IFNOT	2585	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	2586	10	0
// OP_STORE_V	2094	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_GOTO	18	0	0
// OP_LE	2097	821	2587
// OP_IFNOT	2587	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	2588	10	0
// OP_STORE_V	2094	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_GOTO	9	0	0
// OP_LE	2097	823	2589
// OP_IFNOT	2589	7	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	2590	10	0
// OP_STORE_V	2094	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	646	2591
// OP_STOREP_F	31	2591	0
// OP_IFNOT	735	14	0
// OP_LOAD_V	28	113	2592
// OP_STORE_V	2592	4	0
// OP_CALL1	471	0	0
// OP_DIV_F	1	778	2595
// OP_STORE_F	2595	2094	0
// OP_ADDRESS	28	113	2596
// OP_LOAD_V	28	113	2599
// OP_SUB_F	819	2094	2602
// OP_DIV_F	2602	1112	2603
// OP_MUL_F	788	2603	2604
// OP_ADD_F	2604	2605	2606
// OP_MUL_VF	2599	2606	2607
// OP_STOREP_V	2607	2596	0
// OP_GT	2090	827	2610
// OP_GT	2092	2611	2612
// OP_AND	2610	2612	2613
// OP_NOT_F	719	0	2614
// OP_AND	2613	2614	2615
// OP_LOAD_F	28	604	2616
// OP_NOT_F	2616	0	2617
// OP_AND	2615	2617	2618
// OP_CALL0	466	0	0
// OP_LT	1	2619	2620
// OP_AND	2618	2620	2621
// OP_LOAD_V	28	105	2622
// OP_SUB_V	2622	1535	2625
// OP_STORE_V	2625	4	0
// OP_CALL1	498	0	0
// OP_NE_F	1	292	2628
// OP_AND	2621	2628	2629
// OP_IFNOT	2629	140	0
// OP_DIV_F	2090	2558	2630
// OP_STORE_F	2630	2094	0
// OP_GT	2094	819	2631
// OP_IFNOT	2631	2	0
// OP_STORE_F	819	2094	0
// OP_LOAD_ENT	28	548	2632
// OP_LOAD_V	2632	117	2633
// OP_LOAD_V	28	580	2636
// OP_SUB_V	2633	2636	2639
// OP_STORE_V	2639	4	0
// OP_CALL1	461	0	0
// OP_NE_F	35	855	2642
// OP_IFNOT	2642	127	0
// OP_LOAD_F	28	610	2643
// OP_EQ_F	2643	808	2644
// OP_IFNOT	2644	39	0
// OP_CALL0	466	0	0
// OP_MUL_F	1	823	2645
// OP_STORE_F	2645	2079	0
// OP_STORE_V	2079	4	0
// OP_CALL1	495	0	0
// OP_ADD_F	2646	1	2647
// OP_STORE_F	2647	2079	0
// OP_LOAD_V	28	105	2648
// OP_SUB_V	2648	1666	2651
// OP_LOAD_V	28	555	2654
// OP_MUL_VF	2654	2657	2658
// OP_SUB_V	2651	2658	2661
// OP_STORE_V	2661	4	0
// OP_LOAD_V	28	113	2664
// OP_MUL_VF	2664	1182	2667
// OP_MUL_VF	65	2670	2671
// OP_ADD_V	2667	2671	2674
// OP_STORE_V	2674	7	0
// OP_STORE_V	2079	10	0
// OP_MUL_F	2094	2677	2678
// OP_STORE_V	2678	13	0
// OP_CALL4	504	0	0
// OP_LOAD_V	28	105	2679
// OP_SUB_V	2679	1666	2682
// OP_LOAD_V	28	555	2685
// OP_MUL_VF	2685	2657	2688
// OP_SUB_V	2682	2688	2691
// OP_STORE_V	2691	4	0
// OP_LOAD_V	28	113	2694
// OP_MUL_VF	2694	1182	2697
// OP_MUL_VF	65	2670	2700
// OP_SUB_V	2697	2700	2703
// OP_STORE_V	2703	7	0
// OP_STORE_V	2079	10	0
// OP_MUL_F	2094	2677	2706
// OP_STORE_V	2706	13	0
// OP_CALL4	504	0	0
// OP_GOTO	86	0	0
// OP_LOAD_F	28	610	2707
// OP_EQ_F	2707	809	2708
// OP_IFNOT	2708	41	0
// OP_CALL0	466	0	0
// OP_MUL_F	1	827	2709
// OP_STORE_F	2709	2079	0
// OP_STORE_V	2079	4	0
// OP_CALL1	495	0	0
// OP_ADD_F	825	1	2710
// OP_STORE_F	2710	2079	0
// OP_LOAD_V	28	105	2711
// OP_SUB_V	2711	1666	2714
// OP_LOAD_V	28	555	2717
// OP_MUL_VF	2717	2657	2720
// OP_SUB_V	2714	2720	2723
// OP_STORE_V	2723	4	0
// OP_LOAD_V	28	113	2726
// OP_MUL_VF	2726	1182	2729
// OP_MUL_VF	65	2670	2732
// OP_ADD_V	2729	2732	2735
// OP_ADD_V	2735	2738	2741
// OP_STORE_V	2741	7	0
// OP_STORE_V	2079	10	0
// OP_MUL_F	2094	1632	2744
// OP_STORE_V	2744	13	0
// OP_CALL4	504	0	0
// OP_LOAD_V	28	105	2745
// OP_SUB_V	2745	1666	2748
// OP_LOAD_V	28	555	2751
// OP_MUL_VF	2751	2657	2754
// OP_SUB_V	2748	2754	2757
// OP_STORE_V	2757	4	0
// OP_LOAD_V	28	113	2760
// OP_MUL_VF	2760	1182	2763
// OP_MUL_VF	65	2670	2766
// OP_SUB_V	2763	2766	2769
// OP_ADD_V	2769	2738	2772
// OP_STORE_V	2772	7	0
// OP_STORE_V	2079	10	0
// OP_MUL_F	2094	1632	2775
// OP_STORE_V	2775	13	0
// OP_CALL4	504	0	0
// OP_GOTO	43	0	0
// OP_LOAD_F	28	610	2776
// OP_EQ_F	2776	810	2777
// OP_IFNOT	2777	40	0
// OP_CALL0	466	0	0
// OP_MUL_F	1	829	2778
// OP_STORE_F	2778	2079	0
// OP_STORE_V	2079	4	0
// OP_CALL1	495	0	0
// OP_ADD_F	2779	1	2780
// OP_STORE_F	2780	2079	0
// OP_LOAD_V	28	105	2781
// OP_SUB_V	2781	1666	2784
// OP_LOAD_V	28	555	2787
// OP_MUL_VF	2787	2657	2790
// OP_SUB_V	2784	2790	2793
// OP_STORE_V	2793	4	0
// OP_LOAD_V	28	113	2796
// OP_MUL_VF	2796	1182	2799
// OP_MUL_VF	65	2670	2802
// OP_ADD_V	2799	2802	2805
// OP_ADD_V	2805	2738	2808
// OP_STORE_V	2808	7	0
// OP_STORE_V	2079	10	0
// OP_MUL_F	2094	2228	2811
// OP_STORE_V	2811	13	0
// OP_CALL4	504	0	0
// OP_LOAD_V	28	105	2812
// OP_SUB_V	2812	1666	2815
// OP_LOAD_V	28	555	2818
// OP_MUL_VF	2818	2657	2821
// OP_SUB_V	2815	2821	2824
// OP_STORE_V	2824	4	0
// OP_LOAD_V	28	113	2827
// OP_MUL_VF	2827	1182	2830
// OP_MUL_VF	65	2670	2833
// OP_SUB_V	2830	2833	2836
// OP_ADD_V	2836	2738	2839
// OP_STORE_V	2839	7	0
// OP_STORE_V	2079	10	0
// OP_MUL_F	2094	2228	2842
// OP_STORE_V	2842	13	0
// OP_CALL4	504	0	0
// OP_STORE_V	2057	4	0
// OP_STORE_V	2060	7	0
// OP_STORE_V	2088	10	0
// OP_CALL3	1453	0	0
// OP_STORE_F	1	2057	0
// OP_STORE_V	2060	4	0
// OP_STORE_V	2057	7	0
// OP_CALL2	860	0	0
// OP_STORE_F	1	2085	0
// OP_GT	2085	865	2843
// OP_IFNOT	2843	3	0
// OP_SUB_F	2085	867	2844
// OP_STORE_F	2844	2085	0
// OP_STORE_V	2060	4	0
// OP_LOAD_F	2080	590	2845
// OP_STORE_V	2845	7	0
// OP_CALL2	860	0	0
// OP_STORE_F	1	2086	0
// OP_GT	2086	865	2846
// OP_IFNOT	2846	3	0
// OP_SUB_F	2086	867	2847
// OP_STORE_F	2847	2086	0
// OP_STORE_V	2060	4	0
// OP_STORE_V	2057	7	0
// OP_CALL2	860	0	0
// OP_STORE_F	1	2084	0
// OP_GT	2084	821	2848
// OP_LT	2084	947	2849
// OP_OR	2848	2849	2850
// OP_IFNOT	2850	41	0
// OP_ADDRESS	2080	593	2851
// OP_LOAD_F	2080	593	2852
// OP_DIV_F	2092	778	2854
// OP_SUB_F	819	2854	2855
// OP_MUL_F	2853	2855	2856
// OP_MUL_F	2856	823	2857
// OP_ADD_F	2852	2857	2858
// OP_STOREP_F	2858	2851	0
// OP_LOAD_F	2080	593	2859
// OP_GT	2859	819	2860
// OP_DIV_F	778	823	2861
// OP_LT	2092	2861	2862
// OP_AND	2860	2862	2863
// OP_LOAD_F	28	594	2864
// OP_LT	2864	1632	2865
// OP_AND	2863	2865	2866
// OP_IFNOT	2866	11	0
// OP_ADDRESS	2080	593	2867
// OP_LOAD_F	2080	593	2868
// OP_ADD_F	2868	2869	2870
// OP_STOREP_F	2870	2867	0
// OP_ADDRESS	28	594	2871
// OP_LOAD_F	28	594	2872
// OP_MUL_F	1112	32	2873
// OP_ADD_F	2872	2873	2874
// OP_STOREP_F	2874	2871	0
// OP_GOTO	11	0	0
// OP_ADDRESS	28	594	2875
// OP_LOAD_F	28	594	2876
// OP_MUL_F	1632	32	2877
// OP_SUB_F	2876	2877	2878
// OP_STOREP_F	2878	2875	0
// OP_LOAD_F	28	594	2879
// OP_LT	2879	817	2880
// OP_IFNOT	2880	3	0
// OP_ADDRESS	28	594	2881
// OP_STOREP_F	817	2881	0
// OP_LOAD_F	2080	593	2882
// OP_STORE_F	2882	2078	0
// OP_GOTO	6	0	0
// OP_STORE_F	817	2078	0
// OP_ADDRESS	28	594	2883
// OP_STOREP_F	817	2883	0
// OP_ADDRESS	2080	593	2884
// OP_STOREP_F	817	2884	0
// OP_GT	2078	819	2885
// OP_IFNOT	2885	2	0
// OP_STORE_F	819	2078	0
// OP_GT	2084	780	2886
// OP_IFNOT	2886	6	0
// OP_SUB_F	2060	780	2887
// OP_STORE_V	2887	4	0
// OP_CALL1	859	0	0
// OP_STORE_F	1	2057	0
// OP_GOTO	8	0	0
// OP_MUL_F	1228	780	2888
// OP_LT	2084	2888	2889
// OP_IFNOT	2889	5	0
// OP_ADD_F	2060	780	2890
// OP_STORE_V	2890	4	0
// OP_CALL1	859	0	0
// OP_STORE_F	1	2057	0
// OP_ADDRESS	2080	590	2891
// OP_STOREP_F	2057	2891	0
// OP_STORE_V	2056	4	0
// OP_CALL1	461	0	0
// OP_MUL_F	2077	2078	2892
// OP_MUL_FV	2892	59	2893
// OP_STORE_V	2893	2053	0
// OP_LOAD_ENT	28	547	2896
// OP_LOAD_V	2896	105	2897
// OP_ADD_V	2897	2053	2900
// OP_STORE_V	2900	2062	0
// OP_LOAD_V	28	105	2903
// OP_SUB_V	2062	2903	2906
// OP_STORE_V	2906	4	0
// OP_CALL1	468	0	0
// OP_MUL_VF	1	751	2909
// OP_STORE_V	2909	2053	0
// OP_LOAD_ENT	28	547	2912
// OP_STORE_V	2912	4	0
// OP_LOAD_V	28	105	2913
// OP_ADD_V	2913	2053	2916
// OP_STORE_V	2916	7	0
// OP_CALL2	462	0	0
// OP_LOAD_ENT	28	547	2919
// OP_ADDRESS	2919	555	2920
// OP_STOREP_V	59	2920	0
// OP_ADDRESS	28	555	2923
// OP_LOAD_V	28	105	2926
// OP_LOAD_ENT	28	547	2929
// OP_LOAD_V	2929	105	2930
// OP_SUB_V	2926	2930	2933
// OP_STORE_V	2933	4	0
// OP_CALL1	468	0	0
// OP_STOREP_V	1	2923	0
// OP_STORE_V	2053	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	2056	0
// OP_LOAD_ENT	28	547	2936
// OP_ADDRESS	2936	117	2937
// OP_STOREP_V	2056	2937	0
// OP_RETURN	819	0	0
// OP_DONE	0	0	0
float () MoveTail = 
{
    local vector tail_vect;
    local vector tail_angles;
    local vector veh_angles;
    local vector v1;
    local vector vfront;
    local vector vback;
    local vector vtemp;
    local vector vtemp2;
    local float dist;
    local float this_slide;
    local float ftemp;
    local entity tail;
    local entity efloor;
    local entity temp_e;
    local float floor_dist;
    local float rear_dir;
    local float new_angle;
    local float old_angle;
    local float old_vel_z;
    local float this_yaw;
    local float steer_angle;
    local float slide_angle;
    local float forwardspeed;
    local float vspeed;
    local float targ_heading;
    local float vol;
    local float real_slide_angle;
    local float unstable_ground;
    local float rand;
    local string str;
    
    if((self.last_flags & FL_ONGROUND) && (!(self.flags & FL_ONGROUND)))
    {
        CarAirborne();
    }
    
    tail = self.veh_tail;
    vspeed = vlen(self.velocity);
    self.last_flags = self.flags;
    self.veh_body.old_angles = self.veh_body.angles;
    if(((self.flags & FL_ONGROUND) && (tail.flags & FL_ONGROUND)) && !checkbottom(self))
    {
        
        if((random() < 0.400) && (vspeed > 600.000))
        {
            traceline(self.origin, self.origin - '0.000 0.000 256.000', TRUE, self);
            
            if(trace_fraction > 0.500)
            {
                commentary(self, "voice/yeah.wav");
            }
            
        }
        
        self.flags = self.flags - FL_ONGROUND;
        CarAirborne();
    }
    else
    {
        
        if(!(self.flags & FL_ONGROUND))
        {
            self.veh_tail.slide_ratio = 0.000;
            
            if(self.origin_z < self.oldorigin_z)
            {
                self.last_jump_z = self.last_jump_z + (self.oldorigin_z - self.origin_z);
            }
            
            setorigin(self.veh_tail, self.origin - (self.veh_dir * TAIL_DIST));
            if(checkbottom(self) && (!(self.bot_flags && BF_STARTJUMP)))
            {
                self.flags = self.flags + FL_ONGROUND;
                self.racing_flags = self.racing_flags | QR_JUST_LANDED;
                
                if(tail.flags & FL_ONGROUND)
                {
                    tail.flags = tail.flags - FL_ONGROUND;
                }
                
                makevectors(self.veh_body.angles);
                setorigin(self.veh_tail, self.origin - (v_forward * TAIL_DIST));
                tail_angles = vectoangles(self.veh_dir);
                tail_angles_y = anglemod(self.veh_body.angles_y - self.veh_tail.tracking_speed);
                makevectors(tail_angles);
                self.veh_tail.veh_dir = v_forward;
                
                if((self.last_land < (time - SNDLEN_LAND)) && (self.leave_ground_time < (time - 0.400)))
                {
                    vol = self.last_jump_z / 64.000;
                    
                    if(vol > 1.000)
                    {
                        vol = 1.000;
                    }
                    
                    
                    if(fabs(self.veh_body.angles_z) < 60.000)
                    {
                        sound(self, CHAN_ITEM, "rally/ray/susp1.wav", vol, ATTN_STATIC);
                    }
                    
                    rand = random();
                    if(rand < 0.400)
                    {
                        sound(self, CHAN_WEAPON, "rally/bangbang.wav", vol, ATTN_STATIC);
                    }
                    else
                    {
                        if(rand < 0.600)
                        {
                            sound(self, CHAN_WEAPON, "rally/process/bang01.wav", vol, ATTN_STATIC);
                        }
                        else
                        {
                            if(rand < 0.800)
                            {
                                sound(self, CHAN_WEAPON, "rally/process/bang02.wav", vol, ATTN_STATIC);
                            }
                            else
                            {
                                sound(self, CHAN_WEAPON, "rally/process/bang03.wav", vol, ATTN_STATIC);
                            }
                            
                        }
                        
                    }
                    
                    self.last_land = time;
                }
                
            }
            else
            {
                tail_vect = (normalize(tail.origin - self.origin)) * TAIL_DIST;
                setorigin(tail, self.origin + tail_vect);
            }
            
            
            if(self.bot_flags && BF_STARTJUMP)
            {
                self.bot_flags = self.bot_flags - BF_STARTJUMP;
            }
            
        }
        
    }
    
    
    if((self.racing_flags & QR_JUST_LANDED) && (self.flags & FL_ONGROUND))
    {
        makevectors(self.veh_body.angles);
        
        if(0.000 < 0.200)
        {
            sound(self, CHAN_AUTO, "rally/process/rolltest.wav", 1.000, ATTN_STATIC);
            self.deathtype = "rolled_car";
            T_Damage(self, world, world, 2.000);
            
            if(self.health < 0.000)
            {
                DestroyVehicle();
                return 0.000;
            }
            
            traceline(self.origin, self.origin - '0.000 0.000 64.000', TRUE, world);
            
            if(0.000 > 0.500)
            {
                self.velocity_z = self.last_jump_z / 2.000;
                if(self.velocity_z < 220.000)
                {
                    self.velocity_z = 220.000;
                }
                else
                {
                    
                    if(self.velocity_z > 300.000)
                    {
                        self.velocity_z = 300.000;
                    }
                    
                }
                
            }
            
            
            if(fabs(self.veh_body.roll_velocity_z) < 15.000)
            {
                self.veh_body.roll_velocity_z = self.veh_body.roll_velocity_z * 1.200;
            }
            
            setorigin(self, self.origin + '0.000 0.000 1.000');
            self.last_jump_z = self.last_jump_z * 0.900;
            self.flags = self.flags - FL_ONGROUND;
            if((self.roll_velocity_z < 0.000) && (self.roll_velocity_z > -10.000))
            {
                self.roll_velocity_z = -10.000;
            }
            else
            {
                
                if((self.roll_velocity_z > 0.000) && (self.roll_velocity_z < 10.000))
                {
                    self.roll_velocity_z = 10.000;
                }
                
            }
            
            return 1.000;
        }
        
    }
    
    self.racing_flags = self.racing_flags - (self.racing_flags & QR_JUST_LANDED);
    
    if(self.flags & FL_ONGROUND)
    {
        unstable_ground = 0.000;
        tail_vect = self.origin - self.veh_tail.origin;
        dist = vlen(tail_vect);
        vtemp2 = normalize(tail_vect);
        tail_vect_z = 0.000;
        tail_vect = normalize(tail_vect);
        vfront = (self.origin + (tail_vect * 14.000)) + '0.000 0.000 12.000';
        traceline(vfront, vfront - '0.000 0.000 96.000', TRUE, self);
        if(trace_fraction < 1.000)
        {
            vfront = trace_endpos;
        }
        else
        {
            unstable_ground = 1.000;
        }
        
        vtemp = tail_vect;
        vback = (self.origin - (vtemp * TAIL_DIST)) + '0.000 0.000 12.000';
        traceline(vfront, vback, TRUE, self);
        
        if(trace_fraction < 1.000)
        {
            vback = (self.origin - (tail_vect * 14.000)) + '0.000 0.000 12.000';
        }
        
        traceline(vback, vback - '0.000 0.000 96.000', TRUE, self);
        if(trace_fraction < 1.000)
        {
            vback = trace_endpos;
        }
        else
        {
            unstable_ground = 1.000;
        }
        
        v1 = normalize(vback - vfront);
        if(unstable_ground)
        {
            setorigin(tail, self.origin - (vtemp2 * dist));
        }
        else
        {
            setorigin(tail, self.origin + (v1 * dist));
        }
        
    }
    
    
    if(!(self.flags & FL_ONGROUND))
    {
        return 1.000;
    }
    
    tail_vect = normalize(self.velocity);
    if(self.reversing && ((vspeed < 100.000) || ((vlen(tail_vect + self.veh_dir)) < 1.500)))
    {
        setorigin(self.veh_tail, self.veh_tail.origin + (self.origin - self.oldorigin));
    }
    else
    {
        tail_vect = self.origin - self.veh_tail.origin;
        dist = vlen(tail_vect) - TAIL_DIST;
        vspeed = vlen(self.velocity);
        tail_vect = normalize(tail_vect);
        tail_vect = tail_vect * (vlen(self.origin - self.oldorigin));
        
        if(self.origin != self.oldorigin)
        {
            tail_vect = (tail_vect * (1.000 - (vspeed / MAX_SPEED))) * 5.000;
        }
        
        tail_angles = vectoangles(self.veh_tail.veh_dir);
        
        if(self.flags & FL_ONGROUND)
        {
            tail_angles_x = 0.000;
        }
        
        veh_angles = vectoangles(normalize(tail_vect));
        targ_heading = angle_diff(anglemod(self.angles_y), 0.000);
        
        if(targ_heading > 180.000)
        {
            targ_heading = targ_heading - 360.000;
        }
        
        targ_heading = MoveToAngle(0.000 + targ_heading, anglemod(0.000 + targ_heading), 360.000);
        this_yaw = tail.yaw_speed * (((self.cam == CAM_INCAR) * 2.000) + 1.000);
        
        if(self.current_surface == SURF_ASPHALT)
        {
            this_yaw = this_yaw * 2.000;
        }
        
        
        if((vspeed > (MAX_SPEED / 3.000)) && (self.racing_flags & QR_FULL_TRACTION))
        {
            if(self.full_traction_time < (time - 30.000))
            {
                sprint(self, "Extra traction has worn out\n");
                self.racing_flags = self.racing_flags - QR_FULL_TRACTION;
            }
            else
            {
                this_yaw = this_yaw * 2.000;
            }
            
        }
        
        steer_angle = angle_diff(0.000, self.angles_y);
        steer_angle = fabs(steer_angle);
        
        if(steer_angle > 180.000)
        {
            steer_angle = 360.000 - steer_angle;
        }
        
        real_slide_angle = angle_diff(0.000, 0.000);
        slide_angle = fabs(real_slide_angle);
        
        if(slide_angle > 180.000)
        {
            slide_angle = 360.000 - slide_angle;
        }
        
        
        if((slide_angle > 2.000) && (steer_angle < slide_angle))
        {
            vol = (vspeed < (MAX_SPEED / 2.000)) * 4.000;
            this_yaw = this_yaw * ((slide_angle - steer_angle) * STEER_CORRECTION_RATIO);
        }
        
        
        if((((((slide_angle > 5.000) && (vspeed > 100.000)) && (self.flags & FL_ONGROUND)) && !hold_flag) && !self.reversing) && (self.classname == "player"))
        {
            vol = slide_angle / 45.000;
            
            if(vol > 1.000)
            {
                vol = 1.000;
            }
            
            
            if((self.slide_time < (time - SNDLEN_SLIDE)) && (self.classname == "player"))
            {
                if(self.current_surface == SURF_MUD)
                {
                    sound(self, CHAN_AUTO, "rally/skidmud.wav", vol * 0.400, ATTN_STATIC);
                    rand = random();
                    
                    if(((self.slide_time > (time - (SNDLEN_SLIDE * 2.000))) && (rand < 0.300)) && (self.classname == "player"))
                    {
                        if(rand < 0.150)
                        {
                            sound(self, CHAN_AUTO, "rally/process/drft02.wav", vol, ATTN_STATIC);
                        }
                        else
                        {
                            sound(self, CHAN_AUTO, "rally/ray/skidgrav.wav", vol, ATTN_STATIC);
                        }
                        
                    }
                    
                }
                else
                {
                    rand = random() * 3.000;
                    if(rand <= 1.000)
                    {
                        sound(self, CHAN_AUTO, "rally/ray/screech1.wav", vol, ATTN_STATIC);
                    }
                    else
                    {
                        if(rand <= 2.000)
                        {
                            sound(self, CHAN_AUTO, "rally/ray/screech2.wav", vol, ATTN_STATIC);
                        }
                        else
                        {
                            
                            if(rand <= 3.000)
                            {
                                sound(self, CHAN_AUTO, "rally/ray/screech3.wav", vol, ATTN_STATIC);
                            }
                            
                        }
                        
                    }
                    
                }
                
                self.slide_time = time;
            }
            
            
            if(lose_speed_on_slide)
            {
                vol = vlen(self.velocity) / MAX_SPEED;
                self.velocity = self.velocity * ((SLIDING_SLOWDOWN * ((1.000 - vol) / 20.000)) + 0.950);
            }
            
        }
        
        
        if((((((slide_angle > 5.000) && (vspeed > 50.000)) && !hold_flag) && !self.reversing) && (random() < 0.700)) && ((pointcontents(self.origin - '0.000 0.000 16.000')) != CONTENT_WATER))
        {
            vol = slide_angle / 45.000;
            
            if(vol > 1.000)
            {
                vol = 1.000;
            }
            
            makevectors(self.veh_body.angles - self.body_roll);
            
            if(deathmatch != 10.000)
            {
                if(self.current_surface == SURF_MUD)
                {
                    ftemp = random() * 3.000;
                    ftemp = 112.000 + floor(ftemp);
                    particle((self.origin - '0.000 0.000 8.000') - (self.veh_dir * 32.000), (self.velocity * 0.500) + (v_right * 16.000), ftemp, vol * 80.000);
                    particle((self.origin - '0.000 0.000 8.000') - (self.veh_dir * 32.000), (self.velocity * 0.500) - (v_right * 16.000), ftemp, vol * 80.000);
                }
                else
                {
                    if(self.current_surface == SURF_ASPHALT)
                    {
                        ftemp = random() * 5.000;
                        ftemp = 4.000 + floor(ftemp);
                        particle((self.origin - '0.000 0.000 8.000') - (self.veh_dir * 32.000), ((self.velocity * 0.500) + (v_right * 16.000)) + '0.000 0.000 10.000', ftemp, vol * 40.000);
                        particle((self.origin - '0.000 0.000 8.000') - (self.veh_dir * 32.000), ((self.velocity * 0.500) - (v_right * 16.000)) + '0.000 0.000 10.000', ftemp, vol * 40.000);
                    }
                    else
                    {
                        
                        if(self.current_surface == SURF_GRASS)
                        {
                            ftemp = random() * 6.000;
                            ftemp = 53.000 + floor(ftemp);
                            particle((self.origin - '0.000 0.000 8.000') - (self.veh_dir * 32.000), ((self.velocity * 0.500) + (v_right * 16.000)) + '0.000 0.000 10.000', ftemp, vol * 60.000);
                            particle((self.origin - '0.000 0.000 8.000') - (self.veh_dir * 32.000), ((self.velocity * 0.500) - (v_right * 16.000)) + '0.000 0.000 10.000', ftemp, vol * 60.000);
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        tail_angles_y = MoveToAngle(0.000, 0.000, this_yaw);
        new_angle = angle_diff(0.000, 0.000);
        
        if(new_angle > 180.000)
        {
            new_angle = new_angle - 360.000;
        }
        
        old_angle = angle_diff(0.000, tail.last_speed);
        
        if(old_angle > 180.000)
        {
            old_angle = old_angle - 360.000;
        }
        
        rear_dir = angle_diff(0.000, 0.000);
        if((rear_dir > 2.000) || (rear_dir < -2.000))
        {
            tail.slide_ratio = tail.slide_ratio + ((0.090 * (1.000 - (vspeed / MAX_SPEED))) * 3.000);
            if(((tail.slide_ratio > 1.000) && (vspeed < (MAX_SPEED / 3.000))) && (self.slide_donut_vel < 40.000))
            {
                tail.slide_ratio = tail.slide_ratio + 0.100;
                self.slide_donut_vel = self.slide_donut_vel + (20.000 * frametime);
            }
            else
            {
                self.slide_donut_vel = self.slide_donut_vel - (40.000 * frametime);
                
                if(self.slide_donut_vel < 0.000)
                {
                    self.slide_donut_vel = 0.000;
                }
                
            }
            
            this_slide = tail.slide_ratio;
        }
        else
        {
            this_slide = 0.000;
            self.slide_donut_vel = 0.000;
            tail.slide_ratio = 0.000;
        }
        
        
        if(this_slide > 1.000)
        {
            this_slide = 1.000;
        }
        
        if(rear_dir > MAX_SLIDING_ANGLE)
        {
            tail_angles_y = anglemod(0.000 - MAX_SLIDING_ANGLE);
        }
        else
        {
            
            if(rear_dir < (-1.000 * MAX_SLIDING_ANGLE))
            {
                tail_angles_y = anglemod(0.000 + MAX_SLIDING_ANGLE);
            }
            
        }
        
        tail.last_speed = 0.000;
        makevectors(tail_angles);
        tail_vect = (dist * this_slide) * v_forward;
        v1 = self.veh_tail.origin + tail_vect;
        tail_vect = (normalize(v1 - self.origin)) * TAIL_DIST;
        setorigin(self.veh_tail, self.origin + tail_vect);
    }
    
    self.veh_tail.veh_dir = v_forward;
    self.veh_dir = normalize(self.origin - self.veh_tail.origin);
    tail_angles = vectoangles(tail_vect);
    self.veh_tail.angles = tail_angles;
    return 1.000;
};

// MoveWheels
// function begins at statement 2556, parm_start=2940
// OP_LOAD_ENT	28	552	2945
// OP_NE_E	2945	30	2946
// OP_IFNOT	2946	25	0
// OP_STORE_V	28	4	0
// OP_LOAD_ENT	28	552	2947
// OP_STORE_V	2947	7	0
// OP_MUL_F	748	825	2948
// OP_STORE_V	2948	10	0
// OP_MUL_F	749	829	2949
// OP_STORE_V	2949	13	0
// OP_STORE_V	817	16	0
// OP_CALL5	1441	0	0
// OP_LOAD_V	28	105	2950
// OP_STORE_V	2950	4	0
// OP_LOAD_ENT	28	552	2953
// OP_LOAD_V	2953	105	2954
// OP_STORE_V	2954	7	0
// OP_STORE_V	817	10	0
// OP_LOAD_ENT	28	552	2957
// OP_STORE_V	2957	13	0
// OP_CALL4	475	0	0
// OP_LT	70	819	2958
// OP_IFNOT	2958	5	0
// OP_LOAD_ENT	28	552	2959
// OP_STORE_V	2959	4	0
// OP_STORE_V	71	7	0
// OP_CALL2	462	0	0
// OP_LOAD_ENT	28	551	2960
// OP_NE_E	2960	30	2961
// OP_IFNOT	2961	26	0
// OP_STORE_V	28	4	0
// OP_LOAD_ENT	28	551	2962
// OP_STORE_V	2962	7	0
// OP_MUL_F	1228	748	2963
// OP_MUL_F	2963	825	2964
// OP_STORE_V	2964	10	0
// OP_MUL_F	749	829	2965
// OP_STORE_V	2965	13	0
// OP_STORE_V	817	16	0
// OP_CALL5	1441	0	0
// OP_LOAD_V	28	105	2966
// OP_STORE_V	2966	4	0
// OP_LOAD_ENT	28	551	2969
// OP_LOAD_V	2969	105	2970
// OP_STORE_V	2970	7	0
// OP_STORE_V	817	10	0
// OP_LOAD_ENT	28	551	2973
// OP_STORE_V	2973	13	0
// OP_CALL4	475	0	0
// OP_LT	70	819	2974
// OP_IFNOT	2974	5	0
// OP_LOAD_ENT	28	551	2975
// OP_STORE_V	2975	4	0
// OP_STORE_V	71	7	0
// OP_CALL2	462	0	0
// OP_LOAD_ENT	28	553	2976
// OP_NE_E	2976	30	2977
// OP_IFNOT	2977	24	0
// OP_STORE_V	28	4	0
// OP_LOAD_ENT	28	553	2978
// OP_STORE_V	2978	7	0
// OP_STORE_V	817	10	0
// OP_MUL_F	749	855	2979
// OP_STORE_V	2979	13	0
// OP_STORE_V	817	16	0
// OP_CALL5	1441	0	0
// OP_LOAD_V	28	105	2980
// OP_STORE_V	2980	4	0
// OP_LOAD_ENT	28	553	2983
// OP_LOAD_V	2983	105	2984
// OP_STORE_V	2984	7	0
// OP_STORE_V	817	10	0
// OP_LOAD_ENT	28	553	2987
// OP_STORE_V	2987	13	0
// OP_CALL4	475	0	0
// OP_LT	70	819	2988
// OP_IFNOT	2988	5	0
// OP_LOAD_ENT	28	553	2989
// OP_STORE_V	2989	4	0
// OP_STORE_V	71	7	0
// OP_CALL2	462	0	0
// OP_STORE_V	949	4	0
// OP_CALL1	501	0	0
// OP_NOT_F	1	0	2990
// OP_IFNOT	2990	82	0
// OP_LOAD_V	28	555	2991
// OP_STORE_V	2991	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	2940	0
// OP_LOAD_ENT	28	549	2994
// OP_ADDRESS	2994	117	2995
// OP_LOAD_ENT	28	548	2998
// OP_LOAD_V	2998	117	2999
// OP_LOAD_V	28	580	3002
// OP_SUB_V	2999	3002	3005
// OP_STOREP_V	3005	2995	0
// OP_LOAD_ENT	28	548	3008
// OP_STORE_V	3008	4	0
// OP_LOAD_ENT	28	549	3009
// OP_STORE_V	3009	7	0
// OP_STORE_V	817	10	0
// OP_LOAD_F	28	631	3010
// OP_STORE_V	3010	13	0
// OP_LOAD_F	28	632	3011
// OP_STORE_V	3011	16	0
// OP_CALL5	1441	0	0
// OP_LOAD_ENT	28	550	3012
// OP_ADDRESS	3012	117	3013
// OP_LOAD_ENT	28	548	3016
// OP_LOAD_V	3016	117	3017
// OP_LOAD_V	28	580	3020
// OP_SUB_V	3017	3020	3023
// OP_STOREP_V	3023	3013	0
// OP_LOAD_ENT	28	548	3026
// OP_STORE_V	3026	4	0
// OP_LOAD_ENT	28	550	3027
// OP_STORE_V	3027	7	0
// OP_STORE_V	817	10	0
// OP_LOAD_F	28	635	3028
// OP_STORE_V	3028	13	0
// OP_LOAD_F	28	636	3029
// OP_STORE_V	3029	16	0
// OP_CALL5	1441	0	0
// OP_LOAD_ENT	28	549	3030
// OP_STORE_ENT	3030	2943	0
// OP_LOAD_V	28	575	3031
// OP_STORE_V	3031	4	0
// OP_CALL1	471	0	0
// OP_DIV_F	1	821	3034
// OP_STORE_V	3034	4	0
// OP_CALL1	495	0	0
// OP_STORE_F	1	2944	0
// OP_GT	2944	839	3035
// OP_IFNOT	3035	2	0
// OP_STORE_F	1228	2944	0
// OP_LOAD_F	28	604	3036
// OP_IFNOT	3036	6	0
// OP_ADDRESS	2943	132	3037
// OP_LOAD_F	2943	132	3038
// OP_ADD_F	3038	2944	3039
// OP_STOREP_F	3039	3037	0
// OP_GOTO	5	0	0
// OP_ADDRESS	2943	132	3040
// OP_LOAD_F	2943	132	3041
// OP_SUB_F	3041	2944	3042
// OP_STOREP_F	3042	3040	0
// OP_LOAD_F	2943	132	3043
// OP_LT	3043	817	3044
// OP_IFNOT	3044	6	0
// OP_ADDRESS	2943	132	3045
// OP_LOAD_F	2943	132	3046
// OP_ADD_F	3046	839	3047
// OP_STOREP_F	3047	3045	0
// OP_GOTO	-7	0	0
// OP_LOAD_F	2943	132	3048
// OP_GT	3048	829	3049
// OP_IFNOT	3049	6	0
// OP_ADDRESS	2943	132	3050
// OP_LOAD_F	2943	132	3051
// OP_SUB_F	3051	839	3052
// OP_STOREP_F	3052	3050	0
// OP_GOTO	-7	0	0
// OP_LOAD_ENT	28	550	3053
// OP_ADDRESS	3053	132	3054
// OP_LOAD_F	2943	132	3055
// OP_STOREP_F	3055	3054	0
// OP_LOAD_ENT	28	554	3056
// OP_NE_E	3056	30	3057
// OP_IFNOT	3057	45	0
// OP_LOAD_ENT	28	548	3058
// OP_LOAD_V	3058	117	3059
// OP_STORE_V	3059	4	0
// OP_CALL1	461	0	0
// OP_LOAD_F	28	628	3062
// OP_EQ_F	3062	823	3063
// OP_LOAD_F	28	628	3064
// OP_EQ_F	3064	827	3065
// OP_OR	3063	3065	3066
// OP_IFNOT	3066	10	0
// OP_LOAD_ENT	28	554	3067
// OP_STORE_V	3067	4	0
// OP_LOAD_ENT	28	548	3068
// OP_LOAD_V	3068	105	3069
// OP_MUL_VF	62	760	3072
// OP_ADD_V	3069	3072	3075
// OP_STORE_V	3075	7	0
// OP_CALL2	462	0	0
// OP_GOTO	10	0	0
// OP_LOAD_ENT	28	554	3078
// OP_STORE_V	3078	4	0
// OP_LOAD_ENT	28	548	3079
// OP_LOAD_V	3079	105	3080
// OP_MUL_F	760	3083	3084
// OP_MUL_VF	62	3084	3085
// OP_ADD_V	3080	3085	3088
// OP_STORE_V	3088	7	0
// OP_CALL2	462	0	0
// OP_LOAD_F	28	154	3091
// OP_EQ_F	3091	277	3092
// OP_IFNOT	3092	9	0
// OP_LOAD_ENT	28	554	3093
// OP_STORE_V	3093	4	0
// OP_LOAD_ENT	28	554	3094
// OP_LOAD_V	3094	105	3095
// OP_MUL_VF	62	843	3098
// OP_SUB_V	3095	3098	3101
// OP_STORE_V	3101	7	0
// OP_CALL2	462	0	0
// OP_LOAD_ENT	28	554	3104
// OP_ADDRESS	3104	117	3105
// OP_LOAD_ENT	28	548	3108
// OP_LOAD_V	3108	117	3109
// OP_STOREP_V	3109	3105	0
// OP_DONE	0	0	0
void () MoveWheels = 
{
    local vector heading;
    local entity w;
    local float dist;
    
    if(self.hl_r != world)
    {
        SetVehPosition(self, self.hl_r, VEH_WIDTH * 4.000, VEH_LENGTH * 6.000, 0.000);
        traceline(self.origin, self.hl_r.origin, 0.000, self.hl_r);
        
        if(trace_fraction < 1.000)
        {
            setorigin(self.hl_r, trace_endpos);
        }
        
    }
    
    
    if(self.hl_l != world)
    {
        SetVehPosition(self, self.hl_l, (-1.000 * VEH_WIDTH) * 4.000, VEH_LENGTH * 6.000, 0.000);
        traceline(self.origin, self.hl_l.origin, 0.000, self.hl_l);
        
        if(trace_fraction < 1.000)
        {
            setorigin(self.hl_l, trace_endpos);
        }
        
    }
    
    
    if(self.hl_m != world)
    {
        SetVehPosition(self, self.hl_m, 0.000, VEH_LENGTH * 10.000, 0.000);
        traceline(self.origin, self.hl_m.origin, 0.000, self.hl_m);
        
        if(trace_fraction < 1.000)
        {
            setorigin(self.hl_m, trace_endpos);
        }
        
    }
    
    
    if(!cvar("deathmatch"))
    {
        heading = vectoangles(self.veh_dir);
        self.fwhl.angles = self.veh_body.angles - self.body_roll;
        SetVehPosition(self.veh_body, self.fwhl, 0.000, self.fwhl_offset_y, self.fwhl_offset_z);
        self.rwhl.angles = self.veh_body.angles - self.body_roll;
        SetVehPosition(self.veh_body, self.rwhl, 0.000, self.rwhl_offset_y, self.rwhl_offset_z);
        w = self.fwhl;
        dist = floor(vlen(self.lastmove) / 2.000);
        
        if(dist > 7.000)
        {
            dist = -1.000;
        }
        
        if(self.reversing)
        {
            w.skin = w.skin + dist;
        }
        else
        {
            w.skin = w.skin - dist;
        }
        
        
        while(w.skin < 0.000)
        {
            w.skin = w.skin + 7.000;
        }
        
        
        while(w.skin > 6.000)
        {
            w.skin = w.skin - 7.000;
        }
        
        self.rwhl.skin = w.skin;
    }
    
    
    if(self.gun != world)
    {
        makevectors(self.veh_body.angles);
        if((self.car_index == 3.000) || (self.car_index == 5.000))
        {
            setorigin(self.gun, self.veh_body.origin + (v_up * GUN_ZOFS));
        }
        else
        {
            setorigin(self.gun, self.veh_body.origin + (v_up * (GUN_ZOFS * 0.750)));
        }
        
        
        if(self.weapon == IT_ROOBAR)
        {
            setorigin(self.gun, self.gun.origin - (v_up * 8.000));
        }
        
        self.gun.angles = self.veh_body.angles;
    }
    
};

// ReduceVelocity
// function begins at statement 2770, parm_start=3113
// OP_LOAD_V	3113	113	3116
// OP_STORE_V	3116	4	0
// OP_CALL1	471	0	0
// OP_SUB_F	819	3114	3119
// OP_MUL_F	1	3119	3120
// OP_STORE_F	3120	3115	0
// OP_ADDRESS	3113	113	3121
// OP_LOAD_V	3113	113	3124
// OP_STORE_V	3124	4	0
// OP_CALL1	468	0	0
// OP_MUL_VF	1	3115	3127
// OP_STOREP_V	3127	3121	0
// OP_DONE	0	0	0
void (entity e, float ratio) ReduceVelocity = 
{
    local float new_length;
    new_length = vlen(e.velocity) * (1.000 - ratio);
    e.velocity = normalize(e.velocity) * new_length;
};

// SetPrevSurfAngle
// function begins at statement 2783, parm_start=3131
// OP_ADDRESS	28	619	3132
// OP_LOAD_F	28	618	3133
// OP_STOREP_F	3133	3132	0
// OP_ADDRESS	28	618	3134
// OP_LOAD_F	28	617	3135
// OP_STOREP_F	3135	3134	0
// OP_ADDRESS	28	617	3136
// OP_LOAD_F	28	616	3137
// OP_STOREP_F	3137	3136	0
// OP_ADDRESS	28	616	3138
// OP_LOAD_F	28	615	3139
// OP_STOREP_F	3139	3138	0
// OP_ADDRESS	28	614	3140
// OP_STOREP_F	31	3140	0
// OP_ADDRESS	28	615	3141
// OP_STOREP_F	3131	3141	0
// OP_DONE	0	0	0
void (float newangle) SetPrevSurfAngle = 
{
    self.prev_surfangle5 = self.prev_surfangle4;
    self.prev_surfangle4 = self.prev_surfangle3;
    self.prev_surfangle3 = self.prev_surfangle2;
    self.prev_surfangle2 = self.prev_surfangle1;
    self.last_prevsurf = time;
    self.prev_surfangle1 = newangle;
};

// SetSurfaceAngle
// function begins at statement 2800, parm_start=3143
// OP_LOAD_F	28	558	3167
// OP_GT	3167	2236	3168
// OP_LOAD_F	28	558	3169
// OP_LT	3169	3170	3171
// OP_OR	3168	3171	3172
// OP_IFNOT	3172	2	0
// OP_RETURN	817	0	0
// OP_LOAD_F	28	182	3173
// OP_BITAND	3173	228	3174
// OP_NOT_F	3174	0	3175
// OP_IFNOT	3175	2	0
// OP_RETURN	817	0	0
// OP_STORE_V	3176	4	0
// OP_CALL1	501	0	0
// OP_STORE_F	1	3162	0
// OP_LOAD_V	28	105	3177
// OP_LOAD_V	28	109	3180
// OP_SUB_V	3177	3180	3183
// OP_STORE_V	3183	4	0
// OP_CALL1	471	0	0
// OP_GT	1	817	3186
// OP_IFNOT	3186	195	0
// OP_LOAD_V	28	113	3187
// OP_STORE_V	3187	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	3166	0
// OP_GT	3166	1885	3190
// OP_IFNOT	3190	74	0
// OP_LOAD_V	28	113	3191
// OP_STORE_V	3191	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	3156	0
// OP_STORE_V	3156	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	3156	0
// OP_LOAD_ENT	28	548	3194
// OP_LOAD_F	3194	119	3195
// OP_STORE_V	3195	4	0
// OP_STORE_V	3157	7	0
// OP_CALL2	860	0	0
// OP_STORE_F	1	3165	0
// OP_GT	3165	827	3196
// OP_IFNOT	3196	14	0
// OP_ADDRESS	28	584	3197
// OP_LOAD_F	28	584	3198
// OP_DIV_F	3166	778	3199
// OP_MUL_F	1380	3199	3200
// OP_MUL_F	3200	32	3201
// OP_ADD_F	3198	3201	3202
// OP_STOREP_F	3202	3197	0
// OP_LOAD_F	28	584	3203
// OP_GT	3203	845	3204
// OP_IFNOT	3204	3	0
// OP_ADDRESS	28	584	3205
// OP_STOREP_F	845	3205	0
// OP_GOTO	45	0	0
// OP_LT	3165	1483	3206
// OP_IFNOT	3206	14	0
// OP_ADDRESS	28	584	3207
// OP_LOAD_F	28	584	3208
// OP_DIV_F	3166	778	3209
// OP_MUL_F	1380	3209	3210
// OP_MUL_F	3210	32	3211
// OP_SUB_F	3208	3211	3212
// OP_STOREP_F	3212	3207	0
// OP_LOAD_F	28	584	3213
// OP_LT	3213	3214	3215
// OP_IFNOT	3215	3	0
// OP_ADDRESS	28	584	3216
// OP_STOREP_F	3214	3216	0
// OP_GOTO	30	0	0
// OP_LOAD_F	28	584	3217
// OP_STORE_V	3217	4	0
// OP_CALL1	499	0	0
// OP_GT	1	817	3218
// OP_IFNOT	3218	25	0
// OP_LOAD_F	28	584	3219
// OP_LT	3219	817	3220
// OP_IFNOT	3220	12	0
// OP_ADDRESS	28	584	3221
// OP_LOAD_F	28	584	3222
// OP_MUL_F	2522	32	3223
// OP_ADD_F	3222	3223	3224
// OP_STOREP_F	3224	3221	0
// OP_LOAD_F	28	584	3225
// OP_GT	3225	817	3226
// OP_IFNOT	3226	3	0
// OP_ADDRESS	28	584	3227
// OP_STOREP_F	817	3227	0
// OP_GOTO	11	0	0
// OP_ADDRESS	28	584	3228
// OP_LOAD_F	28	584	3229
// OP_MUL_F	2522	32	3230
// OP_SUB_F	3229	3230	3231
// OP_STOREP_F	3231	3228	0
// OP_LOAD_F	28	584	3232
// OP_LT	3232	817	3233
// OP_IFNOT	3233	3	0
// OP_ADDRESS	28	584	3234
// OP_STOREP_F	817	3234	0
// OP_GOTO	30	0	0
// OP_LOAD_F	28	584	3235
// OP_STORE_V	3235	4	0
// OP_CALL1	499	0	0
// OP_GT	1	817	3236
// OP_IFNOT	3236	25	0
// OP_LOAD_F	28	584	3237
// OP_LT	3237	817	3238
// OP_IFNOT	3238	12	0
// OP_ADDRESS	28	584	3239
// OP_LOAD_F	28	584	3240
// OP_MUL_F	2522	32	3241
// OP_ADD_F	3240	3241	3242
// OP_STOREP_F	3242	3239	0
// OP_LOAD_F	28	584	3243
// OP_GT	3243	817	3244
// OP_IFNOT	3244	3	0
// OP_ADDRESS	28	584	3245
// OP_STOREP_F	817	3245	0
// OP_GOTO	11	0	0
// OP_ADDRESS	28	584	3246
// OP_LOAD_F	28	584	3247
// OP_MUL_F	2522	32	3248
// OP_SUB_F	3247	3248	3249
// OP_STOREP_F	3249	3246	0
// OP_LOAD_F	28	584	3250
// OP_LT	3250	817	3251
// OP_IFNOT	3251	3	0
// OP_ADDRESS	28	584	3252
// OP_STOREP_F	817	3252	0
// OP_ADDRESS	28	583	3253
// OP_LOAD_F	28	583	3254
// OP_LOAD_F	28	584	3255
// OP_SUB_F	3254	3255	3256
// OP_STOREP_F	3256	3253	0
// OP_LOAD_F	28	610	3257
// OP_NE_F	3257	809	3258
// OP_IFNOT	3258	72	0
// OP_ADDRESS	28	581	3259
// OP_LOAD_F	28	581	3260
// OP_LOAD_F	28	586	3261
// OP_LOAD_V	28	113	3262
// OP_STORE_V	3262	4	0
// OP_CALL1	471	0	0
// OP_DIV_F	1	778	3265
// OP_MUL_F	3261	3265	3266
// OP_CALL0	466	0	0
// OP_MUL_F	1	821	3267
// OP_MUL_F	3266	3267	3268
// OP_LOAD_F	28	611	3269
// OP_EQ_F	3269	715	3270
// OP_ADD_F	3270	819	3271
// OP_DIV_F	819	3271	3272
// OP_MUL_F	3268	3272	3273
// OP_ADD_F	3260	3273	3274
// OP_STOREP_F	3274	3259	0
// OP_ADDRESS	28	583	3275
// OP_LOAD_F	28	583	3276
// OP_LOAD_F	28	588	3277
// OP_LOAD_V	28	113	3278
// OP_STORE_V	3278	4	0
// OP_CALL1	471	0	0
// OP_DIV_F	1	778	3281
// OP_MUL_F	3277	3281	3282
// OP_CALL0	466	0	0
// OP_MUL_F	1	821	3283
// OP_MUL_F	3282	3283	3284
// OP_LOAD_F	28	611	3285
// OP_EQ_F	3285	715	3286
// OP_ADD_F	3286	819	3287
// OP_DIV_F	819	3287	3288
// OP_MUL_F	3284	3288	3289
// OP_ADD_F	3276	3289	3290
// OP_STOREP_F	3290	3275	0
// OP_LOAD_F	28	581	3291
// OP_STORE_V	3291	4	0
// OP_CALL1	499	0	0
// OP_GT	1	1182	3292
// OP_IFNOT	3292	13	0
// OP_ADDRESS	28	586	3293
// OP_LOAD_F	28	586	3294
// OP_MUL_F	1228	3294	3295
// OP_STOREP_F	3295	3293	0
// OP_ADDRESS	28	581	3296
// OP_LOAD_F	28	581	3297
// OP_LOAD_F	28	581	3298
// OP_STORE_V	3298	4	0
// OP_CALL1	499	0	0
// OP_DIV_F	3297	1	3299
// OP_MUL_F	3299	821	3300
// OP_STOREP_F	3300	3296	0
// OP_LOAD_F	28	583	3301
// OP_STORE_V	3301	4	0
// OP_CALL1	499	0	0
// OP_GT	1	827	3302
// OP_IFNOT	3302	13	0
// OP_ADDRESS	28	588	3303
// OP_LOAD_F	28	588	3304
// OP_MUL_F	1228	3304	3305
// OP_STOREP_F	3305	3303	0
// OP_ADDRESS	28	583	3306
// OP_LOAD_F	28	583	3307
// OP_LOAD_F	28	583	3308
// OP_STORE_V	3308	4	0
// OP_CALL1	499	0	0
// OP_DIV_F	3307	1	3309
// OP_MUL_F	3309	821	3310
// OP_STOREP_F	3310	3306	0
// OP_GOTO	3	0	0
// OP_ADDRESS	28	580	3311
// OP_STOREP_V	926	3311	0
// OP_ADDRESS	28	583	3314
// OP_LOAD_F	28	583	3315
// OP_LOAD_F	28	584	3316
// OP_ADD_F	3315	3316	3317
// OP_STOREP_F	3317	3314	0
// OP_LOAD_V	28	555	3318
// OP_STORE_V	3318	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	3159	0
// OP_STORE_F	817	3161	0
// OP_STORE_F	817	3159	0
// OP_STORE_V	3159	4	0
// OP_CALL1	461	0	0
// OP_LOAD_V	28	105	3321
// OP_MUL_VF	65	841	3324
// OP_SUB_V	3321	3324	3327
// OP_STORE_V	3327	3144	0
// OP_MUL_FV	3330	62	3331
// OP_ADD_V	3144	3331	3334
// OP_STORE_V	3334	3150	0
// OP_MUL_FV	3337	62	3338
// OP_SUB_V	3144	3338	3341
// OP_STORE_V	3341	3153	0
// OP_STORE_V	3150	4	0
// OP_STORE_V	3153	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_EQ_F	70	819	3344
// OP_IFNOT	3344	3	0
// OP_RETURN	817	0	0
// OP_GOTO	9	0	0
// OP_SUB_V	3144	71	3345
// OP_STORE_V	3345	4	0
// OP_CALL1	471	0	0
// OP_GT	1	3143	3348
// OP_IFNOT	3348	3	0
// OP_RETURN	817	0	0
// OP_GOTO	2	0	0
// OP_STORE_V	71	3144	0
// OP_LOAD_V	28	105	3349
// OP_MUL_VF	65	841	3352
// OP_ADD_V	3349	3352	3355
// OP_STORE_V	3355	3147	0
// OP_MUL_FV	3330	62	3358
// OP_ADD_V	3147	3358	3361
// OP_STORE_V	3361	3150	0
// OP_MUL_FV	3337	62	3364
// OP_SUB_V	3147	3364	3367
// OP_STORE_V	3367	3153	0
// OP_STORE_V	3150	4	0
// OP_STORE_V	3153	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_EQ_F	70	819	3370
// OP_IFNOT	3370	3	0
// OP_RETURN	817	0	0
// OP_GOTO	9	0	0
// OP_SUB_V	3147	71	3371
// OP_STORE_V	3371	4	0
// OP_CALL1	471	0	0
// OP_GT	1	3143	3374
// OP_IFNOT	3374	3	0
// OP_RETURN	817	0	0
// OP_GOTO	2	0	0
// OP_STORE_V	71	3147	0
// OP_SUB_V	3144	3147	3375
// OP_STORE_V	3375	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	3156	0
// OP_STORE_V	3156	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	3156	0
// OP_LOAD_ENT	28	548	3378
// OP_LOAD_V	3378	555	3379
// OP_STORE_V	3379	3159	0
// OP_STORE_V	3161	4	0
// OP_CALL1	859	0	0
// OP_STORE_F	1	3161	0
// OP_STORE_V	3161	4	0
// OP_STORE_V	3156	7	0
// OP_CALL2	860	0	0
// OP_STORE_V	1	4	0
// OP_CALL1	499	0	0
// OP_MUL_F	785	32	3382
// OP_GT	1	3382	3383
// OP_IFNOT	3383	6	0
// OP_STORE_V	3161	4	0
// OP_STORE_V	3156	7	0
// OP_STORE_V	785	10	0
// OP_CALL3	1453	0	0
// OP_STORE_F	1	3156	0
// OP_LOAD_F	28	614	3384
// OP_SUB_F	31	1152	3385
// OP_LT	3384	3385	3386
// OP_IFNOT	3386	3	0
// OP_STORE_V	3156	4	0
// OP_CALL1	3130	0	0
// OP_LOAD_ENT	28	548	3387
// OP_ADDRESS	3387	602	3388
// OP_LOAD_ENT	28	548	3389
// OP_LOAD_F	3389	558	3390
// OP_SUB_F	3156	3390	3391
// OP_STOREP_F	3391	3388	0
// OP_LOAD_ENT	28	548	3392
// OP_ADDRESS	3392	558	3393
// OP_STOREP_F	3156	3393	0
// OP_RETURN	819	0	0
// OP_DONE	0	0	0
float () SetSurfaceAngle = 
{
    local float MAX_DIST;
    local vector left;
    local vector right;
    local vector spos;
    local vector epos;
    local vector angle;
    local vector veh_angle;
    local float gravity;
    local float temp_z;
    local float dist;
    local float diff;
    local float vspeed;
    
    if((self.veh_dir_z > 0.800) || (self.veh_dir_z < -0.800))
    {
        return 0.000;
    }
    
    
    if(!(self.flags & FL_ONGROUND))
    {
        return 0.000;
    }
    
    gravity = cvar("sv_gravity");
    
    if((vlen(self.origin - self.oldorigin)) > 0.000)
    {
        vspeed = vlen(self.velocity);
        if(vspeed > 150.000)
        {
            angle = normalize(self.velocity);
            angle = vectoangles(angle);
            diff = angle_diff(self.veh_body.angles_y, 0.000);
            if(diff > 5.000)
            {
                self.body_lean = self.body_lean + ((25.000 * (vspeed / MAX_SPEED)) * frametime);
                
                if(self.body_lean > 15.000)
                {
                    self.body_lean = 15.000;
                }
                
            }
            else
            {
                if(diff < -5.000)
                {
                    self.body_lean = self.body_lean - ((25.000 * (vspeed / MAX_SPEED)) * frametime);
                    
                    if(self.body_lean < -15.000)
                    {
                        self.body_lean = -15.000;
                    }
                    
                }
                else
                {
                    
                    if(fabs(self.body_lean) > 0.000)
                    {
                        if(self.body_lean < 0.000)
                        {
                            self.body_lean = self.body_lean + (30.000 * frametime);
                            
                            if(self.body_lean > 0.000)
                            {
                                self.body_lean = 0.000;
                            }
                            
                        }
                        else
                        {
                            self.body_lean = self.body_lean - (30.000 * frametime);
                            
                            if(self.body_lean < 0.000)
                            {
                                self.body_lean = 0.000;
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        else
        {
            
            if(fabs(self.body_lean) > 0.000)
            {
                if(self.body_lean < 0.000)
                {
                    self.body_lean = self.body_lean + (30.000 * frametime);
                    
                    if(self.body_lean > 0.000)
                    {
                        self.body_lean = 0.000;
                    }
                    
                }
                else
                {
                    self.body_lean = self.body_lean - (30.000 * frametime);
                    
                    if(self.body_lean < 0.000)
                    {
                        self.body_lean = 0.000;
                    }
                    
                }
                
            }
            
        }
        
        self.body_roll_z = self.body_roll_z - self.body_lean;
        if(self.current_surface != SURF_ASPHALT)
        {
            self.body_roll_x = self.body_roll_x + (((self.body_roll_vel_x * (vlen(self.velocity) / MAX_SPEED)) * (random() * 2.000)) * (1.000 / ((self.cam == CAM_INCAR) + 1.000)));
            self.body_roll_z = self.body_roll_z + (((self.body_roll_vel_z * (vlen(self.velocity) / MAX_SPEED)) * (random() * 2.000)) * (1.000 / ((self.cam == CAM_INCAR) + 1.000)));
            
            if(fabs(self.body_roll_x) > 0.500)
            {
                self.body_roll_vel_x = -1.000 * self.body_roll_vel_x;
                self.body_roll_x = (self.body_roll_x / fabs(self.body_roll_x)) * 2.000;
            }
            
            
            if(fabs(self.body_roll_z) > 5.000)
            {
                self.body_roll_vel_z = -1.000 * self.body_roll_vel_z;
                self.body_roll_z = (self.body_roll_z / fabs(self.body_roll_z)) * 2.000;
            }
            
        }
        else
        {
            self.body_roll = '0.000 0.000 0.000';
        }
        
        self.body_roll_z = self.body_roll_z + self.body_lean;
    }
    
    veh_angle = vectoangles(self.veh_dir);
    veh_angle_z = 0.000;
    veh_angle_x = 0.000;
    makevectors(veh_angle);
    left = self.origin - (v_right * 14.000);
    spos = left + (48.000 * v_up);
    epos = left - (1000.000 * v_up);
    traceline(spos, epos, TRUE, self);
    if(trace_fraction == 1.000)
    {
        return 0.000;
    }
    else
    {
        if((vlen(left - trace_endpos)) > MAX_DIST)
        {
            return 0.000;
        }
        else
        {
            left = trace_endpos;
        }
        
    }
    
    right = self.origin + (v_right * 14.000);
    spos = right + (48.000 * v_up);
    epos = right - (1000.000 * v_up);
    traceline(spos, epos, TRUE, self);
    if(trace_fraction == 1.000)
    {
        return 0.000;
    }
    else
    {
        if((vlen(right - trace_endpos)) > MAX_DIST)
        {
            return 0.000;
        }
        else
        {
            right = trace_endpos;
        }
        
    }
    
    angle = normalize(left - right);
    angle = vectoangles(angle);
    veh_angle = self.veh_body.veh_dir;
    veh_angle_z = anglemod(0.000);
    
    if(fabs(angle_diff(0.000, angle_x)) > (80.000 * frametime))
    {
        angle_x = MoveToAngle(0.000, angle_x, 80.000);
    }
    
    
    if(self.last_prevsurf < (time - 0.200))
    {
        SetPrevSurfAngle(angle_x);
    }
    
    self.veh_body.last_roll_z = angle_x - self.veh_body.veh_dir_z;
    self.veh_body.veh_dir_z = angle;
    return 1.000;
};

// checkHealth
// function begins at statement 3121, parm_start=3395
// OP_LOAD_F	28	152	3395
// OP_LE	3395	821	3396
// OP_IFNOT	3396	2	0
// OP_CALL0	1755	0	0
// OP_DONE	0	0	0
void () checkHealth = 
{
    
    if(self.health <= 2.000)
    {
        DestroyVehicle();
    }
    
};

// CarCollision
// function begins at statement 3126, parm_start=3398
// OP_LOAD_V	3399	105	3407
// OP_LOAD_V	3398	105	3410
// OP_SUB_V	3407	3410	3413
// OP_STORE_V	3413	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	3400	0
// OP_LOAD_V	3398	113	3416
// OP_STORE_V	3416	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	3403	0
// OP_LOAD_V	3399	113	3419
// OP_STORE_V	3419	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	3404	0
// OP_ADDRESS	3398	113	3422
// OP_LOAD_V	3398	113	3425
// OP_STORE_V	3425	4	0
// OP_CALL1	468	0	0
// OP_MUL_VF	1	3404	3428
// OP_MUL_VF	3428	2605	3431
// OP_STOREP_V	3431	3422	0
// OP_ADDRESS	3399	113	3434
// OP_LOAD_V	3399	113	3437
// OP_STORE_V	3400	4	0
// OP_CALL1	468	0	0
// OP_MUL_VF	1	3404	3440
// OP_ADD_V	3437	3440	3443
// OP_MUL_VF	3443	1182	3446
// OP_STOREP_V	3446	3434	0
// OP_CALL0	466	0	0
// OP_MUL_F	1	827	3449
// OP_STORE_F	3449	3405	0
// OP_LT	3405	819	3450
// OP_IFNOT	3450	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	3451	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	36	0	0
// OP_LT	3405	821	3452
// OP_IFNOT	3452	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	3453	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	27	0	0
// OP_LT	3405	823	3454
// OP_IFNOT	3454	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	3455	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	18	0	0
// OP_LT	3405	825	3456
// OP_IFNOT	3456	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	3457	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	9	0	0
// OP_LT	3405	827	3458
// OP_IFNOT	3458	7	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	3459	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_LOAD_V	3398	113	3460
// OP_LOAD_V	3399	113	3463
// OP_SUB_V	3460	3463	3466
// OP_STORE_V	3466	4	0
// OP_CALL1	471	0	0
// OP_DIV_F	1	855	3469
// OP_STORE_F	3469	3406	0
// OP_LOAD_F	3398	154	3470
// OP_NE_F	3470	277	3471
// OP_IFNOT	3471	3	0
// OP_ADDRESS	3399	407	3472
// OP_STOREP_S	3473	3472	0
// OP_STORE_V	3399	4	0
// OP_STORE_V	3398	7	0
// OP_STORE_V	3398	10	0
// OP_DIV_F	3406	855	3474
// OP_STORE_V	3474	13	0
// OP_CALL4	534	0	0
// OP_DONE	0	0	0
void (entity veh1, entity veh2) CarCollision = 
{
    local vector veh1_to_veh2;
    local float veh1_speed;
    local float veh2_speed;
    local float rnd;
    local float impact;
    veh1_to_veh2 = normalize(veh2.origin - veh1.origin);
    veh1_speed = vlen(veh1.velocity);
    veh2_speed = vlen(veh2.velocity);
    veh1.velocity = (normalize(veh1.velocity) * veh2_speed) * 0.950;
    veh2.velocity = (veh2.velocity + (normalize(veh1_to_veh2) * veh2_speed)) * 0.500;
    rnd = random() * 5.000;
    if(rnd < 1.000)
    {
        sound(self, CHAN_AUTO, "rally/nexus/wall.wav", 1.000, ATTN_NORM);
    }
    else
    {
        if(rnd < 2.000)
        {
            sound(self, CHAN_AUTO, "rally/ray/crash2.wav", 1.000, ATTN_NORM);
        }
        else
        {
            if(rnd < 3.000)
            {
                sound(self, CHAN_AUTO, "rally/ray/crash3.wav", 1.000, ATTN_NORM);
            }
            else
            {
                if(rnd < 4.000)
                {
                    sound(self, CHAN_AUTO, "rally/ray/crash4.wav", 1.000, ATTN_NORM);
                }
                else
                {
                    
                    if(rnd < 5.000)
                    {
                        sound(self, CHAN_AUTO, "rally/ray/crash5.wav", 1.000, ATTN_NORM);
                    }
                    
                }
                
            }
            
        }
        
    }
    
    impact = (vlen(veh1.velocity - veh2.velocity)) / 10.000;
    
    if(veh1.weapon != IT_ROOBAR)
    {
        veh2.deathtype = "car_collision";
    }
    
    T_Damage(veh2, veh1, veh1, impact / 10.000);
};

// CarGib
// function begins at statement 3221, parm_start=3476
// OP_EQ_F	35	855	3484
// OP_IFNOT	3484	2	0
// OP_RETURN	0	0	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	3482	0
// OP_ADDRESS	3482	104	3485
// OP_STOREP_F	245	3485	0
// OP_ADDRESS	3482	103	3486
// OP_STOREP_F	241	3486	0
// OP_STORE_V	3482	4	0
// OP_STORE_V	3487	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	3482	4	0
// OP_STORE_V	3476	7	0
// OP_CALL2	462	0	0
// OP_STORE_V	3482	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	926	10	0
// OP_CALL3	464	0	0
// OP_CALL0	466	0	0
// OP_MUL_F	1	825	3488
// OP_STORE_F	3488	3483	0
// OP_ADDRESS	3482	131	3489
// OP_STORE_V	3483	4	0
// OP_CALL1	495	0	0
// OP_STOREP_F	1	3489	0
// OP_ADDRESS	3482	113	3490
// OP_STOREP_V	3479	3490	0
// OP_ADDRESS	3482	121	3493
// OP_CALL0	466	0	0
// OP_MUL_F	1	1182	3499
// OP_ADD_F	3499	1182	3500
// OP_MUL_VF	3496	3500	3501
// OP_STOREP_V	3501	3493	0
// OP_ADDRESS	3482	183	3504
// OP_LOAD_F	28	183	3505
// OP_STOREP_F	3505	3504	0
// OP_ADDRESS	3482	148	3506
// OP_STOREP_FNC	533	3506	0
// OP_ADDRESS	3482	150	3507
// OP_ADD_F	31	3083	3508
// OP_STOREP_F	3508	3507	0
// OP_DONE	0	0	0
void (vector pos, vector vel) CarGib = 
{
    local entity gib;
    local float f;
    
    if(deathmatch == 10.000)
    {
        return;
    }
    
    gib = spawn();
    gib.solid = SOLID_BBOX;
    gib.movetype = MOVETYPE_BOUNCE;
    setmodel(gib, "models/gibs.mdl");
    setorigin(gib, pos);
    setsize(gib, '0.000 0.000 0.000', '0.000 0.000 0.000');
    f = random() * 4.000;
    gib.frame = floor(f);
    gib.velocity = vel;
    gib.avelocity = '300.000 300.000 300.000' * ((random() * 0.500) + 0.500);
    gib.colormap = self.colormap;
    gib.think = SUB_Remove;
    gib.nextthink = time + 0.750;
};

// CarGibs
// function begins at statement 3264, parm_start=3510
// OP_MUL_F	3516	821	3521
// OP_STORE_V	3521	4	0
// OP_CALL1	495	0	0
// OP_STORE_F	1	3517	0
// OP_GT	3517	817	3522
// OP_IFNOT	3522	21	0
// OP_CALL0	466	0	0
// OP_MUL_F	1	825	3523
// OP_STORE_F	3523	3518	0
// OP_CALL0	466	0	0
// OP_MUL_F	1	825	3524
// OP_STORE_F	3524	3519	0
// OP_CALL0	466	0	0
// OP_MUL_F	1	821	3525
// OP_STORE_F	3525	3520	0
// OP_SUB_V	3518	3526	3529
// OP_STORE_V	3529	3518	0
// OP_ADD_V	3510	3518	3532
// OP_STORE_V	3532	4	0
// OP_MUL_VF	3518	2611	3535
// OP_ADD_V	3513	3535	3538
// OP_STORE_V	3538	7	0
// OP_CALL2	3475	0	0
// OP_SUB_F	3517	819	3541
// OP_STORE_F	3541	3517	0
// OP_GOTO	-21	0	0
// OP_DONE	0	0	0
void (vector pos, vector vel, float dam) CarGibs = 
{
    local float num_gibs;
    local vector randvect;
    num_gibs = floor(dam * 2.000);
    
    while(num_gibs > 0.000)
    {
        randvect_x = random() * 4.000;
        randvect_y = random() * 4.000;
        randvect_z = random() * 2.000;
        randvect = randvect - '2.000 2.000 1.000';
        CarGib(pos + randvect, vel + (randvect * 50.000));
        num_gibs = num_gibs - 1.000;
    }
    
};

// CheckForCollision
// function begins at statement 3291, parm_start=3543
// OP_LOAD_V	28	113	3558
// OP_STORE_V	3558	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	3556	0
// OP_LOAD_V	28	621	3561
// OP_STORE_V	3561	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	3557	0
// OP_LOAD_F	28	590	3564
// OP_LT	3543	3564	3565
// OP_LOAD_F	28	656	3566
// OP_SUB_F	31	801	3567
// OP_LT	3566	3567	3568
// OP_AND	3565	3568	3569
// OP_IFNOT	3569	443	0
// OP_LOAD_ENT	28	548	3570
// OP_LOAD_V	3570	117	3571
// OP_STORE_V	3571	3544	0
// OP_MUL_F	1228	3544	3574
// OP_STORE_F	3574	3544	0
// OP_CALL0	466	0	0
// OP_MUL_F	1	821	3575
// OP_STORE_F	3575	3551	0
// OP_LT	3551	819	3576
// OP_IFNOT	3576	3	0
// OP_STORE_S	3577	3553	0
// OP_GOTO	2	0	0
// OP_STORE_S	3578	3553	0
// OP_STORE_V	3544	4	0
// OP_CALL1	461	0	0
// OP_LOAD_V	28	105	3579
// OP_MUL_VF	59	757	3582
// OP_MUL_VF	3582	821	3585
// OP_ADD_V	3579	3585	3588
// OP_STORE_V	3588	3547	0
// OP_LOAD_V	28	105	3591
// OP_STORE_V	3591	4	0
// OP_STORE_V	3547	7	0
// OP_STORE_V	817	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_LT	70	819	3594
// OP_IFNOT	3594	152	0
// OP_LOAD_F	28	590	3595
// OP_SUB_F	3595	3543	3596
// OP_DIV_F	3596	1632	3597
// OP_STORE_F	3597	3550	0
// OP_GT	3550	819	3598
// OP_IFNOT	3598	2	0
// OP_STORE_F	819	3550	0
// OP_LT	3550	817	3599
// OP_IFNOT	3599	2	0
// OP_STORE_F	817	3550	0
// OP_LOAD_F	28	154	3600
// OP_EQ_F	3600	277	3601
// OP_LOAD_F	28	217	3602
// OP_GT	3602	817	3603
// OP_AND	3601	3603	3604
// OP_IFNOT	3604	64	0
// OP_LOAD_S	78	129	3605
// OP_EQ_S	3605	3606	3607
// OP_LOAD_S	78	129	3608
// OP_EQ_S	3608	3609	3610
// OP_OR	3607	3610	3611
// OP_IFNOT	3611	8	0
// OP_STORE_ENT	28	3555	0
// OP_STORE_ENT	28	29	0
// OP_STORE_ENT	78	28	0
// OP_LOAD_FNC	28	146	3612
// OP_CALL0	3612	0	0
// OP_STORE_ENT	3555	28	0
// OP_GOTO	37	0	0
// OP_LOAD_S	78	129	3613
// OP_EQ_S	3613	880	3614
// OP_IFNOT	3614	18	0
// OP_STORE_V	78	4	0
// OP_STORE_V	28	7	0
// OP_STORE_V	28	10	0
// OP_MUL_F	3550	1885	3615
// OP_STORE_V	3615	13	0
// OP_CALL4	534	0	0
// OP_LOAD_F	78	154	3616
// OP_EQ_F	3616	277	3617
// OP_IFNOT	3617	9	0
// OP_STORE_V	28	4	0
// OP_STORE_V	30	7	0
// OP_STORE_V	30	10	0
// OP_MUL_F	3550	1885	3618
// OP_STORE_V	3618	13	0
// OP_CALL4	534	0	0
// OP_ADDRESS	28	407	3619
// OP_STOREP_S	3620	3619	0
// OP_LOAD_F	28	217	3621
// OP_MUL_F	3550	834	3622
// OP_GT	3621	3622	3623
// OP_IFNOT	3623	9	0
// OP_ADDRESS	28	157	3624
// OP_ADDRESS	28	217	3625
// OP_LOAD_F	28	217	3626
// OP_MUL_F	3550	834	3627
// OP_SUB_F	3626	3627	3628
// OP_STOREP_F	3628	3625	0
// OP_STOREP_F	3628	3624	0
// OP_GOTO	5	0	0
// OP_ADDRESS	28	157	3629
// OP_ADDRESS	28	217	3630
// OP_STOREP_F	817	3630	0
// OP_STOREP_F	817	3629	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	3631	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_LOAD_ENT	28	548	3632
// OP_ADDRESS	3632	133	3633
// OP_LOAD_ENT	28	548	3634
// OP_LOAD_F	3634	133	3635
// OP_BITOR	3635	350	3636
// OP_STOREP_F	3636	3633	0
// OP_CALL0	539	0	0
// OP_GOTO	65	0	0
// OP_EQ_E	78	30	3637
// OP_LOAD_V	28	555	3638
// OP_ADD_V	74	3638	3641
// OP_STORE_V	3641	4	0
// OP_CALL1	471	0	0
// OP_LT	1	1182	3644
// OP_AND	3637	3644	3645
// OP_GT	3556	1820	3646
// OP_AND	3645	3646	3647
// OP_IFNOT	3647	32	0
// OP_STORE_V	28	4	0
// OP_STORE_V	30	7	0
// OP_STORE_V	30	10	0
// OP_STORE_V	2522	13	0
// OP_CALL4	534	0	0
// OP_CALL0	466	0	0
// OP_LT	1	1182	3648
// OP_IFNOT	3648	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	3649	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	7	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	3650	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	3459	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	3651	7	0
// OP_CALL2	520	0	0
// OP_GOTO	7	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	30	7	0
// OP_STORE_V	30	10	0
// OP_MUL_F	3550	825	3652
// OP_STORE_V	3652	13	0
// OP_CALL4	534	0	0
// OP_MUL_VF	59	829	3653
// OP_SUB_V	71	3653	3656
// OP_STORE_V	3656	4	0
// OP_LOAD_V	28	113	3659
// OP_MUL_VF	3659	3083	3662
// OP_ADD_V	3662	1593	3665
// OP_STORE_V	3665	7	0
// OP_MUL_F	3550	825	3668
// OP_STORE_V	3668	10	0
// OP_CALL3	3509	0	0
// OP_CALL0	3394	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	3553	10	0
// OP_STORE_V	3550	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_NE_E	78	30	3669
// OP_IFNOT	3669	4	0
// OP_STORE_V	28	4	0
// OP_STORE_V	78	7	0
// OP_CALL2	3397	0	0
// OP_ADDRESS	28	656	3670
// OP_STOREP_F	31	3670	0
// OP_RETURN	0	0	0
// OP_ADD_V	65	59	3671
// OP_STORE_V	3671	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	3544	0
// OP_LOAD_V	28	105	3674
// OP_MUL_VF	3544	757	3677
// OP_MUL_VF	3677	821	3680
// OP_ADD_V	3674	3680	3683
// OP_STORE_V	3683	3547	0
// OP_LOAD_V	28	105	3686
// OP_STORE_V	3686	4	0
// OP_STORE_V	3547	7	0
// OP_STORE_V	817	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_LT	70	819	3689
// OP_IFNOT	3689	100	0
// OP_LOAD_F	28	590	3690
// OP_SUB_F	3690	3543	3691
// OP_DIV_F	3691	1632	3692
// OP_STORE_F	3692	3550	0
// OP_GT	3550	819	3693
// OP_IFNOT	3693	2	0
// OP_STORE_F	819	3550	0
// OP_LT	3550	817	3694
// OP_IFNOT	3694	2	0
// OP_STORE_F	817	3550	0
// OP_LOAD_F	28	154	3695
// OP_EQ_F	3695	277	3696
// OP_LOAD_F	28	217	3697
// OP_GT	3697	817	3698
// OP_AND	3696	3698	3699
// OP_IFNOT	3699	53	0
// OP_LOAD_S	78	129	3700
// OP_EQ_S	3700	3606	3701
// OP_LOAD_S	78	129	3702
// OP_EQ_S	3702	3609	3703
// OP_OR	3701	3703	3704
// OP_IFNOT	3704	8	0
// OP_STORE_ENT	28	3555	0
// OP_STORE_ENT	28	29	0
// OP_STORE_ENT	78	28	0
// OP_LOAD_FNC	28	146	3705
// OP_CALL0	3705	0	0
// OP_STORE_ENT	3555	28	0
// OP_GOTO	26	0	0
// OP_LOAD_S	78	129	3706
// OP_EQ_S	3706	880	3707
// OP_IFNOT	3707	7	0
// OP_STORE_V	78	4	0
// OP_STORE_V	28	7	0
// OP_STORE_V	28	10	0
// OP_MUL_F	3550	1885	3708
// OP_STORE_V	3708	13	0
// OP_CALL4	534	0	0
// OP_LOAD_F	28	217	3709
// OP_MUL_F	3550	834	3710
// OP_GT	3709	3710	3711
// OP_IFNOT	3711	9	0
// OP_ADDRESS	28	157	3712
// OP_ADDRESS	28	217	3713
// OP_LOAD_F	28	217	3714
// OP_MUL_F	3550	834	3715
// OP_SUB_F	3714	3715	3716
// OP_STOREP_F	3716	3713	0
// OP_STOREP_F	3716	3712	0
// OP_GOTO	5	0	0
// OP_ADDRESS	28	157	3717
// OP_ADDRESS	28	217	3718
// OP_STOREP_F	817	3718	0
// OP_STOREP_F	817	3717	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	3631	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_LOAD_ENT	28	548	3719
// OP_ADDRESS	3719	133	3720
// OP_LOAD_ENT	28	548	3721
// OP_LOAD_F	3721	133	3722
// OP_BITOR	3722	350	3723
// OP_STOREP_F	3723	3720	0
// OP_CALL0	539	0	0
// OP_GOTO	24	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	30	7	0
// OP_STORE_V	30	10	0
// OP_MUL_F	3550	825	3724
// OP_STORE_V	3724	13	0
// OP_CALL4	534	0	0
// OP_MUL_VF	3544	825	3725
// OP_SUB_V	71	3725	3728
// OP_STORE_V	3728	4	0
// OP_LOAD_V	28	113	3731
// OP_MUL_VF	3731	3083	3734
// OP_ADD_V	3734	1593	3737
// OP_STORE_V	3737	7	0
// OP_MUL_F	3550	825	3740
// OP_STORE_V	3740	10	0
// OP_CALL3	3509	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	3553	10	0
// OP_STORE_V	3550	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_CALL0	3394	0	0
// OP_NE_E	78	30	3741
// OP_IFNOT	3741	4	0
// OP_STORE_V	28	4	0
// OP_STORE_V	78	7	0
// OP_CALL2	3397	0	0
// OP_ADDRESS	28	656	3742
// OP_STOREP_F	31	3742	0
// OP_RETURN	0	0	0
// OP_MUL_FV	1228	65	3743
// OP_ADD_V	3743	59	3746
// OP_STORE_V	3746	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	3544	0
// OP_LOAD_V	28	105	3749
// OP_MUL_VF	3544	757	3752
// OP_MUL_VF	3752	821	3755
// OP_ADD_V	3749	3755	3758
// OP_STORE_V	3758	3547	0
// OP_LOAD_V	28	105	3761
// OP_STORE_V	3761	4	0
// OP_STORE_V	3547	7	0
// OP_STORE_V	817	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_LT	70	819	3764
// OP_IFNOT	3764	100	0
// OP_LOAD_F	28	590	3765
// OP_SUB_F	3765	3543	3766
// OP_DIV_F	3766	1632	3767
// OP_STORE_F	3767	3550	0
// OP_GT	3550	819	3768
// OP_IFNOT	3768	2	0
// OP_STORE_F	819	3550	0
// OP_LT	3550	817	3769
// OP_IFNOT	3769	2	0
// OP_STORE_F	817	3550	0
// OP_LOAD_F	28	154	3770
// OP_EQ_F	3770	277	3771
// OP_LOAD_F	28	217	3772
// OP_GT	3772	817	3773
// OP_AND	3771	3773	3774
// OP_IFNOT	3774	53	0
// OP_LOAD_S	78	129	3775
// OP_EQ_S	3775	3606	3776
// OP_LOAD_S	78	129	3777
// OP_EQ_S	3777	3609	3778
// OP_OR	3776	3778	3779
// OP_IFNOT	3779	8	0
// OP_STORE_ENT	28	3555	0
// OP_STORE_ENT	28	29	0
// OP_STORE_ENT	78	28	0
// OP_LOAD_FNC	28	146	3780
// OP_CALL0	3780	0	0
// OP_STORE_ENT	3555	28	0
// OP_GOTO	26	0	0
// OP_LOAD_S	78	129	3781
// OP_EQ_S	3781	880	3782
// OP_IFNOT	3782	7	0
// OP_STORE_V	78	4	0
// OP_STORE_V	28	7	0
// OP_STORE_V	28	10	0
// OP_MUL_F	3550	1885	3783
// OP_STORE_V	3783	13	0
// OP_CALL4	534	0	0
// OP_LOAD_F	28	217	3784
// OP_MUL_F	3550	834	3785
// OP_GT	3784	3785	3786
// OP_IFNOT	3786	9	0
// OP_ADDRESS	28	157	3787
// OP_ADDRESS	28	217	3788
// OP_LOAD_F	28	217	3789
// OP_MUL_F	3550	834	3790
// OP_SUB_F	3789	3790	3791
// OP_STOREP_F	3791	3788	0
// OP_STOREP_F	3791	3787	0
// OP_GOTO	5	0	0
// OP_ADDRESS	28	157	3792
// OP_ADDRESS	28	217	3793
// OP_STOREP_F	817	3793	0
// OP_STOREP_F	817	3792	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	3631	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_LOAD_ENT	28	548	3794
// OP_ADDRESS	3794	133	3795
// OP_LOAD_ENT	28	548	3796
// OP_LOAD_F	3796	133	3797
// OP_BITOR	3797	350	3798
// OP_STOREP_F	3798	3795	0
// OP_CALL0	539	0	0
// OP_GOTO	24	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	30	7	0
// OP_STORE_V	30	10	0
// OP_MUL_F	3550	825	3799
// OP_STORE_V	3799	13	0
// OP_CALL4	534	0	0
// OP_MUL_VF	3544	825	3800
// OP_SUB_V	71	3800	3803
// OP_STORE_V	3803	4	0
// OP_LOAD_V	28	113	3806
// OP_MUL_VF	3806	3083	3809
// OP_ADD_V	3809	1593	3812
// OP_STORE_V	3812	7	0
// OP_MUL_F	3550	825	3815
// OP_STORE_V	3815	10	0
// OP_CALL3	3509	0	0
// OP_CALL0	3394	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	3553	10	0
// OP_STORE_V	3550	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_NE_E	78	30	3816
// OP_IFNOT	3816	4	0
// OP_STORE_V	28	4	0
// OP_STORE_V	78	7	0
// OP_CALL2	3397	0	0
// OP_ADDRESS	28	656	3817
// OP_STOREP_F	31	3817	0
// OP_RETURN	0	0	0
// OP_LOAD_V	28	105	3818
// OP_STORE_V	3818	4	0
// OP_STORE_V	2223	7	0
// OP_CALL2	481	0	0
// OP_STORE_ENT	1	3554	0
// OP_NE_E	3554	30	3821
// OP_IFNOT	3821	24	0
// OP_EQ_E	3554	28	3822
// OP_LOAD_S	3554	129	3823
// OP_NE_S	3823	880	3824
// OP_OR	3822	3824	3825
// OP_LOAD_S	3554	129	3826
// OP_NE_S	3826	1187	3827
// OP_OR	3825	3827	3828
// OP_IFNOT	3828	4	0
// OP_LOAD_ENT	3554	164	3829
// OP_STORE_ENT	3829	3554	0
// OP_GOTO	12	0	0
// OP_LOAD_V	3554	113	3830
// OP_STORE_V	3830	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	3552	0
// OP_ADDRESS	28	113	3833
// OP_LOAD_V	28	113	3836
// OP_STORE_V	3836	4	0
// OP_CALL1	468	0	0
// OP_MUL_F	3552	2605	3839
// OP_MUL_VF	1	3839	3840
// OP_STOREP_V	3840	3833	0
// OP_GOTO	-24	0	0
// OP_LOAD_F	28	644	3843
// OP_BITAND	3843	702	3844
// OP_LOAD_F	28	628	3845
// OP_NE_F	3845	823	3846
// OP_OR	3844	3846	3847
// OP_IFNOT	3847	2	0
// OP_RETURN	0	0	0
// OP_GT	3556	3557	3848
// OP_LOAD_F	28	644	3849
// OP_BITAND	3849	692	3850
// OP_AND	3848	3850	3851
// OP_LOAD_F	28	648	3852
// OP_SUB_F	31	798	3853
// OP_LT	3852	3853	3854
// OP_AND	3851	3854	3855
// OP_LOAD_F	28	182	3856
// OP_BITAND	3856	228	3857
// OP_AND	3855	3857	3858
// OP_IFNOT	3858	48	0
// OP_GT	3556	3859	3860
// OP_LT	3556	3861	3862
// OP_AND	3860	3862	3863
// OP_IFNOT	3863	33	0
// OP_LOAD_ENT	28	547	3864
// OP_LOAD_V	3864	555	3865
// OP_STORE_V	3865	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	3544	0
// OP_STORE_V	3545	4	0
// OP_LOAD_ENT	28	548	3868
// OP_LOAD_F	3868	119	3869
// OP_STORE_V	3869	7	0
// OP_CALL2	860	0	0
// OP_STORE_V	1	4	0
// OP_CALL1	499	0	0
// OP_GT	1	845	3870
// OP_IFNOT	3870	18	0
// OP_GT	3556	3871	3872
// OP_IFNOT	3872	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	829	7	0
// OP_STORE_V	3873	10	0
// OP_STORE_V	3083	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	7	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	829	7	0
// OP_STORE_V	3874	10	0
// OP_STORE_V	3083	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	648	3875
// OP_STOREP_F	31	3875	0
// OP_GOTO	11	0	0
// OP_LT	3557	1135	3876
// OP_IFNOT	3876	9	0
// OP_STORE_V	28	4	0
// OP_STORE_V	829	7	0
// OP_STORE_V	3877	10	0
// OP_STORE_V	3083	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	648	3878
// OP_STOREP_F	31	3878	0
// OP_GOTO	45	0	0
// OP_LT	3556	3557	3879
// OP_LOAD_F	28	649	3880
// OP_SUB_F	31	798	3881
// OP_LT	3880	3881	3882
// OP_AND	3879	3882	3883
// OP_IFNOT	3883	39	0
// OP_GT	3556	3884	3885
// OP_LT	3556	3886	3887
// OP_AND	3885	3887	3888
// OP_IFNOT	3888	10	0
// OP_STORE_V	28	4	0
// OP_STORE_V	827	7	0
// OP_STORE_V	3889	10	0
// OP_STORE_V	3083	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	649	3890
// OP_STOREP_F	31	3890	0
// OP_GOTO	26	0	0
// OP_GT	3556	2127	3891
// OP_LT	3556	3892	3893
// OP_AND	3891	3893	3894
// OP_IFNOT	3894	10	0
// OP_STORE_V	28	4	0
// OP_STORE_V	827	7	0
// OP_STORE_V	3895	10	0
// OP_STORE_V	3083	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	649	3896
// OP_STOREP_F	31	3896	0
// OP_GOTO	13	0	0
// OP_GT	3556	1948	3897
// OP_LT	3556	3871	3898
// OP_AND	3897	3898	3899
// OP_IFNOT	3899	9	0
// OP_STORE_V	28	4	0
// OP_STORE_V	827	7	0
// OP_STORE_V	3900	10	0
// OP_STORE_V	3083	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	649	3901
// OP_STOREP_F	31	3901	0
// OP_DONE	0	0	0
void (float vel_speed) CheckForCollision = 
{
    local vector dir;
    local vector pos;
    local float vol;
    local float rnd;
    local float ent_speed;
    local string crash_snd;
    local entity ent;
    local entity oldself;
    local float vspeed;
    local float lspeed;
    vspeed = vlen(self.velocity);
    lspeed = vlen(self.last_velocity);
    
    if((vel_speed < self.last_speed) && (self.last_crash < (time - SNDLEN_CRASH)))
    {
        dir = self.veh_body.angles;
        dir_x = -1.000 * dir_x;
        rnd = random() * 2.000;
        if(rnd < 1.000)
        {
            crash_snd = "rally/crash5.wav";
        }
        else
        {
            crash_snd = "rally/process/crsh01.wav";
        }
        
        makevectors(dir);
        pos = self.origin + ((v_forward * VEH_MAX_x) * 2.000);
        traceline(self.origin, pos, 0.000, self);
        
        if(trace_fraction < 1.000)
        {
            vol = (self.last_speed - vel_speed) / 40.000;
            
            if(vol > 1.000)
            {
                vol = 1.000;
            }
            
            
            if(vol < 0.000)
            {
                vol = 0.000;
            }
            
            if((self.weapon == IT_ROOBAR) && (self.ammo_roobar > 0.000))
            {
                if((trace_ent.classname == "rally_roo") || (trace_ent.classname == "rally_dude"))
                {
                    other = oldself = self;
                    self = trace_ent;
                    self.touch();
                    self = oldself;
                }
                else
                {
                    
                    if(trace_ent.classname == "player")
                    {
                        T_Damage(trace_ent, self, self, vol * 150.000);
                        
                        if(trace_ent.weapon == IT_ROOBAR)
                        {
                            T_Damage(self, world, world, vol * 150.000);
                            self.deathtype = "repulsor_feedback";
                        }
                        
                    }
                    
                    if(self.ammo_roobar > (vol * 12.000))
                    {
                        self.currentammo = self.ammo_roobar = self.ammo_roobar - (vol * 12.000);
                    }
                    else
                    {
                        self.ammo_roobar = 0.000;
                        self.currentammo = 0.000;
                    }
                    
                }
                
                sound(self, CHAN_AUTO, "rally/process/elect02.wav", 1.000, ATTN_NORM);
                self.veh_body.effects = self.veh_body.effects | EF_DIMLIGHT;
                W_Attack();
            }
            else
            {
                if(((trace_ent == world) && ((vlen(trace_plane_normal + self.veh_dir)) < 0.500)) && (vspeed > 500.000))
                {
                    T_Damage(self, world, world, 30.000);
                    if(random() < 0.500)
                    {
                        sound(self, CHAN_AUTO, "rally/dude/sevpain1.wav", 1.000, ATTN_NORM);
                    }
                    else
                    {
                        sound(self, CHAN_AUTO, "rally/dude/sevpain2.wav", 1.000, ATTN_NORM);
                    }
                    
                    sound(self, CHAN_AUTO, "rally/ray/crash5.wav", 1.000, ATTN_NORM);
                    centerprint(self, "Whiplash damage!");
                }
                else
                {
                    T_Damage(self, world, world, vol * 4.000);
                }
                
                CarGibs(trace_endpos - (v_forward * 6.000), (self.velocity * 0.750) + '0.000 0.000 150.000', vol * 4.000);
                checkHealth();
                sound(self, CHAN_AUTO, crash_snd, vol, ATTN_STATIC);
            }
            
            
            if(trace_ent != world)
            {
                CarCollision(self, trace_ent);
            }
            
            self.last_crash = time;
            return;
        }
        
        dir = normalize(v_right + v_forward);
        pos = self.origin + ((dir * VEH_MAX_x) * 2.000);
        traceline(self.origin, pos, 0.000, self);
        
        if(trace_fraction < 1.000)
        {
            vol = (self.last_speed - vel_speed) / 40.000;
            
            if(vol > 1.000)
            {
                vol = 1.000;
            }
            
            
            if(vol < 0.000)
            {
                vol = 0.000;
            }
            
            if((self.weapon == IT_ROOBAR) && (self.ammo_roobar > 0.000))
            {
                if((trace_ent.classname == "rally_roo") || (trace_ent.classname == "rally_dude"))
                {
                    other = oldself = self;
                    self = trace_ent;
                    self.touch();
                    self = oldself;
                }
                else
                {
                    
                    if(trace_ent.classname == "player")
                    {
                        T_Damage(trace_ent, self, self, vol * 150.000);
                    }
                    
                    if(self.ammo_roobar > (vol * 12.000))
                    {
                        self.currentammo = self.ammo_roobar = self.ammo_roobar - (vol * 12.000);
                    }
                    else
                    {
                        self.ammo_roobar = 0.000;
                        self.currentammo = 0.000;
                    }
                    
                }
                
                sound(self, CHAN_AUTO, "rally/process/elect02.wav", 1.000, ATTN_NORM);
                self.veh_body.effects = self.veh_body.effects | EF_DIMLIGHT;
                W_Attack();
            }
            else
            {
                T_Damage(self, world, world, vol * 4.000);
                CarGibs(trace_endpos - (dir * 4.000), (self.velocity * 0.750) + '0.000 0.000 150.000', vol * 4.000);
                sound(self, CHAN_AUTO, crash_snd, vol, ATTN_STATIC);
                checkHealth();
            }
            
            
            if(trace_ent != world)
            {
                CarCollision(self, trace_ent);
            }
            
            self.last_crash = time;
            return;
        }
        
        dir = normalize((-1.000 * v_right) + v_forward);
        pos = self.origin + ((dir * VEH_MAX_x) * 2.000);
        traceline(self.origin, pos, 0.000, self);
        
        if(trace_fraction < 1.000)
        {
            vol = (self.last_speed - vel_speed) / 40.000;
            
            if(vol > 1.000)
            {
                vol = 1.000;
            }
            
            
            if(vol < 0.000)
            {
                vol = 0.000;
            }
            
            if((self.weapon == IT_ROOBAR) && (self.ammo_roobar > 0.000))
            {
                if((trace_ent.classname == "rally_roo") || (trace_ent.classname == "rally_dude"))
                {
                    other = oldself = self;
                    self = trace_ent;
                    self.touch();
                    self = oldself;
                }
                else
                {
                    
                    if(trace_ent.classname == "player")
                    {
                        T_Damage(trace_ent, self, self, vol * 150.000);
                    }
                    
                    if(self.ammo_roobar > (vol * 12.000))
                    {
                        self.currentammo = self.ammo_roobar = self.ammo_roobar - (vol * 12.000);
                    }
                    else
                    {
                        self.ammo_roobar = 0.000;
                        self.currentammo = 0.000;
                    }
                    
                }
                
                sound(self, CHAN_AUTO, "rally/process/elect02.wav", 1.000, ATTN_NORM);
                self.veh_body.effects = self.veh_body.effects | EF_DIMLIGHT;
                W_Attack();
            }
            else
            {
                T_Damage(self, world, world, vol * 4.000);
                CarGibs(trace_endpos - (dir * 4.000), (self.velocity * 0.750) + '0.000 0.000 150.000', vol * 4.000);
                checkHealth();
                sound(self, CHAN_AUTO, crash_snd, vol, ATTN_STATIC);
            }
            
            
            if(trace_ent != world)
            {
                CarCollision(self, trace_ent);
            }
            
            self.last_crash = time;
            return;
        }
        
        ent = findradius(self.origin, 64.000);
        
        while(ent != world)
        {
            if(((ent == self) || (ent.classname != "player")) || (ent.classname != "rally_bot"))
            {
                ent = ent.chain;
            }
            else
            {
                ent_speed = vlen(ent.velocity);
                self.velocity = normalize(self.velocity) * (ent_speed * 0.950);
            }
            
        }
        
    }
    
    
    if((self.racing_flags & QR_OUT_OF_TIME) || (self.car_index != 3.000))
    {
        return;
    }
    
    if((((vspeed > lspeed) && (self.racing_flags & QR_START_READY)) && (self.last_rev < (time - SNDLEN_HIGHREV))) && (self.flags & FL_ONGROUND))
    {
        if((vspeed > 450.000) && (vspeed < 650.000))
        {
            dir = vectoangles(self.veh_tail.veh_dir);
            
            if(fabs(angle_diff(0.000, self.veh_body.angles_y)) > 15.000)
            {
                if(vspeed > 550.000)
                {
                    sound(self, 6.000, "rally/engine/rev/highrev2.wav", 0.750, ATTN_NORM);
                }
                else
                {
                    sound(self, 6.000, "rally/engine/rev/highrev.wav", 0.750, ATTN_NORM);
                }
                
                self.last_rev = time;
            }
            
        }
        else
        {
            
            if(lspeed < 250.000)
            {
                sound(self, 6.000, "rally/engine/rev/takeoff.wav", 0.750, ATTN_NORM);
                self.last_rev = time;
            }
            
        }
        
    }
    else
    {
        
        if((vspeed < lspeed) && (self.last_backrev < (time - SNDLEN_HIGHREV)))
        {
            if((vspeed > 800.000) && (vspeed < 950.000))
            {
                sound(self, 5.000, "rally/engine/rev/backrev2.wav", 0.750, ATTN_NORM);
                self.last_backrev = time;
            }
            else
            {
                if((vspeed > 600.000) && (vspeed < 750.000))
                {
                    sound(self, 5.000, "rally/engine/rev/backrev.wav", 0.750, ATTN_NORM);
                    self.last_backrev = time;
                }
                else
                {
                    
                    if((vspeed > 400.000) && (vspeed < 550.000))
                    {
                        sound(self, 5.000, "rally/engine/rev/backrev3.wav", 0.750, ATTN_NORM);
                        self.last_backrev = time;
                    }
                    
                }
                
            }
            
        }
        
    }
    
};

// DoEngineNoises
// function begins at statement 3859, parm_start=3903
// OP_LOAD_F	28	644	3910
// OP_BITAND	3910	702	3911
// OP_IFNOT	3911	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	591	3912
// OP_SUB_F	31	2869	3913
// OP_LT	3912	3913	3914
// OP_IFNOT	3914	625	0
// OP_ADDRESS	28	591	3915
// OP_STOREP_F	31	3915	0
// OP_LOAD_F	28	644	3916
// OP_BITAND	3916	692	3917
// OP_NOT_F	719	0	3918
// OP_AND	3917	3918	3919
// OP_BITAND	723	696	3920
// OP_SUB_F	31	819	3921
// OP_LT	727	3921	3922
// OP_AND	3920	3922	3923
// OP_OR	3919	3923	3924
// OP_GE	738	823	3925
// OP_OR	3924	3925	3926
// OP_IFNOT	3926	458	0
// OP_LOAD_F	28	182	3927
// OP_BITAND	3927	228	3928
// OP_IFNOT	3928	20	0
// OP_DIV_F	3903	778	3929
// OP_MUL_F	1112	3929	3930
// OP_STORE_F	3930	3904	0
// OP_LT	3904	829	3931
// OP_IFNOT	3931	4	0
// OP_MUL_F	3904	821	3932
// OP_STORE_F	3932	3904	0
// OP_GOTO	11	0	0
// OP_LT	3904	834	3933
// OP_IFNOT	3933	6	0
// OP_SUB_F	3904	829	3934
// OP_ADD_F	3934	823	3935
// OP_MUL_F	3935	883	3936
// OP_STORE_F	3936	3904	0
// OP_GOTO	4	0	0
// OP_SUB_F	3904	829	3937
// OP_MUL_F	3937	3938	3939
// OP_STORE_F	3939	3904	0
// OP_GOTO	7	0	0
// OP_LOAD_F	28	654	3940
// OP_ADD_F	3940	819	3941
// OP_STORE_F	3941	3904	0
// OP_GT	3904	1112	3942
// OP_IFNOT	3942	2	0
// OP_STORE_F	1112	3904	0
// OP_STORE_V	3904	4	0
// OP_CALL1	495	0	0
// OP_STORE_F	1	3904	0
// OP_GT	3904	1112	3943
// OP_IFNOT	3943	2	0
// OP_STORE_F	1112	3904	0
// OP_GT	3904	819	3944
// OP_LOAD_F	28	654	3945
// OP_EQ_F	3904	3945	3946
// OP_AND	3944	3946	3947
// OP_IFNOT	3947	11	0
// OP_LOAD_F	28	654	3948
// OP_EQ_F	3948	1112	3949
// OP_IFNOT	3949	5	0
// OP_LOAD_F	28	654	3950
// OP_SUB_F	3950	819	3951
// OP_STORE_F	3951	3904	0
// OP_GOTO	4	0	0
// OP_LOAD_F	28	654	3952
// OP_ADD_F	3952	819	3953
// OP_STORE_F	3953	3904	0
// OP_LOAD_F	28	628	3954
// OP_EQ_F	3954	825	3955
// OP_IFNOT	3955	97	0
// OP_LOAD_F	28	132	3956
// OP_EQ_F	3956	817	3957
// OP_IFNOT	3957	48	0
// OP_STORE_S	3958	3909	0
// OP_LE	3904	821	3959
// OP_IFNOT	3959	3	0
// OP_STORE_S	3960	3908	0
// OP_GOTO	42	0	0
// OP_LE	3904	825	3961
// OP_IFNOT	3961	3	0
// OP_STORE_S	3960	3908	0
// OP_GOTO	38	0	0
// OP_LE	3904	829	3962
// OP_IFNOT	3962	3	0
// OP_STORE_S	3963	3908	0
// OP_GOTO	34	0	0
// OP_LE	3904	843	3964
// OP_IFNOT	3964	3	0
// OP_STORE_S	3965	3908	0
// OP_GOTO	30	0	0
// OP_LE	3904	855	3966
// OP_IFNOT	3966	3	0
// OP_STORE_S	3967	3908	0
// OP_GOTO	26	0	0
// OP_LE	3904	834	3968
// OP_IFNOT	3968	3	0
// OP_STORE_S	3969	3908	0
// OP_GOTO	22	0	0
// OP_LE	3904	841	3970
// OP_IFNOT	3970	3	0
// OP_STORE_S	3971	3908	0
// OP_GOTO	18	0	0
// OP_LE	3904	2670	3972
// OP_IFNOT	3972	3	0
// OP_STORE_S	3973	3908	0
// OP_GOTO	14	0	0
// OP_LE	3904	3974	3975
// OP_IFNOT	3975	3	0
// OP_STORE_S	3976	3908	0
// OP_GOTO	10	0	0
// OP_LE	3904	1112	3977
// OP_IFNOT	3977	8	0
// OP_LOAD_F	28	182	3978
// OP_BITAND	3978	228	3979
// OP_IFNOT	3979	4	0
// OP_STORE_S	3980	3908	0
// OP_STORE_F	3981	3904	0
// OP_GOTO	2	0	0
// OP_STORE_S	3982	3908	0
// OP_GOTO	47	0	0
// OP_STORE_S	3983	3909	0
// OP_LE	3904	821	3984
// OP_IFNOT	3984	3	0
// OP_STORE_S	3985	3908	0
// OP_GOTO	42	0	0
// OP_LE	3904	825	3986
// OP_IFNOT	3986	3	0
// OP_STORE_S	3985	3908	0
// OP_GOTO	38	0	0
// OP_LE	3904	829	3987
// OP_IFNOT	3987	3	0
// OP_STORE_S	3988	3908	0
// OP_GOTO	34	0	0
// OP_LE	3904	843	3989
// OP_IFNOT	3989	3	0
// OP_STORE_S	3990	3908	0
// OP_GOTO	30	0	0
// OP_LE	3904	855	3991
// OP_IFNOT	3991	3	0
// OP_STORE_S	3992	3908	0
// OP_GOTO	26	0	0
// OP_LE	3904	834	3993
// OP_IFNOT	3993	3	0
// OP_STORE_S	3994	3908	0
// OP_GOTO	22	0	0
// OP_LE	3904	841	3995
// OP_IFNOT	3995	3	0
// OP_STORE_S	3996	3908	0
// OP_GOTO	18	0	0
// OP_LE	3904	2670	3997
// OP_IFNOT	3997	3	0
// OP_STORE_S	3998	3908	0
// OP_GOTO	14	0	0
// OP_LE	3904	3974	3999
// OP_IFNOT	3999	3	0
// OP_STORE_S	4000	3908	0
// OP_GOTO	10	0	0
// OP_LE	3904	1112	4001
// OP_IFNOT	4001	8	0
// OP_LOAD_F	28	182	4002
// OP_BITAND	4002	228	4003
// OP_IFNOT	4003	4	0
// OP_STORE_S	4004	3908	0
// OP_STORE_F	3981	3904	0
// OP_GOTO	2	0	0
// OP_STORE_S	4005	3908	0
// OP_LOAD_F	28	628	4006
// OP_EQ_F	4006	821	4007
// OP_IFNOT	4007	88	0
// OP_STORE_S	4008	3909	0
// OP_LE	3904	819	4009
// OP_IFNOT	4009	3	0
// OP_STORE_S	4010	3908	0
// OP_GOTO	82	0	0
// OP_EQ_F	3904	821	4011
// OP_IFNOT	4011	3	0
// OP_STORE_S	4012	3908	0
// OP_GOTO	78	0	0
// OP_EQ_F	3904	823	4013
// OP_IFNOT	4013	3	0
// OP_STORE_S	4014	3908	0
// OP_GOTO	74	0	0
// OP_EQ_F	3904	825	4015
// OP_IFNOT	4015	3	0
// OP_STORE_S	4016	3908	0
// OP_GOTO	70	0	0
// OP_EQ_F	3904	827	4017
// OP_IFNOT	4017	3	0
// OP_STORE_S	4018	3908	0
// OP_GOTO	66	0	0
// OP_EQ_F	3904	829	4019
// OP_IFNOT	4019	3	0
// OP_STORE_S	4020	3908	0
// OP_GOTO	62	0	0
// OP_EQ_F	3904	839	4021
// OP_IFNOT	4021	3	0
// OP_STORE_S	4022	3908	0
// OP_GOTO	58	0	0
// OP_EQ_F	3904	843	4023
// OP_IFNOT	4023	3	0
// OP_STORE_S	4024	3908	0
// OP_GOTO	54	0	0
// OP_EQ_F	3904	847	4025
// OP_IFNOT	4025	3	0
// OP_STORE_S	4026	3908	0
// OP_GOTO	50	0	0
// OP_EQ_F	3904	855	4027
// OP_IFNOT	4027	3	0
// OP_STORE_S	4028	3908	0
// OP_GOTO	46	0	0
// OP_EQ_F	3904	831	4029
// OP_IFNOT	4029	3	0
// OP_STORE_S	4030	3908	0
// OP_GOTO	42	0	0
// OP_EQ_F	3904	834	4031
// OP_IFNOT	4031	3	0
// OP_STORE_S	4032	3908	0
// OP_GOTO	38	0	0
// OP_EQ_F	3904	837	4033
// OP_IFNOT	4033	3	0
// OP_STORE_S	4034	3908	0
// OP_GOTO	34	0	0
// OP_EQ_F	3904	841	4035
// OP_IFNOT	4035	3	0
// OP_STORE_S	4036	3908	0
// OP_GOTO	30	0	0
// OP_EQ_F	3904	845	4037
// OP_IFNOT	4037	3	0
// OP_STORE_S	4038	3908	0
// OP_GOTO	26	0	0
// OP_EQ_F	3904	2670	4039
// OP_IFNOT	4039	3	0
// OP_STORE_S	4040	3908	0
// OP_GOTO	22	0	0
// OP_EQ_F	3904	4041	4042
// OP_IFNOT	4042	3	0
// OP_STORE_S	4043	3908	0
// OP_GOTO	18	0	0
// OP_EQ_F	3904	3974	4044
// OP_IFNOT	4044	3	0
// OP_STORE_S	4045	3908	0
// OP_GOTO	14	0	0
// OP_EQ_F	3904	3981	4046
// OP_IFNOT	4046	3	0
// OP_STORE_S	4047	3908	0
// OP_GOTO	10	0	0
// OP_LE	3904	1112	4048
// OP_IFNOT	4048	8	0
// OP_LOAD_F	28	182	4049
// OP_BITAND	4049	228	4050
// OP_IFNOT	4050	4	0
// OP_STORE_S	4047	3908	0
// OP_STORE_F	3981	3904	0
// OP_GOTO	2	0	0
// OP_STORE_S	4051	3908	0
// OP_GOTO	100	0	0
// OP_LOAD_F	28	628	4052
// OP_EQ_F	4052	823	4053
// OP_IFNOT	4053	48	0
// OP_STORE_S	4054	3909	0
// OP_LE	3904	821	4055
// OP_IFNOT	4055	3	0
// OP_STORE_S	4056	3908	0
// OP_GOTO	42	0	0
// OP_LE	3904	825	4057
// OP_IFNOT	4057	3	0
// OP_STORE_S	4056	3908	0
// OP_GOTO	38	0	0
// OP_LE	3904	829	4058
// OP_IFNOT	4058	3	0
// OP_STORE_S	4059	3908	0
// OP_GOTO	34	0	0
// OP_LE	3904	843	4060
// OP_IFNOT	4060	3	0
// OP_STORE_S	4061	3908	0
// OP_GOTO	30	0	0
// OP_LE	3904	855	4062
// OP_IFNOT	4062	3	0
// OP_STORE_S	4063	3908	0
// OP_GOTO	26	0	0
// OP_LE	3904	834	4064
// OP_IFNOT	4064	3	0
// OP_STORE_S	4065	3908	0
// OP_GOTO	22	0	0
// OP_LE	3904	841	4066
// OP_IFNOT	4066	3	0
// OP_STORE_S	4067	3908	0
// OP_GOTO	18	0	0
// OP_LE	3904	2670	4068
// OP_IFNOT	4068	3	0
// OP_STORE_S	4069	3908	0
// OP_GOTO	14	0	0
// OP_LE	3904	3974	4070
// OP_IFNOT	4070	3	0
// OP_STORE_S	4071	3908	0
// OP_GOTO	10	0	0
// OP_LE	3904	1112	4072
// OP_IFNOT	4072	8	0
// OP_LOAD_F	28	182	4073
// OP_BITAND	4073	228	4074
// OP_IFNOT	4074	4	0
// OP_STORE_S	4075	3908	0
// OP_STORE_F	3981	3904	0
// OP_GOTO	2	0	0
// OP_STORE_S	4076	3908	0
// OP_GOTO	50	0	0
// OP_LOAD_F	28	628	4077
// OP_EQ_F	4077	827	4078
// OP_IFNOT	4078	47	0
// OP_STORE_S	4079	3909	0
// OP_LE	3904	821	4080
// OP_IFNOT	4080	3	0
// OP_STORE_S	4081	3908	0
// OP_GOTO	42	0	0
// OP_LE	3904	825	4082
// OP_IFNOT	4082	3	0
// OP_STORE_S	4081	3908	0
// OP_GOTO	38	0	0
// OP_LE	3904	829	4083
// OP_IFNOT	4083	3	0
// OP_STORE_S	4084	3908	0
// OP_GOTO	34	0	0
// OP_LE	3904	843	4085
// OP_IFNOT	4085	3	0
// OP_STORE_S	4086	3908	0
// OP_GOTO	30	0	0
// OP_LE	3904	855	4087
// OP_IFNOT	4087	3	0
// OP_STORE_S	4088	3908	0
// OP_GOTO	26	0	0
// OP_LE	3904	834	4089
// OP_IFNOT	4089	3	0
// OP_STORE_S	4090	3908	0
// OP_GOTO	22	0	0
// OP_LE	3904	841	4091
// OP_IFNOT	4091	3	0
// OP_STORE_S	4092	3908	0
// OP_GOTO	18	0	0
// OP_LE	3904	2670	4093
// OP_IFNOT	4093	3	0
// OP_STORE_S	4094	3908	0
// OP_GOTO	14	0	0
// OP_LE	3904	3974	4095
// OP_IFNOT	4095	3	0
// OP_STORE_S	4096	3908	0
// OP_GOTO	10	0	0
// OP_LE	3904	1112	4097
// OP_IFNOT	4097	8	0
// OP_LOAD_F	28	182	4098
// OP_BITAND	4098	228	4099
// OP_IFNOT	4099	4	0
// OP_STORE_S	4100	3908	0
// OP_STORE_F	3981	3904	0
// OP_GOTO	2	0	0
// OP_STORE_S	4101	3908	0
// OP_LOAD_F	28	655	4102
// OP_EQ_F	4102	821	4103
// OP_IFNOT	4103	8	0
// OP_ADDRESS	28	671	4104
// OP_STOREP_S	3908	4104	0
// OP_ADDRESS	28	669	4105
// OP_STOREP_F	1152	4105	0
// OP_ADDRESS	28	655	4106
// OP_STOREP_F	819	4106	0
// OP_GOTO	7	0	0
// OP_ADDRESS	28	672	4107
// OP_STOREP_S	3908	4107	0
// OP_ADDRESS	28	670	4108
// OP_STOREP_F	1152	4108	0
// OP_ADDRESS	28	655	4109
// OP_STOREP_F	821	4109	0
// OP_ADDRESS	28	654	4110
// OP_STOREP_F	3904	4110	0
// OP_DIV_F	3904	1112	4111
// OP_MUL_F	4111	2575	4112
// OP_ADD_F	1992	4112	4113
// OP_STORE_F	4113	3905	0
// OP_LOAD_F	28	628	4114
// OP_GE	4114	823	4115
// OP_LOAD_F	28	628	4116
// OP_LE	4116	825	4117
// OP_AND	4115	4117	4118
// OP_IFNOT	4118	3	0
// OP_MUL_F	3905	883	4119
// OP_STORE_F	4119	3905	0
// OP_DIV_F	3904	821	4120
// OP_STORE_V	4120	4	0
// OP_CALL1	496	0	0
// OP_STORE_F	1	3907	0
// OP_GT	3907	855	4121
// OP_IFNOT	4121	3	0
// OP_STORE_F	855	3907	0
// OP_GOTO	4	0	0
// OP_LT	3907	819	4122
// OP_IFNOT	4122	2	0
// OP_STORE_F	819	3907	0
// OP_LOAD_F	28	652	4123
// OP_LOAD_F	28	669	4124
// OP_SUB_F	31	4124	4125
// OP_LT	4123	4125	4126
// OP_LOAD_S	28	671	4127
// OP_NE_S	4127	4128	4129
// OP_AND	4126	4129	4130
// OP_IFNOT	4130	32	0
// OP_LT	35	855	4131
// OP_LOAD_F	28	578	4132
// OP_GT	4132	817	4133
// OP_OR	4131	4133	4134
// OP_IFNOT	4134	9	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	671	4135
// OP_STORE_V	4135	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	819	16	0
// OP_CALL5	467	0	0
// OP_GOTO	13	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	3909	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	3907	4	0
// OP_CALL1	485	0	0
// OP_STORE_S	1	3908	0
// OP_STORE_V	28	4	0
// OP_STORE_V	3908	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	888	7	0
// OP_CALL2	480	0	0
// OP_ADDRESS	28	652	4136
// OP_STOREP_F	31	4136	0
// OP_ADDRESS	28	653	4137
// OP_STOREP_F	31	4137	0
// OP_ADDRESS	28	647	4138
// OP_STOREP_F	817	4138	0
// OP_LOAD_F	28	653	4139
// OP_LOAD_F	28	670	4140
// OP_SUB_F	31	4140	4141
// OP_LT	4139	4141	4142
// OP_LOAD_S	28	672	4143
// OP_NE_S	4143	4128	4144
// OP_AND	4142	4144	4145
// OP_IFNOT	4145	32	0
// OP_LT	35	855	4146
// OP_LOAD_F	28	578	4147
// OP_GT	4147	817	4148
// OP_OR	4146	4148	4149
// OP_IFNOT	4149	9	0
// OP_STORE_V	28	4	0
// OP_STORE_V	338	7	0
// OP_LOAD_S	28	672	4150
// OP_STORE_V	4150	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	819	16	0
// OP_CALL5	467	0	0
// OP_GOTO	13	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	3909	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	3907	4	0
// OP_CALL1	485	0	0
// OP_STORE_S	1	3908	0
// OP_STORE_V	28	4	0
// OP_STORE_V	3908	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	888	7	0
// OP_CALL2	480	0	0
// OP_ADDRESS	28	652	4151
// OP_STOREP_F	31	4151	0
// OP_ADDRESS	28	653	4152
// OP_STOREP_F	31	4152	0
// OP_ADDRESS	28	647	4153
// OP_STOREP_F	817	4153	0
// OP_GOTO	154	0	0
// OP_LOAD_F	28	590	4154
// OP_GT	3903	4154	4155
// OP_AND	719	4155	4156
// OP_LOAD_F	28	644	4157
// OP_BITAND	4157	692	4158
// OP_AND	4156	4158	4159
// OP_LOAD_F	28	648	4160
// OP_SUB_F	31	797	4161
// OP_LT	4160	4161	4162
// OP_AND	4159	4162	4163
// OP_IFNOT	4163	32	0
// OP_ADDRESS	28	648	4164
// OP_STOREP_F	31	4164	0
// OP_LOAD_F	28	628	4165
// OP_EQ_F	4165	825	4166
// OP_IFNOT	4166	11	0
// OP_STORE_V	28	4	0
// OP_STORE_V	335	7	0
// OP_STORE_V	4167	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	648	4168
// OP_SUB_F	31	1182	4169
// OP_STOREP_F	4169	4168	0
// OP_GOTO	17	0	0
// OP_LOAD_F	28	628	4170
// OP_EQ_F	4170	823	4171
// OP_IFNOT	4171	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	335	7	0
// OP_STORE_V	4172	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_GOTO	7	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	335	7	0
// OP_STORE_V	4173	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_LOAD_F	28	647	4174
// OP_SUB_F	31	796	4175
// OP_LT	4174	4175	4176
// OP_LOAD_F	28	644	4177
// OP_BITAND	4177	692	4178
// OP_AND	4176	4178	4179
// OP_LOAD_F	28	665	4180
// OP_SUB_F	31	800	4181
// OP_LT	4180	4181	4182
// OP_AND	4179	4182	4183
// OP_IFNOT	4183	101	0
// OP_LOAD_F	28	628	4184
// OP_EQ_F	4184	819	4185
// OP_IFNOT	4185	14	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	4186	10	0
// OP_STORE_V	1930	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	338	7	0
// OP_STORE_V	4186	10	0
// OP_STORE_V	817	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_GOTO	81	0	0
// OP_LOAD_F	28	628	4187
// OP_EQ_F	4187	821	4188
// OP_IFNOT	4188	14	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	4189	10	0
// OP_STORE_V	1930	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	338	7	0
// OP_STORE_V	4189	10	0
// OP_STORE_V	817	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_GOTO	65	0	0
// OP_LOAD_F	28	628	4190
// OP_EQ_F	4190	823	4191
// OP_IFNOT	4191	14	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	4056	10	0
// OP_STORE_V	1930	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	338	7	0
// OP_STORE_V	4056	10	0
// OP_STORE_V	817	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_GOTO	49	0	0
// OP_LOAD_F	28	628	4192
// OP_EQ_F	4192	825	4193
// OP_IFNOT	4193	31	0
// OP_LOAD_ENT	28	548	4194
// OP_LOAD_F	4194	132	4195
// OP_EQ_F	4195	817	4196
// OP_IFNOT	4196	14	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	3985	10	0
// OP_STORE_V	1930	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	338	7	0
// OP_STORE_V	3985	10	0
// OP_STORE_V	817	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_GOTO	13	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	3960	10	0
// OP_STORE_V	1930	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	338	7	0
// OP_STORE_V	3960	10	0
// OP_STORE_V	817	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_GOTO	16	0	0
// OP_LOAD_F	28	628	4197
// OP_EQ_F	4197	827	4198
// OP_IFNOT	4198	13	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	4081	10	0
// OP_STORE_V	1930	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	338	7	0
// OP_STORE_V	4081	10	0
// OP_STORE_V	817	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	647	4199
// OP_STOREP_F	31	4199	0
// OP_ADDRESS	28	652	4200
// OP_STOREP_F	817	4200	0
// OP_DONE	0	0	0
void (float vel_speed) DoEngineNoises = 
{
    local float speed_ratio;
    local float vol;
    local float snd_delay;
    local float samp;
    local string new_sample;
    local string ch;
    
    if(self.racing_flags & QR_OUT_OF_TIME)
    {
        return;
    }
    
    
    if(self.last_engine < (time - 0.100))
    {
        self.last_engine = time;
        if((((self.racing_flags & QR_START_READY) && !hold_flag) || ((global_racing_flags & QR_NO_STARTFINISH) && (race_start_time < (time - 1.000)))) || (rally_type_index >= 3.000))
        {
            if(self.flags & FL_ONGROUND)
            {
                speed_ratio = 20.000 * (vel_speed / MAX_SPEED);
                if(speed_ratio < 6.000)
                {
                    speed_ratio = speed_ratio * 2.000;
                }
                else
                {
                    if(speed_ratio < 12.000)
                    {
                        speed_ratio = ((speed_ratio - 6.000) + 3.000) * 1.500;
                    }
                    else
                    {
                        speed_ratio = (speed_ratio - 6.000) * 1.600;
                    }
                    
                }
                
            }
            else
            {
                speed_ratio = self.last_engine_ratio + 1.000;
                
                if(speed_ratio > 20.000)
                {
                    speed_ratio = 20.000;
                }
                
            }
            
            speed_ratio = floor(speed_ratio);
            
            if(speed_ratio > 20.000)
            {
                speed_ratio = 20.000;
            }
            
            
            if((speed_ratio > 1.000) && (speed_ratio == self.last_engine_ratio))
            {
                if(self.last_engine_ratio == 20.000)
                {
                    speed_ratio = self.last_engine_ratio - 1.000;
                }
                else
                {
                    speed_ratio = self.last_engine_ratio + 1.000;
                }
                
            }
            
            
            if(self.car_index == 4.000)
            {
                if(self.skin == 0.000)
                {
                    ch = "m";
                    if(speed_ratio <= 2.000)
                    {
                        new_sample = "rally/engine/ma01.wav";
                    }
                    else
                    {
                        if(speed_ratio <= 4.000)
                        {
                            new_sample = "rally/engine/ma01.wav";
                        }
                        else
                        {
                            if(speed_ratio <= 6.000)
                            {
                                new_sample = "rally/engine/ma02.wav";
                            }
                            else
                            {
                                if(speed_ratio <= 8.000)
                                {
                                    new_sample = "rally/engine/ma03.wav";
                                }
                                else
                                {
                                    if(speed_ratio <= 10.000)
                                    {
                                        new_sample = "rally/engine/ma04.wav";
                                    }
                                    else
                                    {
                                        if(speed_ratio <= 12.000)
                                        {
                                            new_sample = "rally/engine/ma05.wav";
                                        }
                                        else
                                        {
                                            if(speed_ratio <= 14.000)
                                            {
                                                new_sample = "rally/engine/ma06.wav";
                                            }
                                            else
                                            {
                                                if(speed_ratio <= 16.000)
                                                {
                                                    new_sample = "rally/engine/ma07.wav";
                                                }
                                                else
                                                {
                                                    if(speed_ratio <= 18.000)
                                                    {
                                                        new_sample = "rally/engine/ma08.wav";
                                                    }
                                                    else
                                                    {
                                                        
                                                        if(speed_ratio <= 20.000)
                                                        {
                                                            if(self.flags & FL_ONGROUND)
                                                            {
                                                                new_sample = "rally/engine/ma09.wav";
                                                                speed_ratio = 19.000;
                                                            }
                                                            else
                                                            {
                                                                new_sample = "rally/engine/ma10.wav";
                                                            }
                                                            
                                                        }
                                                        
                                                    }
                                                    
                                                }
                                                
                                            }
                                            
                                        }
                                        
                                    }
                                    
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                else
                {
                    ch = "t";
                    if(speed_ratio <= 2.000)
                    {
                        new_sample = "rally/engine/test01.wav";
                    }
                    else
                    {
                        if(speed_ratio <= 4.000)
                        {
                            new_sample = "rally/engine/test01.wav";
                        }
                        else
                        {
                            if(speed_ratio <= 6.000)
                            {
                                new_sample = "rally/engine/test02.wav";
                            }
                            else
                            {
                                if(speed_ratio <= 8.000)
                                {
                                    new_sample = "rally/engine/test03.wav";
                                }
                                else
                                {
                                    if(speed_ratio <= 10.000)
                                    {
                                        new_sample = "rally/engine/test04.wav";
                                    }
                                    else
                                    {
                                        if(speed_ratio <= 12.000)
                                        {
                                            new_sample = "rally/engine/test05.wav";
                                        }
                                        else
                                        {
                                            if(speed_ratio <= 14.000)
                                            {
                                                new_sample = "rally/engine/test06.wav";
                                            }
                                            else
                                            {
                                                if(speed_ratio <= 16.000)
                                                {
                                                    new_sample = "rally/engine/test07.wav";
                                                }
                                                else
                                                {
                                                    if(speed_ratio <= 18.000)
                                                    {
                                                        new_sample = "rally/engine/test08.wav";
                                                    }
                                                    else
                                                    {
                                                        
                                                        if(speed_ratio <= 20.000)
                                                        {
                                                            if(self.flags & FL_ONGROUND)
                                                            {
                                                                new_sample = "rally/engine/test09.wav";
                                                                speed_ratio = 19.000;
                                                            }
                                                            else
                                                            {
                                                                new_sample = "rally/engine/test10.wav";
                                                            }
                                                            
                                                        }
                                                        
                                                    }
                                                    
                                                }
                                                
                                            }
                                            
                                        }
                                        
                                    }
                                    
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
            if(self.car_index == 2.000)
            {
                ch = "s";
                if(speed_ratio <= 1.000)
                {
                    new_sample = "rally/engine/su01.wav";
                }
                else
                {
                    if(speed_ratio == 2.000)
                    {
                        new_sample = "rally/engine/su02.wav";
                    }
                    else
                    {
                        if(speed_ratio == 3.000)
                        {
                            new_sample = "rally/engine/su03.wav";
                        }
                        else
                        {
                            if(speed_ratio == 4.000)
                            {
                                new_sample = "rally/engine/su04.wav";
                            }
                            else
                            {
                                if(speed_ratio == 5.000)
                                {
                                    new_sample = "rally/engine/su05.wav";
                                }
                                else
                                {
                                    if(speed_ratio == 6.000)
                                    {
                                        new_sample = "rally/engine/su06.wav";
                                    }
                                    else
                                    {
                                        if(speed_ratio == 7.000)
                                        {
                                            new_sample = "rally/engine/su07.wav";
                                        }
                                        else
                                        {
                                            if(speed_ratio == 8.000)
                                            {
                                                new_sample = "rally/engine/su08.wav";
                                            }
                                            else
                                            {
                                                if(speed_ratio == 9.000)
                                                {
                                                    new_sample = "rally/engine/su09.wav";
                                                }
                                                else
                                                {
                                                    if(speed_ratio == 10.000)
                                                    {
                                                        new_sample = "rally/engine/su10.wav";
                                                    }
                                                    else
                                                    {
                                                        if(speed_ratio == 11.000)
                                                        {
                                                            new_sample = "rally/engine/su11.wav";
                                                        }
                                                        else
                                                        {
                                                            if(speed_ratio == 12.000)
                                                            {
                                                                new_sample = "rally/engine/su12.wav";
                                                            }
                                                            else
                                                            {
                                                                if(speed_ratio == 13.000)
                                                                {
                                                                    new_sample = "rally/engine/su13.wav";
                                                                }
                                                                else
                                                                {
                                                                    if(speed_ratio == 14.000)
                                                                    {
                                                                        new_sample = "rally/engine/su14.wav";
                                                                    }
                                                                    else
                                                                    {
                                                                        if(speed_ratio == 15.000)
                                                                        {
                                                                            new_sample = "rally/engine/su15.wav";
                                                                        }
                                                                        else
                                                                        {
                                                                            if(speed_ratio == 16.000)
                                                                            {
                                                                                new_sample = "rally/engine/su16.wav";
                                                                            }
                                                                            else
                                                                            {
                                                                                if(speed_ratio == 17.000)
                                                                                {
                                                                                    new_sample = "rally/engine/su17.wav";
                                                                                }
                                                                                else
                                                                                {
                                                                                    if(speed_ratio == 18.000)
                                                                                    {
                                                                                        new_sample = "rally/engine/su18.wav";
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if(speed_ratio == 19.000)
                                                                                        {
                                                                                            new_sample = "rally/engine/su19.wav";
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            
                                                                                            if(speed_ratio <= 20.000)
                                                                                            {
                                                                                                if(self.flags & FL_ONGROUND)
                                                                                                {
                                                                                                    new_sample = "rally/engine/su19.wav";
                                                                                                    speed_ratio = 19.000;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    new_sample = "rally/engine/su20.wav";
                                                                                                }
                                                                                                
                                                                                            }
                                                                                            
                                                                                        }
                                                                                        
                                                                                    }
                                                                                    
                                                                                }
                                                                                
                                                                            }
                                                                            
                                                                        }
                                                                        
                                                                    }
                                                                    
                                                                }
                                                                
                                                            }
                                                            
                                                        }
                                                        
                                                    }
                                                    
                                                }
                                                
                                            }
                                            
                                        }
                                        
                                    }
                                    
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            else
            {
                if(self.car_index == 3.000)
                {
                    ch = "a";
                    if(speed_ratio <= 2.000)
                    {
                        new_sample = "rally/engine/aa01.wav";
                    }
                    else
                    {
                        if(speed_ratio <= 4.000)
                        {
                            new_sample = "rally/engine/aa01.wav";
                        }
                        else
                        {
                            if(speed_ratio <= 6.000)
                            {
                                new_sample = "rally/engine/aa02.wav";
                            }
                            else
                            {
                                if(speed_ratio <= 8.000)
                                {
                                    new_sample = "rally/engine/aa03.wav";
                                }
                                else
                                {
                                    if(speed_ratio <= 10.000)
                                    {
                                        new_sample = "rally/engine/aa04.wav";
                                    }
                                    else
                                    {
                                        if(speed_ratio <= 12.000)
                                        {
                                            new_sample = "rally/engine/aa05.wav";
                                        }
                                        else
                                        {
                                            if(speed_ratio <= 14.000)
                                            {
                                                new_sample = "rally/engine/aa06.wav";
                                            }
                                            else
                                            {
                                                if(speed_ratio <= 16.000)
                                                {
                                                    new_sample = "rally/engine/aa07.wav";
                                                }
                                                else
                                                {
                                                    if(speed_ratio <= 18.000)
                                                    {
                                                        new_sample = "rally/engine/aa08.wav";
                                                    }
                                                    else
                                                    {
                                                        
                                                        if(speed_ratio <= 20.000)
                                                        {
                                                            if(self.flags & FL_ONGROUND)
                                                            {
                                                                new_sample = "rally/engine/aa09.wav";
                                                                speed_ratio = 19.000;
                                                            }
                                                            else
                                                            {
                                                                new_sample = "rally/engine/aa10.wav";
                                                            }
                                                            
                                                        }
                                                        
                                                    }
                                                    
                                                }
                                                
                                            }
                                            
                                        }
                                        
                                    }
                                    
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                else
                {
                    
                    if(self.car_index == 5.000)
                    {
                        ch = "r";
                        if(speed_ratio <= 2.000)
                        {
                            new_sample = "rally/engine/tri01.wav";
                        }
                        else
                        {
                            if(speed_ratio <= 4.000)
                            {
                                new_sample = "rally/engine/tri01.wav";
                            }
                            else
                            {
                                if(speed_ratio <= 6.000)
                                {
                                    new_sample = "rally/engine/tri02.wav";
                                }
                                else
                                {
                                    if(speed_ratio <= 8.000)
                                    {
                                        new_sample = "rally/engine/tri03.wav";
                                    }
                                    else
                                    {
                                        if(speed_ratio <= 10.000)
                                        {
                                            new_sample = "rally/engine/tri04.wav";
                                        }
                                        else
                                        {
                                            if(speed_ratio <= 12.000)
                                            {
                                                new_sample = "rally/engine/tri05.wav";
                                            }
                                            else
                                            {
                                                if(speed_ratio <= 14.000)
                                                {
                                                    new_sample = "rally/engine/tri06.wav";
                                                }
                                                else
                                                {
                                                    if(speed_ratio <= 16.000)
                                                    {
                                                        new_sample = "rally/engine/tri07.wav";
                                                    }
                                                    else
                                                    {
                                                        if(speed_ratio <= 18.000)
                                                        {
                                                            new_sample = "rally/engine/tri08.wav";
                                                        }
                                                        else
                                                        {
                                                            
                                                            if(speed_ratio <= 20.000)
                                                            {
                                                                if(self.flags & FL_ONGROUND)
                                                                {
                                                                    new_sample = "rally/engine/tri09.wav";
                                                                    speed_ratio = 19.000;
                                                                }
                                                                else
                                                                {
                                                                    new_sample = "rally/engine/tri10.wav";
                                                                }
                                                                
                                                            }
                                                            
                                                        }
                                                        
                                                    }
                                                    
                                                }
                                                
                                            }
                                            
                                        }
                                        
                                    }
                                    
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
            if(self.last_engine_chan == 2.000)
            {
                self.SAMP_ENGINE1 = new_sample;
                self.SNDLEN_ENGINE1 = 0.200;
                self.last_engine_chan = 1.000;
            }
            else
            {
                self.SAMP_ENGINE2 = new_sample;
                self.SNDLEN_ENGINE2 = 0.200;
                self.last_engine_chan = 2.000;
            }
            
            self.last_engine_ratio = speed_ratio;
            vol = 0.150 + ((speed_ratio / 20.000) * 0.300);
            
            if((self.car_index >= 3.000) && (self.car_index <= 4.000))
            {
                vol = vol * 1.500;
            }
            
            samp = ceil(speed_ratio / 2.000);
            if(samp > 10.000)
            {
                samp = 10.000;
            }
            else
            {
                
                if(samp < 1.000)
                {
                    samp = 1.000;
                }
                
            }
            
            
            if((self.last_engine1 < (time - self.SNDLEN_ENGINE1)) && (self.SAMP_ENGINE1 != ""))
            {
                if((deathmatch < 10.000) || (self.lastmove_z > 0.000))
                {
                    sound(self, CHAN_VOICE, self.SAMP_ENGINE1, 1.000, 1.000);
                }
                else
                {
                    stuffcmd(self, ch);
                    new_sample = ftos(samp);
                    stuffcmd(self, new_sample);
                    stuffcmd(self, "\n");
                }
                
                self.last_engine1 = time;
                self.last_engine2 = time;
                self.last_idle = 0.000;
            }
            
            
            if((self.last_engine2 < (time - self.SNDLEN_ENGINE2)) && (self.SAMP_ENGINE2 != ""))
            {
                if((deathmatch < 10.000) || (self.lastmove_z > 0.000))
                {
                    sound(self, CHAN_BODY, self.SAMP_ENGINE2, 1.000, 1.000);
                }
                else
                {
                    stuffcmd(self, ch);
                    new_sample = ftos(samp);
                    stuffcmd(self, new_sample);
                    stuffcmd(self, "\n");
                }
                
                self.last_engine1 = time;
                self.last_engine2 = time;
                self.last_idle = 0.000;
            }
            
        }
        else
        {
            
            if(((hold_flag && (vel_speed > self.last_speed)) && (self.racing_flags & QR_START_READY)) && (self.last_rev < (time - SNDLEN_REV)))
            {
                self.last_rev = time;
                if(self.car_index == 4.000)
                {
                    sound(self, CHAN_WEAPON, "rally/rev3.wav", 1.000, ATTN_STATIC);
                    self.last_rev = time - 0.500;
                }
                else
                {
                    if(self.car_index == 3.000)
                    {
                        sound(self, CHAN_WEAPON, "rally/rev4.wav", 1.000, ATTN_STATIC);
                    }
                    else
                    {
                        sound(self, CHAN_WEAPON, "rally/rev2.wav", 1.000, ATTN_STATIC);
                    }
                    
                }
                
            }
            
            
            if(((self.last_idle < (time - SNDLEN_IDLE)) && (self.racing_flags & QR_START_READY)) && (self.ignition_time < (time - SNDLEN_IGNITION)))
            {
                if(self.car_index == 1.000)
                {
                    sound(self, CHAN_VOICE, "rally/engine/co01.wav", 0.400, ATTN_STATIC);
                    sound(self, CHAN_BODY, "rally/engine/co01.wav", 0.000, ATTN_STATIC);
                }
                else
                {
                    if(self.car_index == 2.000)
                    {
                        sound(self, CHAN_VOICE, "rally/engine/suidle.wav", 0.400, ATTN_STATIC);
                        sound(self, CHAN_BODY, "rally/engine/suidle.wav", 0.000, ATTN_STATIC);
                    }
                    else
                    {
                        if(self.car_index == 3.000)
                        {
                            sound(self, CHAN_VOICE, "rally/engine/aa01.wav", 0.400, ATTN_STATIC);
                            sound(self, CHAN_BODY, "rally/engine/aa01.wav", 0.000, ATTN_STATIC);
                        }
                        else
                        {
                            if(self.car_index == 4.000)
                            {
                                if(self.veh_body.skin == 0.000)
                                {
                                    sound(self, CHAN_VOICE, "rally/engine/test01.wav", 0.400, ATTN_STATIC);
                                    sound(self, CHAN_BODY, "rally/engine/test01.wav", 0.000, ATTN_STATIC);
                                }
                                else
                                {
                                    sound(self, CHAN_VOICE, "rally/engine/ma01.wav", 0.400, ATTN_STATIC);
                                    sound(self, CHAN_BODY, "rally/engine/ma01.wav", 0.000, ATTN_STATIC);
                                }
                                
                            }
                            else
                            {
                                
                                if(self.car_index == 5.000)
                                {
                                    sound(self, CHAN_VOICE, "rally/engine/tri01.wav", 0.400, ATTN_STATIC);
                                    sound(self, CHAN_BODY, "rally/engine/tri01.wav", 0.000, ATTN_STATIC);
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
                self.last_idle = time;
                self.last_engine1 = 0.000;
            }
            
        }
        
    }
    
};

// body_close_to_ground
// function begins at statement 4492, parm_start=4202
// OP_LOAD_V	28	105	4208
// OP_STORE_V	4208	4205	0
// OP_STORE_V	4205	4	0
// OP_MUL_VF	1215	4202	4211
// OP_SUB_V	4205	4211	4214
// OP_STORE_V	4214	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_LT	70	819	4217
// OP_IFNOT	4217	4	0
// OP_EQ_E	78	30	4218
// OP_IFNOT	4218	2	0
// OP_RETURN	219	0	0
// OP_DONE	0	0	0
float (float max_dist) body_close_to_ground = 
{
    local entity e;
    local entity etemp;
    local vector org;
    org = self.origin;
    traceline(org, org - ('0.000 0.000 1.000' * max_dist), FALSE, self);
    
    if(trace_fraction < 1.000)
    {
        
        if(trace_ent == world)
        {
            return TRUE;
        }
        
    }
    
};

// FindNextMarker
// function begins at statement 4507, parm_start=4220
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	4224	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	4221	0
// OP_NE_E	4221	30	4225
// OP_IFNOT	4225	10	0
// OP_LOAD_F	4221	158	4226
// OP_STORE_F	4226	4222	0
// OP_LOAD_F	4220	158	4227
// OP_ADD_F	4227	819	4228
// OP_STORE_F	4228	4223	0
// OP_GT	4223	4222	4229
// OP_IFNOT	4229	2	0
// OP_STORE_F	819	4223	0
// OP_GOTO	4	0	0
// OP_STORE_V	4230	4	0
// OP_CALL1	482	0	0
// OP_RETURN	30	0	0
// OP_STORE_ENT	30	4221	0
// OP_STORE_V	4221	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	1104	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	4221	0
// OP_NE_E	1	30	4231
// OP_IFNOT	4231	6	0
// OP_LOAD_F	4221	158	4232
// OP_EQ_F	4232	4223	4233
// OP_IFNOT	4233	2	0
// OP_RETURN	4221	0	0
// OP_GOTO	-11	0	0
// OP_STORE_V	4234	4	0
// OP_CALL1	482	0	0
// OP_RETURN	30	0	0
// OP_DONE	0	0	0
entity (entity old_next) FindNextMarker = 
{
    local entity trav;
    local float marker_count;
    local float next_index;
    trav = find(world, classname, "rally_startfinish");
    if(trav != world)
    {
        marker_count = trav.ammo_shells;
        next_index = old_next.ammo_shells + 1.000;
        
        if(next_index > marker_count)
        {
            next_index = 1.000;
        }
        
    }
    else
    {
        bprint("Unable to find Start/Finish entity\n");
        return world;
    }
    
    trav = world;
    trav = find(trav, classname, "rally_marker");
    
    while(find(trav, classname, "rally_marker") != world)
    {
        
        if(trav.ammo_shells == next_index)
        {
            return trav;
        }
        
    }
    
    bprint("Unable to find next marker entity\n");
    return world;
};

void () Keep_cam_chasing_owner;
void () marker_touch;
// MoveVehicle
// function begins at statement 4543, parm_start=4237
// OP_LOAD_ENT	28	548	4285
// OP_LOAD_F	4285	108	4286
// OP_STORE_F	4286	4263	0
// OP_LOAD_F	28	108	4287
// OP_LT	4287	4288	4289
// OP_LOAD_S	28	129	4290
// OP_EQ_S	4290	880	4291
// OP_AND	4289	4291	4292
// OP_IFNOT	4292	12	0
// OP_LOAD_S	28	180	4293
// OP_STORE_V	4293	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	4294	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	30	7	0
// OP_STORE_V	30	10	0
// OP_STORE_V	1820	13	0
// OP_CALL4	534	0	0
// OP_RETURN	0	0	0
// OP_LOAD_V	28	113	4295
// OP_STORE_V	4295	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	4262	0
// OP_ADDRESS	28	575	4298
// OP_LOAD_V	28	105	4301
// OP_LOAD_V	28	109	4304
// OP_SUB_V	4301	4304	4307
// OP_STOREP_V	4307	4298	0
// OP_LOAD_F	28	578	4310
// OP_EQ_F	4310	817	4311
// OP_IFNOT	4311	4	0
// OP_ADDRESS	28	626	4312
// OP_LOAD_F	28	108	4313
// OP_STOREP_F	4313	4312	0
// OP_LT	738	823	4314
// OP_BITAND	723	696	4315
// OP_NOT_F	4315	0	4316
// OP_AND	4314	4316	4317
// OP_IFNOT	4317	56	0
// OP_LOAD_V	28	105	4318
// OP_LOAD_ENT	28	639	4321
// OP_LOAD_V	4321	105	4322
// OP_SUB_V	4318	4322	4325
// OP_STORE_V	4325	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	4273	0
// OP_LOAD_V	28	109	4328
// OP_LOAD_ENT	28	639	4331
// OP_LOAD_V	4331	105	4332
// OP_SUB_V	4328	4332	4335
// OP_STORE_V	4335	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	4272	0
// OP_LT	4273	2223	4338
// OP_STORE_V	4339	4	0
// OP_CALL1	501	0	0
// OP_LE	1	819	4340
// OP_NOT_F	689	0	4341
// OP_OR	4340	4341	4342
// OP_GT	4273	4272	4343
// OP_AND	4342	4343	4344
// OP_LT	4272	4345	4346
// OP_AND	4344	4346	4347
// OP_OR	4338	4347	4348
// OP_IFNOT	4348	13	0
// OP_STORE_ENT	28	4283	0
// OP_LOAD_ENT	28	639	4349
// OP_STORE_ENT	4349	28	0
// OP_STORE_ENT	4283	29	0
// OP_CALL0	4236	0	0
// OP_STORE_ENT	4283	28	0
// OP_ADDRESS	28	639	4350
// OP_LOAD_ENT	28	639	4351
// OP_STORE_V	4351	4	0
// OP_CALL1	4219	0	0
// OP_STOREP_ENT	1	4350	0
// OP_GOTO	18	0	0
// OP_GT	4273	4272	4352
// OP_AND	689	4352	4353
// OP_LT	4272	4354	4355
// OP_AND	4353	4355	4356
// OP_LOAD_F	28	658	4357
// OP_SUB_F	31	819	4358
// OP_LT	4357	4358	4359
// OP_AND	4356	4359	4360
// OP_IFNOT	4360	9	0
// OP_STORE_V	28	4	0
// OP_STORE_V	4361	7	0
// OP_CALL2	520	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	4362	7	0
// OP_CALL2	876	0	0
// OP_ADDRESS	28	658	4363
// OP_STOREP_F	31	4363	0
// OP_LOAD_S	28	129	4364
// OP_EQ_S	4364	880	4365
// OP_LT	4262	1380	4366
// OP_AND	4365	4366	4367
// OP_LOAD_F	28	604	4368
// OP_NOT_F	4368	0	4369
// OP_AND	4367	4369	4370
// OP_LOAD_F	28	606	4371
// OP_NOT_F	4371	0	4372
// OP_AND	4370	4372	4373
// OP_IFNOT	4373	18	0
// OP_LOAD_V	28	105	4374
// OP_STORE_V	4374	4	0
// OP_LOAD_V	28	105	4377
// OP_SUB_V	4377	2284	4380
// OP_STORE_V	4380	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_LT	76	819	4383
// OP_IFNOT	4383	8	0
// OP_ADDRESS	28	113	4384
// OP_STOREP_V	926	4384	0
// OP_ADDRESS	28	105	4387
// OP_LOAD_V	28	109	4390
// OP_STOREP_V	4390	4387	0
// OP_ADDRESS	28	575	4393
// OP_STOREP_V	926	4393	0
// OP_LOAD_F	28	182	4396
// OP_BITAND	4396	228	4397
// OP_IFNOT	4397	8	0
// OP_LOAD_F	28	644	4398
// OP_BITAND	4398	700	4399
// OP_IFNOT	4399	5	0
// OP_ADDRESS	28	644	4400
// OP_LOAD_F	28	644	4401
// OP_SUB_F	4401	700	4402
// OP_STOREP_F	4402	4400	0
// OP_CALL0	2052	0	0
// OP_NOT_F	1	0	4403
// OP_IFNOT	4403	2	0
// OP_RETURN	0	0	0
// OP_LOAD_V	28	113	4404
// OP_STORE_V	4404	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	4262	0
// OP_LOAD_F	28	182	4407
// OP_BITAND	4407	228	4408
// OP_LOAD_F	28	589	4409
// OP_AND	4408	4409	4410
// OP_IFNOT	4410	3	0
// OP_CALL0	3142	0	0
// OP_GOTO	28	0	0
// OP_LOAD_F	28	182	4411
// OP_BITAND	4411	228	4412
// OP_NOT_F	4412	0	4413
// OP_LOAD_F	28	662	4414
// OP_BITAND	4414	228	4415
// OP_NOT_F	4415	0	4416
// OP_AND	4413	4416	4417
// OP_IFNOT	4417	20	0
// OP_LOAD_ENT	28	548	4418
// OP_ADDRESS	4418	558	4419
// OP_LOAD_ENT	28	548	4420
// OP_LOAD_F	4420	558	4421
// OP_LOAD_ENT	28	548	4422
// OP_LOAD_F	4422	598	4423
// OP_MUL_F	4423	32	4424
// OP_ADD_F	4421	4424	4425
// OP_STOREP_F	4425	4419	0
// OP_LOAD_ENT	28	548	4426
// OP_LOAD_F	4426	558	4427
// OP_LT	4427	4428	4429
// OP_IFNOT	4429	7	0
// OP_LOAD_ENT	28	548	4430
// OP_ADDRESS	4430	558	4431
// OP_LOAD_ENT	28	548	4432
// OP_LOAD_F	4432	558	4433
// OP_ADD_F	4433	867	4434
// OP_STOREP_F	4434	4431	0
// OP_LOAD_V	28	555	4435
// OP_STORE_V	4435	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	4238	0
// OP_LOAD_ENT	28	548	4438
// OP_ADDRESS	4438	119	4439
// OP_STOREP_F	4239	4439	0
// OP_LOAD_F	28	182	4440
// OP_BITAND	4440	228	4441
// OP_IFNOT	4441	5	0
// OP_LOAD_ENT	28	548	4442
// OP_ADDRESS	4442	118	4443
// OP_STOREP_F	4238	4443	0
// OP_GOTO	110	0	0
// OP_LOAD_S	28	129	4444
// OP_EQ_S	4444	880	4445
// OP_IFNOT	4445	107	0
// OP_LOAD_ENT	28	548	4446
// OP_LOAD_V	4446	117	4447
// OP_STORE_V	4447	4277	0
// OP_STORE_V	4277	4	0
// OP_CALL1	461	0	0
// OP_STORE_V	4278	4	0
// OP_LOAD_ENT	28	548	4450
// OP_LOAD_F	4450	597	4451
// OP_MUL_F	4451	32	4452
// OP_ADD_F	4278	4452	4453
// OP_STORE_V	4453	7	0
// OP_STORE_V	3337	10	0
// OP_CALL3	1453	0	0
// OP_STORE_F	1	4278	0
// OP_LOAD_ENT	28	548	4454
// OP_ADDRESS	4454	119	4455
// OP_STOREP_F	4278	4455	0
// OP_LOAD_F	28	664	4456
// OP_SUB_F	31	819	4457
// OP_GT	4456	4457	4458
// OP_IFNOT	4458	14	0
// OP_LOAD_ENT	28	548	4459
// OP_ADDRESS	4459	118	4460
// OP_LOAD_ENT	28	548	4461
// OP_LOAD_F	4461	118	4462
// OP_LOAD_ENT	28	548	4463
// OP_LOAD_F	4463	596	4464
// OP_LOAD_F	28	664	4465
// OP_SUB_F	31	4465	4466
// OP_MUL_F	4464	4466	4467
// OP_MUL_F	4467	32	4468
// OP_ADD_F	4462	4468	4469
// OP_STOREP_F	4469	4460	0
// OP_GOTO	11	0	0
// OP_LOAD_ENT	28	548	4470
// OP_ADDRESS	4470	118	4471
// OP_LOAD_ENT	28	548	4472
// OP_LOAD_F	4472	118	4473
// OP_LOAD_ENT	28	548	4474
// OP_LOAD_F	4474	596	4475
// OP_DIV_F	4475	825	4476
// OP_MUL_F	4476	32	4477
// OP_ADD_F	4473	4477	4478
// OP_STOREP_F	4478	4471	0
// OP_LOAD_ENT	28	548	4479
// OP_LOAD_F	4479	118	4480
// OP_GT	4480	865	4481
// OP_IFNOT	4481	8	0
// OP_LOAD_ENT	28	548	4482
// OP_ADDRESS	4482	118	4483
// OP_LOAD_ENT	28	548	4484
// OP_LOAD_F	4484	118	4485
// OP_SUB_F	4485	867	4486
// OP_STOREP_F	4486	4483	0
// OP_GOTO	11	0	0
// OP_LOAD_ENT	28	548	4487
// OP_LOAD_F	4487	118	4488
// OP_LT	4488	4428	4489
// OP_IFNOT	4489	7	0
// OP_LOAD_ENT	28	548	4490
// OP_ADDRESS	4490	118	4491
// OP_LOAD_ENT	28	548	4492
// OP_LOAD_F	4492	118	4493
// OP_ADD_F	4493	867	4494
// OP_STOREP_F	4494	4491	0
// OP_LOAD_ENT	28	548	4495
// OP_LOAD_F	4495	118	4496
// OP_GT	4496	1632	4497
// OP_LOAD_ENT	28	548	4498
// OP_LOAD_F	4498	596	4499
// OP_GT	4499	817	4500
// OP_AND	4497	4500	4501
// OP_LOAD_ENT	28	548	4502
// OP_LOAD_F	4502	118	4503
// OP_LT	4503	4504	4505
// OP_LOAD_ENT	28	548	4506
// OP_LOAD_F	4506	596	4507
// OP_LT	4507	817	4508
// OP_AND	4505	4508	4509
// OP_OR	4501	4509	4510
// OP_IFNOT	4510	4	0
// OP_LOAD_ENT	28	548	4511
// OP_ADDRESS	4511	596	4512
// OP_STOREP_F	817	4512	0
// OP_LOAD_ENT	28	548	4513
// OP_LOAD_F	4513	118	4514
// OP_GT	4514	1380	4515
// OP_LOAD_ENT	28	548	4516
// OP_LOAD_F	4516	596	4517
// OP_GT	4517	817	4518
// OP_AND	4515	4518	4519
// OP_LOAD_ENT	28	548	4520
// OP_LOAD_F	4520	118	4521
// OP_LT	4521	1912	4522
// OP_LOAD_ENT	28	548	4523
// OP_LOAD_F	4523	596	4524
// OP_LT	4524	817	4525
// OP_AND	4522	4525	4526
// OP_OR	4519	4526	4527
// OP_IFNOT	4527	7	0
// OP_LOAD_ENT	28	548	4528
// OP_ADDRESS	4528	596	4529
// OP_LOAD_ENT	28	548	4530
// OP_LOAD_F	4530	596	4531
// OP_MUL_F	4531	2319	4532
// OP_STOREP_F	4532	4529	0
// OP_LOAD_ENT	28	548	4533
// OP_LOAD_F	4533	558	4534
// OP_GT	4534	865	4535
// OP_IFNOT	4535	8	0
// OP_LOAD_ENT	28	548	4536
// OP_ADDRESS	4536	120	4537
// OP_LOAD_ENT	28	548	4538
// OP_LOAD_F	4538	558	4539
// OP_SUB_F	4539	867	4540
// OP_STOREP_F	4540	4537	0
// OP_GOTO	6	0	0
// OP_LOAD_ENT	28	548	4541
// OP_ADDRESS	4541	120	4542
// OP_LOAD_ENT	28	548	4543
// OP_LOAD_F	4543	558	4544
// OP_STOREP_F	4544	4542	0
// OP_LOAD_ENT	28	548	4545
// OP_ADDRESS	4545	120	4546
// OP_LOAD_ENT	28	548	4547
// OP_LOAD_F	4547	120	4548
// OP_LOAD_F	28	120	4549
// OP_ADD_F	4548	4549	4550
// OP_STOREP_F	4550	4546	0
// OP_LOAD_ENT	28	548	4551
// OP_LOAD_V	4551	117	4552
// OP_STORE_V	4552	4	0
// OP_CALL1	461	0	0
// OP_ADDRESS	28	555	4555
// OP_STOREP_V	59	4555	0
// OP_LOAD_F	28	182	4558
// OP_BITAND	4558	228	4559
// OP_IFNOT	4559	9	0
// OP_LOAD_ENT	28	548	4560
// OP_ADDRESS	4560	117	4561
// OP_LOAD_ENT	28	548	4564
// OP_LOAD_V	4564	117	4565
// OP_LOAD_V	28	580	4568
// OP_ADD_V	4565	4568	4571
// OP_STOREP_V	4571	4561	0
// OP_GOTO	8	0	0
// OP_LOAD_ENT	28	548	4574
// OP_ADDRESS	4574	120	4575
// OP_LOAD_ENT	28	548	4576
// OP_LOAD_F	4576	120	4577
// OP_LOAD_F	28	583	4578
// OP_ADD_F	4577	4578	4579
// OP_STOREP_F	4579	4575	0
// OP_LOAD_ENT	28	548	4580
// OP_STORE_V	4580	4	0
// OP_LOAD_V	28	105	4581
// OP_DIV_F	749	821	4584
// OP_MUL_VF	59	4584	4585
// OP_SUB_V	4581	4585	4588
// OP_MUL_VF	59	787	4591
// OP_SUB_V	4588	4591	4594
// OP_ADD_V	4594	769	4597
// OP_DIV_F	4262	778	4600
// OP_MUL_VF	59	4600	4601
// OP_MUL_VF	4601	843	4604
// OP_SUB_F	819	719	4607
// OP_MUL_VF	4604	4607	4608
// OP_ADD_V	4597	4608	4611
// OP_STORE_V	4611	7	0
// OP_CALL2	462	0	0
// OP_LOAD_F	28	628	4614
// OP_EQ_F	4614	827	4615
// OP_IFNOT	4615	8	0
// OP_LOAD_ENT	28	548	4616
// OP_STORE_V	4616	4	0
// OP_LOAD_ENT	28	548	4617
// OP_LOAD_V	4617	105	4618
// OP_ADD_V	4618	916	4621
// OP_STORE_V	4621	7	0
// OP_CALL2	462	0	0
// OP_LOAD_S	28	129	4624
// OP_EQ_S	4624	1187	4625
// OP_IFNOT	4625	7	0
// OP_LOAD_ENT	28	548	4626
// OP_ADDRESS	4626	105	4627
// OP_LOAD_ENT	28	548	4630
// OP_LOAD_V	4630	105	4631
// OP_SUB_V	4631	1666	4634
// OP_STOREP_V	4634	4627	0
// OP_LOAD_ENT	28	548	4637
// OP_LOAD_V	4637	621	4638
// OP_EQ_V	4638	926	4641
// OP_IFNOT	4641	6	0
// OP_LOAD_ENT	28	548	4642
// OP_ADDRESS	4642	621	4643
// OP_LOAD_ENT	28	548	4646
// OP_LOAD_V	4646	105	4647
// OP_STOREP_V	4647	4643	0
// OP_LOAD_ENT	28	548	4650
// OP_LOAD_F	4650	118	4651
// OP_GT	4651	1632	4652
// OP_LOAD_ENT	28	548	4653
// OP_LOAD_F	4653	118	4654
// OP_LT	4654	865	4655
// OP_AND	4652	4655	4656
// OP_IFNOT	4656	4	0
// OP_LOAD_ENT	28	548	4657
// OP_ADDRESS	4657	118	4658
// OP_STOREP_F	1632	4658	0
// OP_LOAD_ENT	28	548	4659
// OP_LOAD_F	4659	118	4660
// OP_GE	4660	865	4661
// OP_LOAD_ENT	28	548	4662
// OP_LOAD_F	4662	118	4663
// OP_LT	4663	4664	4665
// OP_AND	4661	4665	4666
// OP_IFNOT	4666	4	0
// OP_LOAD_ENT	28	548	4667
// OP_ADDRESS	4667	118	4668
// OP_STOREP_F	4664	4668	0
// OP_LOAD_ENT	28	548	4669
// OP_LOAD_V	4669	117	4670
// OP_STORE_V	4670	4253	0
// OP_LOAD_ENT	28	548	4673
// OP_LOAD_V	4673	555	4674
// OP_STORE_V	4674	4244	0
// OP_STORE_V	4244	4	0
// OP_CALL1	859	0	0
// OP_STORE_F	1	4244	0
// OP_LOAD_V	28	105	4677
// OP_STORE_V	4677	4	0
// OP_LOAD_V	28	105	4680
// OP_SUB_V	4680	2284	4683
// OP_STORE_V	4683	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_LT	70	819	4686
// OP_LT	76	2605	4687
// OP_AND	4686	4687	4688
// OP_IFNOT	4688	3	0
// OP_STORE_F	2611	4271	0
// OP_GOTO	2	0	0
// OP_STORE_F	785	4271	0
// OP_STORE_V	4244	4	0
// OP_STORE_V	4253	7	0
// OP_CALL2	860	0	0
// OP_STORE_V	1	4	0
// OP_CALL1	499	0	0
// OP_MUL_F	4271	32	4689
// OP_GT	1	4689	4690
// OP_IFNOT	4690	9	0
// OP_STORE_V	4244	4	0
// OP_STORE_V	4253	7	0
// OP_STORE_V	4271	10	0
// OP_CALL3	1453	0	0
// OP_STORE_F	1	4253	0
// OP_LOAD_ENT	28	548	4691
// OP_ADDRESS	4691	118	4692
// OP_STOREP_F	4253	4692	0
// OP_LOAD_ENT	28	548	4693
// OP_ADDRESS	4693	556	4694
// OP_STOREP_F	4253	4694	0
// OP_LOAD_ENT	28	548	4695
// OP_LOAD_V	4695	117	4696
// OP_STORE_V	4696	4	0
// OP_CALL1	461	0	0
// OP_LOAD_ENT	28	548	4699
// OP_STORE_V	4699	4	0
// OP_LOAD_ENT	28	548	4700
// OP_LOAD_V	4700	105	4701
// OP_MUL_VF	1215	771	4704
// OP_ADD_V	4701	4704	4707
// OP_STORE_V	4707	7	0
// OP_CALL2	462	0	0
// OP_LOAD_F	28	108	4710
// OP_LOAD_F	28	112	4711
// OP_GT	4710	4711	4712
// OP_LOAD_F	28	182	4713
// OP_BITAND	4713	228	4714
// OP_AND	4712	4714	4715
// OP_LOAD_F	28	606	4716
// OP_AND	4715	4716	4717
// OP_DIV_F	778	821	4718
// OP_GT	4262	4718	4719
// OP_AND	4717	4719	4720
// OP_LOAD_F	28	604	4721
// OP_NOT_F	4721	0	4722
// OP_AND	4720	4722	4723
// OP_IFNOT	4723	46	0
// OP_STORE_V	59	4256	0
// OP_STORE_F	817	4258	0
// OP_STORE_V	4256	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	4256	0
// OP_LOAD_V	28	105	4724
// OP_STORE_V	4724	4	0
// OP_LOAD_V	28	105	4727
// OP_MUL_VF	4256	2223	4730
// OP_ADD_V	4727	4730	4733
// OP_STORE_V	4733	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	30	13	0
// OP_CALL4	475	0	0
// OP_STORE_F	218	4265	0
// OP_LT	70	819	4736
// OP_IFNOT	4736	4	0
// OP_LT	76	2575	4737
// OP_IFNOT	4737	2	0
// OP_STORE_F	219	4265	0
// OP_NOT_F	4265	0	4738
// OP_IFNOT	4738	24	0
// OP_ADDRESS	28	113	4739
// OP_LOAD_V	28	113	4742
// OP_STORE_V	4742	4	0
// OP_CALL1	468	0	0
// OP_LOAD_F	28	590	4745
// OP_MUL_VF	1	4745	4746
// OP_STOREP_V	4746	4739	0
// OP_DIV_F	778	821	4749
// OP_LT	4262	4749	4750
// OP_IFNOT	4750	10	0
// OP_ADDRESS	28	113	4751
// OP_LOAD_V	28	113	4754
// OP_LOAD_V	28	113	4757
// OP_STORE_V	4757	4	0
// OP_CALL1	468	0	0
// OP_MUL_VF	1	4760	4761
// OP_MUL_VF	4761	32	4764
// OP_ADD_V	4754	4764	4767
// OP_STOREP_V	4767	4751	0
// OP_LOAD_V	28	113	4770
// OP_STORE_V	4770	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	4262	0
// OP_STORE_F	219	4270	0
// OP_IFNOT	4270	76	0
// OP_LOAD_ENT	28	548	4773
// OP_LOAD_V	4773	621	4774
// OP_LOAD_ENT	28	548	4777
// OP_LOAD_V	4777	105	4778
// OP_LOAD_ENT	28	548	4781
// OP_LOAD_V	4781	621	4782
// OP_SUB_V	4778	4782	4785
// OP_ADD_V	4774	4785	4788
// OP_STORE_V	4788	4280	0
// OP_LOAD_ENT	28	548	4791
// OP_LOAD_V	4791	105	4792
// OP_STORE_V	4792	4259	0
// OP_LT	64	817	4795
// OP_IFNOT	4795	3	0
// OP_ADD_V	4259	1666	4796
// OP_STORE_V	4796	4259	0
// OP_STORE_V	64	4	0
// OP_CALL1	499	0	0
// OP_STORE_F	1	4264	0
// OP_SUB_F	819	4264	4799
// OP_MUL_FV	4799	1535	4800
// OP_ADD_V	4259	4800	4803
// OP_STORE_V	4803	4259	0
// OP_LT	61	817	4806
// OP_IFNOT	4806	2	0
// OP_STORE_F	817	61	0
// OP_MUL_FV	61	4807	4810
// OP_ADD_V	4259	4810	4813
// OP_STORE_V	4813	4259	0
// OP_LOAD_F	28	664	4816
// OP_SUB_F	31	819	4817
// OP_GT	4816	4817	4818
// OP_IFNOT	4818	12	0
// OP_LOAD_ENT	28	548	4819
// OP_LOAD_V	4819	105	4820
// OP_LOAD_ENT	28	548	4823
// OP_LOAD_V	4823	105	4824
// OP_SUB_V	4259	4824	4827
// OP_LOAD_F	28	664	4830
// OP_SUB_F	31	4830	4831
// OP_MUL_VF	4827	4831	4832
// OP_ADD_V	4820	4832	4835
// OP_STORE_V	4835	4259	0
// OP_GOTO	21	0	0
// OP_LOAD_F	28	661	4838
// OP_SUB_F	31	819	4839
// OP_LT	4838	4839	4840
// OP_LOAD_F	28	664	4841
// OP_SUB_F	31	819	4842
// OP_LT	4841	4842	4843
// OP_AND	4840	4843	4844
// OP_IFNOT	4844	13	0
// OP_LOAD_ENT	28	548	4845
// OP_LOAD_F	4845	108	4846
// OP_SUB_F	4261	4846	4847
// OP_MUL_F	4847	821	4848
// OP_STORE_F	4848	4264	0
// OP_GT	4264	3330	4849
// OP_IFNOT	4849	2	0
// OP_STORE_F	3330	4264	0
// OP_LOAD_ENT	28	548	4850
// OP_LOAD_F	4850	108	4851
// OP_SUB_F	4851	4264	4852
// OP_STORE_F	4852	4261	0
// OP_LOAD_ENT	28	548	4853
// OP_ADDRESS	4853	108	4854
// OP_SUB_F	4261	4282	4855
// OP_MUL_F	4855	32	4856
// OP_ADD_F	4282	4856	4857
// OP_STOREP_F	4857	4854	0
// OP_LOAD_ENT	28	548	4858
// OP_ADDRESS	4858	621	4859
// OP_LOAD_ENT	28	548	4862
// OP_LOAD_V	4862	105	4863
// OP_STOREP_V	4863	4859	0
// OP_LOAD_S	28	129	4866
// OP_EQ_S	4866	880	4867
// OP_IFNOT	4867	62	0
// OP_ADDRESS	28	188	4868
// OP_LOAD_V	28	575	4869
// OP_STORE_V	4869	4	0
// OP_CALL1	471	0	0
// OP_MUL_F	1	4872	4873
// OP_DIV_F	4873	32	4874
// OP_DIV_F	4874	2223	4875
// OP_DIV_F	4875	1957	4876
// OP_STORE_V	4876	4	0
// OP_CALL1	496	0	0
// OP_STOREP_F	1	4868	0
// OP_LOAD_F	28	188	4877
// OP_LT	4877	817	4878
// OP_IFNOT	4878	3	0
// OP_ADDRESS	28	188	4879
// OP_STOREP_F	817	4879	0
// OP_EQ_F	738	819	4880
// OP_LOAD_F	28	644	4881
// OP_BITAND	4881	691	4882
// OP_NOT_F	4882	0	4883
// OP_AND	4880	4883	4884
// OP_LOAD_F	28	644	4885
// OP_BITAND	4885	702	4886
// OP_NOT_F	4886	0	4887
// OP_AND	4884	4887	4888
// OP_EQ_F	737	717	4889
// OP_AND	4888	4889	4890
// OP_NOT_F	719	0	4891
// OP_AND	4890	4891	4892
// OP_IFNOT	4892	32	0
// OP_ADDRESS	28	677	4893
// OP_LOAD_F	28	677	4894
// OP_SUB_F	4894	32	4895
// OP_STOREP_F	4895	4893	0
// OP_ADDRESS	28	157	4896
// OP_LOAD_F	28	677	4897
// OP_STOREP_F	4897	4896	0
// OP_LOAD_F	28	677	4898
// OP_LT	4898	819	4899
// OP_IFNOT	4899	9	0
// OP_ADDRESS	28	644	4900
// OP_LOAD_F	28	644	4901
// OP_BITOR	4901	702	4902
// OP_STOREP_F	4902	4900	0
// OP_STORE_V	28	4	0
// OP_STORE_V	4903	7	0
// OP_CALL2	520	0	0
// OP_GOTO	11	0	0
// OP_LOAD_F	28	677	4904
// OP_LT	4904	827	4905
// OP_LOAD_F	28	677	4906
// OP_LOAD_F	28	678	4907
// OP_NE_F	4906	4907	4908
// OP_AND	4905	4908	4909
// OP_IFNOT	4909	4	0
// OP_STORE_V	28	4	0
// OP_STORE_V	4910	7	0
// OP_CALL2	876	0	0
// OP_ADDRESS	28	678	4911
// OP_LOAD_F	28	677	4912
// OP_STOREP_F	4912	4911	0
// OP_STORE_V	4913	4	0
// OP_CALL1	501	0	0
// OP_STORE_F	1	4268	0
// OP_STORE_V	4262	4	0
// OP_CALL1	3542	0	0
// OP_LOAD_F	28	165	4914
// OP_NOT_F	4914	0	4915
// OP_IFNOT	4915	3	0
// OP_STORE_V	4262	4	0
// OP_CALL1	3902	0	0
// OP_ADDRESS	28	590	4916
// OP_STOREP_F	4262	4916	0
// OP_IFNOT	719	3	0
// OP_ADDRESS	28	113	4917
// OP_STOREP_V	926	4917	0
// OP_LOAD_V	28	105	4920
// OP_STORE_V	4920	4	0
// OP_LOAD_V	28	105	4923
// OP_SUB_V	4923	4926	4929
// OP_STORE_V	4929	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_LOAD_ENT	28	548	4932
// OP_LOAD_F	4932	108	4933
// OP_SUB_F	4933	4263	4934
// OP_GT	4934	825	4935
// OP_LOAD_ENT	28	548	4936
// OP_LOAD_F	4936	108	4937
// OP_SUB_F	4937	4263	4938
// OP_LT	4938	2657	4939
// OP_AND	4935	4939	4940
// OP_EQ_F	76	819	4941
// OP_AND	4940	4941	4942
// OP_IFNOT	4942	26	0
// OP_LOAD_ENT	28	548	4943
// OP_LOAD_V	4943	105	4944
// OP_STORE_V	4944	4274	0
// OP_LOAD_ENT	28	548	4947
// OP_LOAD_F	4947	108	4948
// OP_SUB_F	4948	4263	4949
// OP_MUL_F	4949	829	4950
// OP_DIV_F	4262	778	4951
// OP_MUL_F	4951	825	4952
// OP_ADD_F	819	4952	4953
// OP_MUL_F	4950	4953	4954
// OP_MUL_F	4954	32	4955
// OP_ADD_F	4263	4955	4956
// OP_STORE_F	4956	4276	0
// OP_LOAD_ENT	28	548	4957
// OP_LOAD_F	4957	108	4958
// OP_GT	4276	4958	4959
// OP_IFNOT	4959	4	0
// OP_LOAD_ENT	28	548	4960
// OP_LOAD_F	4960	108	4961
// OP_STORE_F	4961	4276	0
// OP_LOAD_ENT	28	548	4962
// OP_STORE_V	4962	4	0
// OP_STORE_V	4274	7	0
// OP_CALL2	462	0	0
// OP_CALL0	1496	0	0
// OP_LOAD_ENT	28	625	4963
// OP_NE_E	4963	30	4964
// OP_IFNOT	4964	6	0
// OP_LOAD_ENT	28	625	4965
// OP_STORE_ENT	4965	28	0
// OP_CALL0	4235	0	0
// OP_LOAD_ENT	28	201	4966
// OP_STORE_ENT	4966	28	0
// OP_ADDRESS	28	571	4967
// OP_LOAD_V	28	113	4970
// OP_STOREP_V	4970	4967	0
// OP_DONE	0	0	0
void () MoveVehicle = 
{
    local float MAX_COLLISIONS;
    local vector vel_angles;
    local vector veh_dir_angles;
    local vector veh_angles;
    local vector reb_vect;
    local vector body_vect;
    local vector angle;
    local vector vtemp;
    local vector ideal_org;
    local float vel_speed;
    local float old_z;
    local float ftemp;
    local float too_steep;
    local float num_collisions;
    local float last_collision;
    local float max_speed;
    local float collision_type;
    local float adjust_body;
    local float this_pitch;
    local float old_dist;
    local float new_dist;
    local vector new_org;
    local vector dir_angles;
    local vector old_org;
    local entity oself;
    local string str;
    old_z = self.veh_body.origin_z;
    
    if((self.origin_z < -3000.000) && (self.classname == "player"))
    {
        bprint(self.netname);
        bprint(" visits the angels\n");
        T_Damage(self, world, world, 500.000);
        return;
    }
    
    vel_speed = vlen(self.velocity);
    self.lastmove = self.origin - self.oldorigin;
    
    if(self.lastmove_z == 0.000)
    {
        self.last_flat_z = self.origin_z;
    }
    
    
    if((rally_type_index < 3.000) && (!(global_racing_flags & QR_NO_STARTFINISH)))
    {
        new_dist = vlen(self.origin - self.next_marker.origin);
        old_dist = vlen(self.oldorigin - self.next_marker.origin);
        if((new_dist < 64.000) || ((((cvar("skill") <= 1.000) || !challenge) && (new_dist > old_dist)) && (old_dist < 384.000)))
        {
            oself = self;
            self = self.next_marker;
            other = oself;
            marker_touch();
            self = oself;
            self.next_marker = FindNextMarker(self.next_marker);
        }
        else
        {
            
            if(((challenge && (new_dist > old_dist)) && (old_dist < 312.000)) && (self.last_turnaround < (time - 1.000)))
            {
                centerprint(self, "Marker missed!");
                commentary(self, "voice/wrongway.wav");
                self.last_turnaround = time;
            }
            
        }
        
    }
    
    
    if((((self.classname == "player") && (vel_speed < 25.000)) && !self.reversing) && !self.accelerating)
    {
        traceline(self.origin, self.origin - '0.000 0.000 64.000', TRUE, self);
        
        if(0.000 < 1.000)
        {
            self.velocity = '0.000 0.000 0.000';
            self.origin = self.oldorigin;
            self.lastmove = '0.000 0.000 0.000';
        }
        
    }
    
    
    if(self.flags & FL_ONGROUND)
    {
        
        if(self.racing_flags & QR_MINE_EXPLODED)
        {
            self.racing_flags = self.racing_flags - QR_MINE_EXPLODED;
        }
        
    }
    
    
    if(!MoveTail())
    {
        return;
    }
    
    vel_speed = vlen(self.velocity);
    if((self.flags & FL_ONGROUND) && self.use_surface_angle)
    {
        SetSurfaceAngle();
    }
    else
    {
        
        if((!(self.flags & FL_ONGROUND)) && (!(self.last_flags & FL_ONGROUND)))
        {
            self.veh_body.veh_dir_z = self.veh_body.veh_dir_z + (self.veh_body.roll_velocity_z * frametime);
            
            if(self.veh_body.veh_dir_z < -180.000)
            {
                self.veh_body.veh_dir_z = self.veh_body.veh_dir_z + 360.000;
            }
            
        }
        
    }
    
    vel_angles = vectoangles(self.veh_dir);
    self.veh_body.angles_y = 0.000;
    if(self.flags & FL_ONGROUND)
    {
        self.veh_body.angles_x = vel_angles;
    }
    else
    {
        
        if(self.classname == "player")
        {
            dir_angles = self.veh_body.angles;
            makevectors(dir_angles);
            dir_angles_y = MoveToAngle(0.000, 0.000 + (self.veh_body.roll_velocity_y * frametime), 1000.000);
            self.veh_body.angles_y = 0.000;
            if(self.leave_ground_time > (time - 1.000))
            {
                self.veh_body.angles_x = self.veh_body.angles_x + ((self.veh_body.roll_velocity_x * (time - self.leave_ground_time)) * frametime);
            }
            else
            {
                self.veh_body.angles_x = self.veh_body.angles_x + ((self.veh_body.roll_velocity_x / 4.000) * frametime);
            }
            
            if(self.veh_body.angles_x > 180.000)
            {
                self.veh_body.angles_x = self.veh_body.angles_x - 360.000;
            }
            else
            {
                
                if(self.veh_body.angles_x < -180.000)
                {
                    self.veh_body.angles_x = self.veh_body.angles_x + 360.000;
                }
                
            }
            
            
            if(((self.veh_body.angles_x > 40.000) && (self.veh_body.roll_velocity_x > 0.000)) || ((self.veh_body.angles_x < -40.000) && (self.veh_body.roll_velocity_x < 0.000)))
            {
                self.veh_body.roll_velocity_x = 0.000;
            }
            
            
            if(((self.veh_body.angles_x > 25.000) && (self.veh_body.roll_velocity_x > 0.000)) || ((self.veh_body.angles_x < -25.000) && (self.veh_body.roll_velocity_x < 0.000)))
            {
                self.veh_body.roll_velocity_x = self.veh_body.roll_velocity_x * 0.900;
            }
            
        }
        
    }
    
    if(self.veh_body.veh_dir_z > 180.000)
    {
        self.veh_body.angles_z = self.veh_body.veh_dir_z - 360.000;
    }
    else
    {
        self.veh_body.angles_z = self.veh_body.veh_dir_z;
    }
    
    self.veh_body.angles_z = self.veh_body.angles_z + self.angles_z;
    makevectors(self.veh_body.angles);
    self.veh_dir = v_forward;
    if(self.flags & FL_ONGROUND)
    {
        self.veh_body.angles = self.veh_body.angles + self.body_roll;
    }
    else
    {
        self.veh_body.angles_z = self.veh_body.angles_z + self.body_roll_z;
    }
    
    setorigin(self.veh_body, (((self.origin - (v_forward * (VEH_LENGTH / 2.000))) - (v_forward * dist_infront)) + VEH_BODY_OFFSET) + (((v_forward * (vel_speed / MAX_SPEED)) * 8.000) * (1.000 - hold_flag)));
    
    if(self.car_index == 5.000)
    {
        setorigin(self.veh_body, self.veh_body.origin + '0.000 0.000 4.000');
    }
    
    
    if(self.classname == "rally_bot")
    {
        self.veh_body.origin = self.veh_body.origin - '0.000 0.000 8.000';
    }
    
    
    if(self.veh_body.last_velocity == '0.000 0.000 0.000')
    {
        self.veh_body.last_velocity = self.veh_body.origin;
    }
    
    
    if((self.veh_body.angles_x > 40.000) && (self.veh_body.angles_x < 180.000))
    {
        self.veh_body.angles_x = 40.000;
    }
    
    
    if((self.veh_body.angles_x >= 180.000) && (self.veh_body.angles_x < 320.000))
    {
        self.veh_body.angles_x = 320.000;
    }
    
    angle = self.veh_body.angles;
    veh_angles = self.veh_body.veh_dir;
    veh_angles_x = anglemod(veh_angles_x);
    traceline(self.origin, self.origin - '0.000 0.000 64.000', TRUE, self);
    if((trace_fraction < 1.000) && (0.000 < 0.950))
    {
        this_pitch = 50.000;
    }
    else
    {
        this_pitch = 80.000;
    }
    
    
    if(fabs(angle_diff(veh_angles_x, angle_x)) > (this_pitch * frametime))
    {
        angle_x = MoveToAngle(veh_angles_x, angle_x, this_pitch);
        self.veh_body.angles_x = angle;
    }
    
    self.veh_body.veh_dir_x = angle;
    makevectors(self.veh_body.angles);
    setorigin(self.veh_body, self.veh_body.origin + ('0.000 0.000 1.000' * -5.000));
    
    if(((((self.origin_z > self.oldorigin_z) && (self.flags & FL_ONGROUND)) && self.accelerating) && (vel_speed > (MAX_SPEED / 2.000))) && !self.reversing)
    {
        vtemp = v_forward;
        vtemp_z = 0.000;
        vtemp = normalize(vtemp);
        traceline(self.origin, self.origin + (vtemp * 64.000), TRUE, world);
        too_steep = FALSE;
        
        if(trace_fraction < 1.000)
        {
            
            if(0.000 < 0.300)
            {
                too_steep = TRUE;
            }
            
        }
        
        
        if(!too_steep)
        {
            self.velocity = normalize(self.velocity) * self.last_speed;
            
            if(vel_speed < (MAX_SPEED / 2.000))
            {
                self.velocity = self.velocity + ((normalize(self.velocity) * 200.000) * frametime);
            }
            
            vel_speed = vlen(self.velocity);
        }
        
    }
    
    adjust_body = TRUE;
    
    if(adjust_body)
    {
        old_org = self.veh_body.last_velocity + (self.veh_body.origin - self.veh_body.last_velocity);
        ideal_org = self.veh_body.origin;
        
        if(0.000 < 0.000)
        {
            ideal_org = ideal_org + '0.000 0.000 8.000';
        }
        
        ftemp = fabs(0.000);
        ideal_org = ideal_org + ((1.000 - ftemp) * '0.000 0.000 16.000');
        
        if(0.000 < 0.000)
        {
            v_forward_z = 0.000;
        }
        
        ideal_org = ideal_org + (0.000 * '0.000 0.000 20.000');
        if(self.leave_ground_time > (time - 1.000))
        {
            ideal_org = self.veh_body.origin + ((ideal_org - self.veh_body.origin) * (time - self.leave_ground_time));
        }
        else
        {
            
            if((self.last_land < (time - 1.000)) && (self.leave_ground_time < (time - 1.000)))
            {
                ftemp = (0.000 - self.veh_body.origin_z) * 2.000;
                
                if(ftemp > 48.000)
                {
                    ftemp = 48.000;
                }
                
                ideal_org_z = self.veh_body.origin_z - ftemp;
            }
            
        }
        
        self.veh_body.origin_z = 0.000 + ((0.000 - 0.000) * frametime);
        self.veh_body.last_velocity = self.veh_body.origin;
    }
    
    
    if(self.classname == "player")
    {
        self.armorvalue = ceil((((vlen(self.lastmove) * 1600.000) / frametime) / 64.000) / 100.000);
        
        if(self.armorvalue < 0.000)
        {
            self.armorvalue = 0.000;
        }
        
        
        if(((((rally_type_index == 1.000) && (!(self.racing_flags & QR_FINISHED_RACE))) && (!(self.racing_flags & QR_OUT_OF_TIME))) && (racing_type == RT_TIME_TRIAL)) && !hold_flag)
        {
            self.time_remaining = self.time_remaining - frametime;
            self.currentammo = self.time_remaining;
            if(self.time_remaining < 1.000)
            {
                self.racing_flags = self.racing_flags | QR_OUT_OF_TIME;
                centerprint(self, "You are out of time.\n");
            }
            else
            {
                
                if((self.time_remaining < 5.000) && (self.time_remaining != self.last_time_remaining))
                {
                    commentary(self, "voice/tone05.wav");
                }
                
            }
            
            self.last_time_remaining = self.time_remaining;
        }
        
    }
    
    max_speed = cvar("sv_maxspeed");
    CheckForCollision(vel_speed);
    
    if(!self.deadflag)
    {
        DoEngineNoises(vel_speed);
    }
    
    self.last_speed = vel_speed;
    
    if(hold_flag)
    {
        self.velocity = '0.000 0.000 0.000';
    }
    
    traceline(self.origin, self.origin - '0.000 0.000 48.000', FALSE, self);
    
    if((((self.veh_body.origin_z - old_z) > 4.000) && ((self.veh_body.origin_z - old_z) < 32.000)) && (0.000 == 1.000))
    {
        new_org = self.veh_body.origin;
        new_org_z = old_z + ((((self.veh_body.origin_z - old_z) * 6.000) * (1.000 + ((vel_speed / MAX_SPEED) * 4.000))) * frametime);
        
        if(0.000 > self.veh_body.origin_z)
        {
            new_org_z = self.veh_body.origin_z;
        }
        
        setorigin(self.veh_body, new_org);
    }
    
    MoveWheels();
    
    if(self.chasecam != world)
    {
        self = self.chasecam;
        Keep_cam_chasing_owner();
        self = self.owner;
    }
    
    self.back_vel = self.velocity;
};

// checkSteering
// function begins at statement 5284, parm_start=4974
// OP_LOAD_V	28	113	4984
// OP_STORE_V	4984	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	4983	0
// OP_LOAD_V	28	113	4987
// OP_STORE_V	4987	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	4979	0
// OP_LOAD_V	28	555	4990
// OP_STORE_V	4990	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	4976	0
// OP_LOAD_F	28	119	4993
// OP_ADD_F	4993	4994	4995
// OP_STORE_V	4995	4	0
// OP_CALL1	859	0	0
// OP_STORE_F	1	4982	0
// OP_STORE_V	4982	4	0
// OP_LOAD_F	28	565	4996
// OP_STORE_V	4996	7	0
// OP_CALL2	860	0	0
// OP_STORE_F	1	4974	0
// OP_LOAD_F	28	676	4997
// OP_EQ_F	4997	811	4998
// OP_IFNOT	4998	22	0
// OP_LOAD_F	28	561	4999
// OP_STORE_F	4999	4975	0
// OP_LOAD_F	28	561	5000
// OP_STORE_V	5000	4	0
// OP_STORE_V	4977	7	0
// OP_CALL2	860	0	0
// OP_LT	1	827	5001
// OP_STORE_V	5001	4	0
// OP_CALL1	499	0	0
// OP_IFNOT	1	4	0
// OP_ADDRESS	28	561	5002
// OP_STOREP_F	4977	5002	0
// OP_GOTO	8	0	0
// OP_ADDRESS	28	561	5003
// OP_LOAD_F	28	561	5004
// OP_STORE_V	5004	4	0
// OP_STORE_V	4977	7	0
// OP_STORE_V	761	10	0
// OP_CALL3	1453	0	0
// OP_STOREP_F	1	5003	0
// OP_GOTO	48	0	0
// OP_LOAD_F	28	676	5005
// OP_EQ_F	5005	813	5006
// OP_IFNOT	5006	22	0
// OP_ADDRESS	28	561	5007
// OP_LOAD_F	28	561	5008
// OP_MUL_F	762	32	5009
// OP_ADD_F	5008	5009	5010
// OP_STORE_V	5010	4	0
// OP_CALL1	859	0	0
// OP_STOREP_F	1	5007	0
// OP_LOAD_F	28	561	5011
// OP_STORE_V	5011	4	0
// OP_STORE_V	4977	7	0
// OP_CALL2	860	0	0
// OP_STORE_V	1	4	0
// OP_CALL1	499	0	0
// OP_GT	1	775	5012
// OP_IFNOT	5012	6	0
// OP_ADDRESS	28	561	5013
// OP_ADD_F	4977	775	5014
// OP_STORE_V	5014	4	0
// OP_CALL1	859	0	0
// OP_STOREP_F	1	5013	0
// OP_GOTO	24	0	0
// OP_LOAD_F	28	676	5015
// OP_EQ_F	5015	812	5016
// OP_IFNOT	5016	21	0
// OP_ADDRESS	28	561	5017
// OP_LOAD_F	28	561	5018
// OP_MUL_F	762	32	5019
// OP_SUB_F	5018	5019	5020
// OP_STORE_V	5020	4	0
// OP_CALL1	859	0	0
// OP_STOREP_F	1	5017	0
// OP_LOAD_F	28	561	5021
// OP_STORE_V	5021	4	0
// OP_STORE_V	4977	7	0
// OP_CALL2	860	0	0
// OP_STORE_V	1	4	0
// OP_CALL1	499	0	0
// OP_GT	1	775	5022
// OP_IFNOT	5022	6	0
// OP_ADDRESS	28	561	5023
// OP_SUB_F	4977	775	5024
// OP_STORE_V	5024	4	0
// OP_CALL1	859	0	0
// OP_STOREP_F	1	5023	0
// OP_LOAD_F	28	561	5025
// OP_STORE_V	5025	4	0
// OP_CALL1	485	0	0
// OP_STORE_V	1	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	5026	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	4977	4	0
// OP_CALL1	485	0	0
// OP_STORE_V	1	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	5027	4	0
// OP_CALL1	482	0	0
// OP_LOAD_ENT	28	548	5028
// OP_ADDRESS	5028	561	5029
// OP_LOAD_ENT	28	548	5030
// OP_LOAD_F	5030	561	5031
// OP_STORE_V	5031	4	0
// OP_LOAD_F	28	561	5032
// OP_STORE_V	5032	7	0
// OP_STORE_V	5033	10	0
// OP_CALL3	1453	0	0
// OP_STOREP_F	1	5029	0
// OP_LOAD_F	28	604	5034
// OP_NOT_F	5034	0	5035
// OP_IFNOT	5035	17	0
// OP_LOAD_ENT	28	548	5036
// OP_LOAD_F	5036	561	5037
// OP_STORE_F	5037	4980	0
// OP_STORE_V	4979	4	0
// OP_CALL1	461	0	0
// OP_ADDRESS	28	113	5038
// OP_LOAD_ENT	28	547	5041
// OP_LOAD_V	5041	555	5042
// OP_MUL_F	778	821	5045
// OP_DIV_F	4983	5045	5046
// OP_MUL_VF	5042	5046	5047
// OP_ADD_V	59	5047	5050
// OP_STORE_V	5050	4	0
// OP_CALL1	468	0	0
// OP_MUL_VF	1	4983	5053
// OP_STOREP_V	5053	5038	0
// OP_DONE	0	0	0
void () checkSteering = 
{
    local float head_diff;
    local float ftemp;
    local vector veh_angles;
    local vector vel;
    local float new_heading;
    local float vel_speed;
    vel_speed = vlen(self.velocity);
    vel = vectoangles(self.velocity);
    veh_angles = vectoangles(self.veh_dir);
    new_heading = anglemod(self.angles_y + 1.900);
    head_diff = angle_diff(new_heading, self.old_angles_y);
    if(self.steering == STEER_CENTER)
    {
        ftemp = self.steer_angles_y;
        if(fabs(angle_diff(self.steer_angles_y, 0.000) < 5.000))
        {
            self.steer_angles_y = 0.000;
        }
        else
        {
            self.steer_angles_y = MoveToAngle(self.steer_angles_y, 0.000, STEERING_CENTERSPEED);
        }
        
    }
    else
    {
        if(self.steering == STEER_RIGHT)
        {
            self.steer_angles_y = anglemod(self.steer_angles_y + (STEERING_TURNSPEED * frametime));
            
            if(fabs(angle_diff(self.steer_angles_y, 0.000)) > VEH_MAX_STEER)
            {
                self.steer_angles_y = anglemod(0.000 + VEH_MAX_STEER);
            }
            
        }
        else
        {
            
            if(self.steering == STEER_LEFT)
            {
                self.steer_angles_y = anglemod(self.steer_angles_y - (STEERING_TURNSPEED * frametime));
                
                if(fabs(angle_diff(self.steer_angles_y, 0.000)) > VEH_MAX_STEER)
                {
                    self.steer_angles_y = anglemod(0.000 - VEH_MAX_STEER);
                }
                
            }
            
        }
        
    }
    
    bprint(ftos(self.steer_angles_y));
    bprint(" - (");
    bprint(ftos(0.000));
    bprint(")\n");
    self.veh_body.steer_angles_y = MoveToAngle(self.veh_body.steer_angles_y, self.steer_angles_y, 900.000);
    
    if(!self.reversing)
    {
        vel_y = self.veh_body.steer_angles_y;
        makevectors(vel);
        self.velocity = (normalize(v_forward + (self.veh_tail.veh_dir * (vel_speed / (MAX_SPEED * 2.000))))) * vel_speed;
    }
    
};

// SteerChange
// function begins at statement 5420, parm_start=5057
// OP_STORE_F	5057	5058	0
// OP_LOAD_ENT	28	201	5059
// OP_LOAD_F	5059	156	5060
// OP_SUB_F	5060	5057	5061
// OP_STORE_V	5061	4	0
// OP_CALL1	499	0	0
// OP_GT	1	819	5062
// OP_IFNOT	5062	12	0
// OP_LOAD_ENT	28	201	5063
// OP_LOAD_F	5063	156	5064
// OP_LOAD_ENT	28	201	5065
// OP_LOAD_F	5065	156	5066
// OP_GT	5057	5066	5067
// OP_MUL_F	5067	821	5068
// OP_SUB_F	5068	819	5069
// OP_MUL_F	5069	32	5070
// OP_MUL_F	5070	1112	5071
// OP_ADD_F	5064	5071	5072
// OP_STORE_F	5072	5057	0
// OP_EQ_F	5058	5057	5073
// OP_IFNOT	5073	2	0
// OP_RETURN	0	0	0
// OP_LOAD_ENT	28	201	5074
// OP_LOAD_F	5074	156	5075
// OP_LT	5058	5075	5076
// OP_LT	5057	5058	5077
// OP_AND	5076	5077	5078
// OP_IFNOT	5078	3	0
// OP_STORE_F	5058	5057	0
// OP_GOTO	8	0	0
// OP_LOAD_ENT	28	201	5079
// OP_LOAD_F	5079	156	5080
// OP_GT	5058	5080	5081
// OP_GT	5057	5058	5082
// OP_AND	5081	5082	5083
// OP_IFNOT	5083	2	0
// OP_STORE_F	5058	5057	0
// OP_GT	5057	2670	5084
// OP_IFNOT	5084	3	0
// OP_STORE_F	2670	5057	0
// OP_GOTO	4	0	0
// OP_LT	5057	817	5085
// OP_IFNOT	5085	2	0
// OP_STORE_F	817	5057	0
// OP_LOAD_ENT	28	201	5086
// OP_ADDRESS	5086	156	5087
// OP_STOREP_F	5057	5087	0
// OP_LOAD_ENT	28	201	5088
// OP_ADDRESS	5088	651	5089
// OP_STOREP_F	31	5089	0
// OP_DONE	0	0	0
void (float index) SteerChange = 
{
    local float real_index;
    real_index = index;
    
    if((fabs(self.owner.weaponframe - index)) > 1.000)
    {
        index = self.owner.weaponframe + (((((index > self.owner.weaponframe) * 2.000) - 1.000) * frametime) * 20.000);
    }
    
    
    if(real_index == index)
    {
        return;
    }
    
    if((real_index < self.owner.weaponframe) && (index < real_index))
    {
        index = real_index;
    }
    else
    {
        
        if((real_index > self.owner.weaponframe) && (index > real_index))
        {
            index = real_index;
        }
        
    }
    
    if(index > 16.000)
    {
        index = 16.000;
    }
    else
    {
        
        if(index < 0.000)
        {
            index = 0.000;
        }
        
    }
    
    self.owner.weaponframe = index;
    self.owner.last_steerchange = time;
};

// calc_steering_controls
// function begins at statement 5471, parm_start=5091
// OP_LOAD_F	28	675	5095
// OP_STORE_V	5095	4	0
// OP_CALL1	859	0	0
// OP_STORE_F	1	5092	0
// OP_LOAD_F	28	119	5096
// OP_STORE_V	5096	4	0
// OP_CALL1	859	0	0
// OP_STORE_F	1	5093	0
// OP_STORE_V	5092	4	0
// OP_STORE_V	5093	7	0
// OP_CALL2	860	0	0
// OP_STORE_F	1	5091	0
// OP_GT	5091	865	5097
// OP_IFNOT	5097	3	0
// OP_SUB_F	5091	867	5098
// OP_STORE_F	5098	5091	0
// OP_STORE_V	5091	4	0
// OP_CALL1	499	0	0
// OP_LT	1	823	5099
// OP_IFNOT	5099	4	0
// OP_ADDRESS	28	676	5100
// OP_STOREP_F	811	5100	0
// OP_GOTO	10	0	0
// OP_GT	5091	817	5101
// OP_IFNOT	5101	4	0
// OP_ADDRESS	28	676	5102
// OP_STOREP_F	812	5102	0
// OP_GOTO	5	0	0
// OP_LT	5091	817	5103
// OP_IFNOT	5103	3	0
// OP_ADDRESS	28	676	5104
// OP_STOREP_F	813	5104	0
// OP_DONE	0	0	0
void () calc_steering_controls = 
{
    local float steer;
    local float before;
    local float after;
    local string str;
    before = anglemod(self.last_heading);
    after = anglemod(self.angles_y);
    steer = angle_diff(before, after);
    
    if(steer > 180.000)
    {
        steer = steer - 360.000;
    }
    
    if(fabs(steer) < 3.000)
    {
        self.steering = STEER_CENTER;
    }
    else
    {
        if(steer > 0.000)
        {
            self.steering = STEER_LEFT;
        }
        else
        {
            
            if(steer < 0.000)
            {
                self.steering = STEER_RIGHT;
            }
            
        }
        
    }
    
};

// VehiclePreThink
// function begins at statement 5504, parm_start=5106
// OP_LOAD_V	28	113	5134
// OP_STORE_V	5134	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	5131	0
// OP_LOAD_ENT	28	548	5137
// OP_ADDRESS	5137	183	5138
// OP_LOAD_F	28	183	5139
// OP_STOREP_F	5139	5138	0
// OP_LOAD_V	28	571	5140
// OP_STORE_V	5140	4	0
// OP_CALL1	471	0	0
// OP_SUB_F	5131	1	5143
// OP_STORE_F	5143	5113	0
// OP_LOAD_F	28	644	5144
// OP_BITAND	5144	702	5145
// OP_IFNOT	5145	28	0
// OP_LOAD_F	28	182	5146
// OP_BITAND	5146	228	5147
// OP_IFNOT	5147	22	0
// OP_LOAD_V	28	567	5148
// OP_STORE_V	5148	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	5132	0
// OP_LOAD_V	28	567	5151
// OP_STORE_V	5151	4	0
// OP_CALL1	468	0	0
// OP_MUL_VF	1	795	5154
// OP_MUL_VF	5154	32	5157
// OP_STORE_V	5157	5117	0
// OP_STORE_V	5117	4	0
// OP_CALL1	471	0	0
// OP_LT	1	5132	5160
// OP_IFNOT	5160	6	0
// OP_ADDRESS	28	113	5161
// OP_LOAD_V	28	567	5164
// OP_SUB_V	5164	5117	5167
// OP_STOREP_V	5167	5161	0
// OP_GOTO	3	0	0
// OP_ADDRESS	28	113	5170
// OP_STOREP_V	926	5170	0
// OP_LT	5131	855	5173
// OP_IFNOT	5173	2	0
// OP_CALL0	1755	0	0
// OP_LOAD_F	28	607	5174
// OP_IFNOT	5174	12	0
// OP_ADDRESS	28	613	5175
// OP_LOAD_F	28	613	5176
// OP_MUL_F	789	32	5177
// OP_SUB_F	5176	5177	5178
// OP_STOREP_F	5178	5175	0
// OP_LOAD_F	28	613	5179
// OP_LT	5179	827	5180
// OP_IFNOT	5180	3	0
// OP_ADDRESS	28	613	5181
// OP_STOREP_F	827	5181	0
// OP_GOTO	13	0	0
// OP_LOAD_F	28	608	5182
// OP_IFNOT	5182	11	0
// OP_ADDRESS	28	613	5183
// OP_LOAD_F	28	613	5184
// OP_MUL_F	789	32	5185
// OP_ADD_F	5184	5185	5186
// OP_STOREP_F	5186	5183	0
// OP_LOAD_F	28	613	5187
// OP_GT	5187	4760	5188
// OP_IFNOT	5188	3	0
// OP_ADDRESS	28	613	5189
// OP_STOREP_F	4760	5189	0
// OP_LOAD_F	28	611	5190
// OP_EQ_F	5190	716	5191
// OP_IFNOT	5191	2	0
// OP_CALL0	5090	0	0
// OP_LOAD_V	28	105	5192
// OP_STORE_V	5192	4	0
// OP_CALL1	498	0	0
// OP_EQ_F	1	294	5195
// OP_IFNOT	5195	3	0
// OP_CALL0	1755	0	0
// OP_RETURN	0	0	0
// OP_CALL0	3394	0	0
// OP_LOAD_ENT	28	548	5196
// OP_LOAD_F	5196	133	5197
// OP_BITAND	5197	350	5198
// OP_IFNOT	5198	11	0
// OP_LOAD_F	28	656	5199
// OP_SUB_F	31	1182	5200
// OP_LT	5199	5200	5201
// OP_IFNOT	5201	7	0
// OP_LOAD_ENT	28	548	5202
// OP_ADDRESS	5202	133	5203
// OP_LOAD_ENT	28	548	5204
// OP_LOAD_F	5204	133	5205
// OP_SUB_F	5205	350	5206
// OP_STOREP_F	5206	5203	0
// OP_LOAD_F	28	684	5207
// OP_BITAND	5207	704	5208
// OP_LOAD_F	28	645	5209
// OP_SUB_F	31	802	5210
// OP_LT	5209	5210	5211
// OP_AND	5208	5211	5212
// OP_IFNOT	5212	19	0
// OP_LOAD_F	28	628	5213
// OP_LT	5213	823	5214
// OP_IFNOT	5214	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	5215	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_GOTO	7	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	5216	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	645	5217
// OP_STOREP_F	31	5217	0
// OP_LOAD_ENT	28	548	5218
// OP_LOAD_V	5218	117	5219
// OP_STORE_V	5219	4	0
// OP_CALL1	461	0	0
// OP_LOAD_ENT	28	673	5222
// OP_NE_E	5222	30	5223
// OP_IFNOT	5223	11	0
// OP_LT	64	2869	5224
// OP_IFNOT	5224	9	0
// OP_LOAD_ENT	28	673	5225
// OP_STORE_V	5225	4	0
// OP_CALL1	474	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	5226	7	0
// OP_CALL2	483	0	0
// OP_ADDRESS	28	673	5227
// OP_STOREP_ENT	30	5227	0
// OP_LOAD_F	28	182	5228
// OP_BITAND	5228	228	5229
// OP_IFNOT	5229	72	0
// OP_LT	64	2869	5230
// OP_IFNOT	5230	28	0
// OP_ADDRESS	28	589	5231
// OP_STOREP_F	218	5231	0
// OP_LOAD_F	28	116	5232
// OP_STORE_F	5232	5107	0
// OP_LOAD_V	28	567	5233
// OP_STORE_V	5233	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	5106	0
// OP_ADDRESS	28	113	5236
// OP_LOAD_V	28	105	5239
// OP_LOAD_V	28	109	5242
// OP_SUB_V	5239	5242	5245
// OP_STORE_V	5245	4	0
// OP_CALL1	468	0	0
// OP_STOREP_V	1	5236	0
// OP_GT	5106	855	5248
// OP_IFNOT	5248	7	0
// OP_ADDRESS	28	113	5249
// OP_LOAD_V	28	113	5252
// OP_MUL_F	5106	2236	5255
// OP_MUL_VF	5252	5255	5256
// OP_STOREP_V	5256	5249	0
// OP_GOTO	4	0	0
// OP_ADDRESS	28	113	5259
// OP_STOREP_V	926	5259	0
// OP_CALL0	1755	0	0
// OP_GOTO	43	0	0
// OP_GT	64	1182	5262
// OP_IFNOT	5262	16	0
// OP_LOAD_F	28	589	5263
// OP_NOT_F	5263	0	5264
// OP_IFNOT	5264	7	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	5265	10	0
// OP_STORE_V	1182	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	589	5266
// OP_STOREP_F	219	5266	0
// OP_LOAD_ENT	28	548	5267
// OP_ADDRESS	5267	120	5268
// OP_STOREP_F	817	5268	0
// OP_GOTO	26	0	0
// OP_LOAD_ENT	28	548	5269
// OP_LOAD_F	5269	598	5270
// OP_GT	5270	817	5271
// OP_IFNOT	5271	5	0
// OP_LOAD_ENT	28	548	5272
// OP_ADDRESS	5272	598	5273
// OP_STOREP_F	1112	5273	0
// OP_GOTO	4	0	0
// OP_LOAD_ENT	28	548	5274
// OP_ADDRESS	5274	598	5275
// OP_STOREP_F	5276	5275	0
// OP_ADDRESS	28	182	5277
// OP_LOAD_F	28	182	5278
// OP_SUB_F	5278	228	5279
// OP_STOREP_F	5279	5277	0
// OP_ADDRESS	28	662	5280
// OP_LOAD_F	28	662	5281
// OP_LOAD_F	28	662	5282
// OP_BITAND	5282	228	5283
// OP_SUB_F	5281	5283	5284
// OP_STOREP_F	5284	5280	0
// OP_ADDRESS	28	113	5285
// OP_LOAD_V	28	113	5288
// OP_ADD_V	5288	5291	5294
// OP_STOREP_V	5294	5285	0
// OP_LOAD_F	28	182	5297
// OP_BITAND	5297	228	5298
// OP_IFNOT	5298	6	0
// OP_LOAD_ENT	28	547	5299
// OP_LOAD_V	5299	555	5300
// OP_STORE_V	5300	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	5117	0
// OP_STORE_V	5118	4	0
// OP_CALL1	859	0	0
// OP_STORE_F	1	5111	0
// OP_LOAD_V	28	555	5303
// OP_STORE_V	5303	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	5117	0
// OP_STORE_V	5118	4	0
// OP_CALL1	859	0	0
// OP_STORE_F	1	5110	0
// OP_STORE_V	5110	4	0
// OP_STORE_V	5111	7	0
// OP_CALL2	860	0	0
// OP_STORE_F	1	5108	0
// OP_STORE_V	5108	4	0
// OP_CALL1	499	0	0
// OP_STORE_F	1	5108	0
// OP_LOAD_V	28	113	5306
// OP_STORE_V	5306	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	5106	0
// OP_LOAD_F	28	590	5309
// OP_GT	1	5309	5310
// OP_IFNOT	5310	73	0
// OP_DIV_F	5106	778	5311
// OP_SUB_F	819	5311	5312
// OP_MUL_F	5312	821	5313
// OP_ADD_F	819	5313	5314
// OP_STORE_F	5314	5129	0
// OP_MUL_F	778	5129	5315
// OP_STORE_F	5315	5130	0
// OP_LOAD_F	28	108	5316
// OP_LOAD_F	28	112	5317
// OP_SUB_F	5316	5317	5318
// OP_LE	5318	817	5319
// OP_IFNOT	5319	13	0
// OP_LOAD_F	28	590	5320
// OP_LOAD_F	28	590	5321
// OP_SUB_F	5106	5321	5322
// OP_MUL_F	5322	776	5323
// OP_LOAD_F	28	611	5324
// OP_EQ_F	5324	715	5325
// OP_ADD_F	5325	819	5326
// OP_MUL_F	5323	5326	5327
// OP_MUL_F	5327	5129	5328
// OP_ADD_F	5320	5328	5329
// OP_STORE_F	5329	5107	0
// OP_GOTO	5	0	0
// OP_LOAD_V	28	113	5330
// OP_STORE_V	5330	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	5107	0
// OP_GT	5107	5130	5333
// OP_IFNOT	5333	2	0
// OP_STORE_F	5130	5107	0
// OP_ADDRESS	28	113	5334
// OP_LOAD_V	28	113	5337
// OP_STORE_V	5337	4	0
// OP_CALL1	468	0	0
// OP_MUL_VF	1	5107	5340
// OP_STOREP_V	5340	5334	0
// OP_DIV_F	778	821	5343
// OP_LT	5106	5343	5344
// OP_LOAD_F	28	650	5345
// OP_SUB_F	31	799	5346
// OP_LT	5345	5346	5347
// OP_AND	5344	5347	5348
// OP_LOAD_F	28	590	5349
// OP_LT	5349	5106	5350
// OP_AND	5348	5350	5351
// OP_GT	5131	1957	5352
// OP_AND	5351	5352	5353
// OP_NOT_F	719	0	5354
// OP_AND	5353	5354	5355
// OP_LOAD_F	28	604	5356
// OP_NOT_F	5356	0	5357
// OP_AND	5355	5357	5358
// OP_IFNOT	5358	19	0
// OP_LOAD_F	28	610	5359
// OP_EQ_F	5359	808	5360
// OP_IFNOT	5360	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	2569	10	0
// OP_STORE_V	2236	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_GOTO	7	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	5361	10	0
// OP_STORE_V	2236	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	650	5362
// OP_STOREP_F	31	5362	0
// OP_LOAD_V	28	113	5363
// OP_STORE_V	5363	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	5131	0
// OP_NE_F	35	855	5366
// OP_LOAD_F	28	189	5367
// OP_AND	5366	5367	5368
// OP_DIV_F	778	823	5369
// OP_GT	5131	5369	5370
// OP_AND	5368	5370	5371
// OP_IFNOT	5371	43	0
// OP_LOAD_ENT	28	548	5372
// OP_LOAD_V	5372	117	5373
// OP_STORE_V	5373	4	0
// OP_CALL1	461	0	0
// OP_CALL0	466	0	0
// OP_MUL_F	1	829	5377
// OP_ADD_F	5376	5377	5378
// OP_STORE_F	5378	5113	0
// OP_LOAD_V	28	105	5379
// OP_MUL_VF	65	834	5382
// OP_ADD_V	5379	5382	5385
// OP_STORE_V	5385	4	0
// OP_ADD_V	62	65	5388
// OP_MUL_VF	5388	1957	5391
// OP_LOAD_V	28	113	5394
// OP_MUL_VF	5394	3083	5397
// OP_ADD_V	5391	5397	5400
// OP_STORE_V	5400	7	0
// OP_STORE_V	5113	10	0
// OP_DIV_F	5131	778	5403
// OP_MUL_F	5403	2677	5404
// OP_STORE_V	5404	13	0
// OP_CALL4	504	0	0
// OP_CALL0	466	0	0
// OP_MUL_F	1	829	5406
// OP_ADD_F	5405	5406	5407
// OP_STORE_F	5407	5113	0
// OP_LOAD_V	28	105	5408
// OP_MUL_VF	65	834	5411
// OP_SUB_V	5408	5411	5414
// OP_STORE_V	5414	4	0
// OP_SUB_V	62	65	5417
// OP_MUL_VF	5417	1957	5420
// OP_LOAD_V	28	113	5423
// OP_MUL_VF	5423	3083	5426
// OP_ADD_V	5420	5426	5429
// OP_STORE_V	5429	7	0
// OP_STORE_V	5113	10	0
// OP_DIV_F	5131	778	5432
// OP_MUL_F	5432	2677	5433
// OP_STORE_V	5433	13	0
// OP_CALL4	504	0	0
// OP_EQ_F	5131	817	5434
// OP_LOAD_F	28	604	5435
// OP_NOT_F	5435	0	5436
// OP_AND	5434	5436	5437
// OP_LOAD_F	28	611	5438
// OP_NE_F	5438	715	5439
// OP_AND	5437	5439	5440
// OP_LOAD_F	28	611	5441
// OP_NE_F	5441	716	5442
// OP_AND	5440	5442	5443
// OP_IFNOT	5443	31	0
// OP_LOAD_V	28	555	5444
// OP_STORE_V	5444	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	5117	0
// OP_STORE_V	5118	4	0
// OP_LOAD_F	28	119	5447
// OP_STORE_V	5447	7	0
// OP_CALL2	860	0	0
// OP_STORE_F	1	5113	0
// OP_STORE_V	5113	4	0
// OP_CALL1	499	0	0
// OP_LT	1	865	5448
// OP_IFNOT	5448	7	0
// OP_GT	5113	817	5449
// OP_IFNOT	5449	3	0
// OP_STORE_F	1380	5109	0
// OP_GOTO	2	0	0
// OP_STORE_F	1912	5109	0
// OP_GOTO	2	0	0
// OP_STORE_F	817	5109	0
// OP_ADD_F	5118	5109	5450
// OP_STORE_V	5450	4	0
// OP_CALL1	859	0	0
// OP_STORE_F	1	5118	0
// OP_STORE_V	5117	4	0
// OP_CALL1	461	0	0
// OP_LOAD_ENT	28	547	5451
// OP_ADDRESS	5451	555	5452
// OP_STOREP_V	59	5452	0
// OP_GOTO	10	0	0
// OP_LOAD_V	28	575	5455
// OP_STORE_V	5455	4	0
// OP_CALL1	471	0	0
// OP_LT	1	819	5458
// OP_IFNOT	5458	5	0
// OP_LOAD_ENT	28	547	5459
// OP_ADDRESS	5459	555	5460
// OP_LOAD_V	28	555	5463
// OP_STOREP_V	5463	5460	0
// OP_LOAD_F	28	611	5466
// OP_EQ_F	5466	716	5467
// OP_IFNOT	5467	3	0
// OP_CALL0	4973	0	0
// OP_GOTO	23	0	0
// OP_LOAD_V	28	113	5468
// OP_STORE_V	5468	5114	0
// OP_LOAD_V	28	117	5471
// OP_STORE_V	5471	541	0
// OP_LOAD_V	28	555	5474
// OP_STORE_V	5474	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	5120	0
// OP_ADDRESS	28	119	5477
// OP_LOAD_F	28	119	5478
// OP_STORE_V	5478	4	0
// OP_CALL1	859	0	0
// OP_STOREP_F	1	5477	0
// OP_STORE_V	5121	4	0
// OP_LOAD_F	28	119	5479
// OP_STORE_V	5479	7	0
// OP_CALL2	860	0	0
// OP_STORE_F	1	5108	0
// OP_LOAD_V	28	113	5480
// OP_STORE_V	5480	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	5106	0
// OP_LOAD_F	28	604	5483
// OP_IFNOT	5483	3	0
// OP_STORE_F	1228	5109	0
// OP_GOTO	2	0	0
// OP_STORE_F	819	5109	0
// OP_LOAD_ENT	28	549	5484
// OP_NE_E	5484	30	5485
// OP_IFNOT	5485	4	0
// OP_LOAD_ENT	28	549	5486
// OP_STORE_ENT	5486	28	0
// OP_GOTO	3	0	0
// OP_LOAD_ENT	28	548	5487
// OP_STORE_ENT	5487	28	0
// OP_STORE_V	5108	4	0
// OP_CALL1	499	0	0
// OP_LT	1	855	5488
// OP_LOAD_F	28	604	5489
// OP_OR	5488	5489	5490
// OP_IFNOT	5490	17	0
// OP_NOT_F	35	0	5491
// OP_IFNOT	5491	2	0
// OP_CALL0	816	0	0
// OP_GE	5108	827	5492
// OP_IFNOT	5492	4	0
// OP_STORE_V	839	4	0
// OP_CALL1	5056	0	0
// OP_GOTO	8	0	0
// OP_LE	5108	1483	5493
// OP_IFNOT	5493	4	0
// OP_STORE_V	847	4	0
// OP_CALL1	5056	0	0
// OP_GOTO	3	0	0
// OP_STORE_V	843	4	0
// OP_CALL1	5056	0	0
// OP_GOTO	92	0	0
// OP_GT	5108	817	5494
// OP_IFNOT	5494	46	0
// OP_GE	5108	1632	5495
// OP_IFNOT	5495	7	0
// OP_NOT_F	35	0	5496
// OP_IFNOT	5496	2	0
// OP_CALL0	822	0	0
// OP_STORE_V	817	4	0
// OP_CALL1	5056	0	0
// OP_GOTO	37	0	0
// OP_GE	5108	2522	5497
// OP_IFNOT	5497	12	0
// OP_NOT_F	35	0	5498
// OP_IFNOT	5498	2	0
// OP_CALL0	822	0	0
// OP_GE	5108	5499	5500
// OP_IFNOT	5500	4	0
// OP_STORE_V	819	4	0
// OP_CALL1	5056	0	0
// OP_GOTO	3	0	0
// OP_STORE_V	821	4	0
// OP_CALL1	5056	0	0
// OP_GOTO	24	0	0
// OP_GE	5108	1112	5501
// OP_IFNOT	5501	12	0
// OP_NOT_F	35	0	5502
// OP_IFNOT	5502	2	0
// OP_CALL0	820	0	0
// OP_GE	5108	1380	5503
// OP_IFNOT	5503	4	0
// OP_STORE_V	823	4	0
// OP_CALL1	5056	0	0
// OP_GOTO	3	0	0
// OP_STORE_V	825	4	0
// OP_CALL1	5056	0	0
// OP_GOTO	11	0	0
// OP_NOT_F	35	0	5504
// OP_IFNOT	5504	2	0
// OP_CALL0	818	0	0
// OP_GE	5108	845	5505
// OP_IFNOT	5505	4	0
// OP_STORE_V	827	4	0
// OP_CALL1	5056	0	0
// OP_GOTO	3	0	0
// OP_STORE_V	829	4	0
// OP_CALL1	5056	0	0
// OP_GOTO	45	0	0
// OP_LE	5108	4504	5506
// OP_IFNOT	5506	7	0
// OP_NOT_F	35	0	5507
// OP_IFNOT	5507	2	0
// OP_CALL0	828	0	0
// OP_STORE_V	2670	4	0
// OP_CALL1	5056	0	0
// OP_GOTO	37	0	0
// OP_LE	5108	5508	5509
// OP_IFNOT	5509	12	0
// OP_NOT_F	35	0	5510
// OP_IFNOT	5510	2	0
// OP_CALL0	828	0	0
// OP_LE	5108	5511	5512
// OP_IFNOT	5512	4	0
// OP_STORE_V	845	4	0
// OP_CALL1	5056	0	0
// OP_GOTO	3	0	0
// OP_STORE_V	841	4	0
// OP_CALL1	5056	0	0
// OP_GOTO	24	0	0
// OP_LE	5108	5276	5513
// OP_IFNOT	5513	12	0
// OP_NOT_F	35	0	5514
// OP_IFNOT	5514	2	0
// OP_CALL0	826	0	0
// OP_LE	5108	1912	5515
// OP_IFNOT	5515	4	0
// OP_STORE_V	837	4	0
// OP_CALL1	5056	0	0
// OP_GOTO	3	0	0
// OP_STORE_V	834	4	0
// OP_CALL1	5056	0	0
// OP_GOTO	11	0	0
// OP_NOT_F	35	0	5516
// OP_IFNOT	5516	2	0
// OP_CALL0	824	0	0
// OP_LE	5108	3214	5517
// OP_IFNOT	5517	4	0
// OP_STORE_V	831	4	0
// OP_CALL1	5056	0	0
// OP_GOTO	3	0	0
// OP_STORE_V	855	4	0
// OP_CALL1	5056	0	0
// OP_LOAD_ENT	28	201	5518
// OP_STORE_ENT	5518	28	0
// OP_IFNOT	35	28	0
// OP_LE	5108	5508	5519
// OP_IFNOT	5519	5	0
// OP_LOAD_ENT	28	548	5520
// OP_ADDRESS	5520	131	5521
// OP_STOREP_F	825	5521	0
// OP_GOTO	22	0	0
// OP_LE	5108	3214	5522
// OP_IFNOT	5522	5	0
// OP_LOAD_ENT	28	548	5523
// OP_ADDRESS	5523	131	5524
// OP_STOREP_F	823	5524	0
// OP_GOTO	16	0	0
// OP_GE	5108	2522	5525
// OP_IFNOT	5525	5	0
// OP_LOAD_ENT	28	548	5526
// OP_ADDRESS	5526	131	5527
// OP_STOREP_F	821	5527	0
// OP_GOTO	10	0	0
// OP_GE	5108	845	5528
// OP_IFNOT	5528	5	0
// OP_LOAD_ENT	28	548	5529
// OP_ADDRESS	5529	131	5530
// OP_STOREP_F	819	5530	0
// OP_GOTO	4	0	0
// OP_LOAD_ENT	28	548	5531
// OP_ADDRESS	5531	131	5532
// OP_STOREP_F	817	5532	0
// OP_ADDRESS	28	603	5533
// OP_STOREP_F	5109	5533	0
// OP_DIV_F	5131	778	5534
// OP_MUL_F	5534	1182	5535
// OP_ADD_F	5535	819	5536
// OP_MUL_F	775	5536	5537
// OP_STORE_F	5537	5112	0
// OP_LOAD_F	28	604	5538
// OP_IFNOT	5538	9	0
// OP_ADDRESS	28	119	5539
// OP_MUL_F	5108	5540	5541
// OP_ADD_F	5121	5541	5542
// OP_STOREP_F	5542	5539	0
// OP_MUL_F	5108	5540	5543
// OP_STORE_F	5543	5108	0
// OP_MUL_F	5112	5540	5544
// OP_STORE_F	5544	5112	0
// OP_LOAD_S	28	129	5545
// OP_EQ_S	5545	880	5546
// OP_LOAD_F	28	609	5547
// OP_SUB_F	31	3083	5548
// OP_LT	5547	5548	5549
// OP_LOAD_F	28	611	5550
// OP_NE_F	5550	716	5551
// OP_LOAD_F	28	604	5552
// OP_OR	5551	5552	5553
// OP_AND	5549	5553	5554
// OP_AND	5546	5554	5555
// OP_IFNOT	5555	156	0
// OP_GT	5108	817	5556
// OP_IFNOT	5556	77	0
// OP_GT	5108	5112	5557
// OP_LOAD_F	28	604	5558
// OP_OR	5557	5558	5559
// OP_IFNOT	5559	72	0
// OP_GT	5108	5112	5560
// OP_IFNOT	5560	4	0
// OP_ADDRESS	28	119	5561
// OP_SUB_F	5121	5112	5562
// OP_STOREP_F	5562	5561	0
// OP_LOAD_F	28	119	5563
// OP_LT	5563	817	5564
// OP_IFNOT	5564	6	0
// OP_ADDRESS	28	119	5565
// OP_LOAD_F	28	119	5566
// OP_ADD_F	5566	867	5567
// OP_STOREP_F	5567	5565	0
// OP_GOTO	8	0	0
// OP_LOAD_F	28	119	5568
// OP_GE	5568	867	5569
// OP_IFNOT	5569	5	0
// OP_ADDRESS	28	119	5570
// OP_LOAD_F	28	119	5571
// OP_SUB_F	5571	867	5572
// OP_STOREP_F	5572	5570	0
// OP_LOAD_F	28	182	5573
// OP_BITAND	5573	228	5574
// OP_LOAD_F	28	661	5575
// OP_SUB_F	31	821	5576
// OP_GT	5575	5576	5577
// OP_LT	5106	4760	5578
// OP_OR	5577	5578	5579
// OP_AND	5574	5579	5580
// OP_IFNOT	5580	43	0
// OP_EQ_F	5109	1228	5581
// OP_STORE_V	5582	4	0
// OP_CALL1	501	0	0
// OP_GT	5106	1	5583
// OP_AND	5581	5583	5584
// OP_IFNOT	5584	4	0
// OP_STORE_V	5582	4	0
// OP_CALL1	501	0	0
// OP_STORE_F	1	5106	0
// OP_LOAD_V	28	113	5585
// OP_STORE_V	5585	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	544	0
// OP_LOAD_F	28	119	5588
// OP_STORE_F	5588	545	0
// OP_STORE_V	544	4	0
// OP_CALL1	461	0	0
// OP_GT	5106	4760	5589
// OP_IFNOT	5589	19	0
// OP_MUL_VF	59	5109	5590
// OP_MUL_VF	5590	5106	5593
// OP_MUL_VF	5593	817	5596
// OP_LOAD_V	28	113	5599
// OP_ADD_V	5596	5599	5602
// OP_STORE_V	5602	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	544	0
// OP_SUB_F	5108	5112	5605
// OP_DIV_F	5605	2558	5606
// OP_MUL_F	3892	5606	5607
// OP_DIV_F	5106	778	5608
// OP_MUL_F	5607	5608	5609
// OP_MUL_F	5609	32	5610
// OP_SUB_F	5106	5610	5611
// OP_MUL_VF	544	5611	5612
// OP_STORE_V	5612	544	0
// OP_GOTO	4	0	0
// OP_MUL_VF	59	5109	5615
// OP_MUL_VF	5615	5106	5618
// OP_STORE_V	5618	544	0
// OP_ADDRESS	28	113	5621
// OP_STOREP_V	544	5621	0
// OP_GOTO	78	0	0
// OP_MUL_F	1228	5112	5624
// OP_LT	5108	5624	5625
// OP_LOAD_F	28	604	5626
// OP_OR	5625	5626	5627
// OP_IFNOT	5627	73	0
// OP_MUL_F	1228	5112	5628
// OP_LT	5108	5628	5629
// OP_IFNOT	5629	4	0
// OP_ADDRESS	28	119	5630
// OP_ADD_F	5121	5112	5631
// OP_STOREP_F	5631	5630	0
// OP_LOAD_F	28	119	5632
// OP_LT	5632	817	5633
// OP_IFNOT	5633	6	0
// OP_ADDRESS	28	119	5634
// OP_LOAD_F	28	119	5635
// OP_ADD_F	5635	867	5636
// OP_STOREP_F	5636	5634	0
// OP_GOTO	8	0	0
// OP_LOAD_F	28	119	5637
// OP_GE	5637	867	5638
// OP_IFNOT	5638	5	0
// OP_ADDRESS	28	119	5639
// OP_LOAD_F	28	119	5640
// OP_SUB_F	5640	867	5641
// OP_STOREP_F	5641	5639	0
// OP_LOAD_F	28	182	5642
// OP_BITAND	5642	228	5643
// OP_LOAD_F	28	661	5644
// OP_SUB_F	31	821	5645
// OP_GT	5644	5645	5646
// OP_LT	5106	4760	5647
// OP_OR	5646	5647	5648
// OP_AND	5643	5648	5649
// OP_IFNOT	5649	43	0
// OP_EQ_F	5109	1228	5650
// OP_STORE_V	5582	4	0
// OP_CALL1	501	0	0
// OP_GT	5106	1	5651
// OP_AND	5650	5651	5652
// OP_IFNOT	5652	4	0
// OP_STORE_V	5582	4	0
// OP_CALL1	501	0	0
// OP_STORE_F	1	5106	0
// OP_LOAD_V	28	113	5653
// OP_STORE_V	5653	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	544	0
// OP_LOAD_F	28	119	5656
// OP_STORE_F	5656	545	0
// OP_STORE_V	544	4	0
// OP_CALL1	461	0	0
// OP_GT	5106	4760	5657
// OP_IFNOT	5657	19	0
// OP_MUL_VF	59	5109	5658
// OP_MUL_VF	5658	5106	5661
// OP_MUL_VF	5661	817	5664
// OP_LOAD_V	28	113	5667
// OP_ADD_V	5664	5667	5670
// OP_STORE_V	5670	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	544	0
// OP_SUB_F	5112	5108	5673
// OP_DIV_F	5673	2558	5674
// OP_MUL_F	3892	5674	5675
// OP_DIV_F	5106	778	5676
// OP_MUL_F	5675	5676	5677
// OP_MUL_F	5677	32	5678
// OP_SUB_F	5106	5678	5679
// OP_MUL_VF	544	5679	5680
// OP_STORE_V	5680	544	0
// OP_GOTO	4	0	0
// OP_MUL_VF	59	5109	5683
// OP_MUL_VF	5683	5106	5686
// OP_STORE_V	5686	544	0
// OP_ADDRESS	28	113	5689
// OP_STOREP_V	544	5689	0
// OP_ADDRESS	28	116	5692
// OP_STOREP_F	5116	5692	0
// OP_LOAD_V	28	117	5693
// OP_STORE_V	5693	5120	0
// OP_ADDRESS	28	117	5696
// OP_STOREP_V	541	5696	0
// OP_LOAD_F	28	611	5699
// OP_EQ_F	5699	716	5700
// OP_NOT_F	5700	0	5701
// OP_IFNOT	5701	4	0
// OP_ADDRESS	28	559	5702
// OP_LOAD_V	28	117	5705
// OP_STOREP_V	5705	5702	0
// OP_LOAD_F	28	182	5708
// OP_BITAND	5708	228	5709
// OP_IFNOT	5709	95	0
// OP_LOAD_F	28	605	5710
// OP_LOAD_F	28	644	5711
// OP_BITAND	5711	702	5712
// OP_NOT_F	5712	0	5713
// OP_AND	5710	5713	5714
// OP_IFNOT	5714	53	0
// OP_LOAD_V	28	113	5715
// OP_STORE_V	5715	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	544	0
// OP_LOAD_V	28	113	5718
// OP_STORE_V	5718	4	0
// OP_CALL1	471	0	0
// OP_GT	1	1957	5721
// OP_LOAD_V	28	555	5722
// OP_ADD_V	544	5722	5725
// OP_STORE_V	5725	4	0
// OP_CALL1	471	0	0
// OP_GT	1	883	5728
// OP_AND	5721	5728	5729
// OP_IFNOT	5729	10	0
// OP_ADDRESS	28	567	5730
// OP_LOAD_V	28	567	5733
// OP_LOAD_V	28	567	5736
// OP_STORE_V	5736	4	0
// OP_CALL1	468	0	0
// OP_MUL_F	4760	32	5739
// OP_MUL_VF	1	5739	5740
// OP_SUB_V	5733	5740	5743
// OP_STOREP_V	5743	5730	0
// OP_LOAD_ENT	28	548	5746
// OP_LOAD_V	5746	117	5747
// OP_STORE_V	5747	4	0
// OP_CALL1	461	0	0
// OP_ADDRESS	28	113	5750
// OP_LOAD_V	28	567	5753
// OP_MUL_F	4760	32	5756
// OP_MUL_VF	59	5756	5757
// OP_SUB_V	5753	5757	5760
// OP_STOREP_V	5760	5750	0
// OP_LOAD_V	28	555	5763
// OP_ADD_V	544	5763	5766
// OP_STORE_V	5766	4	0
// OP_CALL1	471	0	0
// OP_LT	1	2575	5769
// OP_IFNOT	5769	12	0
// OP_LOAD_V	28	113	5770
// OP_STORE_V	5770	4	0
// OP_CALL1	471	0	0
// OP_GT	1	1135	5773
// OP_IFNOT	5773	7	0
// OP_ADDRESS	28	113	5774
// OP_LOAD_V	28	113	5777
// OP_STORE_V	5777	4	0
// OP_CALL1	468	0	0
// OP_MUL_VF	1	1135	5780
// OP_STOREP_V	5780	5774	0
// OP_GOTO	37	0	0
// OP_LOAD_F	28	604	5783
// OP_IFNOT	5783	35	0
// OP_LOAD_V	28	567	5784
// OP_STORE_V	5784	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	544	0
// OP_LOAD_V	28	555	5787
// OP_ADD_V	544	5787	5790
// OP_STORE_V	5790	4	0
// OP_CALL1	471	0	0
// OP_LT	1	1182	5793
// OP_IFNOT	5793	25	0
// OP_LOAD_V	28	567	5794
// OP_STORE_V	5794	4	0
// OP_CALL1	471	0	0
// OP_GT	1	2677	5797
// OP_IFNOT	5797	9	0
// OP_ADDRESS	28	113	5798
// OP_LOAD_V	28	567	5801
// OP_LOAD_V	28	555	5804
// OP_MUL_F	5807	32	5808
// OP_MUL_VF	5804	5808	5809
// OP_ADD_V	5801	5809	5812
// OP_STOREP_V	5812	5798	0
// OP_GOTO	12	0	0
// OP_ADDRESS	28	113	5815
// OP_LOAD_V	28	567	5818
// OP_LOAD_V	28	555	5821
// OP_LOAD_V	28	567	5824
// OP_STORE_V	5824	4	0
// OP_CALL1	471	0	0
// OP_ADD_F	1	1112	5827
// OP_MUL_F	5827	32	5828
// OP_MUL_VF	5821	5828	5829
// OP_ADD_V	5818	5829	5832
// OP_STOREP_V	5832	5815	0
// OP_ADDRESS	28	567	5835
// OP_LOAD_V	28	113	5838
// OP_STOREP_V	5838	5835	0
// OP_LOAD_F	28	182	5841
// OP_BITAND	5841	225	5842
// OP_LOAD_V	28	113	5843
// OP_STORE_V	5843	4	0
// OP_CALL1	471	0	0
// OP_DIV_F	778	821	5846
// OP_GT	1	5846	5847
// OP_AND	5842	5847	5848
// OP_IFNOT	5848	8	0
// OP_ADDRESS	28	113	5849
// OP_LOAD_V	28	113	5852
// OP_STORE_V	5852	4	0
// OP_CALL1	468	0	0
// OP_DIV_F	778	821	5855
// OP_MUL_VF	1	5855	5856
// OP_STOREP_V	5856	5849	0
// OP_ADDRESS	28	621	5859
// OP_LOAD_V	28	113	5862
// OP_STOREP_V	5862	5859	0
// OP_DONE	0	0	0
void () VehiclePreThink = 
{
    local float mspeed;
    local float aspeed;
    local float angle_between;
    local float dir;
    local float veh_heading;
    local float tail_heading;
    local float max_steer;
    local float ftemp;
    local vector old_vel;
    local vector vtemp;
    local vector steer_angle;
    local vector vel_angles;
    local vector back_angles;
    local float damage_accel;
    local float damage_topspeed;
    local float vel_speed;
    local float old_vel_speed;
    local string str;
    vel_speed = vlen(self.velocity);
    self.veh_body.colormap = self.colormap;
    ftemp = vel_speed - vlen(self.back_vel);
    
    if(self.racing_flags & QR_OUT_OF_TIME)
    {
        
        if(self.flags & FL_ONGROUND)
        {
            old_vel_speed = vlen(self.old_velocity);
            vtemp = (normalize(self.old_velocity) * OUT_OF_TIME_SLOWDOWN) * frametime;
            if(vlen(vtemp) < old_vel_speed)
            {
                self.velocity = self.old_velocity - vtemp;
            }
            else
            {
                self.velocity = '0.000 0.000 0.000';
            }
            
        }
        
        
        if(vel_speed < 10.000)
        {
            DestroyVehicle();
        }
        
    }
    
    if(self.zoomin)
    {
        self.chasecam_zoom = self.chasecam_zoom - (ZOOM_SPEED * frametime);
        
        if(self.chasecam_zoom < 5.000)
        {
            self.chasecam_zoom = 5.000;
        }
        
    }
    else
    {
        
        if(self.zoomout)
        {
            self.chasecam_zoom = self.chasecam_zoom + (ZOOM_SPEED * frametime);
            
            if(self.chasecam_zoom > 200.000)
            {
                self.chasecam_zoom = 200.000;
            }
            
        }
        
    }
    
    
    if(self.cam == CAM_TEST)
    {
        calc_steering_controls();
    }
    
    
    if(pointcontents(self.origin) == CONTENT_LAVA)
    {
        DestroyVehicle();
        return;
    }
    
    checkHealth();
    
    if(self.veh_body.effects & EF_DIMLIGHT)
    {
        
        if(self.last_crash < (time - 0.500))
        {
            self.veh_body.effects = self.veh_body.effects - EF_DIMLIGHT;
        }
        
    }
    
    
    if((self.misc_flags & MISC_HORN_ON) && (self.horn_time < (time - SNDLEN_HORN)))
    {
        if(self.car_index < 3.000)
        {
            sound(self, CHAN_AUTO, "rally/meepmeep.wav", 1.000, ATTN_STATIC);
        }
        else
        {
            sound(self, CHAN_AUTO, "rally/nexus/horn.wav", 1.000, ATTN_STATIC);
        }
        
        self.horn_time = time;
    }
    
    makevectors(self.veh_body.angles);
    
    if(self.mine_attached != world)
    {
        
        if(0.000 < 0.100)
        {
            remove(self.mine_attached);
            sprint(self, "Detonator removed\n");
            self.mine_attached = world;
        }
        
    }
    
    
    if(self.flags & FL_ONGROUND)
    {
        if(0.000 < 0.100)
        {
            self.use_surface_angle = FALSE;
            aspeed = self.velocity_z;
            mspeed = vlen(self.old_velocity);
            self.velocity = normalize(self.origin - self.oldorigin);
            if(mspeed > 10.000)
            {
                self.velocity = self.velocity * (mspeed * 0.800);
            }
            else
            {
                self.velocity = '0.000 0.000 0.000';
                DestroyVehicle();
            }
            
        }
        else
        {
            if(0.000 > 0.500)
            {
                
                if(!self.use_surface_angle)
                {
                    sound(self, CHAN_AUTO, "demon/dland2.wav", 0.500, ATTN_STATIC);
                }
                
                self.use_surface_angle = TRUE;
                self.veh_body.angles_z = 0.000;
            }
            else
            {
                if(self.veh_body.roll_velocity_z > 0.000)
                {
                    self.veh_body.roll_velocity_z = 20.000;
                }
                else
                {
                    self.veh_body.roll_velocity_z = -20.000;
                }
                
                self.flags = self.flags - FL_ONGROUND;
                self.last_flags = self.last_flags - (self.last_flags & FL_ONGROUND);
                self.velocity = self.velocity + '0.000 0.000 50.000';
            }
            
        }
        
    }
    
    
    if(self.flags & FL_ONGROUND)
    {
        vtemp = vectoangles(self.veh_tail.veh_dir);
    }
    
    tail_heading = anglemod(0.000);
    vtemp = vectoangles(self.veh_dir);
    veh_heading = anglemod(0.000);
    angle_between = angle_diff(veh_heading, tail_heading);
    angle_between = fabs(angle_between);
    mspeed = vlen(self.velocity);
    
    if(vlen(self.velocity) > self.last_speed)
    {
        damage_accel = 1.000 + ((1.000 - (mspeed / MAX_SPEED)) * 2.000);
        damage_topspeed = MAX_SPEED * damage_accel;
        if((self.origin_z - self.oldorigin_z) <= 0.000)
        {
            aspeed = self.last_speed + ((((mspeed - self.last_speed) * VEH_ACCEL_SLOWDOWN) * ((self.cam == CAM_INCAR) + 1.000)) * damage_accel);
        }
        else
        {
            aspeed = vlen(self.velocity);
        }
        
        
        if(aspeed > damage_topspeed)
        {
            aspeed = damage_topspeed;
        }
        
        self.velocity = normalize(self.velocity) * aspeed;
        
        if((((((mspeed < (MAX_SPEED / 2.000)) && (self.last_slide < (time - SNDLEN_SLIDE))) && (self.last_speed < mspeed)) && (vel_speed > 100.000)) && !hold_flag) && !self.reversing)
        {
            if(self.current_surface == SURF_MUD)
            {
                sound(self, CHAN_AUTO, "rally/skidmud.wav", 0.800, ATTN_STATIC);
            }
            else
            {
                sound(self, CHAN_AUTO, "rally/ray/screech4.wav", 0.800, ATTN_STATIC);
            }
            
            self.last_slide = time;
        }
        
    }
    
    vel_speed = vlen(self.velocity);
    
    if(((deathmatch != 10.000) && self.waterlevel) && (vel_speed > (MAX_SPEED / 3.000)))
    {
        makevectors(self.veh_body.angles);
        ftemp = 37.000 + (random() * 6.000);
        particle(self.origin + (v_right * 12.000), ((v_up + v_right) * 100.000) + (self.velocity * 0.750), ftemp, (vel_speed / MAX_SPEED) * 80.000);
        ftemp = 36.000 + (random() * 6.000);
        particle(self.origin - (v_right * 12.000), ((v_up - v_right) * 100.000) + (self.velocity * 0.750), ftemp, (vel_speed / MAX_SPEED) * 80.000);
    }
    
    if((((vel_speed == 0.000) && !self.reversing) && (self.cam != CAM_INCAR)) && (self.cam != CAM_TEST))
    {
        vtemp = vectoangles(self.veh_dir);
        ftemp = angle_diff(0.000, self.angles_y);
        if(fabs(ftemp) < 180.000)
        {
            if(ftemp > 0.000)
            {
                dir = 25.000;
            }
            else
            {
                dir = -25.000;
            }
            
        }
        else
        {
            dir = 0.000;
        }
        
        vtemp_y = anglemod(0.000 + dir);
        makevectors(vtemp);
        self.veh_tail.veh_dir = v_forward;
    }
    else
    {
        
        if(vlen(self.lastmove) < 1.000)
        {
            self.veh_tail.veh_dir = self.veh_dir;
        }
        
    }
    
    if(self.cam == CAM_TEST)
    {
        checkSteering();
    }
    else
    {
        old_vel = self.velocity;
        plyr_angles = self.angles;
        steer_angle = vectoangles(self.veh_dir);
        self.angles_y = anglemod(self.angles_y);
        angle_between = angle_diff(0.000, self.angles_y);
        mspeed = vlen(self.velocity);
    }
    
    if(self.reversing)
    {
        dir = -1.000;
    }
    else
    {
        dir = 1.000;
    }
    
    if(self.fwhl != world)
    {
        self = self.fwhl;
    }
    else
    {
        self = self.veh_body;
    }
    
    if((fabs(angle_between) < 10.000) || self.reversing)
    {
        
        if(!deathmatch)
        {
            rally_centre();
        }
        
        if(angle_between >= 5.000)
        {
            SteerChange(7.000);
        }
        else
        {
            if(angle_between <= -5.000)
            {
                SteerChange(9.000);
            }
            else
            {
                SteerChange(8.000);
            }
            
        }
        
    }
    else
    {
        if(angle_between > 0.000)
        {
            if(angle_between >= 40.000)
            {
                
                if(!deathmatch)
                {
                    rally_right30();
                }
                
                SteerChange(0.000);
            }
            else
            {
                if(angle_between >= 30.000)
                {
                    
                    if(!deathmatch)
                    {
                        rally_right30();
                    }
                    
                    if(angle_between >= 35.000)
                    {
                        SteerChange(1.000);
                    }
                    else
                    {
                        SteerChange(2.000);
                    }
                    
                }
                else
                {
                    if(angle_between >= 20.000)
                    {
                        
                        if(!deathmatch)
                        {
                            rally_right20();
                        }
                        
                        if(angle_between >= 25.000)
                        {
                            SteerChange(3.000);
                        }
                        else
                        {
                            SteerChange(4.000);
                        }
                        
                    }
                    else
                    {
                        
                        if(!deathmatch)
                        {
                            rally_right10();
                        }
                        
                        if(angle_between >= 15.000)
                        {
                            SteerChange(5.000);
                        }
                        else
                        {
                            SteerChange(6.000);
                        }
                        
                    }
                    
                }
                
            }
            
        }
        else
        {
            if(angle_between <= -40.000)
            {
                
                if(!deathmatch)
                {
                    rally_left30();
                }
                
                SteerChange(16.000);
            }
            else
            {
                if(angle_between <= -30.000)
                {
                    
                    if(!deathmatch)
                    {
                        rally_left30();
                    }
                    
                    if(angle_between <= -35.000)
                    {
                        SteerChange(15.000);
                    }
                    else
                    {
                        SteerChange(14.000);
                    }
                    
                }
                else
                {
                    if(angle_between <= -20.000)
                    {
                        
                        if(!deathmatch)
                        {
                            rally_left20();
                        }
                        
                        if(angle_between <= -25.000)
                        {
                            SteerChange(13.000);
                        }
                        else
                        {
                            SteerChange(12.000);
                        }
                        
                    }
                    else
                    {
                        
                        if(!deathmatch)
                        {
                            rally_left10();
                        }
                        
                        if(angle_between <= -15.000)
                        {
                            SteerChange(11.000);
                        }
                        else
                        {
                            SteerChange(10.000);
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
    }
    
    self = self.owner;
    
    if(deathmatch)
    {
        if(angle_between <= -30.000)
        {
            self.veh_body.frame = 4.000;
        }
        else
        {
            if(angle_between <= -15.000)
            {
                self.veh_body.frame = 3.000;
            }
            else
            {
                if(angle_between >= 30.000)
                {
                    self.veh_body.frame = 2.000;
                }
                else
                {
                    if(angle_between >= 15.000)
                    {
                        self.veh_body.frame = 1.000;
                    }
                    else
                    {
                        self.veh_body.frame = 0.000;
                    }
                    
                }
                
            }
            
        }
        
    }
    
    self.old_dir = dir;
    max_steer = VEH_MAX_STEER * (((vel_speed / MAX_SPEED) * 0.500) + 1.000);
    
    if(self.reversing)
    {
        self.angles_y = 0.000 + (angle_between * 0.250);
        angle_between = angle_between * 0.250;
        max_steer = max_steer * 0.250;
    }
    
    
    if((self.classname == "player") && ((self.reverse_release < (time - 0.750)) && ((self.cam != CAM_TEST) || self.reversing)))
    {
        if(angle_between > 0.000)
        {
            
            if((angle_between > max_steer) || self.reversing)
            {
                
                if(angle_between > max_steer)
                {
                    self.angles_y = 0.000 - max_steer;
                }
                
                if(self.angles_y < 0.000)
                {
                    self.angles_y = self.angles_y + 360.000;
                }
                else
                {
                    
                    if(self.angles_y >= 360.000)
                    {
                        self.angles_y = self.angles_y - 360.000;
                    }
                    
                }
                
                
                if((self.flags & FL_ONGROUND) && ((self.last_land > (time - 2.000)) || (mspeed < 200.000)))
                {
                    
                    if((dir == -1.000) && (mspeed > cvar("cl_backspeed")))
                    {
                        mspeed = cvar("cl_backspeed");
                    }
                    
                    plyr_velocity = vectoangles(self.velocity);
                    plyr_velocity_y = self.angles_y;
                    makevectors(plyr_velocity);
                    if(mspeed > 200.000)
                    {
                        plyr_velocity = normalize((((v_forward * dir) * mspeed) * 0.000) + self.velocity);
                        plyr_velocity = plyr_velocity * (mspeed - (((750.000 * ((angle_between - max_steer) / 45.000)) * (mspeed / MAX_SPEED)) * frametime));
                    }
                    else
                    {
                        plyr_velocity = (v_forward * dir) * mspeed;
                    }
                    
                    self.velocity = plyr_velocity;
                }
                
            }
            
        }
        else
        {
            
            if((angle_between < (-1.000 * max_steer)) || self.reversing)
            {
                
                if(angle_between < (-1.000 * max_steer))
                {
                    self.angles_y = 0.000 + max_steer;
                }
                
                if(self.angles_y < 0.000)
                {
                    self.angles_y = self.angles_y + 360.000;
                }
                else
                {
                    
                    if(self.angles_y >= 360.000)
                    {
                        self.angles_y = self.angles_y - 360.000;
                    }
                    
                }
                
                
                if((self.flags & FL_ONGROUND) && ((self.last_land > (time - 2.000)) || (mspeed < 200.000)))
                {
                    
                    if((dir == -1.000) && (mspeed > cvar("cl_backspeed")))
                    {
                        mspeed = cvar("cl_backspeed");
                    }
                    
                    plyr_velocity = vectoangles(self.velocity);
                    plyr_velocity_y = self.angles_y;
                    makevectors(plyr_velocity);
                    if(mspeed > 200.000)
                    {
                        plyr_velocity = normalize((((v_forward * dir) * mspeed) * 0.000) + self.velocity);
                        plyr_velocity = plyr_velocity * (mspeed - (((750.000 * ((max_steer - angle_between) / 45.000)) * (mspeed / MAX_SPEED)) * frametime));
                    }
                    else
                    {
                        plyr_velocity = (v_forward * dir) * mspeed;
                    }
                    
                    self.velocity = plyr_velocity;
                }
                
            }
            
        }
        
    }
    
    self.velocity_z = 0.000;
    steer_angle = self.angles;
    self.angles = plyr_angles;
    
    if(!(self.cam == CAM_TEST))
    {
        self.steer_angles = self.angles;
    }
    
    
    if(self.flags & FL_ONGROUND)
    {
        if(self.reversekey && (!(self.racing_flags & QR_OUT_OF_TIME)))
        {
            plyr_velocity = normalize(self.velocity);
            
            if((vlen(self.velocity) > 100.000) && ((vlen(plyr_velocity + self.veh_dir)) > 1.500))
            {
                self.old_velocity = self.old_velocity - (normalize(self.old_velocity) * (200.000 * frametime));
            }
            
            makevectors(self.veh_body.angles);
            self.velocity = self.old_velocity - (v_forward * (200.000 * frametime));
            
            if((vlen(plyr_velocity + self.veh_dir)) < 0.300)
            {
                
                if(vlen(self.velocity) > 250.000)
                {
                    self.velocity = normalize(self.velocity) * 250.000;
                }
                
            }
            
        }
        else
        {
            
            if(self.reversing)
            {
                plyr_velocity = normalize(self.old_velocity);
                
                if((vlen(plyr_velocity + self.veh_dir)) < 0.500)
                {
                    if(vlen(self.old_velocity) > 80.000)
                    {
                        self.velocity = self.old_velocity + (self.veh_dir * (120.000 * frametime));
                    }
                    else
                    {
                        self.velocity = self.old_velocity + (self.veh_dir * ((vlen(self.old_velocity) + 20.000) * frametime));
                    }
                    
                }
                
            }
            
        }
        
    }
    
    self.old_velocity = self.velocity;
    
    if((self.flags & FL_GODMODE) && (vlen(self.velocity) > (MAX_SPEED / 2.000)))
    {
        self.velocity = normalize(self.velocity) * (MAX_SPEED / 2.000);
    }
    
    self.last_velocity = self.velocity;
};

// DestroyVehicleParts
// function begins at statement 6421, parm_start=5866
// OP_LOAD_ENT	28	547	5866
// OP_NE_E	5866	30	5867
// OP_IFNOT	5867	4	0
// OP_LOAD_ENT	28	547	5868
// OP_STORE_V	5868	4	0
// OP_CALL1	474	0	0
// OP_LOAD_ENT	28	548	5869
// OP_NE_E	5869	30	5870
// OP_IFNOT	5870	4	0
// OP_LOAD_ENT	28	548	5871
// OP_STORE_V	5871	4	0
// OP_CALL1	474	0	0
// OP_LOAD_ENT	28	549	5872
// OP_NE_E	5872	30	5873
// OP_IFNOT	5873	4	0
// OP_LOAD_ENT	28	549	5874
// OP_STORE_V	5874	4	0
// OP_CALL1	474	0	0
// OP_LOAD_ENT	28	550	5875
// OP_NE_E	5875	30	5876
// OP_IFNOT	5876	4	0
// OP_LOAD_ENT	28	550	5877
// OP_STORE_V	5877	4	0
// OP_CALL1	474	0	0
// OP_LOAD_ENT	28	552	5878
// OP_NE_E	5878	30	5879
// OP_IFNOT	5879	4	0
// OP_LOAD_ENT	28	552	5880
// OP_STORE_V	5880	4	0
// OP_CALL1	474	0	0
// OP_LOAD_ENT	28	551	5881
// OP_NE_E	5881	30	5882
// OP_IFNOT	5882	4	0
// OP_LOAD_ENT	28	551	5883
// OP_STORE_V	5883	4	0
// OP_CALL1	474	0	0
// OP_LOAD_ENT	28	553	5884
// OP_NE_E	5884	30	5885
// OP_IFNOT	5885	4	0
// OP_LOAD_ENT	28	553	5886
// OP_STORE_V	5886	4	0
// OP_CALL1	474	0	0
// OP_LOAD_ENT	28	554	5887
// OP_NE_E	5887	30	5888
// OP_IFNOT	5888	4	0
// OP_LOAD_ENT	28	554	5889
// OP_STORE_V	5889	4	0
// OP_CALL1	474	0	0
// OP_DONE	0	0	0
void () DestroyVehicleParts = 
{
    
    if(self.veh_tail != world)
    {
        remove(self.veh_tail);
    }
    
    
    if(self.veh_body != world)
    {
        remove(self.veh_body);
    }
    
    
    if(self.fwhl != world)
    {
        remove(self.fwhl);
    }
    
    
    if(self.rwhl != world)
    {
        remove(self.rwhl);
    }
    
    
    if(self.hl_r != world)
    {
        remove(self.hl_r);
    }
    
    
    if(self.hl_l != world)
    {
        remove(self.hl_l);
    }
    
    
    if(self.hl_m != world)
    {
        remove(self.hl_m);
    }
    
    
    if(self.gun != world)
    {
        remove(self.gun);
    }
    
};

// CheckDriverReady
// function begins at statement 6470, parm_start=5891
// OP_NOT_F	719	0	5892
// OP_IFNOT	5892	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	644	5893
// OP_BITAND	5893	692	5894
// OP_IFNOT	5894	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	644	5895
// OP_LOAD_F	28	644	5896
// OP_BITOR	5896	692	5897
// OP_STOREP_F	5897	5895	0
// OP_EQ_F	725	817	5898
// OP_IFNOT	5898	2	0
// OP_STORE_F	31	725	0
// OP_LOAD_F	28	628	5899
// OP_EQ_F	5899	823	5900
// OP_IFNOT	5900	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	5901	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_GOTO	20	0	0
// OP_LOAD_F	28	628	5902
// OP_EQ_F	5902	825	5903
// OP_IFNOT	5903	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	5904	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_GOTO	10	0	0
// OP_LOAD_F	28	628	5905
// OP_EQ_F	5905	825	5906
// OP_IFNOT	5906	7	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	5907	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	665	5908
// OP_STOREP_F	31	5908	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	880	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	5891	0
// OP_NE_E	5891	30	5909
// OP_IFNOT	5909	19	0
// OP_LOAD_F	5891	644	5910
// OP_BITAND	5910	692	5911
// OP_NOT_F	5911	0	5912
// OP_LOAD_F	5891	644	5913
// OP_BITAND	5913	698	5914
// OP_NOT_F	5914	0	5915
// OP_AND	5912	5915	5916
// OP_LOAD_F	5891	165	5917
// OP_NOT_F	5917	0	5918
// OP_AND	5916	5918	5919
// OP_IFNOT	5919	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	5891	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	880	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	5891	0
// OP_GOTO	-19	0	0
// OP_ADDRESS	720	644	5920
// OP_LOAD_F	720	644	5921
// OP_LOAD_F	720	644	5922
// OP_BITAND	5922	690	5923
// OP_SUB_F	5921	5923	5924
// OP_STOREP_F	5924	5920	0
// OP_ADDRESS	720	640	5925
// OP_STOREP_F	823	5925	0
// OP_DONE	0	0	0
void () CheckDriverReady = 
{
    local entity plyr;
    
    if(!hold_flag)
    {
        return;
    }
    
    
    if(self.racing_flags & QR_START_READY)
    {
        return;
    }
    
    self.racing_flags = self.racing_flags | QR_START_READY;
    
    if(first_engine_start == 0.000)
    {
        first_engine_start = time;
    }
    
    if(self.car_index == 3.000)
    {
        sound(self, CHAN_AUTO, "rally/ray/engstart.wav", 1.000, ATTN_STATIC);
    }
    else
    {
        if(self.car_index == 4.000)
        {
            sound(self, CHAN_AUTO, "rally/start2.wav", 1.000, ATTN_STATIC);
        }
        else
        {
            
            if(self.car_index == 4.000)
            {
                sound(self, CHAN_AUTO, "rally/start.wav", 1.000, ATTN_STATIC);
            }
            
        }
        
    }
    
    self.ignition_time = time;
    plyr = find(world, classname, "player");
    
    while(plyr != world)
    {
        
        if(((!(plyr.racing_flags & QR_START_READY)) && (!(plyr.racing_flags & QR_OBSERVER))) && !plyr.deadflag)
        {
            return;
        }
        
        plyr = find(plyr, classname, "player");
    }
    
    starter.racing_flags = starter.racing_flags - (starter.racing_flags & QR_NOT_RACING);
    starter.last_lap = 3.000;
};

// NullModel
// function begins at statement 6549, parm_start=5927
// OP_STORE_V	28	4	0
// OP_STORE_V	4128	7	0
// OP_CALL2	463	0	0
// OP_DONE	0	0	0
void () NullModel = 
{
    setmodel(self, "");
};

void () BuildPlayerList;
// PreRaceMsg
// function begins at statement 6553, parm_start=5929
// OP_LOAD_F	28	644	5932
// OP_BITAND	5932	690	5933
// OP_IFNOT	5933	75	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	880	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	5929	0
// OP_NE_E	5929	30	5934
// OP_IFNOT	5934	64	0
// OP_LOAD_F	5929	644	5935
// OP_BITAND	5935	692	5936
// OP_NOT_F	5936	0	5937
// OP_LOAD_F	5929	644	5938
// OP_BITAND	5938	698	5939
// OP_NOT_F	5939	0	5940
// OP_AND	5937	5940	5941
// OP_IFNOT	5941	47	0
// OP_IFNOT	725	20	0
// OP_SUB_F	31	2522	5942
// OP_LT	725	5942	5943
// OP_IFNOT	5943	6	0
// OP_STORE_V	5929	4	0
// OP_STORE_V	5944	7	0
// OP_CALL2	483	0	0
// OP_CALL0	539	0	0
// OP_GOTO	11	0	0
// OP_SUB_F	31	1112	5945
// OP_LT	725	5945	5946
// OP_IFNOT	5946	5	0
// OP_STORE_V	5929	4	0
// OP_STORE_V	5947	7	0
// OP_CALL2	520	0	0
// OP_GOTO	4	0	0
// OP_STORE_V	5929	4	0
// OP_STORE_V	5948	7	0
// OP_CALL2	520	0	0
// OP_GOTO	26	0	0
// OP_IFNOT	689	22	0
// OP_LOAD_S	30	130	5949
// OP_EQ_S	5949	5950	5951
// OP_IFNOT	5951	5	0
// OP_STORE_V	5929	4	0
// OP_STORE_V	5952	7	0
// OP_CALL2	520	0	0
// OP_GOTO	14	0	0
// OP_LOAD_S	30	130	5953
// OP_EQ_S	5953	1946	5954
// OP_IFNOT	5954	5	0
// OP_STORE_V	5929	4	0
// OP_STORE_V	5955	7	0
// OP_CALL2	520	0	0
// OP_GOTO	7	0	0
// OP_LOAD_S	30	130	5956
// OP_EQ_S	5956	5957	5958
// OP_IFNOT	5958	4	0
// OP_STORE_V	5929	4	0
// OP_STORE_V	5959	7	0
// OP_CALL2	520	0	0
// OP_GOTO	4	0	0
// OP_STORE_V	5929	4	0
// OP_STORE_V	5948	7	0
// OP_CALL2	520	0	0
// OP_GOTO	4	0	0
// OP_STORE_V	5929	4	0
// OP_STORE_V	5960	7	0
// OP_CALL2	520	0	0
// OP_STORE_V	5929	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	880	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	5929	0
// OP_GOTO	-64	0	0
// OP_ADDRESS	28	150	5961
// OP_ADD_F	31	819	5962
// OP_STOREP_F	5962	5961	0
// OP_GOTO	111	0	0
// OP_LOAD_F	28	640	5963
// OP_EQ_F	5963	817	5964
// OP_IFNOT	5964	60	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	880	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	5929	0
// OP_NE_E	5929	30	5965
// OP_IFNOT	5965	35	0
// OP_STORE_V	5929	4	0
// OP_STORE_V	5966	7	0
// OP_CALL2	520	0	0
// OP_STORE_V	5929	4	0
// OP_STORE_V	337	7	0
// OP_STORE_V	5967	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	5929	4	0
// OP_STORE_V	5968	7	0
// OP_CALL2	876	0	0
// OP_ADDRESS	5929	641	5969
// OP_STOREP_F	31	5969	0
// OP_ADDRESS	5929	677	5970
// OP_STOREP_F	794	5970	0
// OP_STORE_V	4339	4	0
// OP_CALL1	501	0	0
// OP_GE	1	823	5971
// OP_IFNOT	5971	7	0
// OP_ADDRESS	5929	677	5972
// OP_LOAD_F	5929	677	5973
// OP_MUL_F	5973	5974	5975
// OP_STORE_V	5975	4	0
// OP_CALL1	495	0	0
// OP_STOREP_F	1	5972	0
// OP_ADDRESS	5929	113	5976
// OP_STOREP_V	926	5976	0
// OP_STORE_V	5929	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	880	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	5929	0
// OP_GOTO	-35	0	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	5979	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	5930	0
// OP_NE_E	1	30	5980
// OP_IFNOT	5980	8	0
// OP_ADDRESS	5930	132	5981
// OP_STOREP_F	821	5981	0
// OP_ADDRESS	5930	148	5982
// OP_STOREP_FNC	5926	5982	0
// OP_ADDRESS	5930	150	5983
// OP_ADD_F	31	823	5984
// OP_STOREP_F	5984	5983	0
// OP_STORE_F	31	727	0
// OP_CALL0	5927	0	0
// OP_STORE_F	817	719	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	640	5985
// OP_STORE_V	5985	4	0
// OP_CALL1	485	0	0
// OP_STORE_S	1	5931	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	880	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	5929	0
// OP_NE_E	5929	30	5986
// OP_IFNOT	5986	13	0
// OP_STORE_V	5929	4	0
// OP_STORE_V	5931	7	0
// OP_CALL2	520	0	0
// OP_STORE_V	5929	4	0
// OP_STORE_V	4910	7	0
// OP_CALL2	876	0	0
// OP_STORE_V	5929	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	880	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	5929	0
// OP_GOTO	-13	0	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	5979	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	5930	0
// OP_NE_E	1	30	5987
// OP_IFNOT	5987	12	0
// OP_LOAD_F	28	640	5988
// OP_EQ_F	5988	821	5989
// OP_IFNOT	5989	4	0
// OP_ADDRESS	5930	132	5990
// OP_STOREP_F	817	5990	0
// OP_GOTO	6	0	0
// OP_LOAD_F	28	640	5991
// OP_EQ_F	5991	819	5992
// OP_IFNOT	5992	3	0
// OP_ADDRESS	5930	132	5993
// OP_STOREP_F	819	5993	0
// OP_ADDRESS	28	150	5994
// OP_ADD_F	31	819	5995
// OP_STOREP_F	5995	5994	0
// OP_ADDRESS	28	640	5996
// OP_LOAD_F	28	640	5997
// OP_SUB_F	5997	819	5998
// OP_STOREP_F	5998	5996	0
// OP_DONE	0	0	0
void () PreRaceMsg = 
{
    local entity plyr;
    local entity startent;
    local string secs;
    if(self.racing_flags & QR_NOT_RACING)
    {
        plyr = find(world, classname, "player");
        
        while(plyr != world)
        {
            if((!(plyr.racing_flags & QR_START_READY)) && (!(plyr.racing_flags & QR_OBSERVER)))
            {
                if(first_engine_start)
                {
                    if(first_engine_start < (time - 30.000))
                    {
                        sprint(plyr, "Automatic engine start\n");
                        W_Attack();
                    }
                    else
                    {
                        if(first_engine_start < (time - 20.000))
                        {
                            centerprint(plyr, "You now have less than 10 seconds\nto start your engine!");
                        }
                        else
                        {
                            centerprint(plyr, "Press FIRE when all players\nare ready!\n");
                        }
                        
                    }
                    
                }
                else
                {
                    if(challenge)
                    {
                        if(world.model == "maps/qrally01.bsp")
                        {
                            centerprint(plyr, "Stage One: Time Trial stage\n\nFinish the race before your\ncar explodes. Flags give an\nextra 6 seconds when touched,\nin sequence.\n\nPress FIRE when ready!\n");
                        }
                        else
                        {
                            if(world.model == "maps/qrally02.bsp")
                            {
                                centerprint(plyr, "Stage Two: Time Trial stage\n\nYou have advanced to the\nsecond round.\nSame deal, try and stay alive.\n\nPress FIRE when ready!\n");
                            }
                            else
                            {
                                
                                if(world.model == "maps/qrally03.bsp")
                                {
                                    centerprint(plyr, "Stage Three: Time Trial stage\n\nFinal elimination, time is short, watch\nout for dangerous obstructions.\n\nPress FIRE when ready!\n");
                                }
                                
                            }
                            
                        }
                        
                    }
                    else
                    {
                        centerprint(plyr, "Press FIRE when all players\nare ready!\n");
                    }
                    
                }
                
            }
            else
            {
                centerprint(plyr, "Waiting for other drivers\n");
            }
            
            plyr = find(plyr, classname, "player");
        }
        
        self.nextthink = time + 1.000;
    }
    else
    {
        
        if(self.last_lap == 0.000)
        {
            plyr = find(world, classname, "player");
            
            while(plyr != world)
            {
                centerprint(plyr, "GO!");
                sound(plyr, CHAN_ITEM, "rally/voice/gotst01.wav", 1.000, ATTN_STATIC);
                commentary(plyr, "voice/gotst01.wav");
                plyr.last_lap_time = time;
                plyr.time_remaining = TIMETRIAL_STARTTIME;
                
                if(cvar("skill") >= 3.000)
                {
                    plyr.time_remaining = floor(plyr.time_remaining * 0.650);
                }
                
                plyr.velocity = '0.000 0.000 0.000';
                plyr = find(plyr, classname, "player");
            }
            
            startent = find(world, classname, "rally_starter");
            
            if(find(world, classname, "rally_starter") != world)
            {
                startent.skin = 2.000;
                startent.think = NullModel;
                startent.nextthink = time + 3.000;
            }
            
            race_start_time = time;
            BuildPlayerList();
            hold_flag = 0.000;
            return;
        }
        
        secs = ftos(self.last_lap);
        plyr = find(world, classname, "player");
        
        while(plyr != world)
        {
            centerprint(plyr, secs);
            commentary(plyr, "voice/tone05.wav");
            plyr = find(plyr, classname, "player");
        }
        
        startent = find(world, classname, "rally_starter");
        
        if(find(world, classname, "rally_starter") != world)
        {
            if(self.last_lap == 2.000)
            {
                startent.skin = 0.000;
            }
            else
            {
                
                if(self.last_lap == 1.000)
                {
                    startent.skin = 1.000;
                }
                
            }
            
        }
        
        self.nextthink = time + 1.000;
        self.last_lap = self.last_lap - 1.000;
    }
    
};

// CheckFirstStartFinish
// function begins at statement 6741, parm_start=6000
// OP_IFNOT	724	20	0
// OP_LT	738	823	6000
// OP_IFNOT	6000	13	0
// OP_STORE_F	819	719	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	720	0
// OP_ADDRESS	720	129	6001
// OP_STOREP_S	6002	6001	0
// OP_ADDRESS	720	644	6003
// OP_STOREP_F	690	6003	0
// OP_ADDRESS	720	150	6004
// OP_ADD_F	31	1182	6005
// OP_STOREP_F	6005	6004	0
// OP_ADDRESS	720	148	6006
// OP_STOREP_FNC	5928	6006	0
// OP_BITAND	723	696	6007
// OP_SUB_F	723	6007	6008
// OP_STORE_F	6008	723	0
// OP_STORE_F	6009	722	0
// OP_STORE_F	817	724	0
// OP_DONE	0	0	0
void () CheckFirstStartFinish = 
{
    
    if(first_startfinish_flag)
    {
        
        if(rally_type_index < 3.000)
        {
            hold_flag = 1.000;
            starter = spawn();
            starter.classname = "race_starter";
            starter.racing_flags = QR_NOT_RACING;
            starter.nextthink = time + 0.500;
            starter.think = PreRaceMsg;
        }
        
        global_racing_flags = global_racing_flags - (global_racing_flags & QR_NO_STARTFINISH);
        all_fastest_lap = 9999999.000;
        first_startfinish_flag = 0.000;
    }
    
};

// finish_think
// function begins at statement 6762, parm_start=6011
// OP_ADDRESS	28	131	6011
// OP_LOAD_F	28	131	6012
// OP_ADD_F	6012	819	6013
// OP_STOREP_F	6013	6011	0
// OP_LOAD_F	28	131	6014
// OP_GT	6014	831	6015
// OP_IFNOT	6015	3	0
// OP_ADDRESS	28	131	6016
// OP_STOREP_F	817	6016	0
// OP_ADDRESS	28	150	6017
// OP_ADD_F	31	1988	6018
// OP_STOREP_F	6018	6017	0
// OP_DONE	0	0	0
void () finish_think = 
{
    self.frame = self.frame + 1.000;
    
    if(self.frame > 11.000)
    {
        self.frame = 0.000;
    }
    
    self.nextthink = time + 0.050;
};

// spawn_finish_model
// function begins at statement 6775, parm_start=6020
// OP_GT	738	821	6022
// OP_IFNOT	6022	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	6023	10	0
// OP_CALL3	477	0	0
// OP_NE_E	1	30	6024
// OP_IFNOT	6024	2	0
// OP_RETURN	0	0	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	6020	0
// OP_ADDRESS	6020	129	6025
// OP_STOREP_S	6023	6025	0
// OP_ADDRESS	6020	166	6026
// OP_STOREP_V	6029	6026	0
// OP_STORE_V	6020	4	0
// OP_STORE_V	754	7	0
// OP_STORE_V	757	10	0
// OP_CALL3	464	0	0
// OP_STORE_V	6020	4	0
// OP_STORE_V	6032	7	0
// OP_CALL2	463	0	0
// OP_LOAD_V	28	117	6033
// OP_STORE_V	6033	4	0
// OP_CALL1	461	0	0
// OP_STORE_V	6020	4	0
// OP_LOAD_V	28	105	6036
// OP_STORE_V	6036	7	0
// OP_CALL2	462	0	0
// OP_LOAD_V	6020	105	6039
// OP_STORE_V	6039	4	0
// OP_LOAD_V	6020	105	6042
// OP_SUB_V	6042	2284	6045
// OP_STORE_V	6045	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	6020	13	0
// OP_CALL4	475	0	0
// OP_STORE_V	6020	4	0
// OP_STORE_V	71	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	6020	119	6048
// OP_LOAD_F	28	119	6049
// OP_STOREP_F	6049	6048	0
// OP_ADDRESS	6020	148	6050
// OP_STOREP_FNC	6010	6050	0
// OP_ADDRESS	6020	150	6051
// OP_ADD_F	31	2869	6052
// OP_STOREP_F	6052	6051	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_DONE	0	0	0
void () spawn_finish_model = 
{
    local entity flag;
    local entity oself;
    
    if(rally_type_index > 2.000)
    {
        return;
    }
    
    
    if(find(world, classname, "rally_flag") != world)
    {
        return;
    }
    
    flag = spawn();
    flag.classname = "rally_flag";
    flag.view_ofs = '0.000 0.000 7.000';
    setsize(flag, VEH_MIN, VEH_MAX);
    setmodel(flag, "models/finish.mdl");
    makevectors(self.angles);
    setorigin(flag, self.origin);
    traceline(flag.origin, flag.origin - '0.000 0.000 64.000', TRUE, flag);
    setorigin(flag, trace_endpos);
    flag.angles_y = self.angles_y;
    flag.think = finish_think;
    flag.nextthink = time + 0.100;
    remove(self);
};

void () StartRallyItem;
void () startfinish_touch;
// rally_startfinish
// function begins at statement 6827, parm_start=6056
// OP_STORE_F	724	6062	0
// OP_CALL0	5999	0	0
// OP_LOAD_F	28	378	6064
// OP_EQ_F	6064	817	6065
// OP_IFNOT	6065	3	0
// OP_ADDRESS	28	378	6066
// OP_STOREP_F	6067	6066	0
// OP_LOAD_F	28	378	6071
// OP_MUL_VF	6068	6071	6072
// OP_STORE_V	6072	6056	0
// OP_STORE_F	6075	6058	0
// OP_LOAD_F	28	378	6079
// OP_MUL_VF	6076	6079	6080
// OP_STORE_V	6080	6059	0
// OP_STORE_F	2670	6061	0
// OP_STORE_V	28	4	0
// OP_STORE_V	6056	7	0
// OP_STORE_V	6059	10	0
// OP_CALL3	464	0	0
// OP_IFNOT	6062	14	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	6063	0
// OP_ADDRESS	6063	105	6083
// OP_LOAD_V	28	105	6086
// OP_STOREP_V	6086	6083	0
// OP_ADDRESS	6063	117	6089
// OP_LOAD_V	28	117	6092
// OP_STOREP_V	6092	6089	0
// OP_ADDRESS	6063	150	6095
// OP_ADD_F	31	1182	6096
// OP_STOREP_F	6096	6095	0
// OP_ADDRESS	6063	148	6097
// OP_STOREP_FNC	6019	6097	0
// OP_STORE_V	4339	4	0
// OP_CALL1	501	0	0
// OP_LE	1	819	6098
// OP_STORE_V	949	4	0
// OP_CALL1	501	0	0
// OP_NOT_F	1	0	6099
// OP_AND	6098	6099	6100
// OP_IFNOT	6100	8	0
// OP_ADDRESS	28	159	6101
// OP_LOAD_F	28	159	6102
// OP_MUL_F	6102	3083	6103
// OP_STORE_V	6103	4	0
// OP_CALL1	495	0	0
// OP_STOREP_F	1	6101	0
// OP_GOTO	9	0	0
// OP_STORE_V	949	4	0
// OP_CALL1	501	0	0
// OP_IFNOT	1	6	0
// OP_ADDRESS	28	159	6104
// OP_STORE_V	4339	4	0
// OP_CALL1	501	0	0
// OP_MUL_F	1	821	6105
// OP_STOREP_F	6105	6104	0
// OP_ADDRESS	28	146	6106
// OP_STOREP_FNC	6054	6106	0
// OP_CALL0	6053	0	0
// OP_DONE	0	0	0
void () rally_startfinish = 
{
    local vector min;
    local vector max;
    local float first;
    local entity place_flag;
    first = first_startfinish_flag;
    CheckFirstStartFinish();
    
    if(self.speed == 0.000)
    {
        self.speed = 128.000;
    }
    
    min = '-1.000 -1.000 0.000' * self.speed;
    min_z = -24.000;
    max = '1.000 1.000 0.000' * self.speed;
    max_z = 16.000;
    setsize(self, min, max);
    
    if(first)
    {
        place_flag = spawn();
        place_flag.origin = self.origin;
        place_flag.angles = self.angles;
        place_flag.nextthink = time + 0.500;
        place_flag.think = spawn_finish_model;
    }
    
    if((cvar("skill") <= 1.000) && !cvar("deathmatch"))
    {
        self.ammo_nails = floor(self.ammo_nails * 0.750);
    }
    else
    {
        
        if(cvar("deathmatch"))
        {
            self.ammo_nails = cvar("skill") * 2.000;
        }
        
    }
    
    self.touch = startfinish_touch;
    StartRallyItem();
};

// rally_startfinish_brush
// function begins at statement 6887, parm_start=6108
// OP_CALL0	5999	0	0
// OP_ADDRESS	28	146	6108
// OP_STOREP_FNC	6054	6108	0
// OP_ADDRESS	28	104	6109
// OP_STOREP_F	244	6109	0
// OP_STORE_V	28	4	0
// OP_LOAD_S	28	130	6110
// OP_STORE_V	6110	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	103	6111
// OP_STOREP_F	233	6111	0
// OP_ADDRESS	28	93	6112
// OP_STOREP_F	817	6112	0
// OP_ADDRESS	28	130	6113
// OP_STOREP_S	4128	6113	0
// OP_STORE_V	4339	4	0
// OP_CALL1	501	0	0
// OP_LE	1	819	6114
// OP_STORE_V	949	4	0
// OP_CALL1	501	0	0
// OP_NOT_F	1	0	6115
// OP_AND	6114	6115	6116
// OP_IFNOT	6116	8	0
// OP_ADDRESS	28	159	6117
// OP_LOAD_F	28	159	6118
// OP_MUL_F	6118	3083	6119
// OP_STORE_V	6119	4	0
// OP_CALL1	495	0	0
// OP_STOREP_F	1	6117	0
// OP_GOTO	9	0	0
// OP_STORE_V	949	4	0
// OP_CALL1	501	0	0
// OP_IFNOT	1	6	0
// OP_ADDRESS	28	159	6120
// OP_STORE_V	4339	4	0
// OP_CALL1	501	0	0
// OP_MUL_F	1	821	6121
// OP_STOREP_F	6121	6120	0
// OP_ADDRESS	28	129	6122
// OP_STOREP_S	4224	6122	0
// OP_DONE	0	0	0
void () rally_startfinish_brush = 
{
    CheckFirstStartFinish();
    self.touch = startfinish_touch;
    self.solid = SOLID_TRIGGER;
    setmodel(self, self.model);
    self.movetype = MOVETYPE_NONE;
    self.modelindex = 0.000;
    self.model = "";
    if((cvar("skill") <= 1.000) && !cvar("deathmatch"))
    {
        self.ammo_nails = floor(self.ammo_nails * 0.750);
    }
    else
    {
        
        if(cvar("deathmatch"))
        {
            self.ammo_nails = cvar("skill") * 2.000;
        }
        
    }
    
    self.classname = "rally_startfinish";
};

// rally_startfinish_flag
// function begins at statement 6928, parm_start=6124
// OP_STORE_V	28	4	0
// OP_STORE_V	6124	7	0
// OP_STORE_V	6127	10	0
// OP_CALL3	464	0	0
// OP_CALL0	492	0	0
// OP_CALL0	6019	0	0
// OP_DONE	0	0	0
void () rally_startfinish_flag = 
{
    setsize(self, '-4.000 -4.000 0.000', '4.000 4.000 16.000');
    droptofloor();
    spawn_finish_model();
};

string nextmap;
void () execute_changelevel;
// StartNextRace
// function begins at statement 6935, parm_start=6133
// OP_CALL0	6131	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_DONE	0	0	0
void () StartNextRace = 
{
    execute_changelevel();
    remove(self);
};

// GetDriverAtPos
// function begins at statement 6939, parm_start=6134
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	880	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	6135	0
// OP_DONE	0	0	0
void (float pos) GetDriverAtPos = 
{
    local entity plyr;
    plyr = find(world, classname, "player");
};

// ShowRaceResults
// function begins at statement 6945, parm_start=6137
// OP_LT	728	31	6140
// OP_IFNOT	6140	7	0
// OP_ADDRESS	28	148	6141
// OP_STOREP_FNC	6132	6141	0
// OP_ADDRESS	28	150	6142
// OP_ADD_F	31	819	6143
// OP_STOREP_F	6143	6142	0
// OP_RETURN	0	0	0
// OP_DONE	0	0	0
void () ShowRaceResults = 
{
    local entity plyr;
    local entity trav;
    local float pos;
    
    if(race_finish_time < time)
    {
        self.think = StartNextRace;
        self.nextthink = time + 1.000;
        return;
    }
    
};

// RaceOverMsg
// function begins at statement 6954, parm_start=6145
// OP_GT	728	31	6146
// OP_IFNOT	6146	5	0
// OP_ADDRESS	28	150	6147
// OP_ADD_F	31	819	6148
// OP_STOREP_F	6148	6147	0
// OP_RETURN	0	0	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	880	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	6145	0
// OP_NE_E	6145	30	6149
// OP_IFNOT	6149	10	0
// OP_STORE_V	6145	4	0
// OP_STORE_V	6150	7	0
// OP_CALL2	520	0	0
// OP_STORE_V	6145	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	880	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	6145	0
// OP_GOTO	-10	0	0
// OP_ADDRESS	28	150	6151
// OP_ADD_F	31	823	6152
// OP_STOREP_F	6152	6151	0
// OP_ADDRESS	28	148	6153
// OP_STOREP_FNC	6132	6153	0
// OP_DONE	0	0	0
void () RaceOverMsg = 
{
    local entity plyr;
    
    if(race_finish_time > time)
    {
        self.nextthink = time + 1.000;
        return;
    }
    
    plyr = find(world, classname, "player");
    
    while(plyr != world)
    {
        centerprint(plyr, "Race Over!");
        plyr = find(plyr, classname, "player");
    }
    
    self.nextthink = time + 3.000;
    self.think = StartNextRace;
};

// CheckLaps
// function begins at statement 6982, parm_start=6155
// OP_LOAD_F	29	640	6158
// OP_LOAD_F	28	159	6159
// OP_EQ_F	6158	6159	6160
// OP_IFNOT	6160	114	0
// OP_BITAND	723	695	6161
// OP_NOT_F	6161	0	6162
// OP_IFNOT	6162	42	0
// OP_BITOR	723	695	6163
// OP_STORE_F	6163	723	0
// OP_NOT_F	689	0	6164
// OP_IFNOT	6164	19	0
// OP_LOAD_S	29	180	6165
// OP_STORE_V	6165	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	6166	4	0
// OP_CALL1	482	0	0
// OP_LOAD_S	29	129	6167
// OP_EQ_S	6167	880	6168
// OP_IFNOT	6168	10	0
// OP_STORE_V	29	4	0
// OP_STORE_V	337	7	0
// OP_STORE_V	6169	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6170	7	0
// OP_CALL2	520	0	0
// OP_GOTO	4	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6171	7	0
// OP_CALL2	520	0	0
// OP_NOT_F	689	0	6172
// OP_IFNOT	6172	4	0
// OP_ADD_F	31	1112	6173
// OP_STORE_F	6173	728	0
// OP_GOTO	3	0	0
// OP_ADD_F	31	821	6174
// OP_STORE_F	6174	728	0
// OP_BITOR	723	691	6175
// OP_STORE_F	6175	723	0
// OP_STORE_V	721	4	0
// OP_CALL1	474	0	0
// OP_ADDRESS	720	150	6176
// OP_ADD_F	31	821	6177
// OP_STOREP_F	6177	6176	0
// OP_ADDRESS	720	148	6178
// OP_STOREP_FNC	6144	6178	0
// OP_ADD_F	736	819	6179
// OP_STORE_F	6179	736	0
// OP_LE	736	823	6180
// OP_NOT_F	689	0	6181
// OP_AND	6180	6181	6182
// OP_IFNOT	6182	20	0
// OP_LOAD_ENT	29	554	6183
// OP_EQ_E	6183	30	6184
// OP_IFNOT	6184	9	0
// OP_ADDRESS	29	554	6185
// OP_STORE_V	926	4	0
// OP_STORE_V	926	7	0
// OP_CALL2	890	0	0
// OP_STOREP_ENT	1	6185	0
// OP_LOAD_ENT	29	554	6186
// OP_ADDRESS	6186	129	6187
// OP_STOREP_S	6188	6187	0
// OP_LOAD_ENT	29	554	6189
// OP_STORE_V	6189	4	0
// OP_STORE_V	6190	7	0
// OP_CALL2	463	0	0
// OP_LOAD_ENT	29	554	6191
// OP_ADDRESS	6191	132	6192
// OP_SUB_F	736	819	6193
// OP_STOREP_F	6193	6192	0
// OP_ADDRESS	29	644	6194
// OP_LOAD_F	29	644	6195
// OP_BITOR	6195	691	6196
// OP_STOREP_F	6196	6194	0
// OP_ADDRESS	29	643	6197
// OP_SUB_F	31	727	6198
// OP_STOREP_F	6198	6197	0
// OP_LOAD_S	29	129	6199
// OP_EQ_S	6199	880	6200
// OP_IFNOT	6200	34	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6201	7	0
// OP_CALL2	483	0	0
// OP_LOAD_F	29	643	6202
// OP_DIV_F	6202	2228	6203
// OP_STORE_V	6203	4	0
// OP_CALL1	495	0	0
// OP_STORE_V	1	4	0
// OP_CALL1	485	0	0
// OP_STORE_S	1	6156	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6156	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	3958	7	0
// OP_CALL2	483	0	0
// OP_LOAD_F	29	643	6204
// OP_LOAD_F	29	643	6205
// OP_DIV_F	6205	2228	6206
// OP_STORE_V	6206	4	0
// OP_CALL1	495	0	0
// OP_MUL_F	1	2228	6207
// OP_SUB_F	6204	6207	6208
// OP_STORE_F	6208	6157	0
// OP_STORE_V	6157	4	0
// OP_CALL1	485	0	0
// OP_STORE_S	1	6156	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6156	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6209	7	0
// OP_CALL2	483	0	0
// OP_GOTO	15	0	0
// OP_LOAD_F	29	640	6210
// OP_LOAD_F	28	159	6211
// OP_SUB_F	6211	819	6212
// OP_EQ_F	6210	6212	6213
// OP_IFNOT	6213	10	0
// OP_LOAD_S	29	129	6214
// OP_EQ_S	6214	880	6215
// OP_IFNOT	6215	7	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6216	7	0
// OP_CALL2	876	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6217	7	0
// OP_CALL2	520	0	0
// OP_DONE	0	0	0
void () CheckLaps = 
{
    local entity plyr;
    local string stemp;
    local float ftemp;
    if(other.last_lap == self.ammo_nails)
    {
        
        if(!(global_racing_flags & QR_SOMEONE_FINISHED))
        {
            global_racing_flags = global_racing_flags | QR_SOMEONE_FINISHED;
            if(!challenge)
            {
                bprint(other.netname);
                bprint(" has WON the race!\n");
                
                if(other.classname == "player")
                {
                    sound(other, CHAN_ITEM, "rally/voice/win3.wav", 1.000, ATTN_NORM);
                    centerprint(other, "You have WON the race!");
                }
                
            }
            else
            {
                centerprint(other, "You have passed the stage!\n");
            }
            
            if(!challenge)
            {
                race_finish_time = time + 20.000;
            }
            else
            {
                race_finish_time = time + 2.000;
            }
            
            global_racing_flags = global_racing_flags | QR_FINISHED_RACE;
            remove(positioner);
            starter.nextthink = time + 2.000;
            starter.think = RaceOverMsg;
        }
        
        num_finished = num_finished + 1.000;
        
        if((num_finished <= 3.000) && !challenge)
        {
            
            if(other.gun == world)
            {
                other.gun = SpawnPart('0.000 0.000 0.000', '0.000 0.000 0.000');
                other.gun.classname = "veh_gun";
            }
            
            setmodel(other.gun, "models/trophy.mdl");
            other.gun.skin = num_finished - 1.000;
        }
        
        other.racing_flags = other.racing_flags | QR_FINISHED_RACE;
        other.race_time = time - race_start_time;
        
        if(other.classname == "player")
        {
            sprint(other, "Your total race time was: ");
            stemp = ftos(floor(other.race_time / 60.000));
            sprint(other, stemp);
            sprint(other, "m");
            ftemp = other.race_time - ((floor(other.race_time / 60.000)) * 60.000);
            stemp = ftos(ftemp);
            sprint(other, stemp);
            sprint(other, "s\n");
        }
        
    }
    else
    {
        
        if(other.last_lap == (self.ammo_nails - 1.000))
        {
            
            if(other.classname == "player")
            {
                commentary(other, "voice/finallap.wav");
                centerprint(other, "Final Lap!");
            }
            
        }
        
    }
    
};

// CheckFastestLap
// function begins at statement 7114, parm_start=6219
// OP_LOAD_F	29	641	6220
// OP_SUB_F	31	6220	6221
// OP_STORE_V	6221	4	0
// OP_CALL1	485	0	0
// OP_STORE_S	1	6219	0
// OP_LOAD_S	29	129	6222
// OP_EQ_S	6222	880	6223
// OP_IFNOT	6223	13	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6224	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6219	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	888	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6225	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	337	7	0
// OP_STORE_V	6226	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_LOAD_F	29	641	6227
// OP_SUB_F	31	6227	6228
// OP_LOAD_F	29	642	6229
// OP_LT	6228	6229	6230
// OP_IFNOT	6230	33	0
// OP_ADDRESS	29	642	6231
// OP_LOAD_F	29	641	6232
// OP_SUB_F	31	6232	6233
// OP_STOREP_F	6233	6231	0
// OP_LOAD_S	29	129	6234
// OP_EQ_S	6234	880	6235
// OP_IFNOT	6235	4	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6236	7	0
// OP_CALL2	520	0	0
// OP_LOAD_F	29	642	6237
// OP_LT	6237	722	6238
// OP_IFNOT	6238	20	0
// OP_LOAD_F	29	642	6239
// OP_STORE_F	6239	722	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6240	7	0
// OP_CALL2	876	0	0
// OP_STORE_V	6241	4	0
// OP_CALL1	482	0	0
// OP_LOAD_S	29	180	6242
// OP_STORE_V	6242	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	6243	4	0
// OP_CALL1	482	0	0
// OP_LOAD_F	29	642	6244
// OP_STORE_V	6244	4	0
// OP_CALL1	485	0	0
// OP_STORE_V	1	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	888	4	0
// OP_CALL1	482	0	0
// OP_DONE	0	0	0
void () CheckFastestLap = 
{
    local string lap_time_str;
    lap_time_str = ftos(time - other.last_lap_time);
    
    if(other.classname == "player")
    {
        sprint(other, "Lap time: ");
        sprint(other, lap_time_str);
        sprint(other, "\n");
        stuffcmd(other, "bf\n");
    }
    
    sound(other, CHAN_ITEM, "rally/lapcom.wav", 1.000, ATTN_STATIC);
    
    if((time - other.last_lap_time) < other.fastest_lap)
    {
        other.fastest_lap = time - other.last_lap_time;
        
        if(other.classname == "player")
        {
            centerprint(other, "Personal Fastest Lap!\n");
        }
        
        
        if(other.fastest_lap < all_fastest_lap)
        {
            all_fastest_lap = other.fastest_lap;
            commentary(other, "voice/fastest.wav");
            bprint("New Lap Record by ");
            bprint(other.netname);
            bprint(": ");
            bprint(ftos(other.fastest_lap));
            bprint("\n");
        }
        
    }
    
};

// startfinish_touch
// function begins at statement 7178, parm_start=6245
// OP_LOAD_S	29	129	6246
// OP_EQ_S	6246	880	6247
// OP_LOAD_S	29	129	6248
// OP_EQ_S	6248	1187	6249
// OP_OR	6247	6249	6250
// OP_NOT_F	6250	0	6251
// OP_IFNOT	6251	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	644	6252
// OP_BITAND	6252	690	6253
// OP_IFNOT	6253	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	644	6254
// OP_BITAND	6254	691	6255
// OP_IFNOT	6255	2	0
// OP_RETURN	0	0	0
// OP_GT	738	821	6256
// OP_IFNOT	6256	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	637	6257
// OP_LOAD_F	28	158	6258
// OP_NE_F	6257	6258	6259
// OP_IFNOT	6259	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	29	637	6260
// OP_STOREP_F	817	6260	0
// OP_CALL0	6218	0	0
// OP_ADDRESS	29	641	6261
// OP_STOREP_F	31	6261	0
// OP_EQ_F	738	823	6262
// OP_IFNOT	6262	6	0
// OP_ADDRESS	29	153	6263
// OP_LOAD_F	29	153	6264
// OP_ADD_F	6264	814	6265
// OP_STOREP_F	6265	6263	0
// OP_GOTO	24	0	0
// OP_ADDRESS	29	640	6266
// OP_LOAD_F	29	640	6267
// OP_ADD_F	6267	819	6268
// OP_STOREP_F	6268	6266	0
// OP_CALL0	6154	0	0
// OP_BITAND	723	691	6269
// OP_NOT_F	6269	0	6270
// OP_IFNOT	6270	16	0
// OP_LOAD_F	28	159	6271
// OP_LOAD_F	29	640	6272
// OP_SUB_F	6271	6272	6273
// OP_STORE_V	6273	4	0
// OP_CALL1	485	0	0
// OP_STORE_S	1	6245	0
// OP_LOAD_S	29	129	6274
// OP_EQ_S	6274	880	6275
// OP_IFNOT	6275	7	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6245	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6276	7	0
// OP_CALL2	483	0	0
// OP_ADDRESS	28	104	6277
// OP_STOREP_F	244	6277	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	6278
// OP_STORE_V	6278	7	0
// OP_CALL2	462	0	0
// OP_DONE	0	0	0
void () startfinish_touch = 
{
    local string laps_left;
    
    if(!((other.classname == "player") || (other.classname == "rally_bot")))
    {
        return;
    }
    
    
    if(other.racing_flags & QR_NOT_RACING)
    {
        return;
    }
    
    
    if(other.racing_flags & QR_FINISHED_RACE)
    {
        return;
    }
    
    
    if(rally_type_index > 2.000)
    {
        return;
    }
    
    
    if(other.last_marker_num != self.ammo_shells)
    {
        return;
    }
    
    other.last_marker_num = 0.000;
    CheckFastestLap();
    other.last_lap_time = time;
    if(rally_type_index == 3.000)
    {
        other.frags = other.frags + FRAGS_PER_LAP;
    }
    else
    {
        other.last_lap = other.last_lap + 1.000;
        CheckLaps();
        
        if(!(global_racing_flags & QR_FINISHED_RACE))
        {
            laps_left = ftos(self.ammo_nails - other.last_lap);
            
            if(other.classname == "player")
            {
                sprint(other, laps_left);
                sprint(other, " laps left\n");
            }
            
        }
        
    }
    
    self.solid = SOLID_TRIGGER;
    setorigin(self, self.origin);
};

// flag_think
// function begins at statement 7244, parm_start=6282
// OP_ADDRESS	28	131	6282
// OP_LOAD_F	28	131	6283
// OP_ADD_F	6283	819	6284
// OP_STOREP_F	6284	6282	0
// OP_LOAD_F	28	131	6285
// OP_GT	6285	847	6286
// OP_IFNOT	6286	6	0
// OP_ADDRESS	28	131	6287
// OP_STOREP_F	817	6287	0
// OP_ADDRESS	28	150	6288
// OP_STOREP_F	1228	6288	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	150	6289
// OP_ADD_F	31	2869	6290
// OP_STOREP_F	6290	6289	0
// OP_DONE	0	0	0
void () flag_think = 
{
    self.frame = self.frame + 1.000;
    
    if(self.frame > 9.000)
    {
        self.frame = 0.000;
        self.nextthink = -1.000;
        return;
    }
    
    self.nextthink = time + 0.100;
};

// spawn_marker_flag
// function begins at statement 7260, parm_start=6292
// OP_NE_F	737	717	6294
// OP_IFNOT	6294	2	0
// OP_RETURN	0	0	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	6292	0
// OP_ADDRESS	6292	129	6295
// OP_STOREP_S	6023	6295	0
// OP_ADDRESS	6292	166	6296
// OP_STOREP_V	6029	6296	0
// OP_STORE_V	6292	4	0
// OP_STORE_V	754	7	0
// OP_STORE_V	757	10	0
// OP_CALL3	464	0	0
// OP_STORE_V	6292	4	0
// OP_STORE_V	6299	7	0
// OP_CALL2	463	0	0
// OP_LOAD_V	28	117	6300
// OP_STORE_V	6300	4	0
// OP_CALL1	461	0	0
// OP_STORE_V	6292	4	0
// OP_LOAD_V	28	105	6303
// OP_MUL_VF	59	843	6306
// OP_ADD_V	6303	6306	6309
// OP_STORE_V	6309	7	0
// OP_CALL2	462	0	0
// OP_LOAD_V	6292	105	6312
// OP_STORE_V	6312	4	0
// OP_LOAD_V	6292	105	6315
// OP_SUB_V	6315	2284	6318
// OP_STORE_V	6318	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	6292	13	0
// OP_CALL4	475	0	0
// OP_STORE_V	6292	4	0
// OP_STORE_V	71	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	6292	119	6321
// OP_LOAD_F	28	119	6322
// OP_ADD_F	6322	865	6323
// OP_STORE_V	6323	4	0
// OP_CALL1	859	0	0
// OP_STOREP_F	1	6321	0
// OP_ADDRESS	6292	150	6324
// OP_ADD_F	31	2869	6325
// OP_STOREP_F	6325	6324	0
// OP_ADDRESS	6292	148	6326
// OP_STOREP_FNC	6281	6326	0
// OP_ADDRESS	28	432	6327
// OP_STOREP_ENT	6292	6327	0
// OP_DONE	0	0	0
void () spawn_marker_flag = 
{
    local entity flag;
    local entity oself;
    
    if(racing_type != RT_TIME_TRIAL)
    {
        return;
    }
    
    flag = spawn();
    flag.classname = "rally_flag";
    flag.view_ofs = '0.000 0.000 7.000';
    setsize(flag, VEH_MIN, VEH_MAX);
    setmodel(flag, "models/marker.mdl");
    makevectors(self.angles);
    setorigin(flag, self.origin + (v_forward * 8.000));
    traceline(flag.origin, flag.origin - '0.000 0.000 64.000', TRUE, flag);
    setorigin(flag, trace_endpos);
    flag.angles_y = anglemod(self.angles_y + 180.000);
    flag.nextthink = time + 0.100;
    flag.think = flag_think;
    self.movetarget = flag;
};

// rally_marker
// function begins at statement 7310, parm_start=6329
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	6335
// OP_ADD_V	6335	1529	6338
// OP_STORE_V	6338	7	0
// OP_CALL2	462	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	6341	7	0
// OP_STORE_V	6344	10	0
// OP_CALL3	464	0	0
// OP_CALL0	492	0	0
// OP_ADDRESS	28	150	6347
// OP_ADD_F	31	819	6348
// OP_STOREP_F	6348	6347	0
// OP_ADDRESS	28	148	6349
// OP_STOREP_FNC	6291	6349	0
// OP_DONE	0	0	0
void () rally_marker = 
{
    local vector min;
    local vector max;
    setorigin(self, self.origin + '0.000 0.000 12.000');
    setsize(self, '-2.000 -2.000 -8.000', '2.000 2.000 8.000');
    droptofloor();
    self.nextthink = time + 1.000;
    self.think = spawn_marker_flag;
};

// rally_marker_brush
// function begins at statement 7326, parm_start=6351
// OP_ADDRESS	28	129	6351
// OP_STOREP_S	1104	6351	0
// OP_DONE	0	0	0
void () rally_marker_brush = 
{
    self.classname = "rally_marker";
};

// marker_touch
// function begins at statement 7329, parm_start=6352
// OP_LOAD_S	29	129	6353
// OP_EQ_S	6353	880	6354
// OP_LOAD_S	29	129	6355
// OP_EQ_S	6355	1187	6356
// OP_OR	6354	6356	6357
// OP_NOT_F	6357	0	6358
// OP_IFNOT	6358	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	644	6359
// OP_BITAND	6359	690	6360
// OP_LOAD_F	29	644	6361
// OP_BITAND	6361	691	6362
// OP_OR	6360	6362	6363
// OP_IFNOT	6363	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	637	6364
// OP_LOAD_F	28	158	6365
// OP_SUB_F	6365	819	6366
// OP_EQ_F	6364	6366	6367
// OP_IFNOT	6367	89	0
// OP_ADDRESS	29	637	6368
// OP_LOAD_F	28	158	6369
// OP_STOREP_F	6369	6368	0
// OP_ADDRESS	29	638	6370
// OP_STOREP_ENT	28	6370	0
// OP_EQ_F	737	717	6371
// OP_IFNOT	6371	20	0
// OP_STORE_V	4339	4	0
// OP_CALL1	501	0	0
// OP_LE	1	819	6372
// OP_IFNOT	6372	6	0
// OP_ADDRESS	29	677	6373
// OP_LOAD_F	29	677	6374
// OP_ADD_F	6374	839	6375
// OP_STOREP_F	6375	6373	0
// OP_GOTO	5	0	0
// OP_ADDRESS	29	677	6376
// OP_LOAD_F	29	677	6377
// OP_ADD_F	6377	829	6378
// OP_STOREP_F	6378	6376	0
// OP_ADDRESS	29	644	6379
// OP_LOAD_F	29	644	6380
// OP_LOAD_F	29	644	6381
// OP_BITAND	6381	702	6382
// OP_SUB_F	6380	6382	6383
// OP_STOREP_F	6383	6379	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6384	7	0
// OP_CALL2	876	0	0
// OP_EQ_F	737	717	6385
// OP_IFNOT	6385	13	0
// OP_LOAD_ENT	28	432	6386
// OP_ADDRESS	6386	131	6387
// OP_STOREP_F	817	6387	0
// OP_LOAD_ENT	28	432	6388
// OP_ADDRESS	6388	119	6389
// OP_LOAD_ENT	29	548	6390
// OP_LOAD_F	6390	119	6391
// OP_STOREP_F	6391	6389	0
// OP_LOAD_ENT	28	432	6392
// OP_ADDRESS	6392	150	6393
// OP_ADD_F	31	2869	6394
// OP_STOREP_F	6394	6393	0
// OP_LT	738	823	6395
// OP_CALL0	466	0	0
// OP_LT	1	2575	6396
// OP_AND	6395	6396	6397
// OP_LOAD_ENT	28	200	6398
// OP_NE_E	6398	30	6399
// OP_AND	6397	6399	6400
// OP_LOAD_ENT	28	200	6401
// OP_NE_E	6401	29	6402
// OP_AND	6400	6402	6403
// OP_LOAD_F	28	640	6404
// OP_LOAD_F	29	640	6405
// OP_EQ_F	6404	6405	6406
// OP_AND	6403	6406	6407
// OP_IFNOT	6407	23	0
// OP_LOAD_F	28	387	6408
// OP_SUB_F	31	6408	6409
// OP_STORE_V	6409	4	0
// OP_CALL1	485	0	0
// OP_STORE_S	1	6352	0
// OP_LOAD_S	29	129	6410
// OP_EQ_S	6410	880	6411
// OP_IFNOT	6411	15	0
// OP_STORE_V	29	4	0
// OP_LOAD_ENT	28	200	6412
// OP_LOAD_S	6412	180	6413
// OP_STORE_V	6413	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6414	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6352	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6415	7	0
// OP_CALL2	483	0	0
// OP_ADDRESS	28	200	6416
// OP_STOREP_ENT	29	6416	0
// OP_ADDRESS	28	387	6417
// OP_STOREP_F	31	6417	0
// OP_ADDRESS	28	640	6418
// OP_LOAD_F	29	640	6419
// OP_STOREP_F	6419	6418	0
// OP_GOTO	37	0	0
// OP_LOAD_F	28	119	6420
// OP_STORE_V	6420	4	0
// OP_LOAD_F	29	119	6421
// OP_STORE_V	6421	7	0
// OP_CALL2	860	0	0
// OP_STORE_V	1	4	0
// OP_CALL1	499	0	0
// OP_GT	1	1885	6422
// OP_LOAD_F	29	658	6423
// OP_SUB_F	31	804	6424
// OP_LT	6423	6424	6425
// OP_AND	6422	6425	6426
// OP_IFNOT	6426	24	0
// OP_LOAD_S	29	129	6427
// OP_EQ_S	6427	880	6428
// OP_IFNOT	6428	4	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6429	7	0
// OP_CALL2	520	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	4362	7	0
// OP_CALL2	876	0	0
// OP_ADDRESS	29	658	6430
// OP_STOREP_F	31	6430	0
// OP_LOAD_F	28	158	6431
// OP_EQ_F	6431	819	6432
// OP_IFNOT	6432	10	0
// OP_ADDRESS	29	637	6433
// OP_STOREP_F	819	6433	0
// OP_ADDRESS	28	200	6434
// OP_STOREP_ENT	29	6434	0
// OP_ADDRESS	28	387	6435
// OP_STOREP_F	31	6435	0
// OP_ADDRESS	28	640	6436
// OP_LOAD_F	29	640	6437
// OP_STOREP_F	6437	6436	0
// OP_DONE	0	0	0
void () marker_touch = 
{
    local string stemp;
    
    if(!((other.classname == "player") || (other.classname == "rally_bot")))
    {
        return;
    }
    
    
    if((other.racing_flags & QR_NOT_RACING) || (other.racing_flags & QR_FINISHED_RACE))
    {
        return;
    }
    
    if(other.last_marker_num == (self.ammo_shells - 1.000))
    {
        other.last_marker_num = self.ammo_shells;
        other.last_marker = self;
        
        if(racing_type == RT_TIME_TRIAL)
        {
            if(cvar("skill") <= 1.000)
            {
                other.time_remaining = other.time_remaining + 7.000;
            }
            else
            {
                other.time_remaining = other.time_remaining + 6.000;
            }
            
            other.racing_flags = other.racing_flags - (other.racing_flags & QR_OUT_OF_TIME);
        }
        
        commentary(other, "voice/checkpnt.wav");
        
        if(racing_type == RT_TIME_TRIAL)
        {
            self.movetarget.frame = 0.000;
            self.movetarget.angles_y = other.veh_body.angles_y;
            self.movetarget.nextthink = time + 0.100;
        }
        
        
        if(((((rally_type_index < 3.000) && (random() < 0.300)) && (self.dmg_inflictor != world)) && (self.dmg_inflictor != other)) && (self.last_lap == other.last_lap))
        {
            stemp = ftos(time - self.attack_finished);
            
            if(other.classname == "player")
            {
                sprint(other, self.dmg_inflictor.netname);
                sprint(other, " ahead: ");
                sprint(other, stemp);
                sprint(other, " secs\n");
            }
            
        }
        
        self.dmg_inflictor = other;
        self.attack_finished = time;
        self.last_lap = other.last_lap;
    }
    else
    {
        
        if((fabs(angle_diff(self.angles_y, other.angles_y)) > 150.000) && (other.last_turnaround < (time - SNDLEN_TURNAROUND)))
        {
            
            if(other.classname == "player")
            {
                centerprint(other, "Wrong Way!");
            }
            
            commentary(other, "voice/wrongway.wav");
            other.last_turnaround = time;
            
            if(self.ammo_shells == 1.000)
            {
                other.last_marker_num = 1.000;
                self.dmg_inflictor = other;
                self.attack_finished = time;
                self.last_lap = other.last_lap;
            }
            
        }
        
    }
    
};

// ToggleHeadlights
// function begins at statement 7474, parm_start=6439
// OP_LOAD_ENT	28	552	6439
// OP_LOAD_F	6439	133	6440
// OP_EQ_F	6440	350	6441
// OP_IFNOT	6441	27	0
// OP_ADDRESS	28	644	6442
// OP_LOAD_F	28	644	6443
// OP_SUB_F	6443	694	6444
// OP_STOREP_F	6444	6442	0
// OP_LOAD_ENT	28	552	6445
// OP_STORE_V	6445	4	0
// OP_STORE_V	4128	7	0
// OP_CALL2	463	0	0
// OP_LOAD_ENT	28	551	6446
// OP_STORE_V	6446	4	0
// OP_STORE_V	4128	7	0
// OP_CALL2	463	0	0
// OP_LOAD_ENT	28	553	6447
// OP_STORE_V	6447	4	0
// OP_STORE_V	4128	7	0
// OP_CALL2	463	0	0
// OP_LOAD_ENT	28	552	6448
// OP_ADDRESS	6448	133	6449
// OP_STOREP_F	817	6449	0
// OP_LOAD_ENT	28	551	6450
// OP_ADDRESS	6450	133	6451
// OP_STOREP_F	817	6451	0
// OP_LOAD_ENT	28	553	6452
// OP_ADDRESS	6452	133	6453
// OP_STOREP_F	817	6453	0
// OP_GOTO	26	0	0
// OP_ADDRESS	28	644	6454
// OP_LOAD_F	28	644	6455
// OP_BITOR	6455	694	6456
// OP_STOREP_F	6456	6454	0
// OP_LOAD_ENT	28	552	6457
// OP_STORE_V	6457	4	0
// OP_STORE_V	1283	7	0
// OP_CALL2	463	0	0
// OP_LOAD_ENT	28	551	6458
// OP_STORE_V	6458	4	0
// OP_STORE_V	1283	7	0
// OP_CALL2	463	0	0
// OP_LOAD_ENT	28	553	6459
// OP_STORE_V	6459	4	0
// OP_STORE_V	1283	7	0
// OP_CALL2	463	0	0
// OP_LOAD_ENT	28	552	6460
// OP_ADDRESS	6460	133	6461
// OP_STOREP_F	350	6461	0
// OP_LOAD_ENT	28	551	6462
// OP_ADDRESS	6462	133	6463
// OP_STOREP_F	350	6463	0
// OP_LOAD_ENT	28	553	6464
// OP_ADDRESS	6464	133	6465
// OP_STOREP_F	350	6465	0
// OP_DONE	0	0	0
void () ToggleHeadlights = 
{
    if(self.hl_r.effects == EF_DIMLIGHT)
    {
        self.racing_flags = self.racing_flags - QR_HEADLIGHTS_ON;
        setmodel(self.hl_r, "");
        setmodel(self.hl_l, "");
        setmodel(self.hl_m, "");
        self.hl_r.effects = 0.000;
        self.hl_l.effects = 0.000;
        self.hl_m.effects = 0.000;
    }
    else
    {
        self.racing_flags = self.racing_flags | QR_HEADLIGHTS_ON;
        setmodel(self.hl_r, "models/null.mdl");
        setmodel(self.hl_l, "models/null.mdl");
        setmodel(self.hl_m, "models/null.mdl");
        self.hl_r.effects = EF_DIMLIGHT;
        self.hl_l.effects = EF_DIMLIGHT;
        self.hl_m.effects = EF_DIMLIGHT;
    }
    
};

// player_infront
// function begins at statement 7530, parm_start=6467
// OP_LOAD_V	6467	105	6471
// OP_LOAD_ENT	6467	638	6474
// OP_LOAD_V	6474	105	6475
// OP_SUB_V	6471	6475	6478
// OP_STORE_V	6478	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	6469	0
// OP_LOAD_V	6468	105	6481
// OP_LOAD_ENT	6468	638	6484
// OP_LOAD_V	6484	105	6485
// OP_SUB_V	6481	6485	6488
// OP_STORE_V	6488	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	6470	0
// OP_GE	6469	6470	6491
// OP_IFNOT	6491	3	0
// OP_RETURN	6467	0	0
// OP_GOTO	2	0	0
// OP_RETURN	6468	0	0
// OP_DONE	0	0	0
entity (entity player1, entity player2) player_infront = 
{
    local float len1;
    local float len2;
    len1 = vlen(player1.origin - player1.last_marker.origin);
    len2 = vlen(player2.origin - player2.last_marker.origin);
    if(len1 >= len2)
    {
        return player1;
    }
    else
    {
        return player2;
    }
    
};

// SortPlayersByPosition
// function begins at statement 7550, parm_start=6493
// OP_EQ_E	726	30	6500
// OP_IFNOT	6500	2	0
// OP_RETURN	0	0	0
// OP_STORE_ENT	726	6493	0
// OP_STORE_ENT	30	6495	0
// OP_STORE_F	218	6498	0
// OP_NE_E	6493	30	6501
// OP_IFNOT	6501	108	0
// OP_LOAD_ENT	6493	667	6502
// OP_NE_E	6502	30	6503
// OP_LOAD_ENT	6493	667	6504
// OP_LOAD_F	6504	644	6505
// OP_BITAND	6505	691	6506
// OP_NOT_F	6506	0	6507
// OP_AND	6503	6507	6508
// OP_IFNOT	6508	96	0
// OP_LOAD_F	6493	644	6509
// OP_BITAND	6509	691	6510
// OP_LOAD_ENT	6493	667	6511
// OP_LOAD_F	6511	644	6512
// OP_BITAND	6512	691	6513
// OP_NOT_F	6513	0	6514
// OP_AND	6510	6514	6515
// OP_IFNOT	6515	3	0
// OP_STORE_F	219	6498	0
// OP_GOTO	48	0	0
// OP_LOAD_F	6493	644	6516
// OP_BITAND	6516	691	6517
// OP_LOAD_ENT	6493	667	6518
// OP_LOAD_F	6518	644	6519
// OP_BITAND	6519	691	6520
// OP_AND	6517	6520	6521
// OP_LOAD_F	6493	643	6522
// OP_LOAD_ENT	6493	667	6523
// OP_LOAD_F	6523	643	6524
// OP_LT	6522	6524	6525
// OP_AND	6521	6525	6526
// OP_IFNOT	6526	3	0
// OP_STORE_F	219	6498	0
// OP_GOTO	34	0	0
// OP_LOAD_ENT	6493	667	6527
// OP_LOAD_F	6527	640	6528
// OP_LOAD_F	6493	640	6529
// OP_LT	6528	6529	6530
// OP_LOAD_ENT	6493	667	6531
// OP_LOAD_F	6531	640	6532
// OP_LOAD_F	6493	640	6533
// OP_EQ_F	6532	6533	6534
// OP_LOAD_ENT	6493	667	6535
// OP_LOAD_F	6535	637	6536
// OP_LOAD_F	6493	637	6537
// OP_LT	6536	6537	6538
// OP_AND	6534	6538	6539
// OP_OR	6530	6539	6540
// OP_LOAD_ENT	6493	667	6541
// OP_LOAD_F	6541	640	6542
// OP_LOAD_F	6493	640	6543
// OP_EQ_F	6542	6543	6544
// OP_LOAD_ENT	6493	667	6545
// OP_LOAD_F	6545	637	6546
// OP_LOAD_F	6493	637	6547
// OP_EQ_F	6546	6547	6548
// OP_AND	6544	6548	6549
// OP_LOAD_ENT	6493	667	6550
// OP_STORE_V	6550	4	0
// OP_STORE_V	6493	7	0
// OP_CALL2	6466	0	0
// OP_LOAD_ENT	6493	667	6551
// OP_NE_E	1	6551	6552
// OP_AND	6549	6552	6553
// OP_OR	6540	6553	6554
// OP_IFNOT	6554	2	0
// OP_STORE_F	219	6498	0
// OP_IFNOT	6498	34	0
// OP_LOAD_ENT	6493	667	6555
// OP_STORE_ENT	6555	6494	0
// OP_LOAD_ENT	6494	667	6556
// OP_NE_E	6556	30	6557
// OP_IFNOT	6557	4	0
// OP_LOAD_ENT	6494	667	6558
// OP_ADDRESS	6558	668	6559
// OP_STOREP_ENT	6493	6559	0
// OP_LOAD_ENT	6493	668	6560
// OP_NE_E	6560	30	6561
// OP_IFNOT	6561	4	0
// OP_LOAD_ENT	6493	668	6562
// OP_ADDRESS	6562	667	6563
// OP_STOREP_ENT	6494	6563	0
// OP_ADDRESS	6493	667	6564
// OP_LOAD_ENT	6494	667	6565
// OP_STOREP_ENT	6565	6564	0
// OP_ADDRESS	6494	668	6566
// OP_LOAD_ENT	6493	668	6567
// OP_STOREP_ENT	6567	6566	0
// OP_ADDRESS	6493	668	6568
// OP_STOREP_ENT	6494	6568	0
// OP_ADDRESS	6494	667	6569
// OP_STOREP_ENT	6493	6569	0
// OP_LOAD_ENT	6493	667	6570
// OP_NE_E	6570	30	6571
// OP_IFNOT	6571	4	0
// OP_LOAD_ENT	6493	667	6572
// OP_STORE_ENT	6572	6493	0
// OP_GOTO	2	0	0
// OP_STORE_ENT	6493	726	0
// OP_STORE_F	218	6498	0
// OP_GOTO	4	0	0
// OP_STORE_ENT	6493	6495	0
// OP_LOAD_ENT	6493	668	6573
// OP_STORE_ENT	6573	6493	0
// OP_GOTO	4	0	0
// OP_STORE_ENT	6493	6495	0
// OP_LOAD_ENT	6493	668	6574
// OP_STORE_ENT	6574	6493	0
// OP_GOTO	-108	0	0
// OP_STORE_F	819	6497	0
// OP_STORE_ENT	6495	6493	0
// OP_NE_E	6493	30	6575
// OP_IFNOT	6575	9	0
// OP_ADDRESS	6493	153	6576
// OP_STOREP_F	6497	6576	0
// OP_STORE_ENT	6493	6495	0
// OP_LOAD_ENT	6493	667	6577
// OP_STORE_ENT	6577	6493	0
// OP_ADD_F	6497	819	6578
// OP_STORE_F	6578	6497	0
// OP_GOTO	-9	0	0
// OP_STORE_F	819	6497	0
// OP_STORE_ENT	6495	6493	0
// OP_NE_E	6493	30	6579
// OP_IFNOT	6579	64	0
// OP_LOAD_F	6493	666	6580
// OP_NE_F	6580	6497	6581
// OP_LOAD_F	6493	640	6582
// OP_GT	6582	817	6583
// OP_AND	6581	6583	6584
// OP_LOAD_S	6493	129	6585
// OP_EQ_S	6585	880	6586
// OP_AND	6584	6586	6587
// OP_IFNOT	6587	48	0
// OP_EQ_F	6497	819	6588
// OP_IFNOT	6588	5	0
// OP_STORE_V	6493	4	0
// OP_STORE_V	6589	7	0
// OP_CALL2	520	0	0
// OP_GOTO	42	0	0
// OP_EQ_F	6497	821	6590
// OP_IFNOT	6590	5	0
// OP_STORE_V	6493	4	0
// OP_STORE_V	6591	7	0
// OP_CALL2	520	0	0
// OP_GOTO	36	0	0
// OP_EQ_F	6497	823	6592
// OP_IFNOT	6592	5	0
// OP_STORE_V	6493	4	0
// OP_STORE_V	6593	7	0
// OP_CALL2	520	0	0
// OP_GOTO	30	0	0
// OP_EQ_F	6497	825	6594
// OP_IFNOT	6594	5	0
// OP_STORE_V	6493	4	0
// OP_STORE_V	6595	7	0
// OP_CALL2	520	0	0
// OP_GOTO	24	0	0
// OP_EQ_F	6497	827	6596
// OP_IFNOT	6596	5	0
// OP_STORE_V	6493	4	0
// OP_STORE_V	6597	7	0
// OP_CALL2	520	0	0
// OP_GOTO	18	0	0
// OP_EQ_F	6497	829	6598
// OP_IFNOT	6598	5	0
// OP_STORE_V	6493	4	0
// OP_STORE_V	6599	7	0
// OP_CALL2	520	0	0
// OP_GOTO	12	0	0
// OP_EQ_F	6497	839	6600
// OP_IFNOT	6600	5	0
// OP_STORE_V	6493	4	0
// OP_STORE_V	6601	7	0
// OP_CALL2	520	0	0
// OP_GOTO	6	0	0
// OP_EQ_F	6497	843	6602
// OP_IFNOT	6602	4	0
// OP_STORE_V	6493	4	0
// OP_STORE_V	6603	7	0
// OP_CALL2	520	0	0
// OP_ADDRESS	6493	666	6604
// OP_STOREP_F	6497	6604	0
// OP_LOAD_ENT	6493	668	6605
// OP_STORE_ENT	6605	6493	0
// OP_ADD_F	6497	819	6606
// OP_STORE_F	6606	6497	0
// OP_GOTO	-64	0	0
// OP_ADDRESS	28	150	6607
// OP_ADD_F	31	819	6608
// OP_STOREP_F	6608	6607	0
// OP_DONE	0	0	0
void () SortPlayersByPosition = 
{
    local entity current;
    local entity temp;
    local entity lastcurrent;
    local float done;
    local float current_frag;
    local float swap;
    local string stemp;
    
    if(current_leader == world)
    {
        return;
    }
    
    current = current_leader;
    lastcurrent = world;
    swap = FALSE;
    
    while(current != world)
    {
        if((current.ahead != world) && (!(current.ahead.racing_flags & QR_FINISHED_RACE)))
        {
            if((current.racing_flags & QR_FINISHED_RACE) && (!(current.ahead.racing_flags & QR_FINISHED_RACE)))
            {
                swap = TRUE;
            }
            else
            {
                if(((current.racing_flags & QR_FINISHED_RACE) && (current.ahead.racing_flags & QR_FINISHED_RACE)) && (current.race_time < current.ahead.race_time))
                {
                    swap = TRUE;
                }
                else
                {
                    
                    if(((current.ahead.last_lap < current.last_lap) || ((current.ahead.last_lap == current.last_lap) && (current.ahead.last_marker_num < current.last_marker_num))) || (((current.ahead.last_lap == current.last_lap) && (current.ahead.last_marker_num == current.last_marker_num)) && (player_infront(current.ahead, current) != current.ahead)))
                    {
                        swap = TRUE;
                    }
                    
                }
                
            }
            
            if(swap)
            {
                temp = current.ahead;
                
                if(temp.ahead != world)
                {
                    temp.ahead.behind = current;
                }
                
                
                if(current.behind != world)
                {
                    current.behind.ahead = temp;
                }
                
                current.ahead = temp.ahead;
                temp.behind = current.behind;
                current.behind = temp;
                temp.ahead = current;
                if(current.ahead != world)
                {
                    current = current.ahead;
                }
                else
                {
                    current_leader = current;
                }
                
                swap = FALSE;
            }
            else
            {
                lastcurrent = current;
                current = current.behind;
            }
            
        }
        else
        {
            lastcurrent = current;
            current = current.behind;
        }
        
    }
    
    current_frag = 1.000;
    current = lastcurrent;
    
    while(current != world)
    {
        current.frags = current_frag;
        lastcurrent = current;
        current = current.ahead;
        current_frag = current_frag + 1.000;
    }
    
    current_frag = 1.000;
    current = lastcurrent;
    
    while(current != world)
    {
        
        if(((current.position != current_frag) && (current.last_lap > 0.000)) && (current.classname == "player"))
        {
            if(current_frag == 1.000)
            {
                centerprint(current, "You are in the lead!");
            }
            else
            {
                if(current_frag == 2.000)
                {
                    centerprint(current, "You are in second place");
                }
                else
                {
                    if(current_frag == 3.000)
                    {
                        centerprint(current, "You are in third place");
                    }
                    else
                    {
                        if(current_frag == 4.000)
                        {
                            centerprint(current, "You are in fourth place");
                        }
                        else
                        {
                            if(current_frag == 5.000)
                            {
                                centerprint(current, "You are in fifth place");
                            }
                            else
                            {
                                if(current_frag == 6.000)
                                {
                                    centerprint(current, "You are in sixth place");
                                }
                                else
                                {
                                    if(current_frag == 7.000)
                                    {
                                        centerprint(current, "You are in seventh place");
                                    }
                                    else
                                    {
                                        
                                        if(current_frag == 8.000)
                                        {
                                            centerprint(current, "You are in eighth place");
                                        }
                                        
                                    }
                                    
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        current.position = current_frag;
        current = current.behind;
        current_frag = current_frag + 1.000;
    }
    
    self.nextthink = time + 1.000;
};

// BuildPlayerList
// function begins at statement 7748, parm_start=6609
// OP_STORE_V	30	4	0
// OP_STORE_V	627	7	0
// OP_STORE_V	1185	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	6609	0
// OP_STORE_ENT	6609	726	0
// OP_STORE_ENT	30	6610	0
// OP_NE_E	6609	30	6611
// OP_IFNOT	6611	14	0
// OP_ADDRESS	6609	667	6612
// OP_STOREP_ENT	6610	6612	0
// OP_NE_E	6610	30	6613
// OP_IFNOT	6613	3	0
// OP_ADDRESS	6610	668	6614
// OP_STOREP_ENT	6609	6614	0
// OP_STORE_ENT	6609	6610	0
// OP_STORE_V	6609	4	0
// OP_STORE_V	627	7	0
// OP_STORE_V	1185	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	6609	0
// OP_GOTO	-14	0	0
// OP_ADDRESS	6610	668	6615
// OP_STOREP_ENT	30	6615	0
// OP_LT	738	823	6616
// OP_IFNOT	6616	10	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	721	0
// OP_ADDRESS	721	129	6617
// OP_STOREP_S	6618	6617	0
// OP_ADDRESS	721	148	6619
// OP_STOREP_FNC	6492	6619	0
// OP_ADDRESS	721	150	6620
// OP_ADD_F	31	819	6621
// OP_STOREP_F	6621	6620	0
// OP_DONE	0	0	0
void () BuildPlayerList = 
{
    local entity current;
    local entity prev;
    current = find(world, is_racer, "yes");
    current_leader = current;
    prev = world;
    
    while(current != world)
    {
        current.ahead = prev;
        
        if(prev != world)
        {
        }
        
        prev = prev.behind = current;
        current = find(current, is_racer, "yes");
    }
    
    prev.behind = world;
    
    if(rally_type_index < 3.000)
    {
        positioner = spawn();
        positioner.classname = "positioner";
        positioner.think = SortPlayersByPosition;
        positioner.nextthink = time + 1.000;
    }
    
};

// PlaceRallyItem
// function begins at statement 7784, parm_start=6623
// OP_ADDRESS	28	182	6623
// OP_STOREP_F	227	6623	0
// OP_CALL0	492	0	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	6624
// OP_ADD_V	6624	1215	6627
// OP_STORE_V	6627	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	28	104	6630
// OP_STOREP_F	244	6630	0
// OP_ADDRESS	28	103	6631
// OP_STOREP_F	233	6631	0
// OP_ADDRESS	28	113	6632
// OP_STOREP_V	926	6632	0
// OP_DONE	0	0	0
void () PlaceRallyItem = 
{
    self.flags = FL_ITEM;
    droptofloor();
    setorigin(self, self.origin + '0.000 0.000 1.000');
    self.solid = SOLID_TRIGGER;
    self.movetype = MOVETYPE_NONE;
    self.velocity = '0.000 0.000 0.000';
};

// StartRallyItem
// function begins at statement 7799, parm_start=6635
// OP_ADDRESS	28	150	6635
// OP_ADD_F	31	1152	6636
// OP_STOREP_F	6636	6635	0
// OP_ADDRESS	28	148	6637
// OP_STOREP_FNC	6622	6637	0
// OP_DONE	0	0	0
void () StartRallyItem = 
{
    self.nextthink = time + 0.200;
    self.think = PlaceRallyItem;
};

// boost_touch
// function begins at statement 7805, parm_start=6639
// OP_LOAD_S	29	129	6639
// OP_EQ_S	6639	880	6640
// OP_LOAD_S	29	129	6641
// OP_EQ_S	6641	1187	6642
// OP_OR	6640	6642	6643
// OP_NOT_F	6643	0	6644
// OP_IFNOT	6644	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	657	6645
// OP_SUB_F	31	803	6646
// OP_GT	6645	6646	6647
// OP_IFNOT	6647	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	29	113	6648
// OP_LOAD_V	29	113	6651
// OP_LOAD_V	29	113	6654
// OP_STORE_V	6654	4	0
// OP_CALL1	468	0	0
// OP_LOAD_F	28	158	6657
// OP_MUL_VF	1	6657	6658
// OP_ADD_V	6651	6658	6661
// OP_STOREP_V	6661	6648	0
// OP_LOAD_V	29	113	6664
// OP_STORE_V	6664	4	0
// OP_CALL1	471	0	0
// OP_GT	1	5033	6667
// OP_IFNOT	6667	7	0
// OP_ADDRESS	29	113	6668
// OP_LOAD_V	29	113	6671
// OP_STORE_V	6671	4	0
// OP_CALL1	468	0	0
// OP_MUL_VF	1	5033	6674
// OP_STOREP_V	6674	6668	0
// OP_ADDRESS	29	657	6677
// OP_STOREP_F	31	6677	0
// OP_DONE	0	0	0
void () boost_touch = 
{
    
    if(!((other.classname == "player") || (other.classname == "rally_bot")))
    {
        return;
    }
    
    
    if(other.last_boost > (time - SNDLEN_BOOST))
    {
        return;
    }
    
    other.velocity = other.velocity + (normalize(other.velocity) * self.ammo_shells);
    
    if(vlen(other.velocity) > 900.000)
    {
        other.velocity = normalize(other.velocity) * 900.000;
    }
    
    other.last_boost = time;
};

// rally_boost
// function begins at statement 7841, parm_start=6679
// OP_ADDRESS	28	146	6679
// OP_STOREP_FNC	6638	6679	0
// OP_STORE_V	28	4	0
// OP_STORE_V	6680	7	0
// OP_STORE_V	6683	10	0
// OP_CALL3	464	0	0
// OP_CALL0	6053	0	0
// OP_DONE	0	0	0
void () rally_boost = 
{
    self.touch = boost_touch;
    setsize(self, '-96.000 -96.000 0.000', '96.000 96.000 256.000');
    StartRallyItem();
};

// rally_boost_brush
// function begins at statement 7849, parm_start=6687
// OP_ADDRESS	28	146	6687
// OP_STOREP_FNC	6638	6687	0
// OP_ADDRESS	28	104	6688
// OP_STOREP_F	244	6688	0
// OP_STORE_V	28	4	0
// OP_LOAD_S	28	130	6689
// OP_STORE_V	6689	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	103	6690
// OP_STOREP_F	233	6690	0
// OP_ADDRESS	28	93	6691
// OP_STOREP_F	817	6691	0
// OP_ADDRESS	28	130	6692
// OP_STOREP_S	4128	6692	0
// OP_ADDRESS	28	129	6693
// OP_STOREP_S	6694	6693	0
// OP_DONE	0	0	0
void () rally_boost_brush = 
{
    self.touch = boost_touch;
    self.solid = SOLID_TRIGGER;
    setmodel(self, self.model);
    self.movetype = MOVETYPE_NONE;
    self.modelindex = 0.000;
    self.model = "";
    self.classname = "rally_boost";
};

// rally_arrow
// function begins at statement 7866, parm_start=6696
// OP_STORE_V	28	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	6696	10	0
// OP_CALL3	464	0	0
// OP_ADDRESS	28	103	6699
// OP_STOREP_F	233	6699	0
// OP_ADDRESS	28	113	6700
// OP_STOREP_V	926	6700	0
// OP_DONE	0	0	0
void () rally_arrow = 
{
    setsize(self, '0.000 0.000 0.000', '64.000 32.000 32.000');
    self.movetype = MOVETYPE_NONE;
    self.velocity = '0.000 0.000 0.000';
};

// bot_marker_touch
// function begins at statement 7875, parm_start=6704
// OP_LOAD_S	29	129	6704
// OP_NE_S	6704	1187	6705
// OP_LOAD_F	29	644	6706
// OP_BITAND	6706	690	6707
// OP_OR	6705	6707	6708
// OP_IFNOT	6708	2	0
// OP_RETURN	0	0	0
// OP_LOAD_ENT	29	194	6709
// OP_EQ_E	6709	28	6710
// OP_IFNOT	6710	5	0
// OP_ADDRESS	29	194	6711
// OP_STORE_V	29	4	0
// OP_CALL1	537	0	0
// OP_STOREP_ENT	1	6711	0
// OP_ADDRESS	28	104	6712
// OP_STOREP_F	244	6712	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	6713
// OP_STORE_V	6713	7	0
// OP_CALL2	462	0	0
// OP_DONE	0	0	0
void () bot_marker_touch = 
{
    
    if((other.classname != "rally_bot") || (other.racing_flags & QR_NOT_RACING))
    {
        return;
    }
    
    
    if(other.goalentity == self)
    {
        other.goalentity = FindGoalMarker(other);
    }
    
    self.solid = SOLID_TRIGGER;
    setorigin(self, self.origin);
};

// rally_bot_marker
// function begins at statement 7896, parm_start=6717
// OP_STORE_V	28	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	926	10	0
// OP_CALL3	464	0	0
// OP_ADD_F	733	819	6723
// OP_STORE_F	6723	733	0
// OP_CALL0	6053	0	0
// OP_DONE	0	0	0
void () rally_bot_marker = 
{
    local vector min;
    local vector max;
    setsize(self, '0.000 0.000 0.000', '0.000 0.000 0.000');
    num_markers = num_markers + 1.000;
    StartRallyItem();
};

// rally_bot_marker_brush
// function begins at statement 7904, parm_start=6725
// OP_ADDRESS	28	146	6725
// OP_STOREP_FNC	6703	6725	0
// OP_ADD_F	733	819	6726
// OP_STORE_F	6726	733	0
// OP_ADDRESS	28	104	6727
// OP_STOREP_F	244	6727	0
// OP_STORE_V	28	4	0
// OP_LOAD_S	28	130	6728
// OP_STORE_V	6728	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	103	6729
// OP_STOREP_F	233	6729	0
// OP_ADDRESS	28	93	6730
// OP_STOREP_F	817	6730	0
// OP_ADDRESS	28	130	6731
// OP_STOREP_S	4128	6731	0
// OP_ADDRESS	28	129	6732
// OP_STOREP_S	6733	6732	0
// OP_DONE	0	0	0
void () rally_bot_marker_brush = 
{
    self.touch = bot_marker_touch;
    num_markers = num_markers + 1.000;
    self.solid = SOLID_TRIGGER;
    setmodel(self, self.model);
    self.movetype = MOVETYPE_NONE;
    self.modelindex = 0.000;
    self.model = "";
    self.classname = "rally_bot_marker";
};

// jump_touch
// function begins at statement 7923, parm_start=6735
// OP_LOAD_S	29	129	6735
// OP_NE_S	6735	880	6736
// OP_LOAD_S	29	129	6737
// OP_NE_S	6737	1187	6738
// OP_AND	6736	6738	6739
// OP_IFNOT	6739	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	29	620	6740
// OP_STOREP_F	31	6740	0
// OP_ADDRESS	28	104	6741
// OP_STOREP_F	244	6741	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	6742
// OP_STORE_V	6742	7	0
// OP_CALL2	462	0	0
// OP_DONE	0	0	0
void () jump_touch = 
{
    
    if((other.classname != "player") && (other.classname != "rally_bot"))
    {
        return;
    }
    
    other.last_jump_touch = time;
    self.solid = SOLID_TRIGGER;
    setorigin(self, self.origin);
};

// rally_jump
// function begins at statement 7939, parm_start=6746
// OP_LOAD_S	30	130	6746
// OP_EQ_S	6746	1946	6747
// OP_IFNOT	6747	4	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	146	6748
// OP_STOREP_FNC	6734	6748	0
// OP_STORE_V	28	4	0
// OP_STORE_V	6749	7	0
// OP_STORE_V	6752	10	0
// OP_CALL3	464	0	0
// OP_CALL0	6053	0	0
// OP_DONE	0	0	0
void () rally_jump = 
{
    
    if(world.model == "maps/qrally02.bsp")
    {
        remove(self);
        return;
    }
    
    self.touch = jump_touch;
    setsize(self, '-32.000 -32.000 0.000', '32.000 32.000 16.000');
    StartRallyItem();
};

// rally_jump_brush
// function begins at statement 7953, parm_start=6756
// OP_ADDRESS	28	146	6756
// OP_STOREP_FNC	6734	6756	0
// OP_ADDRESS	28	104	6757
// OP_STOREP_F	244	6757	0
// OP_STORE_V	28	4	0
// OP_LOAD_S	28	130	6758
// OP_STORE_V	6758	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	103	6759
// OP_STOREP_F	233	6759	0
// OP_ADDRESS	28	93	6760
// OP_STOREP_F	817	6760	0
// OP_ADDRESS	28	130	6761
// OP_STOREP_S	4128	6761	0
// OP_ADDRESS	28	129	6762
// OP_STOREP_S	6763	6762	0
// OP_DONE	0	0	0
void () rally_jump_brush = 
{
    self.touch = jump_touch;
    self.solid = SOLID_TRIGGER;
    setmodel(self, self.model);
    self.movetype = MOVETYPE_NONE;
    self.modelindex = 0.000;
    self.model = "";
    self.classname = "rally_jump";
};

void () rally_cone;
void () cone_touch;
// cone_think
// function begins at statement 7970, parm_start=6767
// OP_ADDRESS	28	104	6768
// OP_STOREP_F	244	6768	0
// OP_ADDRESS	28	182	6769
// OP_STOREP_F	227	6769	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	6770
// OP_STORE_V	6770	7	0
// OP_CALL2	462	0	0
// OP_DONE	0	0	0
void () cone_think = 
{
    local entity new_cone;
    self.solid = SOLID_TRIGGER;
    self.flags = FL_ITEM;
    setorigin(self, self.origin);
};

// cone_touch
// function begins at statement 7979, parm_start=6773
// OP_LOAD_S	29	129	6776
// OP_EQ_S	6776	880	6777
// OP_LOAD_S	29	129	6778
// OP_EQ_S	6778	1187	6779
// OP_OR	6777	6779	6780
// OP_NOT_F	6780	0	6781
// OP_IFNOT	6781	2	0
// OP_RETURN	0	0	0
// OP_LOAD_V	29	113	6782
// OP_EQ_V	6782	926	6785
// OP_IFNOT	6785	2	0
// OP_RETURN	0	0	0
// OP_LOAD_V	29	105	6786
// OP_LOAD_V	29	555	6789
// OP_MUL_VF	6789	3330	6792
// OP_SUB_V	6786	6792	6795
// OP_STORE_V	6795	6773	0
// OP_LOAD_V	28	105	6798
// OP_SUB_V	6798	6773	6801
// OP_STORE_V	6801	4	0
// OP_CALL1	471	0	0
// OP_GT	1	2223	6804
// OP_IFNOT	6804	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	6805	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	113	6806
// OP_LOAD_V	29	113	6809
// OP_MUL_VF	6809	883	6812
// OP_STOREP_V	6812	6806	0
// OP_ADDRESS	28	116	6815
// OP_STOREP_F	4760	6815	0
// OP_ADDRESS	28	122	6816
// OP_CALL0	466	0	0
// OP_MUL_F	1	1820	6817
// OP_STOREP_F	6817	6816	0
// OP_ADDRESS	28	123	6818
// OP_CALL0	466	0	0
// OP_MUL_F	1	1820	6819
// OP_STOREP_F	6819	6818	0
// OP_ADDRESS	28	124	6820
// OP_CALL0	466	0	0
// OP_MUL_F	1	1820	6821
// OP_STOREP_F	6821	6820	0
// OP_ADDRESS	28	103	6822
// OP_STOREP_F	241	6822	0
// OP_ADDRESS	28	104	6823
// OP_STOREP_F	243	6823	0
// OP_ADDRESS	28	182	6824
// OP_STOREP_F	817	6824	0
// OP_ADDRESS	28	148	6825
// OP_STOREP_FNC	6766	6825	0
// OP_ADDRESS	28	150	6826
// OP_ADD_F	31	821	6827
// OP_STOREP_F	6827	6826	0
// OP_DONE	0	0	0
void () cone_touch = 
{
    local vector pos;
    
    if(!((other.classname == "player") || (other.classname == "rally_bot")))
    {
        return;
    }
    
    
    if(other.velocity == '0.000 0.000 0.000')
    {
        return;
    }
    
    pos = other.origin - (other.veh_dir * 48.000);
    
    if((vlen(self.origin - pos)) > 64.000)
    {
        return;
    }
    
    sound(self, CHAN_AUTO, "rally/process/htcone01.wav", 1.000, ATTN_STATIC);
    self.velocity = other.velocity * 1.500;
    self.velocity_z = 200.000;
    self.avelocity_x = random() * 500.000;
    self.avelocity_y = random() * 500.000;
    self.avelocity_z = random() * 500.000;
    self.movetype = MOVETYPE_BOUNCE;
    self.solid = SOLID_NOT;
    self.flags = 0.000;
    self.think = cone_think;
    self.nextthink = time + 2.000;
};

// rally_cone
// function begins at statement 8039, parm_start=6828
// OP_ADDRESS	28	146	6828
// OP_STOREP_FNC	6765	6828	0
// OP_STORE_V	28	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	1666	10	0
// OP_CALL3	464	0	0
// OP_ADDRESS	28	113	6829
// OP_STOREP_V	926	6829	0
// OP_STORE_V	28	4	0
// OP_STORE_V	6832	7	0
// OP_CALL2	463	0	0
// OP_CALL0	492	0	0
// OP_NOT_F	1	0	6833
// OP_IFNOT	6833	11	0
// OP_STORE_V	6834	4	0
// OP_CALL1	484	0	0
// OP_LOAD_V	28	105	6835
// OP_STORE_V	6835	4	0
// OP_CALL1	486	0	0
// OP_STORE_V	1	4	0
// OP_CALL1	484	0	0
// OP_STORE_V	888	4	0
// OP_CALL1	484	0	0
// OP_GOTO	6	0	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	6838
// OP_SUB_V	6838	1666	6841
// OP_STORE_V	6841	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	28	103	6844
// OP_STOREP_F	233	6844	0
// OP_ADDRESS	28	104	6845
// OP_STOREP_F	244	6845	0
// OP_ADDRESS	28	182	6846
// OP_STOREP_F	227	6846	0
// OP_DONE	0	0	0
void () rally_cone = 
{
    self.touch = cone_touch;
    setsize(self, '0.000 0.000 0.000', '0.000 0.000 8.000');
    self.velocity = '0.000 0.000 0.000';
    setmodel(self, "models/cone.mdl");
    if(!droptofloor())
    {
        dprint("cone fell out of level at ");
        dprint(vtos(self.origin));
        dprint("\n");
    }
    else
    {
        setorigin(self, self.origin - '0.000 0.000 8.000');
    }
    
    self.movetype = MOVETYPE_NONE;
    self.solid = SOLID_TRIGGER;
    self.flags = FL_ITEM;
};

// rally_baracade
// function begins at statement 8075, parm_start=6848
// OP_ADDRESS	28	146	6848
// OP_STOREP_FNC	6765	6848	0
// OP_STORE_V	28	4	0
// OP_STORE_V	6849	7	0
// OP_STORE_V	6852	10	0
// OP_CALL3	464	0	0
// OP_ADDRESS	28	113	6855
// OP_STOREP_V	926	6855	0
// OP_STORE_V	28	4	0
// OP_STORE_V	6858	7	0
// OP_CALL2	463	0	0
// OP_CALL0	492	0	0
// OP_NOT_F	1	0	6859
// OP_IFNOT	6859	11	0
// OP_STORE_V	6860	4	0
// OP_CALL1	484	0	0
// OP_LOAD_V	28	105	6861
// OP_STORE_V	6861	4	0
// OP_CALL1	486	0	0
// OP_STORE_V	1	4	0
// OP_CALL1	484	0	0
// OP_STORE_V	888	4	0
// OP_CALL1	484	0	0
// OP_GOTO	6	0	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	6864
// OP_SUB_V	6864	1666	6867
// OP_STORE_V	6867	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	28	103	6870
// OP_STOREP_F	233	6870	0
// OP_ADDRESS	28	104	6871
// OP_STOREP_F	244	6871	0
// OP_ADDRESS	28	182	6872
// OP_STOREP_F	227	6872	0
// OP_DONE	0	0	0
void () rally_baracade = 
{
    self.touch = cone_touch;
    setsize(self, '-16.000 -16.000 0.000', '16.000 16.000 8.000');
    self.velocity = '0.000 0.000 0.000';
    setmodel(self, "models/baracade.mdl");
    if(!droptofloor())
    {
        dprint("baracade fell out of level at ");
        dprint(vtos(self.origin));
        dprint("\n");
    }
    else
    {
        setorigin(self, self.origin - '0.000 0.000 8.000');
    }
    
    self.movetype = MOVETYPE_NONE;
    self.solid = SOLID_TRIGGER;
    self.flags = FL_ITEM;
};

// changesurface_touch
// function begins at statement 8111, parm_start=6874
// OP_LOAD_S	29	627	6874
// OP_NE_S	6874	1185	6875
// OP_IFNOT	6875	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	29	610	6876
// OP_LOAD_F	28	610	6877
// OP_STOREP_F	6877	6876	0
// OP_DONE	0	0	0
void () changesurface_touch = 
{
    
    if(other.is_racer != "yes")
    {
        return;
    }
    
    other.current_surface = self.current_surface;
};

// rally_changesurface
// function begins at statement 8119, parm_start=6879
// OP_LOAD_F	28	378	6885
// OP_EQ_F	6885	817	6886
// OP_IFNOT	6886	3	0
// OP_ADDRESS	28	378	6887
// OP_STOREP_F	6067	6887	0
// OP_LOAD_F	28	378	6888
// OP_MUL_VF	6068	6888	6889
// OP_STORE_V	6889	6879	0
// OP_STORE_F	6075	6881	0
// OP_LOAD_F	28	378	6892
// OP_MUL_VF	6076	6892	6893
// OP_STORE_V	6893	6882	0
// OP_STORE_F	2670	6884	0
// OP_STORE_V	28	4	0
// OP_STORE_V	6879	7	0
// OP_STORE_V	6882	10	0
// OP_CALL3	464	0	0
// OP_ADDRESS	28	146	6896
// OP_STOREP_FNC	6873	6896	0
// OP_CALL0	6053	0	0
// OP_DONE	0	0	0
void () rally_changesurface = 
{
    local vector min;
    local vector max;
    
    if(self.speed == 0.000)
    {
        self.speed = 128.000;
    }
    
    min = '-1.000 -1.000 0.000' * self.speed;
    min_z = -24.000;
    max = '1.000 1.000 0.000' * self.speed;
    max_z = 16.000;
    setsize(self, min, max);
    self.touch = changesurface_touch;
    StartRallyItem();
};

// rally_changesurface_brush
// function begins at statement 8140, parm_start=6898
// OP_ADDRESS	28	146	6898
// OP_STOREP_FNC	6873	6898	0
// OP_ADDRESS	28	104	6899
// OP_STOREP_F	244	6899	0
// OP_STORE_V	28	4	0
// OP_LOAD_S	28	130	6900
// OP_STORE_V	6900	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	103	6901
// OP_STOREP_F	233	6901	0
// OP_ADDRESS	28	93	6902
// OP_STOREP_F	817	6902	0
// OP_ADDRESS	28	130	6903
// OP_STOREP_S	4128	6903	0
// OP_ADDRESS	28	129	6904
// OP_STOREP_S	6905	6904	0
// OP_DONE	0	0	0
void () rally_changesurface_brush = 
{
    self.touch = changesurface_touch;
    self.solid = SOLID_TRIGGER;
    setmodel(self, self.model);
    self.movetype = MOVETYPE_NONE;
    self.modelindex = 0.000;
    self.model = "";
    self.classname = "rally_changesurface";
};

// monster_hell_knight
// function begins at statement 8157, parm_start=6907
// OP_RETURN	0	0	0
// OP_DONE	0	0	0
void () monster_hell_knight = 
{
    return;
};

// monster_fish
// function begins at statement 8159, parm_start=6908
// OP_RETURN	0	0	0
// OP_DONE	0	0	0
void () monster_fish = 
{
    return;
};

// monster_tarbaby
// function begins at statement 8161, parm_start=6909
// OP_RETURN	0	0	0
// OP_DONE	0	0	0
void () monster_tarbaby = 
{
    return;
};

// monster_shalrath
// function begins at statement 8163, parm_start=6910
// OP_RETURN	0	0	0
// OP_DONE	0	0	0
void () monster_shalrath = 
{
    return;
};

// monster_enforcer
// function begins at statement 8165, parm_start=6911
// OP_RETURN	0	0	0
// OP_DONE	0	0	0
void () monster_enforcer = 
{
    return;
};

// CreditsThink
// function begins at statement 8167, parm_start=6912
// OP_LOAD_F	28	161	6912
// OP_EQ_F	6912	819	6913
// OP_IFNOT	6913	5	0
// OP_STORE_V	744	4	0
// OP_STORE_V	6914	7	0
// OP_CALL2	520	0	0
// OP_GOTO	39	0	0
// OP_LOAD_F	28	161	6915
// OP_EQ_F	6915	821	6916
// OP_IFNOT	6916	5	0
// OP_STORE_V	744	4	0
// OP_STORE_V	6917	7	0
// OP_CALL2	520	0	0
// OP_GOTO	32	0	0
// OP_LOAD_F	28	161	6918
// OP_EQ_F	6918	823	6919
// OP_IFNOT	6919	5	0
// OP_STORE_V	744	4	0
// OP_STORE_V	6920	7	0
// OP_CALL2	520	0	0
// OP_GOTO	25	0	0
// OP_LOAD_F	28	161	6921
// OP_EQ_F	6921	825	6922
// OP_IFNOT	6922	5	0
// OP_STORE_V	744	4	0
// OP_STORE_V	6923	7	0
// OP_CALL2	520	0	0
// OP_GOTO	18	0	0
// OP_LOAD_F	28	161	6924
// OP_EQ_F	6924	827	6925
// OP_IFNOT	6925	5	0
// OP_STORE_V	744	4	0
// OP_STORE_V	6926	7	0
// OP_CALL2	520	0	0
// OP_GOTO	11	0	0
// OP_LOAD_F	28	161	6927
// OP_EQ_F	6927	829	6928
// OP_IFNOT	6928	5	0
// OP_STORE_V	744	4	0
// OP_STORE_V	6929	7	0
// OP_CALL2	520	0	0
// OP_GOTO	4	0	0
// OP_STORE_V	744	4	0
// OP_STORE_V	6930	7	0
// OP_CALL2	520	0	0
// OP_LOAD_F	28	647	6931
// OP_ADD_F	6931	827	6932
// OP_LT	6932	31	6933
// OP_IFNOT	6933	7	0
// OP_ADDRESS	28	161	6934
// OP_LOAD_F	28	161	6935
// OP_ADD_F	6935	819	6936
// OP_STOREP_F	6936	6934	0
// OP_ADDRESS	28	647	6937
// OP_STOREP_F	31	6937	0
// OP_ADDRESS	28	150	6938
// OP_ADD_F	31	1182	6939
// OP_STOREP_F	6939	6938	0
// OP_DONE	0	0	0
void () CreditsThink = 
{
    if(self.ammo_cells == 1.000)
    {
        centerprint(server_client, "-----------------------\nQ u a k e   R a l l y\n-----------------------\n\n.. Coming soon ..");
    }
    else
    {
        if(self.ammo_cells == 2.000)
        {
            centerprint(server_client, ".. Programming and Concept ..\n\nRidah");
        }
        else
        {
            if(self.ammo_cells == 3.000)
            {
                centerprint(server_client, ".. Modelling and Artwork ..\n\nSumaleth\nB-MonEy\nRidah\nJason C Paterson");
            }
            else
            {
                if(self.ammo_cells == 4.000)
                {
                    centerprint(server_client, ".. Tracks ..\n\nRidah\nSumaleth\nSteve Towle\n[jD]");
                }
                else
                {
                    if(self.ammo_cells == 5.000)
                    {
                        centerprint(server_client, ".. Sounds ..\n\nRidah\nBig Daddy Kane");
                    }
                    else
                    {
                        if(self.ammo_cells == 6.000)
                        {
                            centerprint(server_client, ".. Special Thanks to ..\n\nDaKiller\nDru");
                        }
                        else
                        {
                            centerprint(server_client, "For the latest information on QuakeRally,\ndon't forget to check:\n\nhttp://www.frag.com/quakerally\n\nfor daily progress updates");
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
    }
    
    
    if((self.last_idle + 5.000) < time)
    {
        self.ammo_cells = self.ammo_cells + 1.000;
        self.last_idle = time;
    }
    
    self.nextthink = time + 0.500;
};

// StartDemoCredits
// function begins at statement 8226, parm_start=6940
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	6940	0
// OP_ADDRESS	6940	148	6941
// OP_STOREP_FNC	6911	6941	0
// OP_ADDRESS	6940	150	6942
// OP_ADD_F	31	819	6943
// OP_STOREP_F	6943	6942	0
// OP_ADDRESS	6940	647	6944
// OP_STOREP_F	31	6944	0
// OP_ADDRESS	6940	158	6945
// OP_STOREP_F	819	6945	0
// OP_ADDRESS	6940	161	6946
// OP_STOREP_F	819	6946	0
// OP_DONE	0	0	0
void () StartDemoCredits = 
{
    local entity e_credits;
    e_credits = spawn();
    e_credits.think = CreditsThink;
    e_credits.nextthink = time + 1.000;
    e_credits.last_idle = time;
    e_credits.ammo_shells = 1.000;
    e_credits.ammo_cells = 1.000;
};

// bounce_object
// function begins at statement 8240, parm_start=6948
// OP_LOAD_V	29	105	6951
// OP_LOAD_V	29	555	6954
// OP_MUL_VF	6954	3330	6957
// OP_SUB_V	6951	6957	6960
// OP_STORE_V	6960	6948	0
// OP_LOAD_V	28	105	6963
// OP_SUB_V	6963	6948	6966
// OP_STORE_V	6966	4	0
// OP_CALL1	471	0	0
// OP_GT	1	2223	6969
// OP_IFNOT	6969	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	113	6970
// OP_LOAD_V	29	113	6973
// OP_MUL_VF	6973	883	6976
// OP_STOREP_V	6976	6970	0
// OP_ADDRESS	28	116	6979
// OP_CALL0	466	0	0
// OP_MUL_F	1	1182	6980
// OP_ADD_F	6980	1182	6981
// OP_MUL_F	1135	6981	6982
// OP_STOREP_F	6982	6979	0
// OP_ADDRESS	28	122	6983
// OP_CALL0	466	0	0
// OP_MUL_F	1	1820	6984
// OP_STOREP_F	6984	6983	0
// OP_ADDRESS	28	123	6985
// OP_CALL0	466	0	0
// OP_MUL_F	1	1820	6986
// OP_STOREP_F	6986	6985	0
// OP_ADDRESS	28	124	6987
// OP_CALL0	466	0	0
// OP_MUL_F	1	1820	6988
// OP_STOREP_F	6988	6987	0
// OP_ADDRESS	28	103	6989
// OP_STOREP_F	241	6989	0
// OP_ADDRESS	28	104	6990
// OP_STOREP_F	243	6990	0
// OP_ADDRESS	28	182	6991
// OP_STOREP_F	817	6991	0
// OP_ADDRESS	28	148	6992
// OP_STOREP_FNC	6766	6992	0
// OP_ADDRESS	28	150	6993
// OP_ADD_F	31	821	6994
// OP_STOREP_F	6994	6993	0
// OP_DONE	0	0	0
void () bounce_object = 
{
    local vector pos;
    pos = other.origin - (other.veh_dir * 48.000);
    
    if((vlen(self.origin - pos)) > 64.000)
    {
        return;
    }
    
    self.velocity = other.velocity * 1.500;
    self.velocity_z = 250.000 * ((random() * 0.500) + 0.500);
    self.avelocity_x = random() * 500.000;
    self.avelocity_y = random() * 500.000;
    self.avelocity_z = random() * 500.000;
    self.movetype = MOVETYPE_BOUNCE;
    self.solid = SOLID_NOT;
    self.flags = 0.000;
    self.think = cone_think;
    self.nextthink = time + 2.000;
};

// stopsign_touch
// function begins at statement 8286, parm_start=6996
// OP_LOAD_S	29	129	6998
// OP_EQ_S	6998	880	6999
// OP_LOAD_S	29	129	7000
// OP_EQ_S	7000	1187	7001
// OP_OR	6999	7001	7002
// OP_NOT_F	7002	0	7003
// OP_IFNOT	7003	2	0
// OP_RETURN	0	0	0
// OP_LOAD_V	29	113	7004
// OP_EQ_V	7004	926	7007
// OP_IFNOT	7007	2	0
// OP_RETURN	0	0	0
// OP_LOAD_V	29	113	7008
// OP_STORE_V	7008	4	0
// OP_CALL1	471	0	0
// OP_DIV_F	778	821	7011
// OP_LT	1	7011	7012
// OP_IFNOT	7012	12	0
// OP_ADDRESS	28	117	7013
// OP_LOAD_V	29	113	7016
// OP_MUL_FV	1228	7016	7019
// OP_STORE_V	7019	4	0
// OP_CALL1	506	0	0
// OP_STOREP_V	1	7013	0
// OP_ADDRESS	28	118	7022
// OP_STOREP_F	7023	7022	0
// OP_ADDRESS	28	104	7024
// OP_STOREP_F	243	7024	0
// OP_RETURN	0	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	6805	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_STORE_ENT	28	6997	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	6997	105	7025
// OP_ADD_V	7025	7028	7031
// OP_STORE_V	7031	7	0
// OP_CALL2	462	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	7034	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	146	7035
// OP_STOREP_FNC	6765	7035	0
// OP_CALL0	6947	0	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	6996	0
// OP_ADDRESS	6996	129	7036
// OP_STOREP_S	7037	7036	0
// OP_ADDRESS	6996	117	7038
// OP_LOAD_V	6997	117	7041
// OP_STOREP_V	7041	7038	0
// OP_STORE_V	6996	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	1666	10	0
// OP_CALL3	464	0	0
// OP_STORE_V	6996	4	0
// OP_LOAD_V	28	105	7044
// OP_STORE_V	7044	7	0
// OP_CALL2	462	0	0
// OP_STORE_V	6996	4	0
// OP_STORE_V	7047	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	6996	117	7048
// OP_LOAD_V	28	117	7051
// OP_ADD_V	7051	7054	7057
// OP_STOREP_V	7057	7048	0
// OP_DONE	0	0	0
void () stopsign_touch = 
{
    local entity part;
    local entity oldself;
    
    if(!((other.classname == "player") || (other.classname == "rally_bot")))
    {
        return;
    }
    
    
    if(other.velocity == '0.000 0.000 0.000')
    {
        return;
    }
    
    
    if(vlen(other.velocity) < (MAX_SPEED / 2.000))
    {
        self.angles = vectoangles(-1.000 * other.velocity);
        self.angles_x = 90.000;
        self.solid = SOLID_NOT;
        return;
    }
    
    sound(self, CHAN_AUTO, "rally/process/htcone01.wav", 1.000, ATTN_STATIC);
    oldself = self;
    setorigin(self, oldself.origin + '0.000 0.000 32.000');
    setmodel(self, "models/stoptop.mdl");
    self.touch = cone_touch;
    bounce_object();
    part = spawn();
    part.classname = "rally_stoppost";
    part.angles = oldself.angles;
    setsize(part, '0.000 0.000 0.000', '0.000 0.000 8.000');
    setorigin(part, self.origin);
    setmodel(part, "models/stoppost.mdl");
    part.angles = self.angles + '90.000 0.000 0.000';
};

// rally_stopsign
// function begins at statement 8356, parm_start=7061
// OP_ADDRESS	28	146	7061
// OP_STOREP_FNC	6995	7061	0
// OP_STORE_V	28	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	1666	10	0
// OP_CALL3	464	0	0
// OP_ADDRESS	28	113	7062
// OP_STOREP_V	926	7062	0
// OP_STORE_V	28	4	0
// OP_STORE_V	7065	7	0
// OP_CALL2	463	0	0
// OP_CALL0	492	0	0
// OP_NOT_F	1	0	7066
// OP_IFNOT	7066	11	0
// OP_STORE_V	7067	4	0
// OP_CALL1	484	0	0
// OP_LOAD_V	28	105	7068
// OP_STORE_V	7068	4	0
// OP_CALL1	486	0	0
// OP_STORE_V	1	4	0
// OP_CALL1	484	0	0
// OP_STORE_V	888	4	0
// OP_CALL1	484	0	0
// OP_GOTO	6	0	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	7071
// OP_SUB_V	7071	1666	7074
// OP_STORE_V	7074	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	28	103	7077
// OP_STOREP_F	233	7077	0
// OP_ADDRESS	28	104	7078
// OP_STOREP_F	244	7078	0
// OP_ADDRESS	28	182	7079
// OP_STOREP_F	227	7079	0
// OP_DONE	0	0	0
void () rally_stopsign = 
{
    self.touch = stopsign_touch;
    setsize(self, '0.000 0.000 0.000', '0.000 0.000 8.000');
    self.velocity = '0.000 0.000 0.000';
    setmodel(self, "models/stopsign.mdl");
    if(!droptofloor())
    {
        dprint("Stopsign fell out of level at ");
        dprint(vtos(self.origin));
        dprint("\n");
    }
    else
    {
        setorigin(self, self.origin - '0.000 0.000 8.000');
    }
    
    self.movetype = MOVETYPE_NONE;
    self.solid = SOLID_TRIGGER;
    self.flags = FL_ITEM;
};

// rally_type
// function begins at statement 8392, parm_start=7081
// OP_RETURN	0	0	0
// OP_LOAD_F	28	644	7082
// OP_BITAND	7082	701	7083
// OP_IFNOT	7083	3	0
// OP_BITOR	723	701	7084
// OP_STORE_F	7084	723	0
// OP_LOAD_S	28	687	7085
// OP_EQ_S	7085	7086	7087
// OP_IFNOT	7087	7	0
// OP_LT	37	834	7088
// OP_GT	37	837	7089
// OP_OR	7088	7089	7090
// OP_IFNOT	7090	2	0
// OP_STORE_F	819	738	0
// OP_GOTO	32	0	0
// OP_LOAD_S	28	687	7091
// OP_EQ_S	7091	7092	7093
// OP_IFNOT	7093	7	0
// OP_LT	37	831	7094
// OP_GT	37	837	7095
// OP_OR	7094	7095	7096
// OP_IFNOT	7096	2	0
// OP_STORE_F	821	738	0
// OP_GOTO	23	0	0
// OP_LOAD_S	28	687	7097
// OP_EQ_S	7097	7098	7099
// OP_IFNOT	7099	3	0
// OP_STORE_F	823	738	0
// OP_GOTO	18	0	0
// OP_LOAD_S	28	687	7100
// OP_EQ_S	7100	7101	7102
// OP_IFNOT	7102	4	0
// OP_STORE_F	825	738	0
// OP_STORE_F	817	743	0
// OP_GOTO	12	0	0
// OP_LOAD_S	28	687	7103
// OP_EQ_S	7103	7104	7105
// OP_IFNOT	7105	3	0
// OP_STORE_F	827	738	0
// OP_GOTO	7	0	0
// OP_LOAD_S	28	687	7106
// OP_EQ_S	7106	7107	7108
// OP_IFNOT	7108	4	0
// OP_NE_F	37	837	7109
// OP_IFNOT	7109	2	0
// OP_STORE_F	829	738	0
// OP_GT	738	855	7110
// OP_IFNOT	7110	3	0
// OP_SUB_F	738	855	7111
// OP_STORE_F	7111	738	0
// OP_DONE	0	0	0
void () rally_type = 
{
    local entity type_ent;
    return;
    
    if(self.racing_flags & QR_NO_SIDEWAYS_ROLL)
    {
        global_racing_flags = global_racing_flags | QR_NO_SIDEWAYS_ROLL;
    }
    
    if(self.race_type == "racing")
    {
        
        if((teamplay < 12.000) || (teamplay > 13.000))
        {
            rally_type_index = 1.000;
        }
        
    }
    else
    {
        if(self.race_type == "racing_dm")
        {
            
            if((teamplay < 11.000) || (teamplay > 13.000))
            {
                rally_type_index = 2.000;
            }
            
        }
        else
        {
            if(self.race_type == "dm")
            {
                rally_type_index = 3.000;
            }
            else
            {
                if(self.race_type == "cult_kill")
                {
                    rally_type_index = 4.000;
                    cult_kills = 0.000;
                }
                else
                {
                    if(self.race_type == "gib_duke")
                    {
                        rally_type_index = 5.000;
                    }
                    else
                    {
                        
                        if(self.race_type == "last_man")
                        {
                            
                            if(teamplay != 13.000)
                            {
                                rally_type_index = 6.000;
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
    }
    
    
    if(rally_type_index > 10.000)
    {
        rally_type_index = rally_type_index - 10.000;
    }
    
};

// rally_observer_cam
// function begins at statement 8443, parm_start=7113
// OP_NE_E	741	30	7113
// OP_IFNOT	7113	8	0
// OP_ADDRESS	741	667	7114
// OP_STOREP_ENT	28	7114	0
// OP_ADDRESS	28	668	7115
// OP_STOREP_ENT	741	7115	0
// OP_ADDRESS	28	667	7116
// OP_STOREP_ENT	742	7116	0
// OP_GOTO	2	0	0
// OP_STORE_ENT	28	742	0
// OP_ADDRESS	742	668	7117
// OP_STOREP_ENT	28	7117	0
// OP_STORE_ENT	28	741	0
// OP_DONE	0	0	0
void () rally_observer_cam = 
{
    if(last_observer_cam != world)
    {
        last_observer_cam.ahead = self;
        self.behind = last_observer_cam;
        self.ahead = first_observer_cam;
    }
    else
    {
        first_observer_cam = self;
    }
    
    last_observer_cam = first_observer_cam.behind = self;
};

// GetObserverSpot
// function begins at statement 8457, parm_start=7119
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	7120	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	7119	0
// OP_EQ_E	7119	30	7121
// OP_IFNOT	7121	6	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	7122	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	7119	0
// OP_EQ_E	7119	30	7123
// OP_IFNOT	7123	6	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	7124	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	7119	0
// OP_RETURN	7119	0	0
// OP_DONE	0	0	0
entity () GetObserverSpot = 
{
    local entity spot;
    spot = find(world, classname, "rally_observer_cam");
    
    if(spot == world)
    {
        spot = find(world, classname, "info_deathmatch_start");
    }
    
    
    if(spot == world)
    {
        spot = find(world, classname, "info_player_start");
    }
    
    return spot;
};

// SetObserverSpot
// function begins at statement 8478, parm_start=7126
// OP_EQ_F	7127	817	7131
// OP_IFNOT	7131	5	0
// OP_ADDRESS	7126	625	7132
// OP_CALL0	7118	0	0
// OP_STOREP_ENT	1	7132	0
// OP_GOTO	37	0	0
// OP_LOAD_ENT	7126	625	7133
// OP_LOAD_S	7133	129	7134
// OP_NE_S	7134	7120	7135
// OP_IFNOT	7135	2	0
// OP_RETURN	0	0	0
// OP_GT	7127	817	7136
// OP_IFNOT	7136	15	0
// OP_LOAD_ENT	7126	625	7137
// OP_LOAD_ENT	7137	667	7138
// OP_NE_E	7138	30	7139
// OP_IFNOT	7139	6	0
// OP_ADDRESS	7126	625	7140
// OP_LOAD_ENT	7126	625	7141
// OP_LOAD_ENT	7141	667	7142
// OP_STOREP_ENT	7142	7140	0
// OP_GOTO	5	0	0
// OP_STORE_V	7126	4	0
// OP_STORE_V	7143	7	0
// OP_CALL2	483	0	0
// OP_RETURN	0	0	0
// OP_GOTO	16	0	0
// OP_LT	7127	817	7144
// OP_IFNOT	7144	14	0
// OP_LOAD_ENT	7126	625	7145
// OP_LOAD_ENT	7145	668	7146
// OP_NE_E	7146	30	7147
// OP_IFNOT	7147	6	0
// OP_ADDRESS	7126	625	7148
// OP_LOAD_ENT	7126	625	7149
// OP_LOAD_ENT	7149	668	7150
// OP_STOREP_ENT	7150	7148	0
// OP_GOTO	5	0	0
// OP_STORE_V	7126	4	0
// OP_STORE_V	7143	7	0
// OP_CALL2	483	0	0
// OP_RETURN	0	0	0
// OP_STORE_ENT	7126	81	0
// OP_STORE_V	352	4	0
// OP_STORE_V	745	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	352	4	0
// OP_LOAD_ENT	7126	625	7151
// OP_STORE_V	7151	7	0
// OP_CALL2	514	0	0
// OP_ADDRESS	7126	117	7152
// OP_ADDRESS	7126	175	7155
// OP_LOAD_ENT	7126	625	7158
// OP_LOAD_V	7158	117	7159
// OP_STOREP_V	7159	7155	0
// OP_STOREP_V	7159	7152	0
// OP_ADDRESS	7126	174	7162
// OP_STOREP_F	219	7162	0
// OP_DONE	0	0	0
void (entity plyr, float dir) SetObserverSpot = 
{
    local vector org;
    if(dir == 0.000)
    {
        plyr.chasecam = GetObserverSpot();
    }
    else
    {
        
        if(plyr.chasecam.classname != "rally_observer_cam")
        {
            return;
        }
        
        if(dir > 0.000)
        {
            if(plyr.chasecam.ahead != world)
            {
                plyr.chasecam = plyr.chasecam.ahead;
            }
            else
            {
                sprint(plyr, "Unable to change to that camera\n");
                return;
            }
            
        }
        else
        {
            
            if(dir < 0.000)
            {
                if(plyr.chasecam.behind != world)
                {
                    plyr.chasecam = plyr.chasecam.behind;
                }
                else
                {
                    sprint(plyr, "Unable to change to that camera\n");
                    return;
                }
                
            }
            
        }
        
    }
    
    msg_entity = plyr;
    WriteByte(MSG_ONE, SVC_SETVIEWPORT);
    WriteEntity(MSG_ONE, plyr.chasecam);
    plyr.angles = plyr.v_angle = plyr.chasecam.angles;
    plyr.fixangle = TRUE;
};

// rally_starter
// function begins at statement 8537, parm_start=7164
// OP_STORE_V	7164	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	926	10	0
// OP_CALL3	464	0	0
// OP_ADDRESS	28	113	7165
// OP_STOREP_V	926	7165	0
// OP_STORE_V	28	4	0
// OP_STORE_V	7164	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	132	7168
// OP_STOREP_F	823	7168	0
// OP_ADDRESS	28	103	7169
// OP_STOREP_F	233	7169	0
// OP_ADDRESS	28	104	7170
// OP_STOREP_F	243	7170	0
// OP_DONE	0	0	0
void () rally_starter = 
{
    precache_model("models/starter.mdl");
    setsize(self, '0.000 0.000 0.000', '0.000 0.000 0.000');
    self.velocity = '0.000 0.000 0.000';
    setmodel(self, "models/starter.mdl");
    self.skin = 3.000;
    self.movetype = MOVETYPE_NONE;
    self.solid = SOLID_NOT;
};

void () ammo_touch;
void () weapon_touch;
// RemoveAllWeaponItems
// function begins at statement 8555, parm_start=7174
// OP_STORE_V	30	4	0
// OP_CALL1	503	0	0
// OP_STORE_ENT	1	7174	0
// OP_NE_E	7174	30	7176
// OP_IFNOT	7176	19	0
// OP_LOAD_F	7174	154	7177
// OP_NE_F	7177	817	7178
// OP_LOAD_F	7174	182	7179
// OP_BITAND	7179	222	7180
// OP_NOT_F	7180	0	7181
// OP_AND	7178	7181	7182
// OP_IFNOT	7182	8	0
// OP_STORE_ENT	7174	7175	0
// OP_STORE_V	7174	4	0
// OP_CALL1	503	0	0
// OP_STORE_ENT	1	7174	0
// OP_STORE_V	7175	4	0
// OP_CALL1	474	0	0
// OP_GOTO	4	0	0
// OP_STORE_V	7174	4	0
// OP_CALL1	503	0	0
// OP_STORE_ENT	1	7174	0
// OP_GOTO	-19	0	0
// OP_DONE	0	0	0
void () RemoveAllWeaponItems = 
{
    local entity ent;
    local entity last;
    ent = nextent(world);
    
    while(ent != world)
    {
        if((ent.weapon != 0.000) && (!(ent.flags & FL_CLIENT)))
        {
            last = ent;
            ent = nextent(ent);
            remove(last);
        }
        else
        {
            ent = nextent(ent);
        }
        
    }
    
};

// CultIntroThink
// function begins at statement 8579, parm_start=7184
// OP_LOAD_ENT	28	201	7184
// OP_LOAD_F	7184	170	7185
// OP_LOAD_F	28	647	7186
// OP_SUB_F	31	834	7187
// OP_LT	7186	7187	7188
// OP_OR	7185	7188	7189
// OP_IFNOT	7189	4	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_RETURN	0	0	0
// OP_LOAD_ENT	28	201	7190
// OP_STORE_V	7190	4	0
// OP_STORE_V	7191	7	0
// OP_CALL2	520	0	0
// OP_ADDRESS	28	150	7192
// OP_ADD_F	31	2575	7193
// OP_STOREP_F	7193	7192	0
// OP_DONE	0	0	0
void () CultIntroThink = 
{
    
    if(self.owner.button0 || (self.last_idle < (time - 12.000)))
    {
        remove(self);
        return;
    }
    
    centerprint(self.owner, "- Boss Stage -\n\nYou have reached the final\nstage, Kill the Cult! There\nare 20 Duke cult members,\nyou have 5 cars to destroy them\nall. Should you fail, Duke power\nwill take over the world and\ndestroy the entire Quake\ncommunity. Get the picture?");
    self.nextthink = time + 0.300;
};

// WaterScreenThink
// function begins at statement 8597, parm_start=7195
// OP_ADDRESS	28	378	7196
// OP_LOAD_F	28	378	7197
// OP_SUB_F	7197	2611	7198
// OP_STOREP_F	7198	7196	0
// OP_LOAD_F	28	378	7199
// OP_LT	7199	817	7200
// OP_IFNOT	7200	8	0
// OP_LOAD_ENT	28	201	7201
// OP_STORE_V	7201	4	0
// OP_STORE_V	7202	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	378	7203
// OP_STORE_V	7203	4	0
// OP_CALL1	485	0	0
// OP_STORE_S	1	7195	0
// OP_LOAD_ENT	28	201	7204
// OP_STORE_V	7204	4	0
// OP_STORE_V	7205	7	0
// OP_CALL2	480	0	0
// OP_LOAD_ENT	28	201	7206
// OP_STORE_V	7206	4	0
// OP_STORE_V	7195	7	0
// OP_CALL2	480	0	0
// OP_LOAD_ENT	28	201	7207
// OP_STORE_V	7207	4	0
// OP_STORE_V	888	7	0
// OP_CALL2	480	0	0
// OP_ADDRESS	28	150	7208
// OP_ADD_F	31	819	7209
// OP_STOREP_F	7209	7208	0
// OP_DONE	0	0	0
void () WaterScreenThink = 
{
    local string str;
    self.speed = self.speed - 50.000;
    
    if(self.speed < 0.000)
    {
        stuffcmd(self.owner, "v_cshift 0 0 0 0\n");
        remove(self);
        return;
    }
    
    str = ftos(self.speed);
    stuffcmd(self.owner, "v_cshift 0 0 64 ");
    stuffcmd(self.owner, str);
    stuffcmd(self.owner, "\n");
    self.nextthink = time + 1.000;
};

// FindSightEnemy
// function begins at statement 8631, parm_start=7211
// OP_STORE_V	7214	4	0
// OP_CALL1	472	0	0
// OP_STORE_F	1	7223	0
// OP_EQ_F	738	825	7224
// OP_LOAD_S	28	129	7225
// OP_EQ_S	7225	880	7226
// OP_AND	7224	7226	7227
// OP_IFNOT	7227	12	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	7228	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	7221	0
// OP_NE_E	7221	30	7229
// OP_LOAD_F	7221	152	7230
// OP_GT	7230	817	7231
// OP_AND	7229	7231	7232
// OP_IFNOT	7232	2	0
// OP_RETURN	7221	0	0
// OP_STORE_V	7211	4	0
// OP_STORE_V	7217	7	0
// OP_CALL2	481	0	0
// OP_STORE_ENT	1	7221	0
// OP_NE_E	7221	30	7233
// OP_IFNOT	7233	47	0
// OP_EQ_S	7219	7234	7235
// OP_LOAD_S	7221	129	7236
// OP_EQ_S	7219	7236	7237
// OP_OR	7235	7237	7238
// OP_NE_E	7221	7220	7239
// OP_AND	7238	7239	7240
// OP_IFNOT	7240	37	0
// OP_LOAD_S	7221	129	7241
// OP_EQ_S	7241	880	7242
// OP_LOAD_S	7221	129	7243
// OP_EQ_S	7243	7244	7245
// OP_OR	7242	7245	7246
// OP_LOAD_S	7221	129	7247
// OP_EQ_S	7247	3609	7248
// OP_OR	7246	7248	7249
// OP_LOAD_S	7221	129	7250
// OP_EQ_S	7250	7228	7251
// OP_OR	7249	7251	7252
// OP_LOAD_F	7221	152	7253
// OP_GT	7253	817	7254
// OP_AND	7252	7254	7255
// OP_IFNOT	7255	22	0
// OP_LOAD_V	7221	105	7256
// OP_SUB_V	7256	7211	7259
// OP_STORE_V	7259	4	0
// OP_CALL1	472	0	0
// OP_STORE_F	1	7222	0
// OP_STORE_V	7223	4	0
// OP_STORE_V	7222	7	0
// OP_CALL2	860	0	0
// OP_STORE_V	1	4	0
// OP_CALL1	499	0	0
// OP_LE	1	7218	7262
// OP_IFNOT	7262	10	0
// OP_STORE_V	7211	4	0
// OP_LOAD_V	7221	105	7263
// OP_STORE_V	7263	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	30	13	0
// OP_CALL4	475	0	0
// OP_EQ_F	70	819	7266
// OP_IFNOT	7266	2	0
// OP_RETURN	7221	0	0
// OP_LOAD_ENT	7221	164	7267
// OP_STORE_ENT	7267	7221	0
// OP_GOTO	-47	0	0
// OP_RETURN	7221	0	0
// OP_DONE	0	0	0
entity (vector org, vector dir, float dist, float angle_range, string filter_class, entity ignore) FindSightEnemy = 
{
    local entity trav;
    local float trav_yaw;
    local float dir_yaw;
    dir_yaw = vectoyaw(dir);
    
    if((rally_type_index == 4.000) && (self.classname == "player"))
    {
        trav = find(world, classname, "monster_boss");
        
        if((trav != world) && (trav.health > 0.000))
        {
            return trav;
        }
        
    }
    
    trav = findradius(org, dist);
    
    while(trav != world)
    {
        
        if(((filter_class == "all") || (filter_class == trav.classname)) && (trav != ignore))
        {
            
            if(((((trav.classname == "player") || (trav.classname == "rally_kangaroo")) || (trav.classname == "rally_dude")) || (trav.classname == "monster_boss")) && (trav.health > 0.000))
            {
                trav_yaw = vectoyaw(trav.origin - org);
                
                if(fabs(angle_diff(dir_yaw, trav_yaw)) <= angle_range)
                {
                    traceline(org, trav.origin, TRUE, world);
                    
                    if(trace_fraction == 1.000)
                    {
                        return trav;
                    }
                    
                }
                
            }
            
        }
        
        trav = trav.chain;
    }
    
    return trav;
};

void () T_MissileTouch;
// RocketSeek
// function begins at statement 8704, parm_start=7270
// OP_LOAD_ENT	28	181	7283
// OP_LOAD_F	7283	152	7284
// OP_LE	7284	817	7285
// OP_IFNOT	7285	4	0
// OP_ADDRESS	28	181	7286
// OP_STOREP_ENT	30	7286	0
// OP_RETURN	0	0	0
// OP_LOAD_ENT	28	181	7287
// OP_EQ_E	7287	30	7288
// OP_IFNOT	7288	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	647	7289
// OP_SUB_F	31	827	7290
// OP_LT	7289	7290	7291
// OP_LOAD_ENT	28	201	7292
// OP_LOAD_S	7292	129	7293
// OP_NE_S	7293	7228	7294
// OP_LOAD_F	28	647	7295
// OP_SUB_F	31	855	7296
// OP_LT	7295	7296	7297
// OP_OR	7294	7297	7298
// OP_AND	7291	7298	7299
// OP_IFNOT	7299	4	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_RETURN	0	0	0
// OP_LOAD_ENT	28	181	7300
// OP_LOAD_S	7300	129	7301
// OP_EQ_S	7301	880	7302
// OP_LOAD_ENT	28	181	7303
// OP_LOAD_V	7303	113	7304
// OP_EQ_V	7304	926	7307
// OP_AND	7302	7307	7308
// OP_IFNOT	7308	2	0
// OP_RETURN	0	0	0
// OP_LOAD_ENT	28	181	7309
// OP_LOAD_S	7309	129	7310
// OP_EQ_S	7310	3609	7311
// OP_LOAD_ENT	28	181	7312
// OP_LOAD_S	7312	129	7313
// OP_EQ_S	7313	7244	7314
// OP_OR	7311	7314	7315
// OP_LOAD_V	28	105	7316
// OP_LOAD_ENT	28	181	7319
// OP_LOAD_V	7319	105	7320
// OP_SUB_V	7316	7320	7323
// OP_STORE_V	7323	4	0
// OP_CALL1	471	0	0
// OP_LT	1	2223	7326
// OP_AND	7315	7326	7327
// OP_IFNOT	7327	5	0
// OP_LOAD_ENT	28	181	7328
// OP_STORE_ENT	7328	29	0
// OP_CALL0	7268	0	0
// OP_RETURN	0	0	0
// OP_LOAD_V	28	113	7329
// OP_STORE_V	7329	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	7270	0
// OP_LOAD_ENT	28	181	7332
// OP_LOAD_V	7332	105	7333
// OP_STORE_V	7333	7280	0
// OP_LOAD_ENT	28	181	7336
// OP_LOAD_S	7336	129	7337
// OP_EQ_S	7337	7228	7338
// OP_IFNOT	7338	3	0
// OP_ADD_V	7280	2284	7339
// OP_STORE_V	7339	7280	0
// OP_LOAD_V	28	105	7342
// OP_SUB_V	7280	7342	7345
// OP_STORE_V	7345	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	7271	0
// OP_LOAD_V	28	113	7348
// OP_STORE_V	7348	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	7277	0
// OP_ADDRESS	28	113	7351
// OP_MUL_VF	7277	823	7354
// OP_ADD_V	7271	7354	7357
// OP_STORE_V	7357	4	0
// OP_CALL1	468	0	0
// OP_MUL_VF	1	7270	7360
// OP_STOREP_V	7360	7351	0
// OP_LOAD_V	28	113	7363
// OP_STORE_V	7363	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	7274	0
// OP_ADDRESS	28	117	7366
// OP_STORE_V	7274	4	0
// OP_CALL1	506	0	0
// OP_STOREP_V	1	7366	0
// OP_ADDRESS	28	150	7369
// OP_ADD_F	31	1988	7370
// OP_STOREP_F	7370	7369	0
// OP_DONE	0	0	0
void () RocketSeek = 
{
    local float current_speed;
    local vector target_vector;
    local vector vel;
    local vector unit_velocity;
    local vector target_org;
    
    if(self.enemy.health <= 0.000)
    {
        self.enemy = world;
        return;
    }
    
    
    if(self.enemy == world)
    {
        return;
    }
    
    
    if((self.last_idle < (time - 5.000)) && ((self.owner.classname != "monster_boss") || (self.last_idle < (time - 10.000))))
    {
        remove(self);
        return;
    }
    
    
    if((self.enemy.classname == "player") && (self.enemy.velocity == '0.000 0.000 0.000'))
    {
        return;
    }
    
    
    if(((self.enemy.classname == "rally_dude") || (self.enemy.classname == "rally_kangaroo")) && ((vlen(self.origin - self.enemy.origin)) < 64.000))
    {
        other = self.enemy;
        T_MissileTouch();
        return;
    }
    
    current_speed = vlen(self.velocity);
    target_org = self.enemy.origin;
    
    if(self.enemy.classname == "monster_boss")
    {
        target_org = target_org + '0.000 0.000 64.000';
    }
    
    target_vector = normalize(target_org - self.origin);
    unit_velocity = normalize(self.velocity);
    self.velocity = (normalize(target_vector + (unit_velocity * 3.000))) * current_speed;
    vel = normalize(self.velocity);
    self.angles = vectoangles(vel);
    self.nextthink = time + 0.050;
};

// SUB_Null
// function begins at statement 8800, parm_start=7371
// OP_DONE	0	0	0
void () SUB_Null = 
{
};

// SUB_Remove
// function begins at statement 8801, parm_start=7371
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_DONE	0	0	0
void () SUB_Remove = 
{
    remove(self);
};

// SetMovedir
// function begins at statement 8804, parm_start=7372
// OP_LOAD_V	28	117	7372
// OP_EQ_V	7372	7375	7378
// OP_IFNOT	7378	4	0
// OP_ADDRESS	28	202	7379
// OP_STOREP_V	1215	7379	0
// OP_GOTO	12	0	0
// OP_LOAD_V	28	117	7382
// OP_EQ_V	7382	7385	7388
// OP_IFNOT	7388	4	0
// OP_ADDRESS	28	202	7389
// OP_STOREP_V	7392	7389	0
// OP_GOTO	6	0	0
// OP_LOAD_V	28	117	7395
// OP_STORE_V	7395	4	0
// OP_CALL1	461	0	0
// OP_ADDRESS	28	202	7398
// OP_STOREP_V	59	7398	0
// OP_ADDRESS	28	117	7401
// OP_STOREP_V	926	7401	0
// OP_DONE	0	0	0
void () SetMovedir = 
{
    if(self.angles == '0.000 -1.000 0.000')
    {
        self.movedir = '0.000 0.000 1.000';
    }
    else
    {
        if(self.angles == '0.000 -2.000 0.000')
        {
            self.movedir = '0.000 0.000 -1.000';
        }
        else
        {
            makevectors(self.angles);
            self.movedir = v_forward;
        }
        
    }
    
    self.angles = '0.000 0.000 0.000';
};

// InitTrigger
// function begins at statement 8824, parm_start=7405
// OP_LOAD_V	28	117	7405
// OP_NE_V	7405	926	7408
// OP_IFNOT	7408	2	0
// OP_CALL0	7371	0	0
// OP_ADDRESS	28	104	7409
// OP_STOREP_F	244	7409	0
// OP_STORE_V	28	4	0
// OP_LOAD_S	28	130	7410
// OP_STORE_V	7410	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	103	7411
// OP_STOREP_F	233	7411	0
// OP_ADDRESS	28	93	7412
// OP_STOREP_F	817	7412	0
// OP_ADDRESS	28	130	7413
// OP_STOREP_S	4128	7413	0
// OP_DONE	0	0	0
void () InitTrigger = 
{
    
    if(self.angles != '0.000 0.000 0.000')
    {
        SetMovedir();
    }
    
    self.solid = SOLID_TRIGGER;
    setmodel(self, self.model);
    self.movetype = MOVETYPE_NONE;
    self.modelindex = 0.000;
    self.model = "";
};

// SUB_CalcMoveEnt
// function begins at statement 8841, parm_start=7414
// OP_STORE_ENT	28	7420	0
// OP_STORE_ENT	7414	28	0
// OP_STORE_V	7415	4	0
// OP_STORE_V	7418	7	0
// OP_STORE_V	7419	10	0
// OP_CALL3	526	0	0
// OP_STORE_ENT	7420	28	0
// OP_DONE	0	0	0
void (entity ent, vector tdest, float tspeed, void() func) SUB_CalcMoveEnt = 
{
    local entity stemp;
    stemp = self;
    self = ent;
    SUB_CalcMove(tdest, tspeed, func);
    self = stemp;
};

// SUB_CalcMove
// function begins at statement 8849, parm_start=7421
// OP_NOT_F	7424	0	7431
// OP_IFNOT	7431	3	0
// OP_STORE_V	7432	4	0
// OP_CALL1	470	0	0
// OP_ADDRESS	28	436	7433
// OP_STOREP_FNC	7425	7433	0
// OP_ADDRESS	28	437	7434
// OP_STOREP_V	7421	7434	0
// OP_ADDRESS	28	148	7437
// OP_STOREP_FNC	529	7437	0
// OP_LOAD_V	28	105	7438
// OP_EQ_V	7421	7438	7441
// OP_IFNOT	7441	8	0
// OP_ADDRESS	28	113	7442
// OP_STOREP_V	926	7442	0
// OP_ADDRESS	28	150	7445
// OP_LOAD_F	28	102	7446
// OP_ADD_F	7446	2869	7447
// OP_STOREP_F	7447	7445	0
// OP_RETURN	0	0	0
// OP_LOAD_V	28	105	7448
// OP_SUB_V	7421	7448	7451
// OP_STORE_V	7451	7426	0
// OP_STORE_V	7426	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	7429	0
// OP_DIV_F	7429	7424	7454
// OP_STORE_F	7454	7430	0
// OP_LT	7430	2869	7455
// OP_IFNOT	7455	8	0
// OP_ADDRESS	28	113	7456
// OP_STOREP_V	926	7456	0
// OP_ADDRESS	28	150	7459
// OP_LOAD_F	28	102	7460
// OP_ADD_F	7460	2869	7461
// OP_STOREP_F	7461	7459	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	150	7462
// OP_LOAD_F	28	102	7463
// OP_ADD_F	7463	7430	7464
// OP_STOREP_F	7464	7462	0
// OP_ADDRESS	28	113	7465
// OP_DIV_F	819	7430	7468
// OP_MUL_VF	7426	7468	7469
// OP_STOREP_V	7469	7465	0
// OP_DONE	0	0	0
void (vector tdest, float tspeed, void() func) SUB_CalcMove = 
{
    local vector vdestdelta;
    local float len;
    local float traveltime;
    
    if(!tspeed)
    {
        objerror("No speed is defined!");
    }
    
    self.think1 = func;
    self.finaldest = tdest;
    self.think = SUB_CalcMoveDone;
    
    if(tdest == self.origin)
    {
        self.velocity = '0.000 0.000 0.000';
        self.nextthink = self.ltime + 0.100;
        return;
    }
    
    vdestdelta = tdest - self.origin;
    len = vlen(vdestdelta);
    traveltime = len / tspeed;
    
    if(traveltime < 0.100)
    {
        self.velocity = '0.000 0.000 0.000';
        self.nextthink = self.ltime + 0.100;
        return;
    }
    
    self.nextthink = self.ltime + traveltime;
    self.velocity = vdestdelta * (1.000 / traveltime);
};

// SUB_CalcMoveDone
// function begins at statement 8895, parm_start=7472
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	437	7472
// OP_STORE_V	7472	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	28	113	7475
// OP_STOREP_V	926	7475	0
// OP_ADDRESS	28	150	7478
// OP_STOREP_F	1228	7478	0
// OP_LOAD_FNC	28	436	7479
// OP_IFNOT	7479	3	0
// OP_LOAD_FNC	28	436	7480
// OP_CALL0	7480	0	0
// OP_DONE	0	0	0
void () SUB_CalcMoveDone = 
{
    setorigin(self, self.finaldest);
    self.velocity = '0.000 0.000 0.000';
    self.nextthink = -1.000;
    
    if(self.think1)
    {
        self.think1();
    }
    
};

// SUB_CalcAngleMoveEnt
// function begins at statement 8908, parm_start=7482
// OP_STORE_ENT	28	7488	0
// OP_STORE_ENT	7482	28	0
// OP_STORE_V	7483	4	0
// OP_STORE_V	7486	7	0
// OP_STORE_V	7487	10	0
// OP_CALL3	528	0	0
// OP_STORE_ENT	7488	28	0
// OP_DONE	0	0	0
void (entity ent, vector destangle, float tspeed, void() func) SUB_CalcAngleMoveEnt = 
{
    local entity stemp;
    stemp = self;
    self = ent;
    SUB_CalcAngleMove(destangle, tspeed, func);
    self = stemp;
};

// SUB_CalcAngleMove
// function begins at statement 8916, parm_start=7489
// OP_NOT_F	7492	0	7499
// OP_IFNOT	7499	3	0
// OP_STORE_V	7432	4	0
// OP_CALL1	470	0	0
// OP_LOAD_V	28	117	7500
// OP_SUB_V	7489	7500	7503
// OP_STORE_V	7503	7494	0
// OP_STORE_V	7494	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	7497	0
// OP_DIV_F	7497	7492	7506
// OP_STORE_F	7506	7498	0
// OP_ADDRESS	28	150	7507
// OP_LOAD_F	28	102	7508
// OP_ADD_F	7508	7498	7509
// OP_STOREP_F	7509	7507	0
// OP_ADDRESS	28	121	7510
// OP_DIV_F	819	7498	7513
// OP_MUL_VF	7494	7513	7514
// OP_STOREP_V	7514	7510	0
// OP_ADDRESS	28	436	7517
// OP_STOREP_FNC	7493	7517	0
// OP_ADDRESS	28	441	7518
// OP_STOREP_V	7489	7518	0
// OP_ADDRESS	28	148	7521
// OP_STOREP_FNC	530	7521	0
// OP_DONE	0	0	0
void (vector destangle, float tspeed, void() func) SUB_CalcAngleMove = 
{
    local vector destdelta;
    local float len;
    local float traveltime;
    
    if(!tspeed)
    {
        objerror("No speed is defined!");
    }
    
    destdelta = destangle - self.angles;
    len = vlen(destdelta);
    traveltime = len / tspeed;
    self.nextthink = self.ltime + traveltime;
    self.avelocity = destdelta * (1.000 / traveltime);
    self.think1 = func;
    self.finalangle = destangle;
    self.think = SUB_CalcAngleMoveDone;
};

// SUB_CalcAngleMoveDone
// function begins at statement 8943, parm_start=7522
// OP_ADDRESS	28	117	7522
// OP_LOAD_V	28	441	7525
// OP_STOREP_V	7525	7522	0
// OP_ADDRESS	28	121	7528
// OP_STOREP_V	926	7528	0
// OP_ADDRESS	28	150	7531
// OP_STOREP_F	1228	7531	0
// OP_LOAD_FNC	28	436	7532
// OP_IFNOT	7532	3	0
// OP_LOAD_FNC	28	436	7533
// OP_CALL0	7533	0	0
// OP_DONE	0	0	0
void () SUB_CalcAngleMoveDone = 
{
    self.angles = self.finalangle;
    self.avelocity = '0.000 0.000 0.000';
    self.nextthink = -1.000;
    
    if(self.think1)
    {
        self.think1();
    }
    
};

// DelayThink
// function begins at statement 8955, parm_start=7535
// OP_LOAD_ENT	28	181	7535
// OP_STORE_ENT	7535	360	0
// OP_CALL0	532	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_DONE	0	0	0
void () DelayThink = 
{
    activator = self.enemy;
    SUB_UseTargets();
    remove(self);
};

// SUB_UseTargets
// function begins at statement 8961, parm_start=7536
// OP_LOAD_F	28	428	7540
// OP_IFNOT	7540	23	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	7536	0
// OP_ADDRESS	7536	129	7541
// OP_STOREP_S	7542	7541	0
// OP_ADDRESS	7536	150	7543
// OP_LOAD_F	28	428	7544
// OP_ADD_F	31	7544	7545
// OP_STOREP_F	7545	7543	0
// OP_ADDRESS	7536	148	7546
// OP_STOREP_FNC	7534	7546	0
// OP_ADDRESS	7536	181	7547
// OP_STOREP_ENT	360	7547	0
// OP_ADDRESS	7536	206	7548
// OP_LOAD_S	28	206	7549
// OP_STOREP_S	7549	7548	0
// OP_ADDRESS	7536	367	7550
// OP_LOAD_S	28	367	7551
// OP_STOREP_S	7551	7550	0
// OP_ADDRESS	7536	196	7552
// OP_LOAD_S	28	196	7553
// OP_STOREP_S	7553	7552	0
// OP_RETURN	0	0	0
// OP_LOAD_S	360	129	7554
// OP_EQ_S	7554	880	7555
// OP_LOAD_S	28	206	7556
// OP_NE_S	7556	4128	7557
// OP_AND	7555	7557	7558
// OP_IFNOT	7558	14	0
// OP_STORE_V	360	4	0
// OP_LOAD_S	28	206	7559
// OP_STORE_V	7559	7	0
// OP_CALL2	520	0	0
// OP_LOAD_S	28	208	7560
// OP_NOT_S	7560	0	7561
// OP_IFNOT	7561	7	0
// OP_STORE_V	360	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	7562	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_LOAD_S	28	367	7563
// OP_IFNOT	7563	14	0
// OP_STORE_ENT	30	7536	0
// OP_STORE_V	7536	4	0
// OP_STORE_V	197	7	0
// OP_LOAD_S	28	367	7564
// OP_STORE_V	7564	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	7536	0
// OP_NOT_ENT	7536	0	7565
// OP_IFNOT	7565	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	7536	4	0
// OP_CALL1	474	0	0
// OP_IF	819	-11	0
// OP_LOAD_S	28	196	7566
// OP_IFNOT	7566	27	0
// OP_STORE_ENT	360	7539	0
// OP_STORE_ENT	30	7536	0
// OP_STORE_V	7536	4	0
// OP_STORE_V	197	7	0
// OP_LOAD_S	28	196	7567
// OP_STORE_V	7567	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	7536	0
// OP_NOT_ENT	7536	0	7568
// OP_IFNOT	7568	2	0
// OP_RETURN	0	0	0
// OP_STORE_ENT	28	7537	0
// OP_STORE_ENT	29	7538	0
// OP_STORE_ENT	7536	28	0
// OP_STORE_ENT	7537	29	0
// OP_LOAD_FNC	28	147	7569
// OP_NE_FNC	7569	531	7570
// OP_IFNOT	7570	5	0
// OP_LOAD_FNC	28	147	7571
// OP_IFNOT	7571	3	0
// OP_LOAD_FNC	28	147	7572
// OP_CALL0	7572	0	0
// OP_STORE_ENT	7537	28	0
// OP_STORE_ENT	7538	29	0
// OP_STORE_ENT	7539	360	0
// OP_IF	819	-23	0
// OP_DONE	0	0	0
void () SUB_UseTargets = 
{
    local entity t;
    local entity stemp;
    local entity otemp;
    local entity act;
    
    if(self.delay)
    {
        t = spawn();
        t.classname = "DelayedUse";
        t.nextthink = time + self.delay;
        t.think = DelayThink;
        t.enemy = activator;
        t.message = self.message;
        t.killtarget = self.killtarget;
        t.target = self.target;
        return;
    }
    
    
    if((activator.classname == "player") && (self.message != ""))
    {
        centerprint(activator, self.message);
        
        if(!self.noise)
        {
            sound(activator, CHAN_VOICE, "misc/talk.wav", 1.000, ATTN_NORM);
        }
        
    }
    
    
    if(self.killtarget)
    {
        t = world;
        do
        {
            t = find(t, targetname, self.killtarget);
            
            if(!t)
            {
                return;
            }
            
            remove(t);
        } while (1.000);
    }
    
    
    if(self.target)
    {
        act = activator;
        t = world;
        do
        {
            t = find(t, targetname, self.target);
            
            if(!t)
            {
                return;
            }
            
            stemp = self;
            otemp = other;
            self = t;
            other = stemp;
            
            if(self.use != SUB_Null)
            {
                
                if(self.use)
                {
                    self.use();
                }
                
            }
            
            self = stemp;
            other = otemp;
            activator = act;
        } while (1.000);
    }
    
};

// SUB_AttackFinished
// function begins at statement 9048, parm_start=7574
// OP_ADDRESS	28	435	7575
// OP_STOREP_F	817	7575	0
// OP_NE_F	363	823	7576
// OP_IFNOT	7576	4	0
// OP_ADDRESS	28	387	7577
// OP_ADD_F	31	7574	7578
// OP_STOREP_F	7578	7577	0
// OP_DONE	0	0	0
void (float normal) SUB_AttackFinished = 
{
    self.cnt = 0.000;
    
    if(skill != 3.000)
    {
        self.attack_finished = time + normal;
    }
    
};

float (entity targ) visible;
// SUB_CheckRefire
// function begins at statement 9056, parm_start=7581
// OP_NE_F	363	823	7582
// OP_IFNOT	7582	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	435	7583
// OP_EQ_F	7583	819	7584
// OP_IFNOT	7584	2	0
// OP_RETURN	0	0	0
// OP_LOAD_ENT	28	181	7585
// OP_STORE_V	7585	4	0
// OP_CALL1	7579	0	0
// OP_NOT_F	1	0	7586
// OP_IFNOT	7586	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	435	7587
// OP_STOREP_F	819	7587	0
// OP_ADDRESS	28	148	7588
// OP_STOREP_FNC	7581	7588	0
// OP_DONE	0	0	0
void (void() thinkst) SUB_CheckRefire = 
{
    
    if(skill != 3.000)
    {
        return;
    }
    
    
    if(self.cnt == 1.000)
    {
        return;
    }
    
    
    if(!visible(self.enemy))
    {
        return;
    }
    
    self.cnt = 1.000;
    self.think = thinkst;
};

void (vector dest3) ChooseTurn;
void () ai_face;
float enemy_vis;
float enemy_infront;
float enemy_range;
float enemy_yaw;
// knight_attack
// function begins at statement 9074, parm_start=7596
// OP_LOAD_ENT	28	181	7597
// OP_LOAD_V	7597	105	7598
// OP_LOAD_ENT	28	181	7601
// OP_LOAD_V	7601	166	7602
// OP_ADD_V	7598	7602	7605
// OP_LOAD_V	28	105	7608
// OP_LOAD_V	28	166	7611
// OP_ADD_V	7608	7611	7614
// OP_SUB_V	7605	7614	7617
// OP_STORE_V	7617	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	7596	0
// OP_DONE	0	0	0
void () knight_attack = 
{
    local float len;
    len = vlen((self.enemy.origin + self.enemy.view_ofs) - (self.origin + self.view_ofs));
};

// CheckAttack
// function begins at statement 9087, parm_start=7621
// OP_DONE	0	0	0
void () CheckAttack = 
{
    local vector spot1;
    local vector spot2;
    local entity targ;
    local float chance;
};

// ai_face
// function begins at statement 9088, parm_start=7629
// OP_ADDRESS	28	191	7629
// OP_LOAD_ENT	28	181	7630
// OP_LOAD_V	7630	105	7631
// OP_LOAD_V	28	105	7634
// OP_SUB_V	7631	7634	7637
// OP_STORE_V	7637	4	0
// OP_CALL1	472	0	0
// OP_STOREP_F	1	7629	0
// OP_CALL0	505	0	0
// OP_DONE	0	0	0
void () ai_face = 
{
    self.ideal_yaw = vectoyaw(self.enemy.origin - self.origin);
    ChangeYaw();
};

float (entity targ) infront;
float (entity targ) range;
// ai_charge
// function begins at statement 9098, parm_start=7643
// OP_CALL0	7590	0	0
// OP_STORE_V	7643	4	0
// OP_CALL1	515	0	0
// OP_DONE	0	0	0
void (float d) ai_charge = 
{
    ai_face();
    movetogoal(d);
};

// ai_charge_side
// function begins at statement 9102, parm_start=7645
// OP_DONE	0	0	0
void () ai_charge_side = 
{
    local vector dtemp;
    local float heading;
};

// ai_melee
// function begins at statement 9103, parm_start=7650
// OP_DONE	0	0	0
void () ai_melee = 
{
    local vector delta;
    local float ldmg;
};

// ai_melee_side
// function begins at statement 9104, parm_start=7655
// OP_DONE	0	0	0
void () ai_melee_side = 
{
    local vector delta;
    local float ldmg;
};

// SoldierCheckAttack
// function begins at statement 9105, parm_start=7660
// OP_DONE	0	0	0
void () SoldierCheckAttack = 
{
    local vector spot1;
    local vector spot2;
    local entity targ;
    local float chance;
};

// ShamCheckAttack
// function begins at statement 9106, parm_start=7669
// OP_EQ_F	7593	248	7677
// OP_IFNOT	7677	9	0
// OP_LOAD_ENT	28	181	7678
// OP_STORE_V	7678	4	0
// OP_STORE_V	28	7	0
// OP_CALL2	536	0	0
// OP_IFNOT	1	4	0
// OP_ADDRESS	28	381	7679
// OP_STOREP_F	384	7679	0
// OP_RETURN	219	0	0
// OP_LOAD_F	28	387	7680
// OP_LT	31	7680	7681
// OP_IFNOT	7681	2	0
// OP_RETURN	218	0	0
// OP_NOT_F	7591	0	7682
// OP_IFNOT	7682	2	0
// OP_RETURN	218	0	0
// OP_LOAD_ENT	28	181	7683
// OP_STORE_ENT	7683	7675	0
// OP_LOAD_V	28	105	7684
// OP_LOAD_V	28	166	7687
// OP_ADD_V	7684	7687	7690
// OP_STORE_V	7690	7669	0
// OP_LOAD_V	7675	105	7693
// OP_LOAD_V	7675	166	7696
// OP_ADD_V	7693	7696	7699
// OP_STORE_V	7699	7672	0
// OP_SUB_V	7669	7672	7702
// OP_STORE_V	7702	4	0
// OP_CALL1	471	0	0
// OP_GT	1	2127	7705
// OP_IFNOT	7705	2	0
// OP_RETURN	218	0	0
// OP_STORE_V	7669	4	0
// OP_STORE_V	7672	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_AND	79	80	7706
// OP_IFNOT	7706	2	0
// OP_RETURN	218	0	0
// OP_NE_E	78	7675	7707
// OP_IFNOT	7707	2	0
// OP_RETURN	218	0	0
// OP_EQ_F	7593	251	7708
// OP_IFNOT	7708	2	0
// OP_RETURN	218	0	0
// OP_ADDRESS	28	381	7709
// OP_STOREP_F	385	7709	0
// OP_CALL0	466	0	0
// OP_MUL_F	821	1	7710
// OP_ADD_F	821	7710	7711
// OP_STORE_V	7711	4	0
// OP_CALL1	7573	0	0
// OP_RETURN	219	0	0
// OP_DONE	0	0	0
float () ShamCheckAttack = 
{
    local vector spot1;
    local vector spot2;
    local entity targ;
    local float chance;
    
    if(enemy_range == RANGE_MELEE)
    {
        
        if(CanDamage(self.enemy, self))
        {
            self.attack_state = AS_MELEE;
            return TRUE;
        }
        
    }
    
    
    if(time < self.attack_finished)
    {
        return FALSE;
    }
    
    
    if(!enemy_vis)
    {
        return FALSE;
    }
    
    targ = self.enemy;
    spot1 = self.origin + self.view_ofs;
    spot2 = targ.origin + targ.view_ofs;
    
    if((vlen(spot1 - spot2)) > 600.000)
    {
        return FALSE;
    }
    
    traceline(spot1, spot2, FALSE, self);
    
    if(trace_inopen && trace_inwater)
    {
        return FALSE;
    }
    
    
    if(trace_ent != targ)
    {
        return FALSE;
    }
    
    
    if(enemy_range == RANGE_FAR)
    {
        return FALSE;
    }
    
    self.attack_state = AS_MISSILE;
    SUB_AttackFinished(2.000 + (2.000 * random()));
    return TRUE;
};

// OgreCheckAttack
// function begins at statement 9162, parm_start=7713
// OP_EQ_F	7593	248	7721
// OP_IFNOT	7721	9	0
// OP_LOAD_ENT	28	181	7722
// OP_STORE_V	7722	4	0
// OP_STORE_V	28	7	0
// OP_CALL2	536	0	0
// OP_IFNOT	1	4	0
// OP_ADDRESS	28	381	7723
// OP_STOREP_F	384	7723	0
// OP_RETURN	219	0	0
// OP_LOAD_F	28	387	7724
// OP_LT	31	7724	7725
// OP_IFNOT	7725	2	0
// OP_RETURN	218	0	0
// OP_NOT_F	7591	0	7726
// OP_IFNOT	7726	2	0
// OP_RETURN	218	0	0
// OP_LOAD_ENT	28	181	7727
// OP_STORE_ENT	7727	7719	0
// OP_LOAD_V	28	105	7728
// OP_LOAD_V	28	166	7731
// OP_ADD_V	7728	7731	7734
// OP_STORE_V	7734	7713	0
// OP_LOAD_V	7719	105	7737
// OP_LOAD_V	7719	166	7740
// OP_ADD_V	7737	7740	7743
// OP_STORE_V	7743	7716	0
// OP_STORE_V	7713	4	0
// OP_STORE_V	7716	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_AND	79	80	7746
// OP_IFNOT	7746	2	0
// OP_RETURN	218	0	0
// OP_NE_E	78	7719	7747
// OP_IFNOT	7747	2	0
// OP_RETURN	218	0	0
// OP_LOAD_F	28	387	7748
// OP_LT	31	7748	7749
// OP_IFNOT	7749	2	0
// OP_RETURN	218	0	0
// OP_EQ_F	7593	251	7750
// OP_IFNOT	7750	3	0
// OP_RETURN	218	0	0
// OP_GOTO	10	0	0
// OP_EQ_F	7593	249	7751
// OP_IFNOT	7751	3	0
// OP_STORE_F	2869	7720	0
// OP_GOTO	6	0	0
// OP_EQ_F	7593	250	7752
// OP_IFNOT	7752	3	0
// OP_STORE_F	1988	7720	0
// OP_GOTO	2	0	0
// OP_STORE_F	817	7720	0
// OP_ADDRESS	28	381	7753
// OP_STOREP_F	385	7753	0
// OP_CALL0	466	0	0
// OP_MUL_F	821	1	7754
// OP_ADD_F	819	7754	7755
// OP_STORE_V	7755	4	0
// OP_CALL1	7573	0	0
// OP_RETURN	219	0	0
// OP_DONE	0	0	0
float () OgreCheckAttack = 
{
    local vector spot1;
    local vector spot2;
    local entity targ;
    local float chance;
    
    if(enemy_range == RANGE_MELEE)
    {
        
        if(CanDamage(self.enemy, self))
        {
            self.attack_state = AS_MELEE;
            return TRUE;
        }
        
    }
    
    
    if(time < self.attack_finished)
    {
        return FALSE;
    }
    
    
    if(!enemy_vis)
    {
        return FALSE;
    }
    
    targ = self.enemy;
    spot1 = self.origin + self.view_ofs;
    spot2 = targ.origin + targ.view_ofs;
    traceline(spot1, spot2, FALSE, self);
    
    if(trace_inopen && trace_inwater)
    {
        return FALSE;
    }
    
    
    if(trace_ent != targ)
    {
        return FALSE;
    }
    
    
    if(time < self.attack_finished)
    {
        return FALSE;
    }
    
    if(enemy_range == RANGE_FAR)
    {
        return FALSE;
    }
    else
    {
        if(enemy_range == RANGE_NEAR)
        {
            chance = 0.100;
        }
        else
        {
            if(enemy_range == RANGE_MID)
            {
                chance = 0.050;
            }
            else
            {
                chance = 0.000;
            }
            
        }
        
    }
    
    self.attack_state = AS_MISSILE;
    SUB_AttackFinished(1.000 + (2.000 * random()));
    return TRUE;
};

void () movetarget_f;
void () t_movetarget;
float current_yaw;
entity sight_entity;
float sight_entity_time;
// anglemod
// function begins at statement 9226, parm_start=7761
// OP_GE	7761	867	7762
// OP_IFNOT	7762	4	0
// OP_SUB_F	7761	867	7763
// OP_STORE_F	7763	7761	0
// OP_GOTO	-4	0	0
// OP_LT	7761	817	7764
// OP_IFNOT	7764	4	0
// OP_ADD_F	7761	867	7765
// OP_STORE_F	7765	7761	0
// OP_GOTO	-4	0	0
// OP_RETURN	7761	0	0
// OP_DONE	0	0	0
float (float v) anglemod = 
{
    
    while(v >= 360.000)
    {
        v = v - 360.000;
    }
    
    
    while(v < 0.000)
    {
        v = v + 360.000;
    }
    
    return v;
};

// movetarget_f
// function begins at statement 9238, parm_start=7766
// OP_LOAD_S	28	197	7766
// OP_NOT_S	7766	0	7767
// OP_IFNOT	7767	3	0
// OP_STORE_V	7768	4	0
// OP_CALL1	470	0	0
// OP_ADDRESS	28	104	7769
// OP_STOREP_F	244	7769	0
// OP_ADDRESS	28	146	7770
// OP_STOREP_FNC	7757	7770	0
// OP_STORE_V	28	4	0
// OP_STORE_V	7771	7	0
// OP_STORE_V	7774	10	0
// OP_CALL3	464	0	0
// OP_DONE	0	0	0
void () movetarget_f = 
{
    
    if(!self.targetname)
    {
        objerror("monster_movetarget: no targetname");
    }
    
    self.solid = SOLID_TRIGGER;
    self.touch = t_movetarget;
    setsize(self, '-8.000 -8.000 -8.000', '8.000 8.000 8.000');
};

// path_corner
// function begins at statement 9252, parm_start=7778
// OP_CALL0	7756	0	0
// OP_DONE	0	0	0
void () path_corner = 
{
    movetarget_f();
};

// t_movetarget
// function begins at statement 9254, parm_start=7778
// OP_DONE	0	0	0
void () t_movetarget = 
{
    local entity temp;
};

// range
// function begins at statement 9255, parm_start=7779
// OP_LOAD_V	28	105	7787
// OP_LOAD_V	28	166	7790
// OP_ADD_V	7787	7790	7793
// OP_STORE_V	7793	7780	0
// OP_LOAD_V	7779	105	7796
// OP_LOAD_V	7779	166	7799
// OP_ADD_V	7796	7799	7802
// OP_STORE_V	7802	7783	0
// OP_SUB_V	7780	7783	7805
// OP_STORE_V	7805	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	7786	0
// OP_LT	7786	5807	7808
// OP_IFNOT	7808	2	0
// OP_RETURN	248	0	0
// OP_LT	7786	1820	7809
// OP_IFNOT	7809	2	0
// OP_RETURN	249	0	0
// OP_LT	7786	3337	7810
// OP_IFNOT	7810	2	0
// OP_RETURN	250	0	0
// OP_RETURN	251	0	0
// OP_DONE	0	0	0
float (entity targ) range = 
{
    local vector spot1;
    local vector spot2;
    local float r;
    spot1 = self.origin + self.view_ofs;
    spot2 = targ.origin + targ.view_ofs;
    r = vlen(spot1 - spot2);
    
    if(r < 120.000)
    {
        return RANGE_MELEE;
    }
    
    
    if(r < 500.000)
    {
        return RANGE_NEAR;
    }
    
    
    if(r < 1000.000)
    {
        return RANGE_MID;
    }
    
    return RANGE_FAR;
};

// visible
// function begins at statement 9278, parm_start=7811
// OP_LOAD_V	28	105	7818
// OP_LOAD_V	28	166	7821
// OP_ADD_V	7818	7821	7824
// OP_STORE_V	7824	7812	0
// OP_LOAD_V	7811	105	7827
// OP_LOAD_V	7811	166	7830
// OP_ADD_V	7827	7830	7833
// OP_STORE_V	7833	7815	0
// OP_STORE_V	7812	4	0
// OP_STORE_V	7815	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_AND	79	80	7836
// OP_IFNOT	7836	2	0
// OP_RETURN	218	0	0
// OP_EQ_F	70	819	7837
// OP_IFNOT	7837	2	0
// OP_RETURN	219	0	0
// OP_RETURN	218	0	0
// OP_DONE	0	0	0
float (entity targ) visible = 
{
    local vector spot1;
    local vector spot2;
    spot1 = self.origin + self.view_ofs;
    spot2 = targ.origin + targ.view_ofs;
    traceline(spot1, spot2, TRUE, self);
    
    if(trace_inopen && trace_inwater)
    {
        return FALSE;
    }
    
    
    if(trace_fraction == 1.000)
    {
        return TRUE;
    }
    
    return FALSE;
};

// infront
// function begins at statement 9299, parm_start=7838
// OP_LOAD_V	28	117	7843
// OP_STORE_V	7843	4	0
// OP_CALL1	461	0	0
// OP_LOAD_V	7838	105	7846
// OP_LOAD_V	28	105	7849
// OP_SUB_V	7846	7849	7852
// OP_STORE_V	7852	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	7839	0
// OP_MUL_V	7839	59	7855
// OP_STORE_F	7855	7842	0
// OP_GT	7842	2575	7856
// OP_IFNOT	7856	2	0
// OP_RETURN	219	0	0
// OP_RETURN	218	0	0
// OP_DONE	0	0	0
float (entity targ) infront = 
{
    local vector vec;
    local float dot;
    makevectors(self.angles);
    vec = normalize(targ.origin - self.origin);
    dot = vec * v_forward;
    
    if(dot > 0.300)
    {
        return TRUE;
    }
    
    return FALSE;
};

// HuntTarget
// function begins at statement 9315, parm_start=7858
// OP_ADDRESS	28	194	7858
// OP_LOAD_ENT	28	181	7859
// OP_STOREP_ENT	7859	7858	0
// OP_ADDRESS	28	148	7860
// OP_LOAD_FNC	28	372	7861
// OP_STOREP_FNC	7861	7860	0
// OP_ADDRESS	28	191	7862
// OP_LOAD_ENT	28	181	7863
// OP_LOAD_V	7863	105	7864
// OP_LOAD_V	28	105	7867
// OP_SUB_V	7864	7867	7870
// OP_STORE_V	7870	4	0
// OP_CALL1	472	0	0
// OP_STOREP_F	1	7862	0
// OP_ADDRESS	28	150	7873
// OP_ADD_F	31	2869	7874
// OP_STOREP_F	7874	7873	0
// OP_STORE_V	819	4	0
// OP_CALL1	7573	0	0
// OP_DONE	0	0	0
void () HuntTarget = 
{
    self.goalentity = self.enemy;
    self.think = self.th_run;
    self.ideal_yaw = vectoyaw(self.enemy.origin - self.origin);
    self.nextthink = time + 0.100;
    SUB_AttackFinished(1.000);
};

// SightSound
// function begins at statement 9335, parm_start=7876
// OP_LOAD_S	28	129	7877
// OP_EQ_S	7877	7878	7879
// OP_IFNOT	7879	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	7880	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	152	0	0
// OP_LOAD_S	28	129	7881
// OP_EQ_S	7881	7882	7883
// OP_IFNOT	7883	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	7884	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	142	0	0
// OP_LOAD_S	28	129	7885
// OP_EQ_S	7885	7886	7887
// OP_IFNOT	7887	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	7888	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	132	0	0
// OP_LOAD_S	28	129	7889
// OP_EQ_S	7889	7890	7891
// OP_IFNOT	7891	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	7892	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	122	0	0
// OP_LOAD_S	28	129	7893
// OP_EQ_S	7893	7894	7895
// OP_IFNOT	7895	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	7896	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	112	0	0
// OP_LOAD_S	28	129	7897
// OP_EQ_S	7897	7898	7899
// OP_IFNOT	7899	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	7900	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	102	0	0
// OP_LOAD_S	28	129	7901
// OP_EQ_S	7901	7902	7903
// OP_IFNOT	7903	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	7904	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	92	0	0
// OP_LOAD_S	28	129	7905
// OP_EQ_S	7905	7906	7907
// OP_IFNOT	7907	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	7908	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	82	0	0
// OP_LOAD_S	28	129	7909
// OP_EQ_S	7909	7910	7911
// OP_IFNOT	7911	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	7912	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	72	0	0
// OP_LOAD_S	28	129	7913
// OP_EQ_S	7913	7914	7915
// OP_IFNOT	7915	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	7916	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	62	0	0
// OP_LOAD_S	28	129	7917
// OP_EQ_S	7917	7918	7919
// OP_IFNOT	7919	40	0
// OP_CALL0	466	0	0
// OP_MUL_F	1	823	7920
// OP_STORE_V	7920	4	0
// OP_CALL1	494	0	0
// OP_STORE_F	1	7876	0
// OP_EQ_F	7876	819	7921
// OP_IFNOT	7921	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	7922	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	25	0	0
// OP_EQ_F	7876	821	7923
// OP_IFNOT	7923	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	7924	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	16	0	0
// OP_EQ_F	7876	817	7925
// OP_IFNOT	7925	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	7926	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	7	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	7927	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	20	0	0
// OP_LOAD_S	28	129	7928
// OP_EQ_S	7928	7929	7930
// OP_IFNOT	7930	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	7931	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	10	0	0
// OP_LOAD_S	28	129	7932
// OP_EQ_S	7932	7933	7934
// OP_IFNOT	7934	7	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	7935	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_DONE	0	0	0
void () SightSound = 
{
    local float rsnd;
    if(self.classname == "monster_ogre")
    {
        sound(self, CHAN_VOICE, "ogre/ogwake.wav", 1.000, ATTN_NORM);
    }
    else
    {
        if(self.classname == "monster_knight")
        {
            sound(self, CHAN_VOICE, "knight/ksight.wav", 1.000, ATTN_NORM);
        }
        else
        {
            if(self.classname == "monster_shambler")
            {
                sound(self, CHAN_VOICE, "shambler/ssight.wav", 1.000, ATTN_NORM);
            }
            else
            {
                if(self.classname == "monster_demon1")
                {
                    sound(self, CHAN_VOICE, "demon/sight2.wav", 1.000, ATTN_NORM);
                }
                else
                {
                    if(self.classname == "monster_wizard")
                    {
                        sound(self, CHAN_VOICE, "wizard/wsight.wav", 1.000, ATTN_NORM);
                    }
                    else
                    {
                        if(self.classname == "monster_zombie")
                        {
                            sound(self, CHAN_VOICE, "zombie/z_idle.wav", 1.000, ATTN_NORM);
                        }
                        else
                        {
                            if(self.classname == "monster_dog")
                            {
                                sound(self, CHAN_VOICE, "dog/dsight.wav", 1.000, ATTN_NORM);
                            }
                            else
                            {
                                if(self.classname == "monster_hell_knight")
                                {
                                    sound(self, CHAN_VOICE, "hknight/sight1.wav", 1.000, ATTN_NORM);
                                }
                                else
                                {
                                    if(self.classname == "monster_tarbaby")
                                    {
                                        sound(self, CHAN_VOICE, "blob/sight1.wav", 1.000, ATTN_NORM);
                                    }
                                    else
                                    {
                                        if(self.classname == "monster_vomit")
                                        {
                                            sound(self, CHAN_VOICE, "vomitus/v_sight1.wav", 1.000, ATTN_NORM);
                                        }
                                        else
                                        {
                                            if(self.classname == "monster_enforcer")
                                            {
                                                rsnd = rint(random() * 3.000);
                                                if(rsnd == 1.000)
                                                {
                                                    sound(self, CHAN_VOICE, "enforcer/sight1.wav", 1.000, ATTN_NORM);
                                                }
                                                else
                                                {
                                                    if(rsnd == 2.000)
                                                    {
                                                        sound(self, CHAN_VOICE, "enforcer/sight2.wav", 1.000, ATTN_NORM);
                                                    }
                                                    else
                                                    {
                                                        if(rsnd == 0.000)
                                                        {
                                                            sound(self, CHAN_VOICE, "enforcer/sight3.wav", 1.000, ATTN_NORM);
                                                        }
                                                        else
                                                        {
                                                            sound(self, CHAN_VOICE, "enforcer/sight4.wav", 1.000, ATTN_NORM);
                                                        }
                                                        
                                                    }
                                                    
                                                }
                                                
                                            }
                                            else
                                            {
                                                if(self.classname == "monster_army")
                                                {
                                                    sound(self, CHAN_VOICE, "soldier/sight1.wav", 1.000, ATTN_NORM);
                                                }
                                                else
                                                {
                                                    
                                                    if(self.classname == "monster_shalrath")
                                                    {
                                                        sound(self, CHAN_VOICE, "shalrath/sight.wav", 1.000, ATTN_NORM);
                                                    }
                                                    
                                                }
                                                
                                            }
                                            
                                        }
                                        
                                    }
                                    
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
    }
    
};

// FoundTarget
// function begins at statement 9497, parm_start=7937
// OP_LOAD_ENT	28	181	7937
// OP_LOAD_S	7937	129	7938
// OP_EQ_S	7938	880	7939
// OP_IFNOT	7939	3	0
// OP_STORE_ENT	28	7759	0
// OP_STORE_F	31	7760	0
// OP_ADDRESS	28	402	7940
// OP_ADD_F	31	819	7941
// OP_STOREP_F	7941	7940	0
// OP_CALL0	7875	0	0
// OP_CALL0	7857	0	0
// OP_DONE	0	0	0
void () FoundTarget = 
{
    
    if(self.enemy.classname == "player")
    {
        sight_entity = self;
        sight_entity_time = time;
    }
    
    self.show_hostile = time + 1.000;
    SightSound();
    HuntTarget();
};

// FindTarget
// function begins at statement 9509, parm_start=7943
// OP_SUB_F	31	2869	7945
// OP_GE	7760	7945	7946
// OP_LOAD_F	28	195	7947
// OP_BITAND	7947	823	7948
// OP_NOT_F	7948	0	7949
// OP_AND	7946	7949	7950
// OP_IFNOT	7950	8	0
// OP_STORE_ENT	7759	7943	0
// OP_LOAD_ENT	7943	181	7951
// OP_LOAD_ENT	28	181	7952
// OP_EQ_E	7951	7952	7953
// OP_IFNOT	7953	2	0
// OP_RETURN	0	0	0
// OP_GOTO	6	0	0
// OP_CALL0	476	0	0
// OP_STORE_ENT	1	7943	0
// OP_NOT_ENT	7943	0	7954
// OP_IFNOT	7954	2	0
// OP_RETURN	218	0	0
// OP_LOAD_ENT	28	181	7955
// OP_EQ_E	7943	7955	7956
// OP_IFNOT	7956	2	0
// OP_RETURN	218	0	0
// OP_LOAD_F	7943	182	7957
// OP_BITAND	7957	226	7958
// OP_IFNOT	7958	2	0
// OP_RETURN	218	0	0
// OP_LOAD_F	7943	162	7959
// OP_BITAND	7959	286	7960
// OP_IFNOT	7960	2	0
// OP_RETURN	218	0	0
// OP_STORE_V	7943	4	0
// OP_CALL1	7641	0	0
// OP_STORE_F	1	7944	0
// OP_EQ_F	7944	251	7961
// OP_IFNOT	7961	2	0
// OP_RETURN	218	0	0
// OP_STORE_V	7943	4	0
// OP_CALL1	7579	0	0
// OP_NOT_F	1	0	7962
// OP_IFNOT	7962	2	0
// OP_RETURN	218	0	0
// OP_EQ_F	7944	249	7963
// OP_IFNOT	7963	10	0
// OP_LOAD_F	7943	402	7964
// OP_LT	7964	31	7965
// OP_STORE_V	7943	4	0
// OP_CALL1	7640	0	0
// OP_NOT_F	1	0	7966
// OP_AND	7965	7966	7967
// OP_IFNOT	7967	2	0
// OP_RETURN	218	0	0
// OP_GOTO	8	0	0
// OP_EQ_F	7944	250	7968
// OP_IFNOT	7968	6	0
// OP_STORE_V	7943	4	0
// OP_CALL1	7640	0	0
// OP_NOT_F	1	0	7969
// OP_IFNOT	7969	2	0
// OP_RETURN	218	0	0
// OP_ADDRESS	28	181	7970
// OP_STOREP_ENT	7943	7970	0
// OP_LOAD_ENT	28	181	7971
// OP_LOAD_S	7971	129	7972
// OP_NE_S	7972	880	7973
// OP_IFNOT	7973	12	0
// OP_ADDRESS	28	181	7974
// OP_LOAD_ENT	28	181	7975
// OP_LOAD_ENT	7975	181	7976
// OP_STOREP_ENT	7976	7974	0
// OP_LOAD_ENT	28	181	7977
// OP_LOAD_S	7977	129	7978
// OP_NE_S	7978	880	7979
// OP_IFNOT	7979	4	0
// OP_ADDRESS	28	181	7980
// OP_STOREP_ENT	30	7980	0
// OP_RETURN	218	0	0
// OP_CALL0	7936	0	0
// OP_RETURN	219	0	0
// OP_DONE	0	0	0
float () FindTarget = 
{
    local entity client;
    local float r;
    if((sight_entity_time >= (time - 0.100)) && (!(self.spawnflags & 3.000)))
    {
        client = sight_entity;
        
        if(client.enemy == self.enemy)
        {
            return;
        }
        
    }
    else
    {
        client = checkclient();
        
        if(!client)
        {
            return FALSE;
        }
        
    }
    
    
    if(client == self.enemy)
    {
        return FALSE;
    }
    
    
    if(client.flags & FL_NOTARGET)
    {
        return FALSE;
    }
    
    
    if(client.items & IT_INVISIBILITY)
    {
        return FALSE;
    }
    
    r = range(client);
    
    if(r == RANGE_FAR)
    {
        return FALSE;
    }
    
    
    if(!visible(client))
    {
        return FALSE;
    }
    
    if(r == RANGE_NEAR)
    {
        
        if((client.show_hostile < time) && !infront(client))
        {
            return FALSE;
        }
        
    }
    else
    {
        
        if(r == RANGE_MID)
        {
            
            if(!infront(client))
            {
                return FALSE;
            }
            
        }
        
    }
    
    self.enemy = client;
    
    if(self.enemy.classname != "player")
    {
        self.enemy = self.enemy.enemy;
        
        if(self.enemy.classname != "player")
        {
            self.enemy = world;
            return FALSE;
        }
        
    }
    
    FoundTarget();
    return TRUE;
};

// ai_forward
// function begins at statement 9589, parm_start=7982
// OP_LOAD_F	28	119	7983
// OP_STORE_V	7983	4	0
// OP_STORE_V	7982	7	0
// OP_CALL2	491	0	0
// OP_DONE	0	0	0
void (float dist) ai_forward = 
{
    walkmove(self.angles_y, dist);
};

// ai_back
// function begins at statement 9594, parm_start=7985
// OP_LOAD_F	28	119	7986
// OP_ADD_F	7986	865	7987
// OP_STORE_V	7987	4	0
// OP_STORE_V	7985	7	0
// OP_CALL2	491	0	0
// OP_DONE	0	0	0
void (float dist) ai_back = 
{
    walkmove(self.angles_y + 180.000, dist);
};

// ai_pain
// function begins at statement 9600, parm_start=7989
// OP_STORE_V	7989	4	0
// OP_CALL1	7984	0	0
// OP_DONE	0	0	0
void (float dist) ai_pain = 
{
    ai_back(dist);
};

// ai_painforward
// function begins at statement 9603, parm_start=7991
// OP_LOAD_F	28	191	7992
// OP_STORE_V	7992	4	0
// OP_STORE_V	7991	7	0
// OP_CALL2	491	0	0
// OP_DONE	0	0	0
void (float dist) ai_painforward = 
{
    walkmove(self.ideal_yaw, dist);
};

// ai_walk
// function begins at statement 9608, parm_start=7994
// OP_STORE_F	7994	355	0
// OP_LOAD_S	28	129	7998
// OP_EQ_S	7998	7999	8000
// OP_IFNOT	8000	4	0
// OP_STORE_V	7994	4	0
// OP_CALL1	515	0	0
// OP_RETURN	0	0	0
// OP_CALL0	7942	0	0
// OP_IFNOT	1	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	7994	4	0
// OP_CALL1	515	0	0
// OP_DONE	0	0	0
void (float dist) ai_walk = 
{
    local vector mtemp;
    movedist = dist;
    
    if(self.classname == "monster_dragon")
    {
        movetogoal(dist);
        return;
    }
    
    
    if(FindTarget())
    {
        return;
    }
    
    movetogoal(dist);
};

// ai_stand
// function begins at statement 9621, parm_start=8002
// OP_CALL0	7942	0	0
// OP_IFNOT	1	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	431	8002
// OP_GT	31	8002	8003
// OP_IFNOT	8003	4	0
// OP_LOAD_FNC	28	371	8004
// OP_CALL0	8004	0	0
// OP_RETURN	0	0	0
// OP_DONE	0	0	0
void () ai_stand = 
{
    
    if(FindTarget())
    {
        return;
    }
    
    
    if(time > self.pausetime)
    {
        self.th_walk();
        return;
    }
    
};

// ai_turn
// function begins at statement 9631, parm_start=8006
// OP_CALL0	7942	0	0
// OP_IFNOT	1	2	0
// OP_RETURN	0	0	0
// OP_CALL0	505	0	0
// OP_DONE	0	0	0
void () ai_turn = 
{
    
    if(FindTarget())
    {
        return;
    }
    
    ChangeYaw();
};

// ChooseTurn
// function begins at statement 9636, parm_start=8006
// OP_LOAD_V	28	105	8015
// OP_SUB_V	8015	8006	8018
// OP_STORE_V	8018	8009	0
// OP_STORE_F	75	8012	0
// OP_SUB_F	817	74	8021
// OP_STORE_F	8021	8013	0
// OP_STORE_F	817	8014	0
// OP_MUL_V	8009	8012	8022
// OP_GT	8022	817	8023
// OP_IFNOT	8023	5	0
// OP_SUB_F	817	75	8024
// OP_STORE_F	8024	8009	0
// OP_STORE_F	74	8010	0
// OP_GOTO	4	0	0
// OP_STORE_F	75	8009	0
// OP_SUB_F	817	74	8025
// OP_STORE_F	8025	8010	0
// OP_STORE_F	817	8011	0
// OP_ADDRESS	28	191	8026
// OP_STORE_V	8009	4	0
// OP_CALL1	472	0	0
// OP_STOREP_F	1	8026	0
// OP_DONE	0	0	0
void (vector dest3) ChooseTurn = 
{
    local vector dir;
    local vector newdir;
    dir = self.origin - dest3;
    newdir_x = 0.000;
    newdir_y = 0.000 - trace_plane_normal_x;
    newdir_z = 0.000;
    if((dir * newdir) > 0.000)
    {
        dir_x = 0.000 - 0.000;
        dir_y = trace_plane_normal_x;
    }
    else
    {
        dir_x = 0.000;
        dir_y = 0.000 - trace_plane_normal_x;
    }
    
    dir_z = 0.000;
    self.ideal_yaw = vectoyaw(dir);
};

// FacingIdeal
// function begins at statement 9659, parm_start=8028
// OP_LOAD_F	28	119	8029
// OP_LOAD_F	28	191	8030
// OP_SUB_F	8029	8030	8031
// OP_STORE_V	8031	4	0
// OP_CALL1	859	0	0
// OP_STORE_F	1	8028	0
// OP_GT	8028	2558	8032
// OP_LT	8028	8033	8034
// OP_AND	8032	8034	8035
// OP_IFNOT	8035	2	0
// OP_RETURN	218	0	0
// OP_RETURN	219	0	0
// OP_DONE	0	0	0
float () FacingIdeal = 
{
    local float delta;
    delta = anglemod(self.angles_y - self.ideal_yaw);
    
    if((delta > 45.000) && (delta < 315.000))
    {
        return FALSE;
    }
    
    return TRUE;
};

// CheckAnyAttack
// function begins at statement 9672, parm_start=8037
// OP_NOT_F	7591	0	8037
// OP_IFNOT	8037	2	0
// OP_RETURN	0	0	0
// OP_CALL0	7620	0	0
// OP_RETURN	1	0	0
// OP_DONE	0	0	0
void () CheckAnyAttack = 
{
    
    if(!enemy_vis)
    {
        return;
    }
    
    return CheckAttack();
};

// ai_run_melee
// function begins at statement 9678, parm_start=8039
// OP_ADDRESS	28	191	8039
// OP_STOREP_F	7594	8039	0
// OP_CALL0	505	0	0
// OP_CALL0	8027	0	0
// OP_IFNOT	1	5	0
// OP_LOAD_FNC	28	374	8040
// OP_CALL0	8040	0	0
// OP_ADDRESS	28	381	8041
// OP_STOREP_F	382	8041	0
// OP_DONE	0	0	0
void () ai_run_melee = 
{
    self.ideal_yaw = enemy_yaw;
    ChangeYaw();
    
    if(FacingIdeal())
    {
        self.th_melee();
        self.attack_state = AS_STRAIGHT;
    }
    
};

// ai_run_missile
// function begins at statement 9688, parm_start=8043
// OP_ADDRESS	28	191	8043
// OP_STOREP_F	7594	8043	0
// OP_CALL0	505	0	0
// OP_CALL0	8027	0	0
// OP_IFNOT	1	5	0
// OP_LOAD_FNC	28	373	8044
// OP_CALL0	8044	0	0
// OP_ADDRESS	28	381	8045
// OP_STOREP_F	382	8045	0
// OP_DONE	0	0	0
void () ai_run_missile = 
{
    self.ideal_yaw = enemy_yaw;
    ChangeYaw();
    
    if(FacingIdeal())
    {
        self.th_missile();
        self.attack_state = AS_STRAIGHT;
    }
    
};

// ai_run_slide
// function begins at statement 9698, parm_start=8047
// OP_ADDRESS	28	191	8048
// OP_STOREP_F	7594	8048	0
// OP_CALL0	505	0	0
// OP_LOAD_F	28	379	8049
// OP_IFNOT	8049	3	0
// OP_STORE_F	7023	8047	0
// OP_GOTO	2	0	0
// OP_STORE_F	8050	8047	0
// OP_LOAD_F	28	191	8051
// OP_ADD_F	8051	8047	8052
// OP_STORE_V	8052	4	0
// OP_STORE_V	355	7	0
// OP_CALL2	491	0	0
// OP_IFNOT	1	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	379	8053
// OP_LOAD_F	28	379	8054
// OP_SUB_F	819	8054	8055
// OP_STOREP_F	8055	8053	0
// OP_LOAD_F	28	191	8056
// OP_SUB_F	8056	8047	8057
// OP_STORE_V	8057	4	0
// OP_STORE_V	355	7	0
// OP_CALL2	491	0	0
// OP_DONE	0	0	0
void () ai_run_slide = 
{
    local float ofs;
    self.ideal_yaw = enemy_yaw;
    ChangeYaw();
    if(self.lefty)
    {
        ofs = 90.000;
    }
    else
    {
        ofs = -90.000;
    }
    
    
    if(walkmove(self.ideal_yaw + ofs, movedist))
    {
        return;
    }
    
    self.lefty = 1.000 - self.lefty;
    walkmove(self.ideal_yaw - ofs, movedist);
};

// ai_run
// function begins at statement 9723, parm_start=8059
// OP_DONE	0	0	0
void (float dist) ai_run = 
{
    local vector delta;
    local float axis;
    local float direct;
    local float ang_rint;
    local float ang_floor;
    local float ang_ceil;
};

void () info_player_start;
void (entity targ, entity attacker) ClientObituary;
void () monster_death_use;
// CanDamage
// function begins at statement 9724, parm_start=8071
// OP_LOAD_F	8071	103	8073
// OP_EQ_F	8073	238	8074
// OP_IFNOT	8074	18	0
// OP_LOAD_V	8072	105	8075
// OP_STORE_V	8075	4	0
// OP_LOAD_V	8071	94	8078
// OP_LOAD_V	8071	98	8081
// OP_ADD_V	8078	8081	8084
// OP_MUL_FV	1182	8084	8087
// OP_STORE_V	8087	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_EQ_F	70	819	8090
// OP_IFNOT	8090	2	0
// OP_RETURN	219	0	0
// OP_EQ_E	78	8071	8091
// OP_IFNOT	8091	2	0
// OP_RETURN	219	0	0
// OP_RETURN	218	0	0
// OP_LOAD_V	8072	105	8092
// OP_STORE_V	8092	4	0
// OP_LOAD_V	8071	105	8095
// OP_STORE_V	8095	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_EQ_F	70	819	8098
// OP_IFNOT	8098	2	0
// OP_RETURN	219	0	0
// OP_LOAD_V	8072	105	8099
// OP_STORE_V	8099	4	0
// OP_LOAD_V	8071	105	8102
// OP_ADD_V	8102	8105	8108
// OP_STORE_V	8108	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_EQ_F	70	819	8111
// OP_IFNOT	8111	2	0
// OP_RETURN	219	0	0
// OP_LOAD_V	8072	105	8112
// OP_STORE_V	8112	4	0
// OP_LOAD_V	8071	105	8115
// OP_ADD_V	8115	8118	8121
// OP_STORE_V	8121	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_EQ_F	70	819	8124
// OP_IFNOT	8124	2	0
// OP_RETURN	219	0	0
// OP_LOAD_V	8072	105	8125
// OP_STORE_V	8125	4	0
// OP_LOAD_V	8071	105	8128
// OP_ADD_V	8128	8131	8134
// OP_STORE_V	8134	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_EQ_F	70	819	8137
// OP_IFNOT	8137	2	0
// OP_RETURN	219	0	0
// OP_LOAD_V	8072	105	8138
// OP_STORE_V	8138	4	0
// OP_LOAD_V	8071	105	8141
// OP_ADD_V	8141	8144	8147
// OP_STORE_V	8147	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_EQ_F	70	819	8150
// OP_IFNOT	8150	2	0
// OP_RETURN	219	0	0
// OP_RETURN	218	0	0
// OP_DONE	0	0	0
float (entity targ, entity inflictor) CanDamage = 
{
    
    if(targ.movetype == MOVETYPE_PUSH)
    {
        traceline(inflictor.origin, 0.500 * (targ.absmin + targ.absmax), TRUE, self);
        
        if(trace_fraction == 1.000)
        {
            return TRUE;
        }
        
        
        if(trace_ent == targ)
        {
            return TRUE;
        }
        
        return FALSE;
    }
    
    traceline(inflictor.origin, targ.origin, TRUE, self);
    
    if(trace_fraction == 1.000)
    {
        return TRUE;
    }
    
    traceline(inflictor.origin, targ.origin + '15.000 15.000 0.000', TRUE, self);
    
    if(trace_fraction == 1.000)
    {
        return TRUE;
    }
    
    traceline(inflictor.origin, targ.origin + '-15.000 -15.000 0.000', TRUE, self);
    
    if(trace_fraction == 1.000)
    {
        return TRUE;
    }
    
    traceline(inflictor.origin, targ.origin + '-15.000 15.000 0.000', TRUE, self);
    
    if(trace_fraction == 1.000)
    {
        return TRUE;
    }
    
    traceline(inflictor.origin, targ.origin + '15.000 -15.000 0.000', TRUE, self);
    
    if(trace_fraction == 1.000)
    {
        return TRUE;
    }
    
    return FALSE;
};

// Killed
// function begins at statement 9800, parm_start=8152
// OP_STORE_ENT	28	8154	0
// OP_STORE_ENT	8152	28	0
// OP_LOAD_F	28	152	8155
// OP_LT	8155	8156	8157
// OP_IFNOT	8157	3	0
// OP_ADDRESS	28	152	8158
// OP_STOREP_F	8156	8158	0
// OP_LOAD_F	28	103	8159
// OP_EQ_F	8159	238	8160
// OP_LOAD_F	28	103	8161
// OP_EQ_F	8161	233	8162
// OP_OR	8160	8162	8163
// OP_IFNOT	8163	5	0
// OP_LOAD_FNC	28	376	8164
// OP_CALL0	8164	0	0
// OP_STORE_ENT	8154	28	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	181	8165
// OP_STOREP_ENT	8153	8165	0
// OP_LOAD_F	28	182	8166
// OP_BITAND	8166	224	8167
// OP_IFNOT	8167	6	0
// OP_ADD_F	42	819	8168
// OP_STORE_F	8168	42	0
// OP_STORE_V	353	4	0
// OP_STORE_V	316	7	0
// OP_CALL2	507	0	0
// OP_LOAD_F	28	165	8169
// OP_NOT_F	8169	0	8170
// OP_IFNOT	8170	4	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8153	7	0
// OP_CALL2	8069	0	0
// OP_ADDRESS	28	163	8171
// OP_STOREP_F	256	8171	0
// OP_ADDRESS	28	146	8172
// OP_STOREP_FNC	531	8172	0
// OP_CALL0	8070	0	0
// OP_LOAD_FNC	28	376	8173
// OP_CALL0	8173	0	0
// OP_STORE_ENT	8154	28	0
// OP_DONE	0	0	0
void (entity targ, entity attacker) Killed = 
{
    local entity oself;
    oself = self;
    self = targ;
    
    if(self.health < -99.000)
    {
        self.health = -99.000;
    }
    
    
    if((self.movetype == MOVETYPE_PUSH) || (self.movetype == MOVETYPE_NONE))
    {
        self.th_die();
        self = oself;
        return;
    }
    
    self.enemy = attacker;
    
    if(self.flags & FL_MONSTER)
    {
        killed_monsters = killed_monsters + 1.000;
        WriteByte(MSG_ALL, SVC_KILLEDMONSTER);
    }
    
    
    if(!self.deadflag)
    {
        ClientObituary(self, attacker);
    }
    
    self.takedamage = DAMAGE_NO;
    self.touch = SUB_Null;
    monster_death_use();
    self.th_die();
    self = oself;
};

// T_Damage
// function begins at statement 9842, parm_start=8174
// OP_LOAD_F	8174	163	8184
// OP_NOT_F	8184	0	8185
// OP_IFNOT	8185	2	0
// OP_RETURN	0	0	0
// OP_STORE_ENT	8176	361	0
// OP_LOAD_F	8176	391	8186
// OP_GT	8186	31	8187
// OP_IFNOT	8187	3	0
// OP_MUL_F	8177	825	8188
// OP_STORE_F	8188	8177	0
// OP_STORE_V	8177	4	0
// OP_CALL1	496	0	0
// OP_STORE_F	1	8183	0
// OP_LOAD_F	8174	182	8189
// OP_BITAND	8189	222	8190
// OP_IFNOT	8190	11	0
// OP_ADDRESS	8174	198	8191
// OP_LOAD_F	8174	198	8192
// OP_ADD_F	8192	8183	8193
// OP_STOREP_F	8193	8191	0
// OP_ADDRESS	8174	199	8194
// OP_LOAD_F	8174	199	8195
// OP_ADD_F	8195	8182	8196
// OP_STOREP_F	8196	8194	0
// OP_ADDRESS	8174	200	8197
// OP_STOREP_ENT	8175	8197	0
// OP_NE_E	8175	30	8198
// OP_LOAD_F	8174	103	8199
// OP_EQ_F	8199	234	8200
// OP_AND	8198	8200	8201
// OP_IFNOT	8201	17	0
// OP_LOAD_V	8174	105	8202
// OP_LOAD_V	8175	94	8205
// OP_LOAD_V	8175	98	8208
// OP_ADD_V	8205	8208	8211
// OP_MUL_VF	8211	1182	8214
// OP_SUB_V	8202	8214	8217
// OP_STORE_V	8217	8178	0
// OP_STORE_V	8178	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	8178	0
// OP_ADDRESS	8174	113	8220
// OP_LOAD_V	8174	113	8223
// OP_MUL_VF	8178	8177	8226
// OP_MUL_VF	8226	843	8229
// OP_ADD_V	8223	8229	8232
// OP_STOREP_V	8232	8220	0
// OP_LOAD_F	8174	389	8235
// OP_GE	8235	31	8236
// OP_LT	8177	1957	8237
// OP_AND	8236	8237	8238
// OP_IFNOT	8238	14	0
// OP_LOAD_F	28	394	8239
// OP_LT	8239	31	8240
// OP_IFNOT	8240	10	0
// OP_STORE_V	8174	4	0
// OP_STORE_V	337	7	0
// OP_STORE_V	8241	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	394	8242
// OP_ADD_F	31	821	8243
// OP_STOREP_F	8243	8242	0
// OP_RETURN	0	0	0
// OP_ADDRESS	8174	152	8244
// OP_LOAD_F	8174	152	8245
// OP_SUB_F	8245	8183	8246
// OP_STOREP_F	8246	8244	0
// OP_LOAD_F	8174	152	8247
// OP_LE	8247	817	8248
// OP_IFNOT	8248	5	0
// OP_STORE_V	8174	4	0
// OP_STORE_V	8176	7	0
// OP_CALL2	8151	0	0
// OP_RETURN	0	0	0
// OP_STORE_ENT	28	8181	0
// OP_STORE_ENT	8174	28	0
// OP_LOAD_F	28	182	8249
// OP_BITAND	8249	224	8250
// OP_NE_E	8176	30	8251
// OP_AND	8250	8251	8252
// OP_IFNOT	8252	23	0
// OP_NE_E	28	8176	8253
// OP_LOAD_ENT	28	181	8254
// OP_NE_E	8176	8254	8255
// OP_AND	8253	8255	8256
// OP_IFNOT	8256	18	0
// OP_LOAD_S	28	129	8257
// OP_LOAD_S	8176	129	8258
// OP_NE_S	8257	8258	8259
// OP_LOAD_S	28	129	8260
// OP_EQ_S	8260	7929	8261
// OP_OR	8259	8261	8262
// OP_IFNOT	8262	11	0
// OP_LOAD_ENT	28	181	8263
// OP_LOAD_S	8263	129	8264
// OP_EQ_S	8264	880	8265
// OP_IFNOT	8265	4	0
// OP_ADDRESS	28	377	8266
// OP_LOAD_ENT	28	181	8267
// OP_STOREP_ENT	8267	8266	0
// OP_ADDRESS	28	181	8268
// OP_STOREP_ENT	8176	8268	0
// OP_CALL0	7936	0	0
// OP_LOAD_FNC	28	375	8269
// OP_IFNOT	8269	10	0
// OP_LOAD_FNC	28	375	8270
// OP_STORE_V	8176	4	0
// OP_STORE_V	8183	7	0
// OP_CALL2	8270	0	0
// OP_EQ_F	363	823	8271
// OP_IFNOT	8271	4	0
// OP_ADDRESS	28	388	8272
// OP_ADD_F	31	827	8273
// OP_STOREP_F	8273	8272	0
// OP_STORE_ENT	8181	28	0
// OP_DONE	0	0	0
void (entity targ, entity inflictor, entity attacker, float damage) T_Damage = 
{
    local vector dir;
    local entity oldself;
    local float save;
    local float take;
    
    if(!targ.takedamage)
    {
        return;
    }
    
    damage_attacker = attacker;
    
    if(attacker.super_damage_finished > time)
    {
        damage = damage * 4.000;
    }
    
    take = ceil(damage);
    
    if(targ.flags & FL_CLIENT)
    {
        targ.dmg_take = targ.dmg_take + take;
        targ.dmg_save = targ.dmg_save + save;
        targ.dmg_inflictor = inflictor;
    }
    
    
    if((inflictor != world) && (targ.movetype == MOVETYPE_WALK))
    {
        dir = targ.origin - ((inflictor.absmin + inflictor.absmax) * 0.500);
        dir = normalize(dir);
        targ.velocity = targ.velocity + ((dir * damage) * 8.000);
    }
    
    
    if((targ.invincible_finished >= time) && (damage < 100.000))
    {
        
        if(self.invincible_sound < time)
        {
            sound(targ, CHAN_ITEM, "items/protect3.wav", 1.000, ATTN_NORM);
            self.invincible_sound = time + 2.000;
        }
        
        return;
    }
    
    targ.health = targ.health - take;
    
    if(targ.health <= 0.000)
    {
        Killed(targ, attacker);
        return;
    }
    
    oldself = self;
    self = targ;
    
    if((self.flags & FL_MONSTER) && (attacker != world))
    {
        
        if((self != attacker) && (attacker != self.enemy))
        {
            
            if((self.classname != attacker.classname) || (self.classname == "monster_army"))
            {
                
                if(self.enemy.classname == "player")
                {
                    self.oldenemy = self.enemy;
                }
                
                self.enemy = attacker;
                FoundTarget();
            }
            
        }
        
    }
    
    
    if(self.th_pain)
    {
        self.th_pain(attacker, take);
        
        if(skill == 3.000)
        {
            self.pain_finished = time + 5.000;
        }
        
    }
    
    self = oldself;
};

// T_RadiusDamage
// function begins at statement 9960, parm_start=8275
// OP_LOAD_V	8275	105	8284
// OP_STORE_V	8284	4	0
// OP_ADD_F	8277	1632	8287
// OP_STORE_V	8287	7	0
// OP_CALL2	481	0	0
// OP_STORE_ENT	1	8280	0
// OP_IFNOT	8280	51	0
// OP_NE_E	8280	8278	8288
// OP_IFNOT	8288	46	0
// OP_LOAD_F	8280	163	8289
// OP_IFNOT	8289	44	0
// OP_LOAD_V	8280	105	8290
// OP_LOAD_V	8280	134	8293
// OP_LOAD_V	8280	138	8296
// OP_ADD_V	8293	8296	8299
// OP_MUL_VF	8299	1182	8302
// OP_ADD_V	8290	8302	8305
// OP_STORE_V	8305	8281	0
// OP_LOAD_V	8275	105	8308
// OP_SUB_V	8308	8281	8311
// OP_STORE_V	8311	4	0
// OP_CALL1	471	0	0
// OP_MUL_F	1182	1	8314
// OP_STORE_F	8314	8279	0
// OP_LT	8279	817	8315
// OP_IFNOT	8315	2	0
// OP_STORE_F	817	8279	0
// OP_SUB_F	8277	8279	8316
// OP_STORE_F	8316	8279	0
// OP_EQ_E	8280	8276	8317
// OP_IFNOT	8317	3	0
// OP_MUL_F	8279	1182	8318
// OP_STORE_F	8318	8279	0
// OP_GT	8279	817	8319
// OP_IFNOT	8319	20	0
// OP_STORE_V	8280	4	0
// OP_STORE_V	8275	7	0
// OP_CALL2	536	0	0
// OP_IFNOT	1	16	0
// OP_LOAD_S	8280	129	8320
// OP_EQ_S	8320	7886	8321
// OP_IFNOT	8321	8	0
// OP_STORE_V	8280	4	0
// OP_STORE_V	8275	7	0
// OP_STORE_V	8276	10	0
// OP_MUL_F	8279	1182	8322
// OP_STORE_V	8322	13	0
// OP_CALL4	534	0	0
// OP_GOTO	6	0	0
// OP_STORE_V	8280	4	0
// OP_STORE_V	8275	7	0
// OP_STORE_V	8276	10	0
// OP_STORE_V	8279	13	0
// OP_CALL4	534	0	0
// OP_LOAD_ENT	8280	164	8323
// OP_STORE_ENT	8323	8280	0
// OP_GOTO	-50	0	0
// OP_DONE	0	0	0
void (entity inflictor, entity attacker, float damage, entity ignore) T_RadiusDamage = 
{
    local float points;
    local entity head;
    local vector org;
    head = findradius(inflictor.origin, damage + 40.000);
    
    while(head)
    {
        
        if(head != ignore)
        {
            
            if(head.takedamage)
            {
                org = head.origin + ((head.mins + head.maxs) * 0.500);
                points = 0.500 * (vlen(inflictor.origin - org));
                
                if(points < 0.000)
                {
                    points = 0.000;
                }
                
                points = damage - points;
                
                if(head == attacker)
                {
                    points = points * 0.500;
                }
                
                
                if(points > 0.000)
                {
                    
                    if(CanDamage(head, inflictor))
                    {
                        if(head.classname == "monster_shambler")
                        {
                            T_Damage(head, inflictor, attacker, points * 0.500);
                        }
                        else
                        {
                            T_Damage(head, inflictor, attacker, points);
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        head = head.chain;
    }
    
};

// T_BeamDamage
// function begins at statement 10018, parm_start=8325
// OP_LOAD_V	8325	105	8329
// OP_STORE_V	8329	4	0
// OP_ADD_F	8326	1632	8332
// OP_STORE_V	8332	7	0
// OP_CALL2	481	0	0
// OP_STORE_ENT	1	8328	0
// OP_IFNOT	8328	43	0
// OP_LOAD_F	8328	163	8333
// OP_IFNOT	8333	38	0
// OP_LOAD_V	8325	105	8334
// OP_LOAD_V	8328	105	8337
// OP_SUB_V	8334	8337	8340
// OP_STORE_V	8340	4	0
// OP_CALL1	471	0	0
// OP_MUL_F	1182	1	8343
// OP_STORE_F	8343	8327	0
// OP_LT	8327	817	8344
// OP_IFNOT	8344	2	0
// OP_STORE_F	817	8327	0
// OP_SUB_F	8326	8327	8345
// OP_STORE_F	8345	8327	0
// OP_EQ_E	8328	8325	8346
// OP_IFNOT	8346	3	0
// OP_MUL_F	8327	1182	8347
// OP_STORE_F	8347	8327	0
// OP_GT	8327	817	8348
// OP_IFNOT	8348	20	0
// OP_STORE_V	8328	4	0
// OP_STORE_V	8325	7	0
// OP_CALL2	536	0	0
// OP_IFNOT	1	16	0
// OP_LOAD_S	8328	129	8349
// OP_EQ_S	8349	7886	8350
// OP_IFNOT	8350	8	0
// OP_STORE_V	8328	4	0
// OP_STORE_V	8325	7	0
// OP_STORE_V	8325	10	0
// OP_MUL_F	8327	1182	8351
// OP_STORE_V	8351	13	0
// OP_CALL4	534	0	0
// OP_GOTO	6	0	0
// OP_STORE_V	8328	4	0
// OP_STORE_V	8325	7	0
// OP_STORE_V	8325	10	0
// OP_STORE_V	8327	13	0
// OP_CALL4	534	0	0
// OP_LOAD_ENT	8328	164	8352
// OP_STORE_ENT	8352	8328	0
// OP_GOTO	-42	0	0
// OP_DONE	0	0	0
void (entity attacker, float damage) T_BeamDamage = 
{
    local float points;
    local entity head;
    head = findradius(attacker.origin, damage + 40.000);
    
    while(head)
    {
        
        if(head.takedamage)
        {
            points = 0.500 * (vlen(attacker.origin - head.origin));
            
            if(points < 0.000)
            {
                points = 0.000;
            }
            
            points = damage - points;
            
            if(head == attacker)
            {
                points = points * 0.500;
            }
            
            
            if(points > 0.000)
            {
                
                if(CanDamage(head, attacker))
                {
                    if(head.classname == "monster_shambler")
                    {
                        T_Damage(head, attacker, attacker, points * 0.500);
                    }
                    else
                    {
                        T_Damage(head, attacker, attacker, points);
                    }
                    
                }
                
            }
            
        }
        
        head = head.chain;
    }
    
};

// SUB_regen
// function begins at statement 10068, parm_start=8354
// OP_ADDRESS	28	130	8354
// OP_LOAD_S	28	408	8355
// OP_STOREP_S	8355	8354	0
// OP_ADDRESS	28	104	8356
// OP_STOREP_F	244	8356	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	8357	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	8358
// OP_STORE_V	8358	7	0
// OP_CALL2	462	0	0
// OP_DONE	0	0	0
void () SUB_regen = 
{
    self.model = self.mdl;
    self.solid = SOLID_TRIGGER;
    sound(self, CHAN_VOICE, "items/itembk2.wav", 1.000, ATTN_NORM);
    setorigin(self, self.origin);
};

// noclass
// function begins at statement 10084, parm_start=8362
// OP_STORE_V	8362	4	0
// OP_CALL1	484	0	0
// OP_LOAD_V	28	105	8363
// OP_STORE_V	8363	4	0
// OP_CALL1	486	0	0
// OP_STORE_V	1	4	0
// OP_CALL1	484	0	0
// OP_STORE_V	888	4	0
// OP_CALL1	484	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_DONE	0	0	0
void () noclass = 
{
    dprint("noclass spawned at");
    dprint(vtos(self.origin));
    dprint("\n");
    remove(self);
};

// PlaceItem
// function begins at statement 10096, parm_start=8367
// OP_ADDRESS	28	408	8368
// OP_LOAD_S	28	130	8369
// OP_STOREP_S	8369	8368	0
// OP_ADDRESS	28	182	8370
// OP_STOREP_F	227	8370	0
// OP_LOAD_S	28	129	8371
// OP_NE_S	8371	6023	8372
// OP_IFNOT	8372	3	0
// OP_ADDRESS	28	104	8373
// OP_STOREP_F	244	8373	0
// OP_ADDRESS	28	103	8374
// OP_STOREP_F	237	8374	0
// OP_ADDRESS	28	113	8375
// OP_STOREP_V	926	8375	0
// OP_ADDRESS	28	108	8378
// OP_LOAD_F	28	108	8379
// OP_ADD_F	8379	829	8380
// OP_STOREP_F	8380	8378	0
// OP_LOAD_F	28	108	8381
// OP_STORE_F	8381	8367	0
// OP_CALL0	492	0	0
// OP_NOT_F	1	0	8382
// OP_IFNOT	8382	13	0
// OP_STORE_V	8383	4	0
// OP_CALL1	484	0	0
// OP_LOAD_V	28	105	8384
// OP_STORE_V	8384	4	0
// OP_CALL1	486	0	0
// OP_STORE_V	1	4	0
// OP_CALL1	484	0	0
// OP_STORE_V	888	4	0
// OP_CALL1	484	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_RETURN	0	0	0
// OP_DONE	0	0	0
void () PlaceItem = 
{
    local float oldz;
    self.mdl = self.model;
    self.flags = FL_ITEM;
    
    if(self.classname != "rally_flag")
    {
        self.solid = SOLID_TRIGGER;
    }
    
    self.movetype = MOVETYPE_TOSS;
    self.velocity = '0.000 0.000 0.000';
    self.origin_z = self.origin_z + 6.000;
    oldz = self.origin_z;
    
    if(!droptofloor())
    {
        dprint("Bonus item fell out of level at ");
        dprint(vtos(self.origin));
        dprint("\n");
        remove(self);
        return;
    }
    
};

// StartItem
// function begins at statement 10132, parm_start=8388
// OP_ADDRESS	28	150	8388
// OP_ADD_F	31	1152	8389
// OP_STOREP_F	8389	8388	0
// OP_ADDRESS	28	148	8390
// OP_STOREP_FNC	8366	8390	0
// OP_DONE	0	0	0
void () StartItem = 
{
    self.nextthink = time + 0.200;
    self.think = PlaceItem;
};

// T_Heal
// function begins at statement 10138, parm_start=8391
// OP_LOAD_F	8391	152	8394
// OP_LE	8394	817	8395
// OP_IFNOT	8395	2	0
// OP_RETURN	817	0	0
// OP_NOT_F	8393	0	8396
// OP_LOAD_F	8391	152	8397
// OP_LOAD_F	29	185	8398
// OP_GE	8397	8398	8399
// OP_AND	8396	8399	8400
// OP_IFNOT	8400	2	0
// OP_RETURN	817	0	0
// OP_STORE_V	8392	4	0
// OP_CALL1	496	0	0
// OP_STORE_F	1	8392	0
// OP_ADDRESS	8391	152	8401
// OP_LOAD_F	8391	152	8402
// OP_ADD_F	8402	8392	8403
// OP_STOREP_F	8403	8401	0
// OP_NOT_F	8393	0	8404
// OP_LOAD_F	8391	152	8405
// OP_LOAD_F	29	185	8406
// OP_GE	8405	8406	8407
// OP_AND	8404	8407	8408
// OP_IFNOT	8408	4	0
// OP_ADDRESS	8391	152	8409
// OP_LOAD_F	29	185	8410
// OP_STOREP_F	8410	8409	0
// OP_LOAD_F	8391	152	8411
// OP_GT	8411	1135	8412
// OP_IFNOT	8412	3	0
// OP_ADDRESS	8391	152	8413
// OP_STOREP_F	1135	8413	0
// OP_RETURN	819	0	0
// OP_DONE	0	0	0
float (entity e, float healamount, float ignore) T_Heal = 
{
    
    if(e.health <= 0.000)
    {
        return 0.000;
    }
    
    
    if(!ignore && (e.health >= other.max_health))
    {
        return 0.000;
    }
    
    healamount = ceil(healamount);
    e.health = e.health + healamount;
    
    if(!ignore && (e.health >= other.max_health))
    {
        e.health = other.max_health;
    }
    
    
    if(e.health > 250.000)
    {
        e.health = 250.000;
    }
    
    return 1.000;
};

float H_ROTTEN = 1.000;
float H_MEGA = 2.000;
.float healamount;
.float healtype;
void () health_touch;
void () item_megahealth_rot;
// item_health
// function begins at statement 10172, parm_start=8421
// OP_ADDRESS	28	146	8421
// OP_STOREP_FNC	8418	8421	0
// OP_LOAD_F	28	195	8422
// OP_BITAND	8422	8414	8423
// OP_IFNOT	8423	15	0
// OP_STORE_V	8424	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	8425	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8424	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	208	8426
// OP_STOREP_S	8425	8426	0
// OP_ADDRESS	28	8416	8427
// OP_STOREP_F	827	8427	0
// OP_ADDRESS	28	8417	8428
// OP_STOREP_F	817	8428	0
// OP_GOTO	31	0	0
// OP_LOAD_F	28	195	8429
// OP_BITAND	8429	8415	8430
// OP_IFNOT	8430	15	0
// OP_STORE_V	8431	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	8432	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8431	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	208	8433
// OP_STOREP_S	8432	8433	0
// OP_ADDRESS	28	8416	8434
// OP_STOREP_F	2611	8434	0
// OP_ADDRESS	28	8417	8435
// OP_STOREP_F	821	8435	0
// OP_GOTO	14	0	0
// OP_STORE_V	8436	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	8437	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8436	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	208	8438
// OP_STOREP_S	8437	8438	0
// OP_ADDRESS	28	8416	8439
// OP_STOREP_F	845	8439	0
// OP_ADDRESS	28	8417	8440
// OP_STOREP_F	819	8440	0
// OP_STORE_V	28	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	8441	10	0
// OP_CALL3	464	0	0
// OP_CALL0	8387	0	0
// OP_DONE	0	0	0
void () item_health = 
{
    self.touch = health_touch;
    if(self.spawnflags & H_ROTTEN)
    {
        precache_model("maps/b_bh10.bsp");
        precache_sound("items/r_item1.wav");
        setmodel(self, "maps/b_bh10.bsp");
        self.noise = "items/r_item1.wav";
        self.healamount = 5.000;
        self.healtype = 0.000;
    }
    else
    {
        if(self.spawnflags & H_MEGA)
        {
            precache_model("maps/b_bh100.bsp");
            precache_sound("items/r_item2.wav");
            setmodel(self, "maps/b_bh100.bsp");
            self.noise = "items/r_item2.wav";
            self.healamount = 50.000;
            self.healtype = 2.000;
        }
        else
        {
            precache_model("maps/b_bh25.bsp");
            precache_sound("items/health1.wav");
            setmodel(self, "maps/b_bh25.bsp");
            self.noise = "items/health1.wav";
            self.healamount = 15.000;
            self.healtype = 1.000;
        }
        
    }
    
    setsize(self, '0.000 0.000 0.000', '32.000 32.000 56.000');
    StartItem();
};

// health_touch
// function begins at statement 10227, parm_start=8444
// OP_LOAD_S	29	129	8446
// OP_NE_S	8446	880	8447
// OP_IFNOT	8447	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	8417	8448
// OP_EQ_F	8448	821	8449
// OP_IFNOT	8449	14	0
// OP_LOAD_F	29	152	8450
// OP_GE	8450	1135	8451
// OP_IFNOT	8451	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	29	4	0
// OP_LOAD_F	28	8416	8452
// OP_STORE_V	8452	7	0
// OP_STORE_V	819	10	0
// OP_CALL3	535	0	0
// OP_NOT_F	1	0	8453
// OP_IFNOT	8453	2	0
// OP_RETURN	0	0	0
// OP_GOTO	9	0	0
// OP_STORE_V	29	4	0
// OP_LOAD_F	28	8416	8454
// OP_STORE_V	8454	7	0
// OP_STORE_V	817	10	0
// OP_CALL3	535	0	0
// OP_NOT_F	1	0	8455
// OP_IFNOT	8455	2	0
// OP_RETURN	0	0	0
// OP_NE_F	35	855	8456
// OP_IFNOT	8456	14	0
// OP_STORE_V	29	4	0
// OP_STORE_V	8457	7	0
// OP_CALL2	483	0	0
// OP_LOAD_F	28	8416	8458
// OP_STORE_V	8458	4	0
// OP_CALL1	485	0	0
// OP_STORE_S	1	8445	0
// OP_STORE_V	29	4	0
// OP_STORE_V	8445	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	8459	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	337	7	0
// OP_LOAD_S	28	208	8460
// OP_STORE_V	8460	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6225	7	0
// OP_CALL2	480	0	0
// OP_ADDRESS	28	130	8461
// OP_STOREP_S	357	8461	0
// OP_ADDRESS	28	104	8462
// OP_STOREP_F	243	8462	0
// OP_LOAD_F	28	8417	8463
// OP_EQ_F	8463	821	8464
// OP_IFNOT	8464	13	0
// OP_ADDRESS	29	162	8465
// OP_LOAD_F	29	162	8466
// OP_BITOR	8466	275	8467
// OP_STOREP_F	8467	8465	0
// OP_ADDRESS	28	150	8468
// OP_ADD_F	31	827	8469
// OP_STOREP_F	8469	8468	0
// OP_ADDRESS	28	148	8470
// OP_STOREP_FNC	8419	8470	0
// OP_ADDRESS	28	201	8471
// OP_STOREP_ENT	29	8471	0
// OP_GOTO	9	0	0
// OP_EQ_F	738	825	8472
// OP_OR	35	8472	8473
// OP_IFNOT	8473	6	0
// OP_ADDRESS	28	150	8474
// OP_ADD_F	31	1112	8475
// OP_STOREP_F	8475	8474	0
// OP_ADDRESS	28	148	8476
// OP_STOREP_FNC	8353	8476	0
// OP_STORE_ENT	29	360	0
// OP_CALL0	532	0	0
// OP_DONE	0	0	0
void () health_touch = 
{
    local float amount;
    local string s;
    
    if(other.classname != "player")
    {
        return;
    }
    
    if(self.healtype == 2.000)
    {
        
        if(other.health >= 250.000)
        {
            return;
        }
        
        
        if(!T_Heal(other, self.healamount, 1.000))
        {
            return;
        }
        
    }
    else
    {
        
        if(!T_Heal(other, self.healamount, 0.000))
        {
            return;
        }
        
    }
    
    
    if(deathmatch != 10.000)
    {
        sprint(other, "You receive ");
        s = ftos(self.healamount);
        sprint(other, s);
        sprint(other, " health\n");
    }
    
    sound(other, CHAN_ITEM, self.noise, 1.000, ATTN_NORM);
    stuffcmd(other, "bf\n");
    self.model = string_null;
    self.solid = SOLID_NOT;
    if(self.healtype == 2.000)
    {
        other.items = other.items | IT_SUPERHEALTH;
        self.nextthink = time + 5.000;
        self.think = item_megahealth_rot;
        self.owner = other;
    }
    else
    {
        
        if(deathmatch || (rally_type_index == 4.000))
        {
            self.nextthink = time + 20.000;
            self.think = SUB_regen;
        }
        
    }
    
    activator = other;
    SUB_UseTargets();
};

// item_megahealth_rot
// function begins at statement 10310, parm_start=8477
// OP_LOAD_ENT	28	201	8477
// OP_STORE_ENT	8477	29	0
// OP_LOAD_F	29	152	8478
// OP_LOAD_F	29	185	8479
// OP_GT	8478	8479	8480
// OP_IFNOT	8480	9	0
// OP_ADDRESS	29	152	8481
// OP_LOAD_F	29	152	8482
// OP_SUB_F	8482	819	8483
// OP_STOREP_F	8483	8481	0
// OP_ADDRESS	28	150	8484
// OP_ADD_F	31	819	8485
// OP_STOREP_F	8485	8484	0
// OP_RETURN	0	0	0
// OP_ADDRESS	29	162	8486
// OP_LOAD_F	29	162	8487
// OP_LOAD_F	29	162	8488
// OP_BITAND	8488	275	8489
// OP_SUB_F	8487	8489	8490
// OP_STOREP_F	8490	8486	0
// OP_EQ_F	35	819	8491
// OP_IFNOT	8491	6	0
// OP_ADDRESS	28	150	8492
// OP_ADD_F	31	1112	8493
// OP_STOREP_F	8493	8492	0
// OP_ADDRESS	28	148	8494
// OP_STOREP_FNC	8353	8494	0
// OP_DONE	0	0	0
void () item_megahealth_rot = 
{
    other = self.owner;
    
    if(other.health > other.max_health)
    {
        other.health = other.health - 1.000;
        self.nextthink = time + 1.000;
        return;
    }
    
    other.items = other.items - (other.items & IT_SUPERHEALTH);
    
    if(deathmatch == 1.000)
    {
        self.nextthink = time + 20.000;
        self.think = SUB_regen;
    }
    
};

// armor_touch
// function begins at statement 10338, parm_start=8496
// OP_LOAD_F	29	152	8499
// OP_LE	8499	817	8500
// OP_IFNOT	8500	2	0
// OP_RETURN	0	0	0
// OP_LOAD_S	29	129	8501
// OP_NE_S	8501	880	8502
// OP_IFNOT	8502	2	0
// OP_RETURN	0	0	0
// OP_LOAD_S	28	129	8503
// OP_EQ_S	8503	8504	8505
// OP_IFNOT	8505	4	0
// OP_STORE_F	2575	8496	0
// OP_STORE_F	1957	8497	0
// OP_STORE_F	272	8498	0
// OP_LOAD_S	28	129	8506
// OP_EQ_S	8506	8507	8508
// OP_IFNOT	8508	4	0
// OP_STORE_F	2233	8496	0
// OP_STORE_F	1885	8497	0
// OP_STORE_F	273	8498	0
// OP_LOAD_S	28	129	8509
// OP_EQ_S	8509	8510	8511
// OP_IFNOT	8511	4	0
// OP_STORE_F	2236	8496	0
// OP_STORE_F	4760	8497	0
// OP_STORE_F	274	8498	0
// OP_LOAD_F	29	187	8512
// OP_LOAD_F	29	188	8513
// OP_MUL_F	8512	8513	8514
// OP_MUL_F	8496	8497	8515
// OP_GE	8514	8515	8516
// OP_IFNOT	8516	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	29	187	8517
// OP_STOREP_F	8496	8517	0
// OP_ADDRESS	29	188	8518
// OP_STOREP_F	8497	8518	0
// OP_ADDRESS	29	162	8519
// OP_LOAD_F	29	162	8520
// OP_LOAD_F	29	162	8521
// OP_BITOR	272	273	8522
// OP_BITOR	8522	274	8523
// OP_BITAND	8521	8523	8524
// OP_SUB_F	8520	8524	8525
// OP_ADD_F	8525	8498	8526
// OP_STOREP_F	8526	8519	0
// OP_ADDRESS	28	104	8527
// OP_STOREP_F	243	8527	0
// OP_ADDRESS	28	130	8528
// OP_STOREP_S	357	8528	0
// OP_EQ_F	35	819	8529
// OP_IFNOT	8529	4	0
// OP_ADDRESS	28	150	8530
// OP_ADD_F	31	1112	8531
// OP_STOREP_F	8531	8530	0
// OP_ADDRESS	28	148	8532
// OP_STOREP_FNC	8353	8532	0
// OP_STORE_V	29	4	0
// OP_STORE_V	8533	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	337	7	0
// OP_STORE_V	8534	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6225	7	0
// OP_CALL2	480	0	0
// OP_STORE_ENT	29	360	0
// OP_CALL0	532	0	0
// OP_DONE	0	0	0
void () armor_touch = 
{
    local float type;
    local float value;
    local float bit;
    
    if(other.health <= 0.000)
    {
        return;
    }
    
    
    if(other.classname != "player")
    {
        return;
    }
    
    
    if(self.classname == "item_armor1")
    {
        type = 0.300;
        value = 100.000;
        bit = IT_ARMOR1;
    }
    
    
    if(self.classname == "item_armor2")
    {
        type = 0.600;
        value = 150.000;
        bit = IT_ARMOR2;
    }
    
    
    if(self.classname == "item_armorInv")
    {
        type = 0.800;
        value = 200.000;
        bit = IT_ARMOR3;
    }
    
    
    if((other.armortype * other.armorvalue) >= (type * value))
    {
        return;
    }
    
    other.armortype = type;
    other.armorvalue = value;
    other.items = (other.items - (other.items & ((IT_ARMOR1 | IT_ARMOR2) | IT_ARMOR3))) + bit;
    self.solid = SOLID_NOT;
    self.model = string_null;
    
    if(deathmatch == 1.000)
    {
        self.nextthink = time + 20.000;
    }
    
    self.think = SUB_regen;
    sprint(other, "You got armor\n");
    sound(other, CHAN_ITEM, "items/armor1.wav", 1.000, ATTN_NORM);
    stuffcmd(other, "bf\n");
    activator = other;
    SUB_UseTargets();
};

// item_armor1
// function begins at statement 10410, parm_start=8536
// OP_ADDRESS	28	146	8536
// OP_STOREP_FNC	8495	8536	0
// OP_STORE_V	8537	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8537	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	132	8538
// OP_STOREP_F	817	8538	0
// OP_STORE_V	28	4	0
// OP_STORE_V	6849	7	0
// OP_STORE_V	8539	10	0
// OP_CALL3	464	0	0
// OP_CALL0	8387	0	0
// OP_DONE	0	0	0
void () item_armor1 = 
{
    self.touch = armor_touch;
    precache_model("progs/armor.mdl");
    setmodel(self, "progs/armor.mdl");
    self.skin = 0.000;
    setsize(self, '-16.000 -16.000 0.000', '16.000 16.000 56.000');
    StartItem();
};

// item_armor2
// function begins at statement 10425, parm_start=8543
// OP_ADDRESS	28	146	8543
// OP_STOREP_FNC	8495	8543	0
// OP_STORE_V	8537	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8537	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	132	8544
// OP_STOREP_F	819	8544	0
// OP_STORE_V	28	4	0
// OP_STORE_V	6849	7	0
// OP_STORE_V	8539	10	0
// OP_CALL3	464	0	0
// OP_CALL0	8387	0	0
// OP_DONE	0	0	0
void () item_armor2 = 
{
    self.touch = armor_touch;
    precache_model("progs/armor.mdl");
    setmodel(self, "progs/armor.mdl");
    self.skin = 1.000;
    setsize(self, '-16.000 -16.000 0.000', '16.000 16.000 56.000');
    StartItem();
};

// item_armorInv
// function begins at statement 10440, parm_start=8546
// OP_ADDRESS	28	146	8546
// OP_STOREP_FNC	8495	8546	0
// OP_STORE_V	8537	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8537	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	132	8547
// OP_STOREP_F	821	8547	0
// OP_STORE_V	28	4	0
// OP_STORE_V	6849	7	0
// OP_STORE_V	8539	10	0
// OP_CALL3	464	0	0
// OP_CALL0	8387	0	0
// OP_DONE	0	0	0
void () item_armorInv = 
{
    self.touch = armor_touch;
    precache_model("progs/armor.mdl");
    setmodel(self, "progs/armor.mdl");
    self.skin = 2.000;
    setsize(self, '-16.000 -16.000 0.000', '16.000 16.000 56.000');
    StartItem();
};

// bound_other_ammo
// function begins at statement 10455, parm_start=8549
// OP_LOAD_F	29	158	8549
// OP_GT	8549	1957	8550
// OP_IFNOT	8550	3	0
// OP_ADDRESS	29	158	8551
// OP_STOREP_F	1957	8551	0
// OP_LOAD_F	29	159	8552
// OP_GT	8552	4760	8553
// OP_IFNOT	8553	3	0
// OP_ADDRESS	29	159	8554
// OP_STOREP_F	4760	8554	0
// OP_LOAD_F	29	160	8555
// OP_GT	8555	1957	8556
// OP_IFNOT	8556	3	0
// OP_ADDRESS	29	160	8557
// OP_STOREP_F	1957	8557	0
// OP_LOAD_F	29	217	8558
// OP_GT	8558	1957	8559
// OP_IFNOT	8559	3	0
// OP_ADDRESS	29	217	8560
// OP_STOREP_F	1957	8560	0
// OP_DONE	0	0	0
void () bound_other_ammo = 
{
    
    if(other.ammo_shells > 100.000)
    {
        other.ammo_shells = 100.000;
    }
    
    
    if(other.ammo_nails > 200.000)
    {
        other.ammo_nails = 200.000;
    }
    
    
    if(other.ammo_rockets > 100.000)
    {
        other.ammo_rockets = 100.000;
    }
    
    
    if(other.ammo_roobar > 100.000)
    {
        other.ammo_roobar = 100.000;
    }
    
};

// RankForWeapon
// function begins at statement 10476, parm_start=8562
// OP_EQ_F	8562	265	8563
// OP_IFNOT	8563	2	0
// OP_RETURN	819	0	0
// OP_EQ_F	8562	263	8564
// OP_IFNOT	8564	2	0
// OP_RETURN	821	0	0
// OP_EQ_F	8562	279	8565
// OP_IFNOT	8565	2	0
// OP_RETURN	823	0	0
// OP_EQ_F	8562	278	8566
// OP_IFNOT	8566	2	0
// OP_RETURN	825	0	0
// OP_EQ_F	8562	280	8567
// OP_IFNOT	8567	2	0
// OP_RETURN	825	0	0
// OP_EQ_F	8562	277	8568
// OP_IFNOT	8568	2	0
// OP_RETURN	827	0	0
// OP_RETURN	829	0	0
// OP_DONE	0	0	0
float (float w) RankForWeapon = 
{
    
    if(w == IT_ROCKET_LAUNCHER)
    {
        return 1.000;
    }
    
    
    if(w == IT_SUPER_NAILGUN)
    {
        return 2.000;
    }
    
    
    if(w == IT_MINE_LAUNCHER)
    {
        return 3.000;
    }
    
    
    if(w == IT_DETONATOR)
    {
        return 4.000;
    }
    
    
    if(w == IT_LASER_GUN)
    {
        return 4.000;
    }
    
    
    if(w == IT_ROOBAR)
    {
        return 5.000;
    }
    
    return 6.000;
};

// Deathmatch_Weapon
// function begins at statement 10496, parm_start=8570
// OP_LOAD_F	28	154	8574
// OP_STORE_V	8574	4	0
// OP_CALL1	8561	0	0
// OP_STORE_F	1	8572	0
// OP_STORE_V	8571	4	0
// OP_CALL1	8561	0	0
// OP_STORE_F	1	8573	0
// OP_LT	8573	8572	8575
// OP_IFNOT	8575	3	0
// OP_ADDRESS	28	154	8576
// OP_STOREP_F	8571	8576	0
// OP_DONE	0	0	0
void (float old, float new) Deathmatch_Weapon = 
{
    local float or;
    local float nr;
    or = RankForWeapon(self.weapon);
    nr = RankForWeapon(new);
    
    if(nr < or)
    {
        self.weapon = new;
    }
    
};

float () W_BestWeapon;
// weapon_touch
// function begins at statement 10508, parm_start=8578
// OP_LOAD_F	29	182	8584
// OP_BITAND	8584	222	8585
// OP_NOT_F	8585	0	8586
// OP_LOAD_S	29	129	8587
// OP_EQ_S	8587	3609	8588
// OP_LOAD_S	28	129	8589
// OP_EQ_S	8589	8590	8591
// OP_AND	8588	8591	8592
// OP_NOT_F	8592	0	8593
// OP_AND	8586	8593	8594
// OP_IFNOT	8594	2	0
// OP_RETURN	0	0	0
// OP_LOAD_S	28	129	8595
// OP_EQ_S	8595	8596	8597
// OP_LOAD_S	28	129	8598
// OP_EQ_S	8598	8599	8600
// OP_OR	8597	8600	8601
// OP_LOAD_S	28	129	8602
// OP_EQ_S	8602	8603	8604
// OP_OR	8601	8604	8605
// OP_IFNOT	8605	2	0
// OP_RETURN	0	0	0
// OP_STORE_ENT	28	8582	0
// OP_STORE_ENT	29	28	0
// OP_CALL0	8577	0	0
// OP_STORE_F	1	8579	0
// OP_STORE_ENT	8582	28	0
// OP_STORE_F	819	8583	0
// OP_LOAD_S	28	129	8606
// OP_EQ_S	8606	8603	8607
// OP_IFNOT	8607	3	0
// OP_RETURN	0	0	0
// OP_GOTO	147	0	0
// OP_LOAD_S	28	129	8608
// OP_EQ_S	8608	8609	8610
// OP_IFNOT	8610	14	0
// OP_LOAD_F	29	162	8611
// OP_BITAND	8611	263	8612
// OP_AND	8583	8612	8613
// OP_IFNOT	8613	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	160	8614
// OP_STORE_F	8614	8578	0
// OP_STORE_F	263	8580	0
// OP_ADDRESS	29	159	8615
// OP_LOAD_F	29	159	8616
// OP_ADD_F	8616	2522	8617
// OP_STOREP_F	8617	8615	0
// OP_GOTO	131	0	0
// OP_LOAD_S	28	129	8618
// OP_EQ_S	8618	8596	8619
// OP_IFNOT	8619	15	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	162	8620
// OP_BITAND	8620	261	8621
// OP_AND	8583	8621	8622
// OP_IFNOT	8622	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	160	8623
// OP_STORE_F	8623	8578	0
// OP_STORE_F	261	8580	0
// OP_ADDRESS	29	158	8624
// OP_LOAD_F	29	158	8625
// OP_ADD_F	8625	827	8626
// OP_STOREP_F	8626	8624	0
// OP_GOTO	114	0	0
// OP_LOAD_S	28	129	8627
// OP_EQ_S	8627	8590	8628
// OP_IFNOT	8628	30	0
// OP_LOAD_F	29	162	8629
// OP_BITAND	8629	265	8630
// OP_AND	8583	8630	8631
// OP_IFNOT	8631	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	160	8632
// OP_STORE_F	8632	8578	0
// OP_STORE_F	265	8580	0
// OP_ADDRESS	29	160	8633
// OP_LOAD_F	29	160	8634
// OP_ADD_F	8634	855	8635
// OP_STOREP_F	8635	8633	0
// OP_LOAD_F	29	182	8636
// OP_BITAND	8636	222	8637
// OP_IFNOT	8637	8	0
// OP_STORE_V	29	4	0
// OP_STORE_V	8638	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	888	7	0
// OP_CALL2	483	0	0
// OP_GOTO	7	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	337	7	0
// OP_STORE_V	8639	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	82	0	0
// OP_LOAD_S	28	129	8640
// OP_EQ_S	8640	8641	8642
// OP_IFNOT	8642	17	0
// OP_LOAD_F	29	162	8643
// OP_BITAND	8643	280	8644
// OP_AND	8583	8644	8645
// OP_IFNOT	8645	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	217	8646
// OP_STORE_F	8646	8578	0
// OP_STORE_F	280	8580	0
// OP_ADDRESS	29	217	8647
// OP_LOAD_F	29	217	8648
// OP_ADD_F	8648	1380	8649
// OP_STOREP_F	8649	8647	0
// OP_STORE_V	29	4	0
// OP_STORE_V	8650	7	0
// OP_CALL2	483	0	0
// OP_GOTO	63	0	0
// OP_LOAD_S	28	129	8651
// OP_EQ_S	8651	8652	8653
// OP_LOAD_S	28	129	8654
// OP_EQ_S	8654	8655	8656
// OP_OR	8653	8656	8657
// OP_IFNOT	8657	17	0
// OP_LOAD_F	29	162	8658
// OP_BITAND	8658	279	8659
// OP_AND	8583	8659	8660
// OP_IFNOT	8660	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	160	8661
// OP_STORE_F	8661	8578	0
// OP_STORE_F	279	8580	0
// OP_ADDRESS	29	160	8662
// OP_LOAD_F	29	160	8663
// OP_ADD_F	8663	855	8664
// OP_STOREP_F	8664	8662	0
// OP_STORE_V	29	4	0
// OP_STORE_V	8665	7	0
// OP_CALL2	483	0	0
// OP_GOTO	41	0	0
// OP_LOAD_S	28	129	8666
// OP_EQ_S	8666	8667	8668
// OP_IFNOT	8668	17	0
// OP_LOAD_F	29	162	8669
// OP_BITAND	8669	278	8670
// OP_AND	8583	8670	8671
// OP_IFNOT	8671	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	160	8672
// OP_STORE_F	8672	8578	0
// OP_STORE_F	278	8580	0
// OP_ADDRESS	29	160	8673
// OP_LOAD_F	29	160	8674
// OP_ADD_F	8674	855	8675
// OP_STOREP_F	8675	8673	0
// OP_STORE_V	29	4	0
// OP_STORE_V	8676	7	0
// OP_CALL2	483	0	0
// OP_GOTO	22	0	0
// OP_LOAD_S	28	129	8677
// OP_EQ_S	8677	8678	8679
// OP_IFNOT	8679	17	0
// OP_LOAD_F	29	162	8680
// OP_BITAND	8680	277	8681
// OP_AND	8583	8681	8682
// OP_IFNOT	8682	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	217	8683
// OP_STORE_F	8683	8578	0
// OP_STORE_F	277	8580	0
// OP_ADDRESS	29	217	8684
// OP_LOAD_F	29	217	8685
// OP_ADD_F	8685	2611	8686
// OP_STOREP_F	8686	8684	0
// OP_STORE_V	29	4	0
// OP_STORE_V	8687	7	0
// OP_CALL2	483	0	0
// OP_GOTO	3	0	0
// OP_STORE_V	8688	4	0
// OP_CALL1	470	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	337	7	0
// OP_STORE_V	8639	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_LOAD_F	29	182	8689
// OP_BITAND	8689	222	8690
// OP_IFNOT	8690	4	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6225	7	0
// OP_CALL2	480	0	0
// OP_CALL0	8548	0	0
// OP_LOAD_F	29	162	8691
// OP_STORE_F	8691	8581	0
// OP_ADDRESS	29	162	8692
// OP_LOAD_F	29	162	8693
// OP_BITOR	8693	8580	8694
// OP_STOREP_F	8694	8692	0
// OP_STORE_ENT	28	8582	0
// OP_STORE_ENT	29	28	0
// OP_NOT_F	35	0	8695
// OP_IFNOT	8695	4	0
// OP_ADDRESS	28	154	8696
// OP_STOREP_F	8580	8696	0
// OP_GOTO	4	0	0
// OP_STORE_V	8581	4	0
// OP_STORE_V	8580	7	0
// OP_CALL2	8569	0	0
// OP_CALL0	931	0	0
// OP_STORE_ENT	8582	28	0
// OP_IFNOT	8583	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	130	8697
// OP_STOREP_S	357	8697	0
// OP_ADDRESS	28	104	8698
// OP_STOREP_F	243	8698	0
// OP_EQ_F	35	819	8699
// OP_EQ_F	738	825	8700
// OP_OR	8699	8700	8701
// OP_IFNOT	8701	4	0
// OP_ADDRESS	28	150	8702
// OP_ADD_F	31	2522	8703
// OP_STOREP_F	8703	8702	0
// OP_ADDRESS	28	148	8704
// OP_STOREP_FNC	8353	8704	0
// OP_STORE_ENT	29	360	0
// OP_CALL0	532	0	0
// OP_DONE	0	0	0
void () weapon_touch = 
{
    local float hadammo;
    local float best;
    local float new;
    local float old;
    local entity stemp;
    local float leave;
    
    if((!(other.flags & FL_CLIENT)) && (!((other.classname == "rally_dude") && (self.classname == "weapon_rocketlauncher"))))
    {
        return;
    }
    
    
    if(((self.classname == "weapon_supershotgun") || (self.classname == "weapon_shotgun")) || (self.classname == "weapon_nailgun"))
    {
        return;
    }
    
    stemp = self;
    self = other;
    best = W_BestWeapon();
    self = stemp;
    leave = 1.000;
    if(self.classname == "weapon_nailgun")
    {
        return;
    }
    else
    {
        if(self.classname == "weapon_supernailgun")
        {
            
            if(leave && (other.items & IT_SUPER_NAILGUN))
            {
                return;
            }
            
            hadammo = other.ammo_rockets;
            new = IT_SUPER_NAILGUN;
            other.ammo_nails = other.ammo_nails + 30.000;
        }
        else
        {
            if(self.classname == "weapon_supershotgun")
            {
                return;
                
                if(leave && (other.items & IT_SUPER_SHOTGUN))
                {
                    return;
                }
                
                hadammo = other.ammo_rockets;
                new = IT_SUPER_SHOTGUN;
                other.ammo_shells = other.ammo_shells + 5.000;
            }
            else
            {
                if(self.classname == "weapon_rocketlauncher")
                {
                    
                    if(leave && (other.items & IT_ROCKET_LAUNCHER))
                    {
                        return;
                    }
                    
                    hadammo = other.ammo_rockets;
                    new = IT_ROCKET_LAUNCHER;
                    other.ammo_rockets = other.ammo_rockets + 10.000;
                    if(other.flags & FL_CLIENT)
                    {
                        sprint(other, "You got the Rocket Launcher");
                        sprint(other, "\n");
                    }
                    else
                    {
                        sound(other, CHAN_ITEM, "weapons/pkup.wav", 1.000, ATTN_NORM);
                    }
                    
                }
                else
                {
                    if(self.classname == "weapon_lasergun")
                    {
                        
                        if(leave && (other.items & IT_LASER_GUN))
                        {
                            return;
                        }
                        
                        hadammo = other.ammo_roobar;
                        new = IT_LASER_GUN;
                        other.ammo_roobar = other.ammo_roobar + 25.000;
                        sprint(other, "You got the Laser Gun\n");
                    }
                    else
                    {
                        if((self.classname == "weapon_grenadelauncher") || (self.classname == "weapon_minelauncher"))
                        {
                            
                            if(leave && (other.items & IT_MINE_LAUNCHER))
                            {
                                return;
                            }
                            
                            hadammo = other.ammo_rockets;
                            new = IT_MINE_LAUNCHER;
                            other.ammo_rockets = other.ammo_rockets + 10.000;
                            sprint(other, "You got the Mine Launcher\n");
                        }
                        else
                        {
                            if(self.classname == "weapon_detonator")
                            {
                                
                                if(leave && (other.items & IT_DETONATOR))
                                {
                                    return;
                                }
                                
                                hadammo = other.ammo_rockets;
                                new = IT_DETONATOR;
                                other.ammo_rockets = other.ammo_rockets + 10.000;
                                sprint(other, "You got the Detonator\n");
                            }
                            else
                            {
                                if(self.classname == "weapon_repulsor")
                                {
                                    
                                    if(leave && (other.items & IT_ROOBAR))
                                    {
                                        return;
                                    }
                                    
                                    hadammo = other.ammo_roobar;
                                    new = IT_ROOBAR;
                                    other.ammo_roobar = other.ammo_roobar + 50.000;
                                    sprint(other, "You got the Repulsor\n");
                                }
                                else
                                {
                                    objerror("weapon_touch: unknown classname");
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
    }
    
    sound(other, CHAN_ITEM, "weapons/pkup.wav", 1.000, ATTN_NORM);
    
    if(other.flags & FL_CLIENT)
    {
        stuffcmd(other, "bf\n");
    }
    
    bound_other_ammo();
    old = other.items;
    other.items = other.items | new;
    stemp = self;
    self = other;
    if(!deathmatch)
    {
        self.weapon = new;
    }
    else
    {
        Deathmatch_Weapon(old, new);
    }
    
    W_SetCurrentAmmo();
    self = stemp;
    
    if(leave)
    {
        return;
    }
    
    self.model = string_null;
    self.solid = SOLID_NOT;
    
    if((deathmatch == 1.000) || (rally_type_index == 4.000))
    {
        self.nextthink = time + 30.000;
    }
    
    self.think = SUB_regen;
    activator = other;
    SUB_UseTargets();
};

// weapon_supershotgun
// function begins at statement 10736, parm_start=8706
// OP_EQ_F	738	819	8706
// OP_IFNOT	8706	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	8707	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8707	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	154	8708
// OP_STOREP_F	261	8708	0
// OP_ADDRESS	28	180	8709
// OP_STOREP_S	8710	8709	0
// OP_ADDRESS	28	146	8711
// OP_STOREP_FNC	7172	8711	0
// OP_STORE_V	28	4	0
// OP_STORE_V	6849	7	0
// OP_STORE_V	8539	10	0
// OP_CALL3	464	0	0
// OP_CALL0	8387	0	0
// OP_DONE	0	0	0
void () weapon_supershotgun = 
{
    
    if(rally_type_index == 1.000)
    {
        return;
    }
    
    precache_model("progs/g_shot.mdl");
    setmodel(self, "progs/g_shot.mdl");
    self.weapon = IT_SUPER_SHOTGUN;
    self.netname = "Double-barrelled Shotgun";
    self.touch = weapon_touch;
    setsize(self, '-16.000 -16.000 0.000', '16.000 16.000 56.000');
    StartItem();
};

// weapon_nailgun
// function begins at statement 10756, parm_start=8713
// OP_EQ_F	738	819	8713
// OP_IFNOT	8713	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	8714	4	0
// OP_CALL1	479	0	0
// OP_DONE	0	0	0
void () weapon_nailgun = 
{
    
    if(rally_type_index == 1.000)
    {
        return;
    }
    
    precache_model("progs/g_nail.mdl");
};

// weapon_supernailgun
// function begins at statement 10762, parm_start=8716
// OP_EQ_F	738	819	8716
// OP_IFNOT	8716	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	8717	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8717	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	154	8718
// OP_STOREP_F	263	8718	0
// OP_ADDRESS	28	180	8719
// OP_STOREP_S	8720	8719	0
// OP_ADDRESS	28	146	8721
// OP_STOREP_FNC	7172	8721	0
// OP_STORE_V	28	4	0
// OP_STORE_V	6849	7	0
// OP_STORE_V	8539	10	0
// OP_CALL3	464	0	0
// OP_CALL0	8387	0	0
// OP_DONE	0	0	0
void () weapon_supernailgun = 
{
    
    if(rally_type_index == 1.000)
    {
        return;
    }
    
    precache_model("progs/g_nail2.mdl");
    setmodel(self, "progs/g_nail2.mdl");
    self.weapon = IT_SUPER_NAILGUN;
    self.netname = "Super Nailgun";
    self.touch = weapon_touch;
    setsize(self, '-16.000 -16.000 0.000', '16.000 16.000 56.000');
    StartItem();
};

// weapon_rocketlauncher
// function begins at statement 10782, parm_start=8723
// OP_EQ_F	738	819	8723
// OP_IFNOT	8723	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	8724	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8724	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	154	8725
// OP_STOREP_F	823	8725	0
// OP_ADDRESS	28	180	8726
// OP_STOREP_S	8727	8726	0
// OP_ADDRESS	28	146	8728
// OP_STOREP_FNC	7172	8728	0
// OP_STORE_V	28	4	0
// OP_STORE_V	6849	7	0
// OP_STORE_V	8539	10	0
// OP_CALL3	464	0	0
// OP_CALL0	8387	0	0
// OP_DONE	0	0	0
void () weapon_rocketlauncher = 
{
    
    if(rally_type_index == 1.000)
    {
        return;
    }
    
    precache_model("progs/g_rock2.mdl");
    setmodel(self, "progs/g_rock2.mdl");
    self.weapon = 3.000;
    self.netname = "Rocket Launcher";
    self.touch = weapon_touch;
    setsize(self, '-16.000 -16.000 0.000', '16.000 16.000 56.000');
    StartItem();
};

// weapon_repulsor
// function begins at statement 10802, parm_start=8730
// OP_EQ_F	738	819	8730
// OP_IFNOT	8730	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	8731	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8731	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	154	8732
// OP_STOREP_F	277	8732	0
// OP_ADDRESS	28	180	8733
// OP_STOREP_S	8734	8733	0
// OP_ADDRESS	28	146	8735
// OP_STOREP_FNC	7172	8735	0
// OP_STORE_V	28	4	0
// OP_STORE_V	6849	7	0
// OP_STORE_V	8539	10	0
// OP_CALL3	464	0	0
// OP_CALL0	8387	0	0
// OP_DONE	0	0	0
void () weapon_repulsor = 
{
    
    if(rally_type_index == 1.000)
    {
        return;
    }
    
    precache_model("models/g_replsr.mdl");
    setmodel(self, "models/g_replsr.mdl");
    self.weapon = IT_ROOBAR;
    self.netname = "Repulsor";
    self.touch = weapon_touch;
    setsize(self, '-16.000 -16.000 0.000', '16.000 16.000 56.000');
    StartItem();
};

// weapon_detonator
// function begins at statement 10822, parm_start=8737
// OP_EQ_F	738	819	8737
// OP_IFNOT	8737	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	8738	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8738	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	154	8739
// OP_STOREP_F	278	8739	0
// OP_ADDRESS	28	180	8740
// OP_STOREP_S	8741	8740	0
// OP_ADDRESS	28	146	8742
// OP_STOREP_FNC	7172	8742	0
// OP_STORE_V	28	4	0
// OP_STORE_V	6849	7	0
// OP_STORE_V	8539	10	0
// OP_CALL3	464	0	0
// OP_CALL0	8387	0	0
// OP_DONE	0	0	0
void () weapon_detonator = 
{
    
    if(rally_type_index == 1.000)
    {
        return;
    }
    
    precache_model("models/g_detntr.mdl");
    setmodel(self, "models/g_detntr.mdl");
    self.weapon = IT_DETONATOR;
    self.netname = "Detonator";
    self.touch = weapon_touch;
    setsize(self, '-16.000 -16.000 0.000', '16.000 16.000 56.000');
    StartItem();
};

// weapon_grenadelauncher
// function begins at statement 10842, parm_start=8744
// OP_ADDRESS	28	129	8744
// OP_STOREP_S	8667	8744	0
// OP_CALL0	8736	0	0
// OP_RETURN	0	0	0
// OP_EQ_F	738	819	8745
// OP_IFNOT	8745	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	8746	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8746	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	154	8747
// OP_STOREP_F	823	8747	0
// OP_ADDRESS	28	180	8748
// OP_STOREP_S	8749	8748	0
// OP_ADDRESS	28	146	8750
// OP_STOREP_FNC	7172	8750	0
// OP_STORE_V	28	4	0
// OP_STORE_V	6849	7	0
// OP_STORE_V	8539	10	0
// OP_CALL3	464	0	0
// OP_CALL0	8387	0	0
// OP_DONE	0	0	0
void () weapon_grenadelauncher = 
{
    self.classname = "weapon_detonator";
    weapon_detonator();
    return;
    
    if(rally_type_index == 1.000)
    {
        return;
    }
    
    precache_model("progs/g_rock.mdl");
    setmodel(self, "progs/g_rock.mdl");
    self.weapon = 3.000;
    self.netname = "Grenade Launcher";
    self.touch = weapon_touch;
    setsize(self, '-16.000 -16.000 0.000', '16.000 16.000 56.000');
    StartItem();
};

// weapon_minelauncher
// function begins at statement 10866, parm_start=8752
// OP_EQ_F	738	819	8752
// OP_IFNOT	8752	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	8753	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8753	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	154	8754
// OP_STOREP_F	279	8754	0
// OP_ADDRESS	28	180	8755
// OP_STOREP_S	8756	8755	0
// OP_ADDRESS	28	146	8757
// OP_STOREP_FNC	7172	8757	0
// OP_STORE_V	28	4	0
// OP_STORE_V	6849	7	0
// OP_STORE_V	8539	10	0
// OP_CALL3	464	0	0
// OP_CALL0	8387	0	0
// OP_DONE	0	0	0
void () weapon_minelauncher = 
{
    
    if(rally_type_index == 1.000)
    {
        return;
    }
    
    precache_model("models/g_mine.mdl");
    setmodel(self, "models/g_mine.mdl");
    self.weapon = IT_MINE_LAUNCHER;
    self.netname = "Mine Launcher";
    self.touch = weapon_touch;
    setsize(self, '-16.000 -16.000 0.000', '16.000 16.000 56.000');
    StartItem();
};

// weapon_lasergun
// function begins at statement 10886, parm_start=8759
// OP_EQ_F	738	819	8759
// OP_IFNOT	8759	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	8760	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8760	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	154	8761
// OP_STOREP_F	280	8761	0
// OP_ADDRESS	28	180	8762
// OP_STOREP_S	8763	8762	0
// OP_ADDRESS	28	146	8764
// OP_STOREP_FNC	7172	8764	0
// OP_STORE_V	28	4	0
// OP_STORE_V	6849	7	0
// OP_STORE_V	8539	10	0
// OP_CALL3	464	0	0
// OP_CALL0	8387	0	0
// OP_DONE	0	0	0
void () weapon_lasergun = 
{
    
    if(rally_type_index == 1.000)
    {
        return;
    }
    
    precache_model("progs/g_light.mdl");
    setmodel(self, "progs/g_light.mdl");
    self.weapon = IT_LASER_GUN;
    self.netname = "Laser Gun";
    self.touch = weapon_touch;
    setsize(self, '-16.000 -16.000 0.000', '16.000 16.000 56.000');
    StartItem();
};

// ammo_touch
// function begins at statement 10906, parm_start=8765
// OP_LOAD_S	29	129	8767
// OP_NE_S	8767	880	8768
// OP_IFNOT	8768	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	152	8769
// OP_LE	8769	817	8770
// OP_IFNOT	8770	2	0
// OP_RETURN	0	0	0
// OP_STORE_ENT	28	8765	0
// OP_STORE_ENT	29	28	0
// OP_CALL0	8577	0	0
// OP_STORE_F	1	8766	0
// OP_STORE_ENT	8765	28	0
// OP_LOAD_F	28	154	8771
// OP_EQ_F	8771	819	8772
// OP_IFNOT	8772	10	0
// OP_LOAD_F	29	158	8773
// OP_GE	8773	1957	8774
// OP_IFNOT	8774	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	29	158	8775
// OP_LOAD_F	29	158	8776
// OP_LOAD_F	28	433	8777
// OP_ADD_F	8776	8777	8778
// OP_STOREP_F	8778	8775	0
// OP_LOAD_F	28	154	8779
// OP_EQ_F	8779	821	8780
// OP_IFNOT	8780	10	0
// OP_LOAD_F	29	159	8781
// OP_GE	8781	4760	8782
// OP_IFNOT	8782	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	29	159	8783
// OP_LOAD_F	29	159	8784
// OP_LOAD_F	28	433	8785
// OP_ADD_F	8784	8785	8786
// OP_STOREP_F	8786	8783	0
// OP_LOAD_F	28	154	8787
// OP_EQ_F	8787	823	8788
// OP_IFNOT	8788	10	0
// OP_LOAD_F	29	160	8789
// OP_GE	8789	1957	8790
// OP_IFNOT	8790	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	29	160	8791
// OP_LOAD_F	29	160	8792
// OP_LOAD_F	28	433	8793
// OP_ADD_F	8792	8793	8794
// OP_STOREP_F	8794	8791	0
// OP_LOAD_F	28	154	8795
// OP_EQ_F	8795	825	8796
// OP_IFNOT	8796	10	0
// OP_LOAD_F	29	217	8797
// OP_GE	8797	1957	8798
// OP_IFNOT	8798	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	29	217	8799
// OP_LOAD_F	29	217	8800
// OP_LOAD_F	28	433	8801
// OP_ADD_F	8800	8801	8802
// OP_STOREP_F	8802	8799	0
// OP_CALL0	8548	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	8803	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_LOAD_S	28	180	8804
// OP_STORE_V	8804	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	888	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	337	7	0
// OP_STORE_V	8805	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6225	7	0
// OP_CALL2	480	0	0
// OP_LOAD_F	29	154	8806
// OP_EQ_F	8806	8766	8807
// OP_IFNOT	8807	8	0
// OP_STORE_ENT	28	8765	0
// OP_STORE_ENT	29	28	0
// OP_ADDRESS	28	154	8808
// OP_CALL0	8577	0	0
// OP_STOREP_F	1	8808	0
// OP_CALL0	931	0	0
// OP_STORE_ENT	8765	28	0
// OP_STORE_ENT	28	8765	0
// OP_STORE_ENT	29	28	0
// OP_CALL0	931	0	0
// OP_STORE_ENT	8765	28	0
// OP_ADDRESS	28	130	8809
// OP_STOREP_S	357	8809	0
// OP_ADDRESS	28	104	8810
// OP_STOREP_F	243	8810	0
// OP_IFNOT	35	4	0
// OP_ADDRESS	28	150	8811
// OP_ADD_F	31	2522	8812
// OP_STOREP_F	8812	8811	0
// OP_ADDRESS	28	148	8813
// OP_STOREP_FNC	8353	8813	0
// OP_STORE_ENT	29	360	0
// OP_CALL0	532	0	0
// OP_EQ_F	738	825	8814
// OP_IFNOT	8814	3	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_DONE	0	0	0
void () ammo_touch = 
{
    local entity stemp;
    local float best;
    
    if(other.classname != "player")
    {
        return;
    }
    
    
    if(other.health <= 0.000)
    {
        return;
    }
    
    stemp = self;
    self = other;
    best = W_BestWeapon();
    self = stemp;
    
    if(self.weapon == 1.000)
    {
        
        if(other.ammo_shells >= 100.000)
        {
            return;
        }
        
        other.ammo_shells = other.ammo_shells + self.aflag;
    }
    
    
    if(self.weapon == 2.000)
    {
        
        if(other.ammo_nails >= 200.000)
        {
            return;
        }
        
        other.ammo_nails = other.ammo_nails + self.aflag;
    }
    
    
    if(self.weapon == 3.000)
    {
        
        if(other.ammo_rockets >= 100.000)
        {
            return;
        }
        
        other.ammo_rockets = other.ammo_rockets + self.aflag;
    }
    
    
    if(self.weapon == 4.000)
    {
        
        if(other.ammo_roobar >= 100.000)
        {
            return;
        }
        
        other.ammo_roobar = other.ammo_roobar + self.aflag;
    }
    
    bound_other_ammo();
    sprint(other, "You got the ");
    sprint(other, self.netname);
    sprint(other, "\n");
    sound(other, CHAN_ITEM, "weapons/lock4.wav", 1.000, ATTN_NORM);
    stuffcmd(other, "bf\n");
    
    if(other.weapon == best)
    {
        stemp = self;
        self = other;
        self.weapon = W_BestWeapon();
        W_SetCurrentAmmo();
        self = stemp;
    }
    
    stemp = self;
    self = other;
    W_SetCurrentAmmo();
    self = stemp;
    self.model = string_null;
    self.solid = SOLID_NOT;
    
    if(deathmatch)
    {
        self.nextthink = time + 30.000;
    }
    
    self.think = SUB_regen;
    activator = other;
    SUB_UseTargets();
    
    if(rally_type_index == 4.000)
    {
        remove(self);
    }
    
};

float WEAPON_BIG2 = 1.000;
// item_shells
// function begins at statement 11018, parm_start=8817
// OP_EQ_F	738	819	8817
// OP_IFNOT	8817	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	146	8818
// OP_STOREP_FNC	7171	8818	0
// OP_LOAD_F	28	195	8819
// OP_BITAND	8819	8815	8820
// OP_IFNOT	8820	9	0
// OP_STORE_V	8821	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8821	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	433	8822
// OP_STOREP_F	1632	8822	0
// OP_GOTO	8	0	0
// OP_STORE_V	8823	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8823	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	433	8824
// OP_STOREP_F	1112	8824	0
// OP_ADDRESS	28	154	8825
// OP_STOREP_F	819	8825	0
// OP_ADDRESS	28	180	8826
// OP_STOREP_S	8827	8826	0
// OP_STORE_V	28	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	8441	10	0
// OP_CALL3	464	0	0
// OP_CALL0	8387	0	0
// OP_DONE	0	0	0
void () item_shells = 
{
    
    if(rally_type_index == 1.000)
    {
        return;
    }
    
    self.touch = ammo_touch;
    if(self.spawnflags & WEAPON_BIG2)
    {
        precache_model("maps/b_shell1.bsp");
        setmodel(self, "maps/b_shell1.bsp");
        self.aflag = 40.000;
    }
    else
    {
        precache_model("maps/b_shell0.bsp");
        setmodel(self, "maps/b_shell0.bsp");
        self.aflag = 20.000;
    }
    
    self.weapon = 1.000;
    self.netname = "shells";
    setsize(self, '0.000 0.000 0.000', '32.000 32.000 56.000');
    StartItem();
};

// item_spikes
// function begins at statement 11051, parm_start=8829
// OP_EQ_F	738	819	8829
// OP_IFNOT	8829	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	146	8830
// OP_STOREP_FNC	7171	8830	0
// OP_LOAD_F	28	195	8831
// OP_BITAND	8831	8815	8832
// OP_IFNOT	8832	9	0
// OP_STORE_V	8833	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8833	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	433	8834
// OP_STOREP_F	2611	8834	0
// OP_GOTO	8	0	0
// OP_STORE_V	8835	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8835	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	433	8836
// OP_STOREP_F	1380	8836	0
// OP_ADDRESS	28	154	8837
// OP_STOREP_F	821	8837	0
// OP_ADDRESS	28	180	8838
// OP_STOREP_S	8839	8838	0
// OP_STORE_V	28	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	8441	10	0
// OP_CALL3	464	0	0
// OP_CALL0	8387	0	0
// OP_DONE	0	0	0
void () item_spikes = 
{
    
    if(rally_type_index == 1.000)
    {
        return;
    }
    
    self.touch = ammo_touch;
    if(self.spawnflags & WEAPON_BIG2)
    {
        precache_model("maps/b_nail1.bsp");
        setmodel(self, "maps/b_nail1.bsp");
        self.aflag = 50.000;
    }
    else
    {
        precache_model("maps/b_nail0.bsp");
        setmodel(self, "maps/b_nail0.bsp");
        self.aflag = 25.000;
    }
    
    self.weapon = 2.000;
    self.netname = "nails";
    setsize(self, '0.000 0.000 0.000', '32.000 32.000 56.000');
    StartItem();
};

// item_rockets
// function begins at statement 11084, parm_start=8841
// OP_EQ_F	738	819	8841
// OP_IFNOT	8841	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	146	8842
// OP_STOREP_FNC	7171	8842	0
// OP_LOAD_F	28	195	8843
// OP_BITAND	8843	8815	8844
// OP_IFNOT	8844	9	0
// OP_STORE_V	8845	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8845	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	433	8846
// OP_STOREP_F	855	8846	0
// OP_GOTO	8	0	0
// OP_STORE_V	8847	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8847	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	433	8848
// OP_STOREP_F	827	8848	0
// OP_ADDRESS	28	154	8849
// OP_STOREP_F	823	8849	0
// OP_ADDRESS	28	180	8850
// OP_STOREP_S	8851	8850	0
// OP_STORE_V	28	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	8441	10	0
// OP_CALL3	464	0	0
// OP_CALL0	8387	0	0
// OP_DONE	0	0	0
void () item_rockets = 
{
    
    if(rally_type_index == 1.000)
    {
        return;
    }
    
    self.touch = ammo_touch;
    if(self.spawnflags & WEAPON_BIG2)
    {
        precache_model("maps/b_rock1.bsp");
        setmodel(self, "maps/b_rock1.bsp");
        self.aflag = 10.000;
    }
    else
    {
        precache_model("maps/b_rock0.bsp");
        setmodel(self, "maps/b_rock0.bsp");
        self.aflag = 5.000;
    }
    
    self.weapon = 3.000;
    self.netname = "rockets";
    setsize(self, '0.000 0.000 0.000', '32.000 32.000 56.000');
    StartItem();
};

// item_cells
// function begins at statement 11117, parm_start=8853
// OP_EQ_F	738	819	8853
// OP_IFNOT	8853	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	146	8854
// OP_STOREP_FNC	7171	8854	0
// OP_LOAD_F	28	195	8855
// OP_BITAND	8855	8815	8856
// OP_IFNOT	8856	9	0
// OP_STORE_V	8857	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8857	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	433	8858
// OP_STOREP_F	834	8858	0
// OP_GOTO	8	0	0
// OP_STORE_V	8859	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8859	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	433	8860
// OP_STOREP_F	829	8860	0
// OP_ADDRESS	28	154	8861
// OP_STOREP_F	825	8861	0
// OP_ADDRESS	28	180	8862
// OP_STOREP_S	8863	8862	0
// OP_STORE_V	28	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	8441	10	0
// OP_CALL3	464	0	0
// OP_CALL0	8387	0	0
// OP_DONE	0	0	0
void () item_cells = 
{
    
    if(rally_type_index == 1.000)
    {
        return;
    }
    
    self.touch = ammo_touch;
    if(self.spawnflags & WEAPON_BIG2)
    {
        precache_model("maps/b_batt1.bsp");
        setmodel(self, "maps/b_batt1.bsp");
        self.aflag = 12.000;
    }
    else
    {
        precache_model("maps/b_batt0.bsp");
        setmodel(self, "maps/b_batt0.bsp");
        self.aflag = 6.000;
    }
    
    self.weapon = 4.000;
    self.netname = "repulsor cells";
    setsize(self, '0.000 0.000 0.000', '32.000 32.000 56.000');
    StartItem();
};

float WEAPON_SHOTGUN = 1.000;
float WEAPON_ROCKET = 2.000;
float WEAPON_SPIKES = 4.000;
float WEAPON_BIG = 8.000;
// item_weapon
// function begins at statement 11150, parm_start=8869
// OP_ADDRESS	28	146	8869
// OP_STOREP_FNC	7171	8869	0
// OP_DONE	0	0	0
void () item_weapon = 
{
    self.touch = ammo_touch;
};

// key_touch
// function begins at statement 11153, parm_start=8871
// OP_LOAD_S	29	129	8873
// OP_NE_S	8873	880	8874
// OP_IFNOT	8874	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	152	8875
// OP_LE	8875	817	8876
// OP_IFNOT	8876	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	162	8877
// OP_LOAD_F	28	162	8878
// OP_BITAND	8877	8878	8879
// OP_IFNOT	8879	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	8803	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_LOAD_S	28	180	8880
// OP_STORE_V	8880	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	888	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	337	7	0
// OP_LOAD_S	28	208	8881
// OP_STORE_V	8881	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6225	7	0
// OP_CALL2	480	0	0
// OP_ADDRESS	29	162	8882
// OP_LOAD_F	29	162	8883
// OP_LOAD_F	28	162	8884
// OP_BITOR	8883	8884	8885
// OP_STOREP_F	8885	8882	0
// OP_NOT_F	36	0	8886
// OP_IFNOT	8886	5	0
// OP_ADDRESS	28	104	8887
// OP_STOREP_F	243	8887	0
// OP_ADDRESS	28	130	8888
// OP_STOREP_S	357	8888	0
// OP_STORE_ENT	29	360	0
// OP_CALL0	532	0	0
// OP_DONE	0	0	0
void () key_touch = 
{
    local entity stemp;
    local float best;
    
    if(other.classname != "player")
    {
        return;
    }
    
    
    if(other.health <= 0.000)
    {
        return;
    }
    
    
    if(other.items & self.items)
    {
        return;
    }
    
    sprint(other, "You got the ");
    sprint(other, self.netname);
    sprint(other, "\n");
    sound(other, CHAN_ITEM, self.noise, 1.000, ATTN_NORM);
    stuffcmd(other, "bf\n");
    other.items = other.items | self.items;
    
    if(!coop)
    {
        self.solid = SOLID_NOT;
        self.model = string_null;
    }
    
    activator = other;
    SUB_UseTargets();
};

// key_setsounds
// function begins at statement 11200, parm_start=8890
// OP_LOAD_F	30	366	8890
// OP_EQ_F	8890	817	8891
// OP_IFNOT	8891	5	0
// OP_STORE_V	8892	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	208	8893
// OP_STOREP_S	8892	8893	0
// OP_LOAD_F	30	366	8894
// OP_EQ_F	8894	819	8895
// OP_IFNOT	8895	5	0
// OP_STORE_V	8896	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	208	8897
// OP_STOREP_S	8896	8897	0
// OP_LOAD_F	30	366	8898
// OP_EQ_F	8898	821	8899
// OP_IFNOT	8899	5	0
// OP_STORE_V	8900	4	0
// OP_CALL1	523	0	0
// OP_ADDRESS	28	208	8901
// OP_STOREP_S	8900	8901	0
// OP_DONE	0	0	0
void () key_setsounds = 
{
    
    if(world.worldtype == 0.000)
    {
        precache_sound("misc/medkey.wav");
        self.noise = "misc/medkey.wav";
    }
    
    
    if(world.worldtype == 1.000)
    {
        precache_sound("misc/runekey.wav");
        self.noise = "misc/runekey.wav";
    }
    
    
    if(world.worldtype == 2.000)
    {
        precache_sound2("misc/basekey.wav");
        self.noise = "misc/basekey.wav";
    }
    
};

// item_key1
// function begins at statement 11222, parm_start=8903
// OP_LOAD_F	30	366	8903
// OP_EQ_F	8903	817	8904
// OP_IFNOT	8904	9	0
// OP_STORE_V	8905	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8905	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	180	8906
// OP_STOREP_S	8907	8906	0
// OP_GOTO	22	0	0
// OP_LOAD_F	30	366	8908
// OP_EQ_F	8908	819	8909
// OP_IFNOT	8909	9	0
// OP_STORE_V	8910	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8910	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	180	8911
// OP_STOREP_S	8912	8911	0
// OP_GOTO	11	0	0
// OP_LOAD_F	30	366	8913
// OP_EQ_F	8913	821	8914
// OP_IFNOT	8914	8	0
// OP_STORE_V	8915	4	0
// OP_CALL1	522	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8915	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	180	8916
// OP_STOREP_S	8917	8916	0
// OP_CALL0	8889	0	0
// OP_ADDRESS	28	146	8918
// OP_STOREP_FNC	8870	8918	0
// OP_ADDRESS	28	162	8919
// OP_STOREP_F	284	8919	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8920	7	0
// OP_STORE_V	8923	10	0
// OP_CALL3	464	0	0
// OP_CALL0	8387	0	0
// OP_DONE	0	0	0
void () item_key1 = 
{
    if(world.worldtype == 0.000)
    {
        precache_model("progs/w_s_key.mdl");
        setmodel(self, "progs/w_s_key.mdl");
        self.netname = "silver key";
    }
    else
    {
        if(world.worldtype == 1.000)
        {
            precache_model("progs/m_s_key.mdl");
            setmodel(self, "progs/m_s_key.mdl");
            self.netname = "silver runekey";
        }
        else
        {
            
            if(world.worldtype == 2.000)
            {
                precache_model2("progs/b_s_key.mdl");
                setmodel(self, "progs/b_s_key.mdl");
                self.netname = "silver keycard";
            }
            
        }
        
    }
    
    key_setsounds();
    self.touch = key_touch;
    self.items = IT_KEY1;
    setsize(self, '-16.000 -16.000 -24.000', '16.000 16.000 32.000');
    StartItem();
};

// item_key2
// function begins at statement 11265, parm_start=8927
// OP_LOAD_F	30	366	8927
// OP_EQ_F	8927	817	8928
// OP_IFNOT	8928	8	0
// OP_STORE_V	8929	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8929	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	180	8930
// OP_STOREP_S	8931	8930	0
// OP_LOAD_F	30	366	8932
// OP_EQ_F	8932	819	8933
// OP_IFNOT	8933	8	0
// OP_STORE_V	8934	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8934	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	180	8935
// OP_STOREP_S	8936	8935	0
// OP_LOAD_F	30	366	8937
// OP_EQ_F	8937	821	8938
// OP_IFNOT	8938	8	0
// OP_STORE_V	8939	4	0
// OP_CALL1	522	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8939	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	180	8940
// OP_STOREP_S	8941	8940	0
// OP_CALL0	8889	0	0
// OP_ADDRESS	28	146	8942
// OP_STOREP_FNC	8870	8942	0
// OP_ADDRESS	28	162	8943
// OP_STOREP_F	285	8943	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8920	7	0
// OP_STORE_V	8923	10	0
// OP_CALL3	464	0	0
// OP_CALL0	8387	0	0
// OP_DONE	0	0	0
void () item_key2 = 
{
    
    if(world.worldtype == 0.000)
    {
        precache_model("progs/w_g_key.mdl");
        setmodel(self, "progs/w_g_key.mdl");
        self.netname = "gold key";
    }
    
    
    if(world.worldtype == 1.000)
    {
        precache_model("progs/m_g_key.mdl");
        setmodel(self, "progs/m_g_key.mdl");
        self.netname = "gold runekey";
    }
    
    
    if(world.worldtype == 2.000)
    {
        precache_model2("progs/b_g_key.mdl");
        setmodel(self, "progs/b_g_key.mdl");
        self.netname = "gold keycard";
    }
    
    key_setsounds();
    self.touch = key_touch;
    self.items = IT_KEY2;
    setsize(self, '-16.000 -16.000 -24.000', '16.000 16.000 32.000');
    StartItem();
};

// sigil_touch
// function begins at statement 11306, parm_start=8945
// OP_LOAD_S	29	129	8947
// OP_NE_S	8947	880	8948
// OP_IFNOT	8948	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	152	8949
// OP_LE	8949	817	8950
// OP_IFNOT	8950	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	8951	7	0
// OP_CALL2	520	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	337	7	0
// OP_LOAD_S	28	208	8952
// OP_STORE_V	8952	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6225	7	0
// OP_CALL2	480	0	0
// OP_ADDRESS	28	104	8953
// OP_STOREP_F	243	8953	0
// OP_ADDRESS	28	130	8954
// OP_STOREP_S	357	8954	0
// OP_LOAD_F	28	195	8955
// OP_BITAND	8955	845	8956
// OP_BITOR	38	8956	8957
// OP_STORE_F	8957	38	0
// OP_ADDRESS	28	129	8958
// OP_STOREP_S	4128	8958	0
// OP_STORE_ENT	29	360	0
// OP_CALL0	532	0	0
// OP_DONE	0	0	0
void () sigil_touch = 
{
    local entity stemp;
    local float best;
    
    if(other.classname != "player")
    {
        return;
    }
    
    
    if(other.health <= 0.000)
    {
        return;
    }
    
    centerprint(other, "You got the rune!");
    sound(other, CHAN_ITEM, self.noise, 1.000, ATTN_NORM);
    stuffcmd(other, "bf\n");
    self.solid = SOLID_NOT;
    self.model = string_null;
    serverflags = serverflags | (self.spawnflags & 15.000);
    self.classname = "";
    activator = other;
    SUB_UseTargets();
};

// item_sigil
// function begins at statement 11340, parm_start=8960
// OP_LOAD_F	28	195	8960
// OP_NOT_F	8960	0	8961
// OP_IFNOT	8961	3	0
// OP_STORE_V	8962	4	0
// OP_CALL1	470	0	0
// OP_STORE_V	8896	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	208	8963
// OP_STOREP_S	8896	8963	0
// OP_LOAD_F	28	195	8964
// OP_BITAND	8964	819	8965
// OP_IFNOT	8965	6	0
// OP_STORE_V	8966	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8966	7	0
// OP_CALL2	463	0	0
// OP_LOAD_F	28	195	8967
// OP_BITAND	8967	821	8968
// OP_IFNOT	8968	6	0
// OP_STORE_V	8969	4	0
// OP_CALL1	522	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8969	7	0
// OP_CALL2	463	0	0
// OP_LOAD_F	28	195	8970
// OP_BITAND	8970	825	8971
// OP_IFNOT	8971	6	0
// OP_STORE_V	8972	4	0
// OP_CALL1	522	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8972	7	0
// OP_CALL2	463	0	0
// OP_LOAD_F	28	195	8973
// OP_BITAND	8973	843	8974
// OP_IFNOT	8974	6	0
// OP_STORE_V	8975	4	0
// OP_CALL1	522	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8975	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	146	8976
// OP_STOREP_FNC	8944	8976	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8920	7	0
// OP_STORE_V	8923	10	0
// OP_CALL3	464	0	0
// OP_CALL0	8387	0	0
// OP_DONE	0	0	0
void () item_sigil = 
{
    
    if(!self.spawnflags)
    {
        objerror("no spawnflags");
    }
    
    precache_sound("misc/runekey.wav");
    self.noise = "misc/runekey.wav";
    
    if(self.spawnflags & 1.000)
    {
        precache_model("progs/end1.mdl");
        setmodel(self, "progs/end1.mdl");
    }
    
    
    if(self.spawnflags & 2.000)
    {
        precache_model2("progs/end2.mdl");
        setmodel(self, "progs/end2.mdl");
    }
    
    
    if(self.spawnflags & 4.000)
    {
        precache_model2("progs/end3.mdl");
        setmodel(self, "progs/end3.mdl");
    }
    
    
    if(self.spawnflags & 8.000)
    {
        precache_model2("progs/end4.mdl");
        setmodel(self, "progs/end4.mdl");
    }
    
    self.touch = sigil_touch;
    setsize(self, '-16.000 -16.000 -24.000', '16.000 16.000 32.000');
    StartItem();
};

// powerup_touch
// function begins at statement 11389, parm_start=8978
// OP_LOAD_S	29	129	8980
// OP_NE_S	8980	880	8981
// OP_IFNOT	8981	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	152	8982
// OP_LE	8982	817	8983
// OP_IFNOT	8983	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	8803	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_LOAD_S	28	180	8984
// OP_STORE_V	8984	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	888	7	0
// OP_CALL2	483	0	0
// OP_IFNOT	35	20	0
// OP_ADDRESS	28	408	8985
// OP_LOAD_S	28	130	8986
// OP_STOREP_S	8986	8985	0
// OP_LOAD_S	28	129	8987
// OP_EQ_S	8987	8988	8989
// OP_LOAD_S	28	129	8990
// OP_EQ_S	8990	8991	8992
// OP_OR	8989	8992	8993
// OP_IFNOT	8993	6	0
// OP_ADDRESS	28	150	8994
// OP_MUL_F	2228	827	8995
// OP_ADD_F	31	8995	8996
// OP_STOREP_F	8996	8994	0
// OP_GOTO	4	0	0
// OP_ADDRESS	28	150	8997
// OP_ADD_F	31	2228	8998
// OP_STOREP_F	8998	8997	0
// OP_ADDRESS	28	148	8999
// OP_STOREP_FNC	8353	8999	0
// OP_STORE_V	29	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	208	9000
// OP_STORE_V	9000	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6225	7	0
// OP_CALL2	480	0	0
// OP_ADDRESS	28	104	9001
// OP_STOREP_F	243	9001	0
// OP_ADDRESS	29	162	9002
// OP_LOAD_F	29	162	9003
// OP_LOAD_F	28	162	9004
// OP_BITOR	9003	9004	9005
// OP_STOREP_F	9005	9002	0
// OP_ADDRESS	28	130	9006
// OP_STOREP_S	357	9006	0
// OP_LOAD_S	28	129	9007
// OP_EQ_S	9007	9008	9009
// OP_IFNOT	9009	6	0
// OP_ADDRESS	29	399	9010
// OP_STOREP_F	819	9010	0
// OP_ADDRESS	29	392	9011
// OP_ADD_F	31	2522	9012
// OP_STOREP_F	9012	9011	0
// OP_LOAD_S	28	129	9013
// OP_EQ_S	9013	8988	9014
// OP_IFNOT	9014	6	0
// OP_ADDRESS	29	393	9015
// OP_STOREP_F	819	9015	0
// OP_ADDRESS	29	389	9016
// OP_ADD_F	31	2522	9017
// OP_STOREP_F	9017	9016	0
// OP_LOAD_S	28	129	9018
// OP_EQ_S	9018	8991	9019
// OP_IFNOT	9019	6	0
// OP_ADDRESS	29	395	9020
// OP_STOREP_F	819	9020	0
// OP_ADDRESS	29	390	9021
// OP_ADD_F	31	2522	9022
// OP_STOREP_F	9022	9021	0
// OP_LOAD_S	28	129	9023
// OP_EQ_S	9023	9024	9025
// OP_IFNOT	9025	6	0
// OP_ADDRESS	29	397	9026
// OP_STOREP_F	819	9026	0
// OP_ADDRESS	29	391	9027
// OP_ADD_F	31	2522	9028
// OP_STOREP_F	9028	9027	0
// OP_STORE_ENT	29	360	0
// OP_CALL0	532	0	0
// OP_DONE	0	0	0
void () powerup_touch = 
{
    local entity stemp;
    local float best;
    
    if(other.classname != "player")
    {
        return;
    }
    
    
    if(other.health <= 0.000)
    {
        return;
    }
    
    sprint(other, "You got the ");
    sprint(other, self.netname);
    sprint(other, "\n");
    
    if(deathmatch)
    {
        self.mdl = self.model;
        if((self.classname == "item_artifact_invulnerability") || (self.classname == "item_artifact_invisibility"))
        {
            self.nextthink = time + (60.000 * 5.000);
        }
        else
        {
            self.nextthink = time + 60.000;
        }
        
        self.think = SUB_regen;
    }
    
    sound(other, CHAN_VOICE, self.noise, 1.000, ATTN_NORM);
    stuffcmd(other, "bf\n");
    self.solid = SOLID_NOT;
    other.items = other.items | self.items;
    self.model = string_null;
    
    if(self.classname == "item_artifact_envirosuit")
    {
        other.rad_time = 1.000;
        other.radsuit_finished = time + 30.000;
    }
    
    
    if(self.classname == "item_artifact_invulnerability")
    {
        other.invincible_time = 1.000;
        other.invincible_finished = time + 30.000;
    }
    
    
    if(self.classname == "item_artifact_invisibility")
    {
        other.invisible_time = 1.000;
        other.invisible_finished = time + 30.000;
    }
    
    
    if(self.classname == "item_artifact_super_damage")
    {
        other.super_time = 1.000;
        other.super_damage_finished = time + 30.000;
    }
    
    activator = other;
    SUB_UseTargets();
};

// item_artifact_invulnerability
// function begins at statement 11481, parm_start=9030
// OP_ADDRESS	28	146	9030
// OP_STOREP_FNC	8977	9030	0
// OP_STORE_V	9031	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	9032	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	9033	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	8241	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	208	9034
// OP_STOREP_S	9032	9034	0
// OP_STORE_V	28	4	0
// OP_STORE_V	9031	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	180	9035
// OP_STOREP_S	9036	9035	0
// OP_ADDRESS	28	162	9037
// OP_STOREP_F	287	9037	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8920	7	0
// OP_STORE_V	8923	10	0
// OP_CALL3	464	0	0
// OP_CALL0	8387	0	0
// OP_DONE	0	0	0
void () item_artifact_invulnerability = 
{
    self.touch = powerup_touch;
    precache_model("progs/invulner.mdl");
    precache_sound("items/protect.wav");
    precache_sound("items/protect2.wav");
    precache_sound("items/protect3.wav");
    self.noise = "items/protect.wav";
    setmodel(self, "progs/invulner.mdl");
    self.netname = "Pentagram of Protection";
    self.items = IT_INVULNERABILITY;
    setsize(self, '-16.000 -16.000 -24.000', '16.000 16.000 32.000');
    StartItem();
};

// item_artifact_envirosuit
// function begins at statement 11506, parm_start=9039
// OP_ADDRESS	28	146	9039
// OP_STOREP_FNC	8977	9039	0
// OP_STORE_V	9040	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	9041	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	9042	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	208	9043
// OP_STOREP_S	9041	9043	0
// OP_STORE_V	28	4	0
// OP_STORE_V	9040	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	180	9044
// OP_STOREP_S	9045	9044	0
// OP_ADDRESS	28	162	9046
// OP_STOREP_F	288	9046	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8920	7	0
// OP_STORE_V	8923	10	0
// OP_CALL3	464	0	0
// OP_CALL0	8387	0	0
// OP_DONE	0	0	0
void () item_artifact_envirosuit = 
{
    self.touch = powerup_touch;
    precache_model("progs/suit.mdl");
    precache_sound("items/suit.wav");
    precache_sound("items/suit2.wav");
    self.noise = "items/suit.wav";
    setmodel(self, "progs/suit.mdl");
    self.netname = "Biosuit";
    self.items = IT_SUIT;
    setsize(self, '-16.000 -16.000 -24.000', '16.000 16.000 32.000');
    StartItem();
};

// item_artifact_invisibility
// function begins at statement 11529, parm_start=9048
// OP_ADDRESS	28	146	9048
// OP_STOREP_FNC	8977	9048	0
// OP_STORE_V	9049	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	9050	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	9051	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	9052	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	208	9053
// OP_STOREP_S	9050	9053	0
// OP_STORE_V	28	4	0
// OP_STORE_V	9049	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	180	9054
// OP_STOREP_S	9055	9054	0
// OP_ADDRESS	28	162	9056
// OP_STOREP_F	286	9056	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8920	7	0
// OP_STORE_V	8923	10	0
// OP_CALL3	464	0	0
// OP_CALL0	8387	0	0
// OP_DONE	0	0	0
void () item_artifact_invisibility = 
{
    self.touch = powerup_touch;
    precache_model("progs/invisibl.mdl");
    precache_sound("items/inv1.wav");
    precache_sound("items/inv2.wav");
    precache_sound("items/inv3.wav");
    self.noise = "items/inv1.wav";
    setmodel(self, "progs/invisibl.mdl");
    self.netname = "Ring of Shadows";
    self.items = IT_INVISIBILITY;
    setsize(self, '-16.000 -16.000 -24.000', '16.000 16.000 32.000');
    StartItem();
};

// item_artifact_super_damage
// function begins at statement 11554, parm_start=9058
// OP_ADDRESS	28	146	9058
// OP_STOREP_FNC	8977	9058	0
// OP_STORE_V	9059	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	9060	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	9061	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	9062	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	208	9063
// OP_STOREP_S	9060	9063	0
// OP_STORE_V	28	4	0
// OP_STORE_V	9059	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	180	9064
// OP_STOREP_S	9065	9064	0
// OP_ADDRESS	28	162	9066
// OP_STOREP_F	289	9066	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8920	7	0
// OP_STORE_V	8923	10	0
// OP_CALL3	464	0	0
// OP_CALL0	8387	0	0
// OP_DONE	0	0	0
void () item_artifact_super_damage = 
{
    self.touch = powerup_touch;
    precache_model("progs/quaddama.mdl");
    precache_sound("items/damage.wav");
    precache_sound("items/damage2.wav");
    precache_sound("items/damage3.wav");
    self.noise = "items/damage.wav";
    setmodel(self, "progs/quaddama.mdl");
    self.netname = "Quad Damage";
    self.items = IT_QUAD;
    setsize(self, '-16.000 -16.000 -24.000', '16.000 16.000 32.000');
    StartItem();
};

// BackpackTouch
// function begins at statement 11579, parm_start=9068
// OP_LOAD_S	29	129	9073
// OP_NE_S	9073	880	9074
// OP_IFNOT	9074	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	152	9075
// OP_LE	9075	817	9076
// OP_IFNOT	9076	2	0
// OP_RETURN	0	0	0
// OP_STORE_ENT	28	9072	0
// OP_STORE_ENT	29	28	0
// OP_CALL0	8577	0	0
// OP_STORE_F	1	9069	0
// OP_STORE_ENT	9072	28	0
// OP_ADDRESS	29	158	9077
// OP_LOAD_F	29	158	9078
// OP_LOAD_F	28	158	9079
// OP_ADD_F	9078	9079	9080
// OP_STOREP_F	9080	9077	0
// OP_ADDRESS	29	159	9081
// OP_LOAD_F	29	159	9082
// OP_LOAD_F	28	159	9083
// OP_ADD_F	9082	9083	9084
// OP_STOREP_F	9084	9081	0
// OP_ADDRESS	29	160	9085
// OP_LOAD_F	29	160	9086
// OP_LOAD_F	28	160	9087
// OP_ADD_F	9086	9087	9088
// OP_STOREP_F	9088	9085	0
// OP_ADDRESS	29	161	9089
// OP_LOAD_F	29	161	9090
// OP_LOAD_F	28	161	9091
// OP_ADD_F	9090	9091	9092
// OP_STOREP_F	9092	9089	0
// OP_LOAD_F	29	162	9093
// OP_STORE_F	9093	9070	0
// OP_LOAD_F	28	162	9094
// OP_STORE_F	9094	9071	0
// OP_ADDRESS	29	162	9095
// OP_LOAD_F	29	162	9096
// OP_BITOR	9096	9071	9097
// OP_STOREP_F	9097	9095	0
// OP_CALL0	8548	0	0
// OP_LOAD_F	28	158	9098
// OP_LOAD_F	28	159	9099
// OP_ADD_F	9098	9099	9100
// OP_LOAD_F	28	160	9101
// OP_ADD_F	9100	9101	9102
// OP_LOAD_F	28	161	9103
// OP_ADD_F	9102	9103	9104
// OP_GT	9104	817	9105
// OP_IFNOT	9105	58	0
// OP_STORE_V	29	4	0
// OP_STORE_V	9106	7	0
// OP_CALL2	483	0	0
// OP_LOAD_F	28	158	9107
// OP_IFNOT	9107	11	0
// OP_LOAD_F	28	158	9108
// OP_STORE_V	9108	4	0
// OP_CALL1	485	0	0
// OP_STORE_S	1	9068	0
// OP_STORE_V	29	4	0
// OP_STORE_V	9068	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	9109	7	0
// OP_CALL2	483	0	0
// OP_LOAD_F	28	159	9110
// OP_IFNOT	9110	11	0
// OP_LOAD_F	28	159	9111
// OP_STORE_V	9111	4	0
// OP_CALL1	485	0	0
// OP_STORE_S	1	9068	0
// OP_STORE_V	29	4	0
// OP_STORE_V	9068	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	9112	7	0
// OP_CALL2	483	0	0
// OP_LOAD_F	28	160	9113
// OP_IFNOT	9113	11	0
// OP_LOAD_F	28	160	9114
// OP_STORE_V	9114	4	0
// OP_CALL1	485	0	0
// OP_STORE_S	1	9068	0
// OP_STORE_V	29	4	0
// OP_STORE_V	9068	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	9115	7	0
// OP_CALL2	483	0	0
// OP_LOAD_F	28	161	9116
// OP_IFNOT	9116	11	0
// OP_LOAD_F	28	161	9117
// OP_STORE_V	9117	4	0
// OP_CALL1	485	0	0
// OP_STORE_S	1	9068	0
// OP_STORE_V	29	4	0
// OP_STORE_V	9068	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	9118	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	888	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	6225	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_STORE_ENT	29	28	0
// OP_NOT_F	35	0	9119
// OP_IFNOT	9119	4	0
// OP_ADDRESS	28	154	9120
// OP_STOREP_F	9071	9120	0
// OP_GOTO	4	0	0
// OP_STORE_V	9070	4	0
// OP_STORE_V	9071	7	0
// OP_CALL2	8569	0	0
// OP_CALL0	931	0	0
// OP_DONE	0	0	0
void () BackpackTouch = 
{
    local string s;
    local float best;
    local float old;
    local float new;
    local entity stemp;
    
    if(other.classname != "player")
    {
        return;
    }
    
    
    if(other.health <= 0.000)
    {
        return;
    }
    
    stemp = self;
    self = other;
    best = W_BestWeapon();
    self = stemp;
    other.ammo_shells = other.ammo_shells + self.ammo_shells;
    other.ammo_nails = other.ammo_nails + self.ammo_nails;
    other.ammo_rockets = other.ammo_rockets + self.ammo_rockets;
    other.ammo_cells = other.ammo_cells + self.ammo_cells;
    old = other.items;
    new = self.items;
    other.items = other.items | new;
    bound_other_ammo();
    
    if((((self.ammo_shells + self.ammo_nails) + self.ammo_rockets) + self.ammo_cells) > 0.000)
    {
        sprint(other, "You get ");
        
        if(self.ammo_shells)
        {
            s = ftos(self.ammo_shells);
            sprint(other, s);
            sprint(other, " shells  ");
        }
        
        
        if(self.ammo_nails)
        {
            s = ftos(self.ammo_nails);
            sprint(other, s);
            sprint(other, " nails ");
        }
        
        
        if(self.ammo_rockets)
        {
            s = ftos(self.ammo_rockets);
            sprint(other, s);
            sprint(other, " rockets  ");
        }
        
        
        if(self.ammo_cells)
        {
            s = ftos(self.ammo_cells);
            sprint(other, s);
            sprint(other, " cells  ");
        }
        
        sprint(other, "\n");
        stuffcmd(other, "bf\n");
    }
    
    remove(self);
    self = other;
    if(!deathmatch)
    {
        self.weapon = new;
    }
    else
    {
        Deathmatch_Weapon(old, new);
    }
    
    W_SetCurrentAmmo();
};

// DropBackpack
// function begins at statement 11700, parm_start=9122
// OP_LOAD_F	28	158	9123
// OP_LOAD_F	28	159	9124
// OP_ADD_F	9123	9124	9125
// OP_LOAD_F	28	160	9126
// OP_ADD_F	9125	9126	9127
// OP_LOAD_F	28	161	9128
// OP_ADD_F	9127	9128	9129
// OP_NOT_F	9129	0	9130
// OP_IFNOT	9130	2	0
// OP_RETURN	0	0	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	9122	0
// OP_ADDRESS	9122	105	9131
// OP_LOAD_V	28	105	9134
// OP_SUB_V	9134	9137	9140
// OP_STOREP_V	9140	9131	0
// OP_ADDRESS	9122	162	9143
// OP_LOAD_F	28	154	9144
// OP_STOREP_F	9144	9143	0
// OP_ADDRESS	9122	158	9145
// OP_LOAD_F	28	158	9146
// OP_STOREP_F	9146	9145	0
// OP_ADDRESS	9122	159	9147
// OP_LOAD_F	28	159	9148
// OP_STOREP_F	9148	9147	0
// OP_ADDRESS	9122	160	9149
// OP_LOAD_F	28	160	9150
// OP_STOREP_F	9150	9149	0
// OP_ADDRESS	9122	161	9151
// OP_LOAD_F	28	161	9152
// OP_STOREP_F	9152	9151	0
// OP_ADDRESS	9122	116	9153
// OP_STOREP_F	2299	9153	0
// OP_ADDRESS	9122	114	9154
// OP_CALL0	466	0	0
// OP_MUL_F	1	4760	9156
// OP_ADD_F	9155	9156	9157
// OP_STOREP_F	9157	9154	0
// OP_ADDRESS	9122	115	9158
// OP_CALL0	466	0	0
// OP_MUL_F	1	4760	9159
// OP_ADD_F	9155	9159	9160
// OP_STOREP_F	9160	9158	0
// OP_ADDRESS	9122	182	9161
// OP_STOREP_F	227	9161	0
// OP_ADDRESS	9122	104	9162
// OP_STOREP_F	244	9162	0
// OP_ADDRESS	9122	103	9163
// OP_STOREP_F	237	9163	0
// OP_STORE_V	9122	4	0
// OP_STORE_V	9164	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	9122	4	0
// OP_STORE_V	6849	7	0
// OP_STORE_V	8539	10	0
// OP_CALL3	464	0	0
// OP_ADDRESS	9122	146	9165
// OP_STOREP_FNC	9067	9165	0
// OP_ADDRESS	9122	150	9166
// OP_ADD_F	31	5807	9167
// OP_STOREP_F	9167	9166	0
// OP_ADDRESS	9122	148	9168
// OP_STOREP_FNC	533	9168	0
// OP_DONE	0	0	0
void () DropBackpack = 
{
    local entity item;
    
    if(!(((self.ammo_shells + self.ammo_nails) + self.ammo_rockets) + self.ammo_cells))
    {
        return;
    }
    
    item = spawn();
    item.origin = self.origin - '0.000 0.000 24.000';
    item.items = self.weapon;
    item.ammo_shells = self.ammo_shells;
    item.ammo_nails = self.ammo_nails;
    item.ammo_rockets = self.ammo_rockets;
    item.ammo_cells = self.ammo_cells;
    item.velocity_z = 300.000;
    item.velocity_x = -100.000 + (random() * 200.000);
    item.velocity_y = -100.000 + (random() * 200.000);
    item.flags = FL_ITEM;
    item.solid = SOLID_TRIGGER;
    item.movetype = MOVETYPE_TOSS;
    setmodel(item, "progs/backpack.mdl");
    setsize(item, '-16.000 -16.000 0.000', '16.000 16.000 56.000');
    item.touch = BackpackTouch;
    item.nextthink = time + 120.000;
    item.think = SUB_Remove;
};

void () player_run;
void (vector org, vector vel, float damage) SpawnBlood;
void () SuperDamageSound;
void () SpawnBot;
.float sight_out;
// W_Precache
// function begins at statement 11764, parm_start=9175
// OP_STORE_V	9175	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	9176	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	9177	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	9178	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	9179	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	9180	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	9181	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	9182	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	9183	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	9184	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	9185	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	9186	4	0
// OP_CALL1	478	0	0
// OP_DONE	0	0	0
void () W_Precache = 
{
    precache_sound("weapons/r_exp3.wav");
    precache_sound("weapons/rocket1i.wav");
    precache_sound("weapons/sgun1.wav");
    precache_sound("weapons/guncock.wav");
    precache_sound("weapons/ric1.wav");
    precache_sound("weapons/ric2.wav");
    precache_sound("weapons/ric3.wav");
    precache_sound("weapons/spike2.wav");
    precache_sound("weapons/tink1.wav");
    precache_sound("weapons/grenade.wav");
    precache_sound("weapons/bounce.wav");
    precache_sound("weapons/shotgn2.wav");
};

// crandom
// function begins at statement 11789, parm_start=9188
// OP_CALL0	466	0	0
// OP_SUB_F	1	1182	9188
// OP_MUL_F	821	9188	9189
// OP_RETURN	9189	0	0
// OP_DONE	0	0	0
float () crandom = 
{
    return 2.000 * (random() - 0.500);
};

// W_FireAxe
// function begins at statement 11794, parm_start=9191
// OP_LOAD_V	28	105	9197
// OP_ADD_V	9197	1535	9200
// OP_STORE_V	9200	9191	0
// OP_STORE_V	9191	4	0
// OP_MUL_VF	59	2223	9203
// OP_ADD_V	9191	9203	9206
// OP_STORE_V	9206	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_EQ_F	70	819	9209
// OP_IFNOT	9209	2	0
// OP_RETURN	0	0	0
// OP_MUL_VF	59	825	9210
// OP_SUB_V	71	9210	9213
// OP_STORE_V	9213	9194	0
// OP_LOAD_F	78	163	9216
// OP_IFNOT	9216	13	0
// OP_ADDRESS	78	401	9217
// OP_STOREP_F	819	9217	0
// OP_STORE_V	9194	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	1112	10	0
// OP_CALL3	9170	0	0
// OP_STORE_V	78	4	0
// OP_STORE_V	28	7	0
// OP_STORE_V	28	10	0
// OP_STORE_V	1112	13	0
// OP_CALL4	534	0	0
// OP_GOTO	22	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	335	7	0
// OP_STORE_V	9218	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	315	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	324	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	9194	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	9195	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	9196	7	0
// OP_CALL2	511	0	0
// OP_DONE	0	0	0
void () W_FireAxe = 
{
    local vector source;
    local vector org;
    source = self.origin + '0.000 0.000 16.000';
    traceline(source, source + (v_forward * 64.000), FALSE, self);
    
    if(trace_fraction == 1.000)
    {
        return;
    }
    
    org = trace_endpos - (v_forward * 4.000);
    if(trace_ent.takedamage)
    {
        trace_ent.axhitme = 1.000;
        SpawnBlood(org, '0.000 0.000 0.000', 20.000);
        T_Damage(trace_ent, self, self, 20.000);
    }
    else
    {
        sound(self, CHAN_WEAPON, "player/axhit2.wav", 1.000, ATTN_NORM);
        WriteByte(MSG_BROADCAST, SVC_TEMPENTITY);
        WriteByte(MSG_BROADCAST, TE_GUNSHOT);
        WriteCoord(MSG_BROADCAST, org_x);
        WriteCoord(MSG_BROADCAST, 0.000);
        WriteCoord(MSG_BROADCAST, 0.000);
    }
    
};

// wall_velocity
// function begins at statement 11846, parm_start=9220
// OP_LOAD_V	28	113	9223
// OP_STORE_V	9223	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	9220	0
// OP_CALL0	466	0	0
// OP_SUB_F	1	1182	9226
// OP_MUL_VF	62	9226	9227
// OP_ADD_V	9220	9227	9230
// OP_CALL0	466	0	0
// OP_SUB_F	1	1182	9233
// OP_MUL_VF	65	9233	9234
// OP_ADD_V	9230	9234	9237
// OP_STORE_V	9237	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	9220	0
// OP_MUL_FV	821	74	9240
// OP_ADD_V	9220	9240	9243
// OP_STORE_V	9243	9220	0
// OP_MUL_VF	9220	4760	9246
// OP_STORE_V	9246	9220	0
// OP_RETURN	9220	0	0
// OP_DONE	0	0	0
vector () wall_velocity = 
{
    local vector vel;
    vel = normalize(self.velocity);
    vel = normalize((vel + (v_up * (random() - 0.500))) + (v_right * (random() - 0.500)));
    vel = vel + (2.000 * trace_plane_normal);
    vel = vel * 200.000;
    return vel;
};

// SpawnMeatSpray
// function begins at statement 11868, parm_start=9250
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	9256	0
// OP_ADDRESS	9256	201	9258
// OP_STOREP_ENT	28	9258	0
// OP_ADDRESS	9256	103	9259
// OP_STOREP_F	241	9259	0
// OP_ADDRESS	9256	104	9260
// OP_STOREP_F	243	9260	0
// OP_LOAD_V	28	117	9261
// OP_STORE_V	9261	4	0
// OP_CALL1	461	0	0
// OP_ADDRESS	9256	113	9264
// OP_STOREP_V	9253	9264	0
// OP_ADDRESS	9256	116	9267
// OP_LOAD_F	9256	116	9268
// OP_ADD_F	9268	1135	9269
// OP_CALL0	466	0	0
// OP_MUL_F	2611	1	9270
// OP_ADD_F	9269	9270	9271
// OP_STOREP_F	9271	9267	0
// OP_ADDRESS	9256	121	9272
// OP_STOREP_V	9275	9272	0
// OP_ADDRESS	9256	150	9278
// OP_ADD_F	31	819	9279
// OP_STOREP_F	9279	9278	0
// OP_ADDRESS	9256	148	9280
// OP_STOREP_FNC	533	9280	0
// OP_STORE_V	9256	4	0
// OP_STORE_V	9281	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	9256	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	926	10	0
// OP_CALL3	464	0	0
// OP_STORE_V	9256	4	0
// OP_STORE_V	9250	7	0
// OP_CALL2	462	0	0
// OP_DONE	0	0	0
void (vector org, vector vel) SpawnMeatSpray = 
{
    local entity missile;
    local entity mpuff;
    missile = spawn();
    missile.owner = self;
    missile.movetype = MOVETYPE_BOUNCE;
    missile.solid = SOLID_NOT;
    makevectors(self.angles);
    missile.velocity = vel;
    missile.velocity_z = (missile.velocity_z + 250.000) + (50.000 * random());
    missile.avelocity = '3000.000 1000.000 2000.000';
    missile.nextthink = time + 1.000;
    missile.think = SUB_Remove;
    setmodel(missile, "progs/zom_gib.mdl");
    setsize(missile, '0.000 0.000 0.000', '0.000 0.000 0.000');
    setorigin(missile, org);
};

// SpawnBlood
// function begins at statement 11906, parm_start=9282
// OP_STORE_V	9282	4	0
// OP_MUL_VF	9285	2869	9289
// OP_STORE_V	9289	7	0
// OP_STORE_V	9292	10	0
// OP_MUL_F	9288	821	9293
// OP_STORE_V	9293	13	0
// OP_CALL4	504	0	0
// OP_DONE	0	0	0
void (vector org, vector vel, float damage) SpawnBlood = 
{
    particle(org, vel * 0.100, 73.000, damage * 2.000);
};

// spawn_touchblood
// function begins at statement 11914, parm_start=9295
// OP_CALL0	9219	0	0
// OP_MUL_VF	1	1152	9299
// OP_STORE_V	9299	9296	0
// OP_LOAD_V	28	105	9302
// OP_MUL_VF	9296	9305	9306
// OP_ADD_V	9302	9306	9309
// OP_STORE_V	9309	4	0
// OP_STORE_V	9296	7	0
// OP_STORE_V	9295	10	0
// OP_CALL3	9170	0	0
// OP_DONE	0	0	0
void (float damage) spawn_touchblood = 
{
    local vector vel;
    vel = wall_velocity() * 0.200;
    SpawnBlood(self.origin + (vel * 0.010), vel, damage);
};

// SpawnChunk
// function begins at statement 11925, parm_start=9313
// OP_STORE_V	9313	4	0
// OP_MUL_VF	9316	9319	9320
// OP_STORE_V	9320	7	0
// OP_STORE_V	817	10	0
// OP_STORE_V	855	13	0
// OP_CALL4	504	0	0
// OP_DONE	0	0	0
void (vector org, vector vel) SpawnChunk = 
{
    particle(org, vel * 0.020, 0.000, 10.000);
};

entity multi_ent;
float multi_damage;
// ClearMultiDamage
// function begins at statement 11932, parm_start=9326
// OP_STORE_ENT	30	9323	0
// OP_STORE_F	817	9324	0
// OP_DONE	0	0	0
void () ClearMultiDamage = 
{
    multi_ent = world;
    multi_damage = 0.000;
};

// ApplyMultiDamage
// function begins at statement 11935, parm_start=9327
// OP_NOT_ENT	9323	0	9327
// OP_IFNOT	9327	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	9323	4	0
// OP_STORE_V	28	7	0
// OP_STORE_V	28	10	0
// OP_STORE_V	9324	13	0
// OP_CALL4	534	0	0
// OP_DONE	0	0	0
void () ApplyMultiDamage = 
{
    
    if(!multi_ent)
    {
        return;
    }
    
    T_Damage(multi_ent, self, self, multi_damage);
};

// AddMultiDamage
// function begins at statement 11944, parm_start=9329
// OP_NOT_ENT	9329	0	9331
// OP_IFNOT	9331	2	0
// OP_RETURN	0	0	0
// OP_NE_E	9329	9323	9332
// OP_IFNOT	9332	5	0
// OP_CALL0	9326	0	0
// OP_STORE_F	9330	9324	0
// OP_STORE_ENT	9329	9323	0
// OP_GOTO	3	0	0
// OP_ADD_F	9324	9330	9333
// OP_STORE_F	9333	9324	0
// OP_DONE	0	0	0
void (entity hit, float damage) AddMultiDamage = 
{
    
    if(!hit)
    {
        return;
    }
    
    if(hit != multi_ent)
    {
        ApplyMultiDamage();
        multi_damage = damage;
        multi_ent = hit;
    }
    else
    {
        multi_damage = multi_damage + damage;
    }
    
};

// TraceAttack
// function begins at statement 11956, parm_start=9335
// OP_CALL0	9187	0	0
// OP_MUL_VF	62	1	9345
// OP_ADD_V	9336	9345	9348
// OP_CALL0	9187	0	0
// OP_MUL_VF	65	1	9351
// OP_ADD_V	9348	9351	9354
// OP_STORE_V	9354	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	9339	0
// OP_MUL_FV	821	74	9357
// OP_ADD_V	9339	9357	9360
// OP_STORE_V	9360	9339	0
// OP_MUL_VF	9339	4760	9363
// OP_STORE_V	9363	9339	0
// OP_MUL_VF	9336	825	9366
// OP_SUB_V	71	9366	9369
// OP_STORE_V	9369	9342	0
// OP_LOAD_F	78	163	9372
// OP_IFNOT	9372	10	0
// OP_STORE_V	9342	4	0
// OP_MUL_VF	9339	1152	9373
// OP_STORE_V	9373	7	0
// OP_STORE_V	9335	10	0
// OP_CALL3	9170	0	0
// OP_STORE_V	78	4	0
// OP_STORE_V	9335	7	0
// OP_CALL2	9328	0	0
// OP_GOTO	16	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	315	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	324	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	9342	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	9343	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	9344	7	0
// OP_CALL2	511	0	0
// OP_DONE	0	0	0
void (float damage, vector dir) TraceAttack = 
{
    local vector vel;
    local vector org;
    vel = normalize((dir + (v_up * crandom())) + (v_right * crandom()));
    vel = vel + (2.000 * trace_plane_normal);
    vel = vel * 200.000;
    org = trace_endpos - (dir * 4.000);
    if(trace_ent.takedamage)
    {
        SpawnBlood(org, vel * 0.200, damage);
        AddMultiDamage(trace_ent, damage);
    }
    else
    {
        WriteByte(MSG_BROADCAST, SVC_TEMPENTITY);
        WriteByte(MSG_BROADCAST, TE_GUNSHOT);
        WriteCoord(MSG_BROADCAST, org_x);
        WriteCoord(MSG_BROADCAST, 0.000);
        WriteCoord(MSG_BROADCAST, 0.000);
    }
    
};

// FireBullets
// function begins at statement 12000, parm_start=9377
// OP_LOAD_V	28	175	9390
// OP_STORE_V	9390	4	0
// OP_CALL1	461	0	0
// OP_LOAD_V	28	105	9393
// OP_MUL_VF	59	855	9396
// OP_ADD_V	9393	9396	9399
// OP_STORE_V	9399	9387	0
// OP_LOAD_F	28	97	9402
// OP_LOAD_F	28	145	9403
// OP_MUL_F	9403	2619	9404
// OP_ADD_F	9402	9404	9405
// OP_STORE_F	9405	9389	0
// OP_CALL0	9325	0	0
// OP_GT	9377	817	9406
// OP_IFNOT	9406	25	0
// OP_CALL0	9187	0	0
// OP_MUL_F	1	9381	9407
// OP_MUL_FV	9407	65	9408
// OP_ADD_V	9378	9408	9411
// OP_CALL0	9187	0	0
// OP_MUL_F	1	9382	9414
// OP_MUL_FV	9414	62	9415
// OP_ADD_V	9411	9415	9418
// OP_STORE_V	9418	9384	0
// OP_STORE_V	9387	4	0
// OP_MUL_VF	9384	9421	9422
// OP_ADD_V	9387	9422	9425
// OP_STORE_V	9425	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_NE_F	70	819	9428
// OP_IFNOT	9428	4	0
// OP_STORE_V	825	4	0
// OP_STORE_V	9384	7	0
// OP_CALL2	9334	0	0
// OP_SUB_F	9377	819	9429
// OP_STORE_F	9429	9377	0
// OP_GOTO	-25	0	0
// OP_CALL0	9326	0	0
// OP_DONE	0	0	0
void (float shotcount, vector dir, vector spread) FireBullets = 
{
    local vector direction;
    local vector src;
    makevectors(self.v_angle);
    src = self.origin + (v_forward * 10.000);
    src_z = self.absmin_z + (self.size_z * 0.700);
    ClearMultiDamage();
    
    while(shotcount > 0.000)
    {
        direction = (dir + ((crandom() * spread_x) * v_right)) + ((crandom() * 0.000) * v_up);
        traceline(src, src + (direction * 2048.000), FALSE, self);
        
        if(trace_fraction != 1.000)
        {
            TraceAttack(4.000, direction);
        }
        
        shotcount = shotcount - 1.000;
    }
    
    ApplyMultiDamage();
};

// W_FireShotgun
// function begins at statement 12041, parm_start=9431
// OP_STORE_V	28	4	0
// OP_STORE_V	335	7	0
// OP_STORE_V	9178	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	126	9434
// OP_STOREP_F	947	9434	0
// OP_ADDRESS	28	157	9435
// OP_ADDRESS	28	158	9436
// OP_LOAD_F	28	158	9437
// OP_SUB_F	9437	819	9438
// OP_STOREP_F	9438	9436	0
// OP_STOREP_F	9438	9435	0
// OP_STORE_V	28	4	0
// OP_STORE_V	9439	7	0
// OP_CALL2	500	0	0
// OP_STORE_V	1	9431	0
// OP_STORE_V	829	4	0
// OP_STORE_V	9431	7	0
// OP_STORE_V	9440	10	0
// OP_CALL3	9376	0	0
// OP_DONE	0	0	0
void () W_FireShotgun = 
{
    local vector dir;
    sound(self, CHAN_WEAPON, "weapons/guncock.wav", 1.000, ATTN_NORM);
    self.punchangle_x = -2.000;
    self.currentammo = self.ammo_shells = self.ammo_shells - 1.000;
    dir = aim(self, 100000.000);
    FireBullets(6.000, dir, '0.040 0.040 0.000');
};

// W_FireSuperShotgun
// function begins at statement 12064, parm_start=9444
// OP_LOAD_F	28	157	9447
// OP_EQ_F	9447	819	9448
// OP_IFNOT	9448	3	0
// OP_CALL0	9430	0	0
// OP_RETURN	0	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	335	7	0
// OP_STORE_V	9186	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	126	9449
// OP_STOREP_F	9450	9449	0
// OP_ADDRESS	28	157	9451
// OP_ADDRESS	28	158	9452
// OP_LOAD_F	28	158	9453
// OP_SUB_F	9453	821	9454
// OP_STOREP_F	9454	9452	0
// OP_STOREP_F	9454	9451	0
// OP_STORE_V	28	4	0
// OP_STORE_V	9439	7	0
// OP_CALL2	500	0	0
// OP_STORE_V	1	9444	0
// OP_STORE_V	841	4	0
// OP_STORE_V	9444	7	0
// OP_STORE_V	9455	10	0
// OP_CALL3	9376	0	0
// OP_DONE	0	0	0
void () W_FireSuperShotgun = 
{
    local vector dir;
    
    if(self.currentammo == 1.000)
    {
        W_FireShotgun();
        return;
    }
    
    sound(self, CHAN_WEAPON, "weapons/shotgn2.wav", 1.000, ATTN_NORM);
    self.punchangle_x = -4.000;
    self.currentammo = self.ammo_shells = self.ammo_shells - 2.000;
    dir = aim(self, 100000.000);
    FireBullets(14.000, dir, '0.140 0.080 0.000');
};

// s_explode1
// function begins at statement 12092, parm_start=9459
// OP_STATE	817	9459	0
// OP_DONE	0	0	0
void () s_explode1 = [0.000, s_explode2]
{
};

// s_explode2
// function begins at statement 12094, parm_start=9460
// OP_STATE	819	9460	0
// OP_DONE	0	0	0
void () s_explode2 = [1.000, s_explode3]
{
};

// s_explode3
// function begins at statement 12096, parm_start=9461
// OP_STATE	821	9461	0
// OP_DONE	0	0	0
void () s_explode3 = [2.000, s_explode4]
{
};

// s_explode4
// function begins at statement 12098, parm_start=9462
// OP_STATE	823	9462	0
// OP_DONE	0	0	0
void () s_explode4 = [3.000, s_explode5]
{
};

// s_explode5
// function begins at statement 12100, parm_start=9463
// OP_STATE	825	9463	0
// OP_DONE	0	0	0
void () s_explode5 = [4.000, s_explode6]
{
};

// s_explode6
// function begins at statement 12102, parm_start=9464
// OP_STATE	827	533	0
// OP_DONE	0	0	0
void () s_explode6 = [5.000, SUB_Remove]
{
};

// BecomeExplosion
// function begins at statement 12104, parm_start=9464
// OP_ADDRESS	28	103	9464
// OP_STOREP_F	233	9464	0
// OP_ADDRESS	28	113	9465
// OP_STOREP_V	926	9465	0
// OP_ADDRESS	28	146	9468
// OP_STOREP_FNC	531	9468	0
// OP_STORE_V	28	4	0
// OP_STORE_V	9469	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	104	9470
// OP_STOREP_F	243	9470	0
// OP_CALL0	9458	0	0
// OP_DONE	0	0	0
void () BecomeExplosion = 
{
    self.movetype = MOVETYPE_NONE;
    self.velocity = '0.000 0.000 0.000';
    self.touch = SUB_Null;
    setmodel(self, "progs/s_explod.spr");
    self.solid = SOLID_NOT;
    s_explode1();
};

// T_MissileTouch
// function begins at statement 12117, parm_start=9471
// OP_LOAD_ENT	28	201	9472
// OP_EQ_E	29	9472	9473
// OP_IFNOT	9473	2	0
// OP_RETURN	0	0	0
// OP_LOAD_V	28	105	9474
// OP_STORE_V	9474	4	0
// OP_CALL1	498	0	0
// OP_EQ_F	1	295	9477
// OP_IFNOT	9477	4	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_RETURN	0	0	0
// OP_CALL0	466	0	0
// OP_MUL_F	1	1112	9478
// OP_ADD_F	2611	9478	9479
// OP_STORE_F	9479	9471	0
// OP_LOAD_S	29	129	9480
// OP_EQ_S	9480	7244	9481
// OP_IFNOT	9481	4	0
// OP_MUL_F	9471	827	9482
// OP_STORE_F	9482	9471	0
// OP_GOTO	6	0	0
// OP_LOAD_S	29	129	9483
// OP_EQ_S	9483	3609	9484
// OP_IFNOT	9484	3	0
// OP_MUL_F	9471	821	9485
// OP_STORE_F	9485	9471	0
// OP_LOAD_F	29	152	9486
// OP_IFNOT	9486	12	0
// OP_LOAD_S	29	129	9487
// OP_EQ_S	9487	7886	9488
// OP_IFNOT	9488	3	0
// OP_MUL_F	9471	1182	9489
// OP_STORE_F	9489	9471	0
// OP_STORE_V	29	4	0
// OP_STORE_V	28	7	0
// OP_LOAD_ENT	28	201	9490
// OP_STORE_V	9490	10	0
// OP_STORE_V	9471	13	0
// OP_CALL4	534	0	0
// OP_STORE_V	28	4	0
// OP_LOAD_ENT	28	201	9491
// OP_STORE_V	9491	7	0
// OP_STORE_V	5807	10	0
// OP_STORE_V	29	13	0
// OP_CALL4	8274	0	0
// OP_ADDRESS	28	105	9492
// OP_LOAD_V	28	105	9495
// OP_LOAD_V	28	113	9498
// OP_STORE_V	9498	4	0
// OP_CALL1	468	0	0
// OP_MUL_FV	843	1	9501
// OP_SUB_V	9495	9501	9504
// OP_STOREP_V	9504	9492	0
// OP_STORE_V	351	4	0
// OP_STORE_V	315	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	325	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	351	4	0
// OP_LOAD_F	28	106	9507
// OP_STORE_V	9507	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	351	4	0
// OP_LOAD_F	28	107	9508
// OP_STORE_V	9508	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	351	4	0
// OP_LOAD_F	28	108	9509
// OP_STORE_V	9509	7	0
// OP_CALL2	511	0	0
// OP_CALL0	538	0	0
// OP_DONE	0	0	0
void () T_MissileTouch = 
{
    local float damg;
    
    if(other == self.owner)
    {
        return;
    }
    
    
    if(pointcontents(self.origin) == CONTENT_SKY)
    {
        remove(self);
        return;
    }
    
    damg = 50.000 + (random() * 20.000);
    if(other.classname == "rally_kangaroo")
    {
        damg = damg * 5.000;
    }
    else
    {
        
        if(other.classname == "rally_dude")
        {
            damg = damg * 2.000;
        }
        
    }
    
    
    if(other.health)
    {
        
        if(other.classname == "monster_shambler")
        {
            damg = damg * 0.500;
        }
        
        T_Damage(other, self, self.owner, damg);
    }
    
    T_RadiusDamage(self, self.owner, 120.000, other);
    self.origin = self.origin - (8.000 * normalize(self.velocity));
    WriteByte(MSG_BROADCAST, SVC_TEMPENTITY);
    WriteByte(MSG_BROADCAST, TE_EXPLOSION);
    WriteCoord(MSG_BROADCAST, self.origin_x);
    WriteCoord(MSG_BROADCAST, self.origin_y);
    WriteCoord(MSG_BROADCAST, self.origin_z);
    BecomeExplosion();
};

// W_FireRocket
// function begins at statement 12191, parm_start=9511
// OP_ADDRESS	28	157	9520
// OP_ADDRESS	28	160	9521
// OP_LOAD_F	28	160	9522
// OP_SUB_F	9522	819	9523
// OP_STOREP_F	9523	9521	0
// OP_STOREP_F	9523	9520	0
// OP_STORE_V	28	4	0
// OP_STORE_V	335	7	0
// OP_STORE_V	9177	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	126	9524
// OP_STOREP_F	947	9524	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	9511	0
// OP_ADDRESS	9511	647	9525
// OP_STOREP_F	31	9525	0
// OP_ADDRESS	9511	201	9526
// OP_STOREP_ENT	28	9526	0
// OP_ADDRESS	9511	103	9527
// OP_STOREP_F	240	9527	0
// OP_ADDRESS	9511	104	9528
// OP_STOREP_F	245	9528	0
// OP_STORE_V	59	9517	0
// OP_LOAD_V	28	175	9529
// OP_STORE_V	9529	9514	0
// OP_STORE_F	817	9514	0
// OP_STORE_V	9514	4	0
// OP_CALL1	461	0	0
// OP_STORE_V	59	9514	0
// OP_LOAD_V	28	105	9532
// OP_STORE_V	9532	4	0
// OP_STORE_V	9514	7	0
// OP_STORE_V	9535	10	0
// OP_STORE_V	2558	13	0
// OP_STORE_V	7234	16	0
// OP_STORE_V	28	19	0
// OP_CALL6	7210	0	0
// OP_STORE_ENT	1	9513	0
// OP_NE_E	1	30	9536
// OP_IFNOT	9536	15	0
// OP_LOAD_S	9513	129	9537
// OP_EQ_S	9537	880	9538
// OP_IFNOT	9538	4	0
// OP_STORE_V	9513	4	0
// OP_STORE_V	9539	7	0
// OP_CALL2	876	0	0
// OP_ADDRESS	9511	181	9540
// OP_STOREP_ENT	9513	9540	0
// OP_ADDRESS	9511	150	9541
// OP_ADD_F	31	32	9542
// OP_STOREP_F	9542	9541	0
// OP_ADDRESS	9511	148	9543
// OP_STOREP_FNC	7269	9543	0
// OP_GOTO	6	0	0
// OP_ADDRESS	9511	150	9544
// OP_ADD_F	31	827	9545
// OP_STOREP_F	9545	9544	0
// OP_ADDRESS	9511	148	9546
// OP_STOREP_FNC	533	9546	0
// OP_STORE_V	9517	59	0
// OP_ADDRESS	9511	113	9547
// OP_STOREP_V	59	9547	0
// OP_ADDRESS	9511	113	9550
// OP_LOAD_V	9511	113	9553
// OP_LOAD_V	28	113	9556
// OP_STORE_V	9556	4	0
// OP_CALL1	471	0	0
// OP_ADD_F	1	2127	9559
// OP_MUL_VF	9553	9559	9560
// OP_STOREP_V	9560	9550	0
// OP_ADDRESS	9511	117	9563
// OP_LOAD_V	9511	113	9566
// OP_STORE_V	9566	4	0
// OP_CALL1	506	0	0
// OP_STOREP_V	1	9563	0
// OP_ADDRESS	9511	146	9569
// OP_STOREP_FNC	7268	9569	0
// OP_STORE_V	9511	4	0
// OP_STORE_V	9570	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	9511	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	926	10	0
// OP_CALL3	464	0	0
// OP_STORE_V	9511	4	0
// OP_LOAD_ENT	28	548	9571
// OP_LOAD_V	9571	105	9572
// OP_MUL_VF	59	843	9575
// OP_ADD_V	9572	9575	9578
// OP_MUL_VF	62	843	9581
// OP_ADD_V	9578	9581	9584
// OP_STORE_V	9584	7	0
// OP_CALL2	462	0	0
// OP_DONE	0	0	0
void () W_FireRocket = 
{
    local entity missile;
    local entity mpuff;
    local entity missile_enemy;
    local vector dir;
    local vector old_forward;
    self.currentammo = self.ammo_rockets = self.ammo_rockets - 1.000;
    sound(self, CHAN_WEAPON, "weapons/sgun1.wav", 1.000, ATTN_NORM);
    self.punchangle_x = -2.000;
    missile = spawn();
    missile.last_idle = time;
    missile.owner = self;
    missile.movetype = MOVETYPE_FLYMISSILE;
    missile.solid = SOLID_BBOX;
    old_forward = v_forward;
    dir = self.v_angle;
    dir_x = 0.000;
    makevectors(dir);
    dir = v_forward;
    missile_enemy = FindSightEnemy(self.origin, dir, 1500.000, 45.000, "all", self);
    if(FindSightEnemy(self.origin, dir, 1500.000, 45.000, "all", self) != world)
    {
        
        if(missile_enemy.classname == "player")
        {
            commentary(missile_enemy, "process/buzztst1.wav");
        }
        
        missile.enemy = missile_enemy;
        missile.nextthink = time + frametime;
        missile.think = RocketSeek;
    }
    else
    {
        missile.nextthink = time + 5.000;
        missile.think = SUB_Remove;
    }
    
    v_forward = old_forward;
    missile.velocity = v_forward;
    missile.velocity = missile.velocity * (vlen(self.velocity) + 600.000);
    missile.angles = vectoangles(missile.velocity);
    missile.touch = T_MissileTouch;
    setmodel(missile, "models/missile.mdl");
    setsize(missile, '0.000 0.000 0.000', '0.000 0.000 0.000');
    setorigin(missile, (self.veh_body.origin + (v_forward * 8.000)) + (v_up * 8.000));
};

// LightningDamage
// function begins at statement 12287, parm_start=9588
// OP_SUB_V	9591	9588	9601
// OP_STORE_V	9601	9598	0
// OP_STORE_V	9598	4	0
// OP_CALL1	468	0	0
// OP_SUB_F	817	9599	9604
// OP_STORE_F	9604	9598	0
// OP_STORE_F	9598	9599	0
// OP_STORE_F	817	9600	0
// OP_MUL_VF	9598	2670	9605
// OP_STORE_V	9605	9598	0
// OP_STORE_ENT	30	9597	0
// OP_STORE_ENT	30	9596	0
// OP_STORE_V	9588	4	0
// OP_STORE_V	9591	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_LOAD_F	78	163	9608
// OP_IFNOT	9608	22	0
// OP_STORE_V	71	4	0
// OP_STORE_V	9609	7	0
// OP_STORE_V	9612	10	0
// OP_MUL_F	9595	825	9613
// OP_STORE_V	9613	13	0
// OP_CALL4	504	0	0
// OP_STORE_V	78	4	0
// OP_STORE_V	9594	7	0
// OP_STORE_V	9594	10	0
// OP_STORE_V	9595	13	0
// OP_CALL4	534	0	0
// OP_LOAD_S	28	129	9614
// OP_EQ_S	9614	880	9615
// OP_IFNOT	9615	8	0
// OP_LOAD_S	29	129	9616
// OP_EQ_S	9616	880	9617
// OP_IFNOT	9617	5	0
// OP_ADDRESS	78	116	9618
// OP_LOAD_F	78	116	9619
// OP_ADD_F	9619	1948	9620
// OP_STOREP_F	9620	9618	0
// OP_STORE_ENT	78	9596	0
// OP_ADD_V	9588	9598	9621
// OP_STORE_V	9621	4	0
// OP_ADD_V	9591	9598	9624
// OP_STORE_V	9624	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_NE_E	78	9596	9627
// OP_LOAD_F	78	163	9628
// OP_AND	9627	9628	9629
// OP_IFNOT	9629	12	0
// OP_STORE_V	71	4	0
// OP_STORE_V	9609	7	0
// OP_STORE_V	9612	10	0
// OP_MUL_F	9595	825	9630
// OP_STORE_V	9630	13	0
// OP_CALL4	504	0	0
// OP_STORE_V	78	4	0
// OP_STORE_V	9594	7	0
// OP_STORE_V	9594	10	0
// OP_STORE_V	9595	13	0
// OP_CALL4	534	0	0
// OP_STORE_ENT	78	9597	0
// OP_SUB_V	9588	9598	9631
// OP_STORE_V	9631	4	0
// OP_SUB_V	9591	9598	9634
// OP_STORE_V	9634	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_NE_E	78	9596	9637
// OP_NE_E	78	9597	9638
// OP_AND	9637	9638	9639
// OP_LOAD_F	78	163	9640
// OP_AND	9639	9640	9641
// OP_IFNOT	9641	12	0
// OP_STORE_V	71	4	0
// OP_STORE_V	9609	7	0
// OP_STORE_V	9612	10	0
// OP_MUL_F	9595	825	9642
// OP_STORE_V	9642	13	0
// OP_CALL4	504	0	0
// OP_STORE_V	78	4	0
// OP_STORE_V	9594	7	0
// OP_STORE_V	9594	10	0
// OP_STORE_V	9595	13	0
// OP_CALL4	534	0	0
// OP_DONE	0	0	0
void (vector p1, vector p2, entity from, float damage) LightningDamage = 
{
    local entity e1;
    local entity e2;
    local vector f;
    f = p2 - p1;
    normalize(f);
    f_x = 0.000 - 0.000;
    f_y = f_x;
    f_z = 0.000;
    f = f * 16.000;
    e1 = e2 = world;
    traceline(p1, p2, FALSE, self);
    
    if(trace_ent.takedamage)
    {
        particle(trace_endpos, '0.000 0.000 100.000', 225.000, damage * 4.000);
        T_Damage(trace_ent, from, from, damage);
        
        if(self.classname == "player")
        {
            
            if(other.classname == "player")
            {
                trace_ent.velocity_z = trace_ent.velocity_z + 400.000;
            }
            
        }
        
    }
    
    e1 = trace_ent;
    traceline(p1 + f, p2 + f, FALSE, self);
    
    if((trace_ent != e1) && trace_ent.takedamage)
    {
        particle(trace_endpos, '0.000 0.000 100.000', 225.000, damage * 4.000);
        T_Damage(trace_ent, from, from, damage);
    }
    
    e2 = trace_ent;
    traceline(p1 - f, p2 - f, FALSE, self);
    
    if(((trace_ent != e1) && (trace_ent != e2)) && trace_ent.takedamage)
    {
        particle(trace_endpos, '0.000 0.000 100.000', 225.000, damage * 4.000);
        T_Damage(trace_ent, from, from, damage);
    }
    
};

// W_FireLightning
// function begins at statement 12376, parm_start=9644
// OP_DONE	0	0	0
void () W_FireLightning = 
{
    local vector org;
};

// GrenadeExplode
// function begins at statement 12377, parm_start=9648
// OP_LOAD_ENT	28	181	9648
// OP_STORE_V	9648	4	0
// OP_STORE_V	30	7	0
// OP_STORE_V	2228	10	0
// OP_LOAD_ENT	28	181	9649
// OP_STORE_V	9649	13	0
// OP_CALL4	8274	0	0
// OP_LOAD_ENT	28	181	9650
// OP_LOAD_S	9650	129	9651
// OP_EQ_S	9651	880	9652
// OP_IFNOT	9652	42	0
// OP_LOAD_ENT	28	181	9653
// OP_ADDRESS	9653	113	9654
// OP_LOAD_ENT	28	181	9657
// OP_LOAD_V	9657	113	9658
// OP_ADD_V	9658	9661	9664
// OP_STOREP_V	9664	9654	0
// OP_LOAD_ENT	28	181	9667
// OP_STORE_V	9667	4	0
// OP_LOAD_ENT	28	181	9668
// OP_LOAD_V	9668	105	9669
// OP_ADD_V	9669	916	9672
// OP_STORE_V	9672	7	0
// OP_CALL2	462	0	0
// OP_LOAD_ENT	28	181	9675
// OP_LOAD_F	9675	182	9676
// OP_BITAND	9676	228	9677
// OP_IFNOT	9677	7	0
// OP_LOAD_ENT	28	181	9678
// OP_ADDRESS	9678	182	9679
// OP_LOAD_ENT	28	181	9680
// OP_LOAD_F	9680	182	9681
// OP_SUB_F	9681	228	9682
// OP_STOREP_F	9682	9679	0
// OP_LOAD_ENT	28	181	9683
// OP_ADDRESS	9683	662	9684
// OP_LOAD_ENT	28	181	9685
// OP_LOAD_F	9685	182	9686
// OP_STOREP_F	9686	9684	0
// OP_LOAD_ENT	28	181	9687
// OP_LOAD_ENT	9687	548	9688
// OP_ADDRESS	9688	598	9689
// OP_CALL0	466	0	0
// OP_MUL_F	1	1112	9690
// OP_SUB_F	9690	855	9691
// OP_STOREP_F	9691	9689	0
// OP_LOAD_ENT	28	181	9692
// OP_ADDRESS	9692	644	9693
// OP_LOAD_ENT	28	181	9694
// OP_LOAD_F	9694	644	9695
// OP_BITOR	9695	700	9696
// OP_STOREP_F	9696	9693	0
// OP_STORE_V	351	4	0
// OP_STORE_V	315	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	325	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	351	4	0
// OP_LOAD_ENT	28	181	9697
// OP_LOAD_F	9697	106	9698
// OP_STORE_V	9698	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	351	4	0
// OP_LOAD_ENT	28	181	9699
// OP_LOAD_F	9699	107	9700
// OP_STORE_V	9700	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	351	4	0
// OP_LOAD_ENT	28	181	9701
// OP_LOAD_F	9701	108	9702
// OP_STORE_V	9702	7	0
// OP_CALL2	511	0	0
// OP_CALL0	538	0	0
// OP_LOAD_ENT	28	181	9703
// OP_ADDRESS	9703	673	9704
// OP_STOREP_ENT	30	9704	0
// OP_DONE	0	0	0
void () GrenadeExplode = 
{
    T_RadiusDamage(self.enemy, world, 60.000, self.enemy);
    
    if(self.enemy.classname == "player")
    {
        self.enemy.velocity = self.enemy.velocity + '0.000 0.000 1000.000';
        setorigin(self.enemy, self.enemy.origin + '0.000 0.000 4.000');
        
        if(self.enemy.flags & FL_ONGROUND)
        {
            self.enemy.flags = self.enemy.flags - FL_ONGROUND;
        }
        
        self.enemy.last_flags = self.enemy.flags;
        self.enemy.veh_body.roll_velocity_z = (random() * 20.000) - 10.000;
        self.enemy.racing_flags = self.enemy.racing_flags | QR_MINE_EXPLODED;
    }
    
    WriteByte(MSG_BROADCAST, SVC_TEMPENTITY);
    WriteByte(MSG_BROADCAST, TE_EXPLOSION);
    WriteCoord(MSG_BROADCAST, self.enemy.origin_x);
    WriteCoord(MSG_BROADCAST, self.enemy.origin_y);
    WriteCoord(MSG_BROADCAST, self.enemy.origin_z);
    BecomeExplosion();
    self.enemy.mine_attached = world;
};

// GrenadeDetonateThink
// function begins at statement 12455, parm_start=9706
// OP_LOAD_ENT	28	181	9706
// OP_STORE_V	9706	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	9707	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_LOAD_F	28	591	9708
// OP_SUB_F	31	9708	9709
// OP_LT	9709	827	9710
// OP_IFNOT	9710	5	0
// OP_ADDRESS	28	150	9711
// OP_ADD_F	31	819	9712
// OP_STOREP_F	9712	9711	0
// OP_GOTO	40	0	0
// OP_LOAD_F	28	591	9713
// OP_SUB_F	31	9713	9714
// OP_LT	9714	829	9715
// OP_IFNOT	9715	5	0
// OP_ADDRESS	28	150	9716
// OP_ADD_F	31	1182	9717
// OP_STOREP_F	9717	9716	0
// OP_GOTO	32	0	0
// OP_LOAD_F	28	591	9718
// OP_SUB_F	31	9718	9719
// OP_LT	9719	839	9720
// OP_IFNOT	9720	5	0
// OP_ADDRESS	28	150	9721
// OP_ADD_F	31	5540	9722
// OP_STOREP_F	9722	9721	0
// OP_GOTO	24	0	0
// OP_LOAD_F	28	591	9723
// OP_SUB_F	31	9723	9724
// OP_LT	9724	843	9725
// OP_IFNOT	9725	5	0
// OP_ADDRESS	28	150	9726
// OP_ADD_F	31	2869	9727
// OP_STOREP_F	9727	9726	0
// OP_GOTO	16	0	0
// OP_IFNOT	35	8	0
// OP_LOAD_ENT	28	181	9728
// OP_STORE_V	9728	4	0
// OP_STORE_V	28	7	0
// OP_STORE_V	28	10	0
// OP_STORE_V	2677	13	0
// OP_CALL4	534	0	0
// OP_GOTO	7	0	0
// OP_LOAD_ENT	28	181	9729
// OP_STORE_V	9729	4	0
// OP_STORE_V	28	7	0
// OP_STORE_V	28	10	0
// OP_STORE_V	2522	13	0
// OP_CALL4	534	0	0
// OP_CALL0	9647	0	0
// OP_DONE	0	0	0
void () GrenadeDetonateThink = 
{
    sound(self.enemy, CHAN_AUTO, "rally/minebeep.wav", 1.000, ATTN_NORM);
    if((time - self.last_engine) < 5.000)
    {
        self.nextthink = time + 1.000;
    }
    else
    {
        if((time - self.last_engine) < 6.000)
        {
            self.nextthink = time + 0.500;
        }
        else
        {
            if((time - self.last_engine) < 7.000)
            {
                self.nextthink = time + 0.250;
            }
            else
            {
                if((time - self.last_engine) < 8.000)
                {
                    self.nextthink = time + 0.100;
                }
                else
                {
                    if(deathmatch)
                    {
                        T_Damage(self.enemy, self, self, 80.000);
                    }
                    else
                    {
                        T_Damage(self.enemy, self, self, 30.000);
                    }
                    
                    GrenadeExplode();
                }
                
            }
            
        }
        
    }
    
};

// GrenadeTouch
// function begins at statement 12510, parm_start=9731
// OP_LOAD_ENT	29	673	9731
// OP_NE_E	9731	30	9732
// OP_IFNOT	9732	2	0
// OP_RETURN	0	0	0
// OP_LOAD_S	29	129	9733
// OP_EQ_S	9733	880	9734
// OP_IFNOT	9734	29	0
// OP_ADDRESS	28	104	9735
// OP_STOREP_F	243	9735	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	9707	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	181	9736
// OP_STOREP_ENT	29	9736	0
// OP_ADDRESS	28	148	9737
// OP_STOREP_FNC	9705	9737	0
// OP_ADDRESS	28	150	9738
// OP_ADD_F	31	819	9739
// OP_STOREP_F	9739	9738	0
// OP_ADDRESS	28	591	9740
// OP_STOREP_F	31	9740	0
// OP_ADDRESS	28	133	9741
// OP_STOREP_F	817	9741	0
// OP_STORE_V	28	4	0
// OP_STORE_V	357	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	9742	7	0
// OP_CALL2	483	0	0
// OP_ADDRESS	29	673	9743
// OP_STOREP_ENT	28	9743	0
// OP_RETURN	0	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	335	7	0
// OP_STORE_V	9185	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_LOAD_V	28	113	9744
// OP_EQ_V	9744	926	9747
// OP_IFNOT	9747	5	0
// OP_ADDRESS	28	121	9748
// OP_STOREP_V	926	9748	0
// OP_ADDRESS	28	117	9751
// OP_STOREP_V	926	9751	0
// OP_DONE	0	0	0
void () GrenadeTouch = 
{
    
    if(other.mine_attached != world)
    {
        return;
    }
    
    
    if(other.classname == "player")
    {
        self.solid = SOLID_NOT;
        sound(self, CHAN_AUTO, "rally/minebeep.wav", 1.000, ATTN_NORM);
        self.enemy = other;
        self.think = GrenadeDetonateThink;
        self.nextthink = time + 1.000;
        self.last_engine = time;
        self.effects = 0.000;
        setmodel(self, string_null);
        sprint(other, "Detonator will explode in 5 seconds\n");
        other.mine_attached = self;
        return;
    }
    
    sound(self, CHAN_WEAPON, "weapons/bounce.wav", 1.000, ATTN_NORM);
    
    if(self.velocity == '0.000 0.000 0.000')
    {
        self.avelocity = '0.000 0.000 0.000';
        self.angles = '0.000 0.000 0.000';
    }
    
};

// GrenadeThink
// function begins at statement 12559, parm_start=9755
// OP_LOAD_F	28	647	9755
// OP_LT	9755	31	9756
// OP_IFNOT	9756	4	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	103	9757
// OP_EQ_F	9757	241	9758
// OP_LOAD_V	28	109	9759
// OP_LOAD_V	28	105	9762
// OP_EQ_V	9759	9762	9765
// OP_AND	9758	9765	9766
// OP_IFNOT	9766	10	0
// OP_ADDRESS	28	103	9767
// OP_STOREP_F	233	9767	0
// OP_ADDRESS	28	104	9768
// OP_STOREP_F	244	9768	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	9769
// OP_ADD_V	9769	916	9772
// OP_STORE_V	9772	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	28	109	9775
// OP_LOAD_V	28	105	9778
// OP_STOREP_V	9778	9775	0
// OP_ADDRESS	28	150	9781
// OP_ADD_F	31	1182	9782
// OP_STOREP_F	9782	9781	0
// OP_DONE	0	0	0
void () GrenadeThink = 
{
    
    if(self.last_idle < time)
    {
        remove(self);
        return;
    }
    
    
    if((self.movetype == MOVETYPE_BOUNCE) && (self.oldorigin == self.origin))
    {
        self.movetype = MOVETYPE_NONE;
        self.solid = SOLID_TRIGGER;
        setorigin(self, self.origin + '0.000 0.000 4.000');
    }
    
    self.oldorigin = self.origin;
    self.nextthink = time + 0.500;
};

// W_FireGrenade
// function begins at statement 12588, parm_start=9784
// OP_ADDRESS	28	157	9786
// OP_ADDRESS	28	160	9787
// OP_LOAD_F	28	160	9788
// OP_SUB_F	9788	819	9789
// OP_STOREP_F	9789	9787	0
// OP_STOREP_F	9789	9786	0
// OP_STORE_V	28	4	0
// OP_STORE_V	335	7	0
// OP_STORE_V	9184	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	126	9790
// OP_STOREP_F	947	9790	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	9784	0
// OP_ADDRESS	9784	201	9791
// OP_STOREP_ENT	28	9791	0
// OP_ADDRESS	9784	103	9792
// OP_STOREP_F	241	9792	0
// OP_ADDRESS	9784	104	9793
// OP_STOREP_F	245	9793	0
// OP_ADDRESS	9784	129	9794
// OP_STOREP_S	9795	9794	0
// OP_LOAD_ENT	28	548	9796
// OP_LOAD_V	9796	117	9797
// OP_STORE_V	9797	4	0
// OP_CALL1	461	0	0
// OP_ADDRESS	9784	113	9800
// OP_STOREP_V	1584	9800	0
// OP_ADDRESS	9784	121	9803
// OP_STOREP_V	9806	9803	0
// OP_ADDRESS	9784	146	9809
// OP_STOREP_FNC	9730	9809	0
// OP_ADDRESS	9784	647	9810
// OP_ADD_F	31	855	9811
// OP_STOREP_F	9811	9810	0
// OP_ADDRESS	9784	109	9812
// OP_LOAD_V	9784	105	9815
// OP_STOREP_V	9815	9812	0
// OP_ADDRESS	9784	150	9818
// OP_ADD_F	31	819	9819
// OP_STOREP_F	9819	9818	0
// OP_ADDRESS	9784	148	9820
// OP_STOREP_FNC	9754	9820	0
// OP_STORE_V	9784	4	0
// OP_STORE_V	9821	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	9784	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	926	10	0
// OP_CALL3	464	0	0
// OP_STORE_V	9784	4	0
// OP_LOAD_V	28	105	9822
// OP_STORE_V	9822	7	0
// OP_CALL2	462	0	0
// OP_DONE	0	0	0
void () W_FireGrenade = 
{
    local entity missile;
    local entity mpuff;
    self.currentammo = self.ammo_rockets = self.ammo_rockets - 1.000;
    sound(self, CHAN_WEAPON, "weapons/grenade.wav", 1.000, ATTN_NORM);
    self.punchangle_x = -2.000;
    missile = spawn();
    missile.owner = self;
    missile.movetype = MOVETYPE_BOUNCE;
    missile.solid = SOLID_BBOX;
    missile.classname = "grenade";
    makevectors(self.veh_body.angles);
    missile.velocity = '0.000 0.000 200.000';
    missile.avelocity = '0.000 300.000 0.000';
    missile.touch = GrenadeTouch;
    missile.last_idle = time + 10.000;
    missile.oldorigin = missile.origin;
    missile.nextthink = time + 1.000;
    missile.think = GrenadeThink;
    setmodel(missile, "models/detnator.mdl");
    setsize(missile, '0.000 0.000 0.000', '0.000 0.000 0.000');
    setorigin(missile, self.origin);
};

// MineExplode
// function begins at statement 12645, parm_start=9826
// OP_STORE_V	28	4	0
// OP_LOAD_ENT	28	201	9826
// OP_STORE_V	9826	7	0
// OP_STORE_V	2677	10	0
// OP_STORE_V	29	13	0
// OP_CALL4	8274	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	315	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	325	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	351	4	0
// OP_LOAD_F	28	106	9827
// OP_STORE_V	9827	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	351	4	0
// OP_LOAD_F	28	107	9828
// OP_STORE_V	9828	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	351	4	0
// OP_LOAD_F	28	108	9829
// OP_STORE_V	9829	7	0
// OP_CALL2	511	0	0
// OP_CALL0	538	0	0
// OP_DONE	0	0	0
void () MineExplode = 
{
    T_RadiusDamage(self, self.owner, 80.000, other);
    WriteByte(MSG_BROADCAST, SVC_TEMPENTITY);
    WriteByte(MSG_BROADCAST, TE_EXPLOSION);
    WriteCoord(MSG_BROADCAST, self.origin_x);
    WriteCoord(MSG_BROADCAST, self.origin_y);
    WriteCoord(MSG_BROADCAST, self.origin_z);
    BecomeExplosion();
};

// MineTouch
// function begins at statement 12671, parm_start=9831
// OP_LOAD_ENT	28	201	9831
// OP_EQ_E	29	9831	9832
// OP_IFNOT	9832	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	163	9833
// OP_EQ_F	9833	258	9834
// OP_IFNOT	9834	9	0
// OP_STORE_V	29	4	0
// OP_STORE_V	28	7	0
// OP_LOAD_ENT	28	201	9835
// OP_STORE_V	9835	10	0
// OP_STORE_V	2677	13	0
// OP_CALL4	534	0	0
// OP_CALL0	9825	0	0
// OP_RETURN	0	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	335	7	0
// OP_STORE_V	9185	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_LOAD_V	28	113	9836
// OP_EQ_V	9836	926	9839
// OP_IFNOT	9839	3	0
// OP_ADDRESS	28	121	9840
// OP_STOREP_V	926	9840	0
// OP_DONE	0	0	0
void () MineTouch = 
{
    
    if(other == self.owner)
    {
        return;
    }
    
    
    if(other.takedamage == DAMAGE_AIM)
    {
        T_Damage(other, self, self.owner, 80.000);
        MineExplode();
        return;
    }
    
    sound(self, CHAN_WEAPON, "weapons/bounce.wav", 1.000, ATTN_NORM);
    
    if(self.velocity == '0.000 0.000 0.000')
    {
        self.avelocity = '0.000 0.000 0.000';
    }
    
};

void () MineThink;
// SpawnMine
// function begins at statement 12698, parm_start=9845
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	9852	0
// OP_ADDRESS	9852	201	9853
// OP_LOAD_ENT	28	201	9854
// OP_STOREP_ENT	9854	9853	0
// OP_ADDRESS	9852	103	9855
// OP_STOREP_F	241	9855	0
// OP_ADDRESS	9852	104	9856
// OP_STOREP_F	245	9856	0
// OP_ADDRESS	9852	129	9857
// OP_STOREP_S	9858	9857	0
// OP_MUL_VF	59	823	9859
// OP_MUL_VF	65	9848	9862
// OP_ADD_V	9859	9862	9865
// OP_STORE_V	9865	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	9849	0
// OP_ADDRESS	9852	113	9868
// OP_LOAD_V	28	113	9871
// OP_STORE_V	9871	4	0
// OP_CALL1	471	0	0
// OP_MUL_VF	9849	1	9874
// OP_STOREP_V	9874	9868	0
// OP_ADDRESS	9852	116	9877
// OP_LOAD_F	28	116	9878
// OP_STOREP_F	9878	9877	0
// OP_ADDRESS	9852	121	9879
// OP_STOREP_V	3496	9879	0
// OP_ADDRESS	9852	117	9882
// OP_LOAD_V	9852	113	9885
// OP_STORE_V	9885	4	0
// OP_CALL1	506	0	0
// OP_STOREP_V	1	9882	0
// OP_ADDRESS	9852	146	9888
// OP_STOREP_FNC	9830	9888	0
// OP_ADDRESS	9852	647	9889
// OP_STOREP_F	31	9889	0
// OP_ADDRESS	9852	109	9890
// OP_LOAD_V	9852	105	9893
// OP_STOREP_V	9893	9890	0
// OP_ADDRESS	9852	150	9896
// OP_ADD_F	31	2869	9897
// OP_STOREP_F	9897	9896	0
// OP_ADDRESS	9852	148	9898
// OP_STOREP_FNC	9843	9898	0
// OP_STORE_V	9852	4	0
// OP_STORE_V	9899	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	9852	131	9900
// OP_STOREP_F	819	9900	0
// OP_STORE_V	9852	4	0
// OP_STORE_V	6124	7	0
// OP_STORE_V	9901	10	0
// OP_CALL3	464	0	0
// OP_STORE_V	9852	4	0
// OP_LOAD_V	28	105	9904
// OP_MUL_VF	65	834	9907
// OP_MUL_VF	9907	9848	9910
// OP_ADD_V	9904	9910	9913
// OP_STORE_V	9913	7	0
// OP_CALL2	462	0	0
// OP_DONE	0	0	0
void (vector org, float right) SpawnMine = 
{
    local vector vel_norm;
    local entity missile;
    missile = spawn();
    missile.owner = self.owner;
    missile.movetype = MOVETYPE_BOUNCE;
    missile.solid = SOLID_BBOX;
    missile.classname = "mine";
    vel_norm = normalize((v_forward * 3.000) + (v_right * right));
    missile.velocity = vel_norm * vlen(self.velocity);
    missile.velocity_z = self.velocity_z;
    missile.avelocity = '300.000 300.000 300.000';
    missile.angles = vectoangles(missile.velocity);
    missile.touch = MineTouch;
    missile.last_idle = time;
    missile.oldorigin = missile.origin;
    missile.nextthink = time + 0.100;
    missile.think = MineThink;
    setmodel(missile, "models/mine.mdl");
    missile.frame = 1.000;
    setsize(missile, '-4.000 -4.000 0.000', '4.000 4.000 4.000');
    setorigin(missile, self.origin + ((v_right * 12.000) * right));
};

// MineThink
// function begins at statement 12760, parm_start=9916
// OP_LOAD_F	28	647	9921
// OP_SUB_F	31	823	9922
// OP_LT	9921	9922	9923
// OP_IFNOT	9923	3	0
// OP_CALL0	9825	0	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	131	9924
// OP_NE_F	9924	819	9925
// OP_LOAD_F	28	647	9926
// OP_SUB_F	31	1182	9927
// OP_LT	9926	9927	9928
// OP_AND	9925	9928	9929
// OP_IFNOT	9929	25	0
// OP_CALL0	466	0	0
// OP_LT	1	1992	9930
// OP_IFNOT	9930	16	0
// OP_LOAD_V	28	113	9931
// OP_STORE_V	9931	9916	0
// OP_STORE_V	9916	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	9916	0
// OP_STORE_V	9916	4	0
// OP_CALL1	461	0	0
// OP_LOAD_V	28	105	9934
// OP_STORE_V	9934	4	0
// OP_STORE_V	819	7	0
// OP_CALL2	9844	0	0
// OP_LOAD_V	28	105	9937
// OP_STORE_V	9937	4	0
// OP_STORE_V	1228	7	0
// OP_CALL2	9844	0	0
// OP_ADDRESS	28	116	9940
// OP_LOAD_F	28	116	9941
// OP_MUL_F	9941	3083	9942
// OP_STOREP_F	9942	9940	0
// OP_ADDRESS	28	131	9943
// OP_STOREP_F	819	9943	0
// OP_LOAD_ENT	28	181	9944
// OP_EQ_E	9944	30	9945
// OP_IFNOT	9945	22	0
// OP_LOAD_V	28	105	9946
// OP_STORE_V	9946	4	0
// OP_STORE_V	2223	7	0
// OP_CALL2	481	0	0
// OP_STORE_ENT	1	9920	0
// OP_NE_E	9920	30	9949
// OP_LOAD_F	9920	163	9950
// OP_NE_F	9950	258	9951
// OP_AND	9949	9951	9952
// OP_IFNOT	9952	4	0
// OP_LOAD_ENT	9920	164	9953
// OP_STORE_ENT	9953	9920	0
// OP_GOTO	-7	0	0
// OP_NE_E	9920	30	9954
// OP_LOAD_ENT	28	201	9955
// OP_NE_E	9920	9955	9956
// OP_AND	9954	9956	9957
// OP_IFNOT	9957	4	0
// OP_STORE_ENT	9920	29	0
// OP_CALL0	9830	0	0
// OP_RETURN	0	0	0
// OP_LOAD_V	28	113	9958
// OP_STORE_V	9958	4	0
// OP_CALL1	471	0	0
// OP_LT	1	1112	9961
// OP_IFNOT	9961	7	0
// OP_ADDRESS	28	148	9962
// OP_STOREP_FNC	533	9962	0
// OP_ADDRESS	28	150	9963
// OP_ADD_F	31	827	9964
// OP_STOREP_F	9964	9963	0
// OP_GOTO	4	0	0
// OP_ADDRESS	28	150	9965
// OP_ADD_F	31	2869	9966
// OP_STOREP_F	9966	9965	0
// OP_DONE	0	0	0
void () MineThink = 
{
    local vector old_vel;
    local float dist;
    local entity trav;
    
    if(self.last_idle < (time - 3.000))
    {
        MineExplode();
        return;
    }
    
    
    if((self.frame != 1.000) && (self.last_idle < (time - 0.500)))
    {
        
        if(random() < 0.150)
        {
            old_vel = self.velocity;
            old_vel = vectoangles(old_vel);
            makevectors(old_vel);
            SpawnMine(self.origin, 1.000);
            SpawnMine(self.origin, -1.000);
        }
        
        self.velocity_z = self.velocity_z * 0.750;
        self.frame = 1.000;
    }
    
    
    if(self.enemy == world)
    {
        trav = findradius(self.origin, 64.000);
        
        while((trav != world) && (trav.takedamage != DAMAGE_AIM))
        {
            trav = trav.chain;
        }
        
        
        if((trav != world) && (trav != self.owner))
        {
            other = trav;
            MineTouch();
            return;
        }
        
    }
    
    if(vlen(self.velocity) < 20.000)
    {
        self.think = SUB_Remove;
        self.nextthink = time + 5.000;
    }
    else
    {
        self.nextthink = time + 0.100;
    }
    
};

// W_FireMine
// function begins at statement 12836, parm_start=9968
// OP_LOAD_F	28	157	9970
// OP_GE	9970	823	9971
// OP_IFNOT	9971	8	0
// OP_ADDRESS	28	157	9972
// OP_ADDRESS	28	160	9973
// OP_LOAD_F	28	160	9974
// OP_SUB_F	9974	823	9975
// OP_STOREP_F	9975	9973	0
// OP_STOREP_F	9975	9972	0
// OP_GOTO	5	0	0
// OP_ADDRESS	28	157	9976
// OP_ADDRESS	28	160	9977
// OP_STOREP_F	817	9977	0
// OP_STOREP_F	817	9976	0
// OP_STORE_V	28	4	0
// OP_STORE_V	335	7	0
// OP_STORE_V	9184	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	126	9978
// OP_STOREP_F	947	9978	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	9968	0
// OP_ADDRESS	9968	201	9979
// OP_STOREP_ENT	28	9979	0
// OP_ADDRESS	9968	103	9980
// OP_STOREP_F	241	9980	0
// OP_ADDRESS	9968	104	9981
// OP_STOREP_F	245	9981	0
// OP_ADDRESS	9968	129	9982
// OP_STOREP_S	9858	9982	0
// OP_LOAD_ENT	28	548	9983
// OP_LOAD_V	9983	117	9984
// OP_LOAD_V	28	580	9987
// OP_SUB_V	9984	9987	9990
// OP_STORE_V	9990	4	0
// OP_CALL1	461	0	0
// OP_ADDRESS	9968	113	9993
// OP_LOAD_V	28	113	9996
// OP_STORE_V	9996	4	0
// OP_CALL1	471	0	0
// OP_MUL_F	1	883	9999
// OP_ADD_F	1957	9999	10000
// OP_MUL_VF	59	10000	10001
// OP_STOREP_V	10001	9993	0
// OP_ADDRESS	9968	116	10004
// OP_STOREP_F	1135	10004	0
// OP_ADDRESS	9968	121	10005
// OP_STOREP_V	3496	10005	0
// OP_ADDRESS	9968	117	10008
// OP_LOAD_V	9968	113	10011
// OP_STORE_V	10011	4	0
// OP_CALL1	506	0	0
// OP_STOREP_V	1	10008	0
// OP_ADDRESS	9968	146	10014
// OP_STOREP_FNC	9830	10014	0
// OP_ADDRESS	9968	647	10015
// OP_STOREP_F	31	10015	0
// OP_ADDRESS	9968	109	10016
// OP_LOAD_V	9968	105	10019
// OP_STOREP_V	10019	10016	0
// OP_ADDRESS	9968	150	10022
// OP_ADD_F	31	2869	10023
// OP_STOREP_F	10023	10022	0
// OP_ADDRESS	9968	148	10024
// OP_STOREP_FNC	9843	10024	0
// OP_STORE_V	9968	4	0
// OP_STORE_V	9899	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	9968	4	0
// OP_STORE_V	6124	7	0
// OP_STORE_V	9901	10	0
// OP_CALL3	464	0	0
// OP_STORE_V	9968	4	0
// OP_LOAD_V	28	105	10025
// OP_STORE_V	10025	7	0
// OP_CALL2	462	0	0
// OP_DONE	0	0	0
void () W_FireMine = 
{
    local entity missile;
    local entity mpuff;
    if(self.currentammo >= 3.000)
    {
        self.currentammo = self.ammo_rockets = self.ammo_rockets - 3.000;
    }
    else
    {
        self.ammo_rockets = 0.000;
        self.currentammo = 0.000;
    }
    
    sound(self, CHAN_WEAPON, "weapons/grenade.wav", 1.000, ATTN_NORM);
    self.punchangle_x = -2.000;
    missile = spawn();
    missile.owner = self;
    missile.movetype = MOVETYPE_BOUNCE;
    missile.solid = SOLID_BBOX;
    missile.classname = "mine";
    makevectors(self.veh_body.angles - self.body_roll);
    missile.velocity = v_forward * (100.000 + (vlen(self.velocity) * 1.500));
    missile.velocity_z = 250.000;
    missile.avelocity = '300.000 300.000 300.000';
    missile.angles = vectoangles(missile.velocity);
    missile.touch = MineTouch;
    missile.last_idle = time;
    missile.oldorigin = missile.origin;
    missile.nextthink = time + 0.100;
    missile.think = MineThink;
    setmodel(missile, "models/mine.mdl");
    setsize(missile, '-4.000 -4.000 0.000', '4.000 4.000 4.000');
    setorigin(missile, self.origin);
};

// LaserTouch
// function begins at statement 12915, parm_start=10029
// OP_LOAD_ENT	28	201	10029
// OP_EQ_E	29	10029	10030
// OP_IFNOT	10030	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	163	10031
// OP_EQ_F	10031	258	10032
// OP_IFNOT	10032	12	0
// OP_STORE_V	1112	4	0
// OP_CALL1	9294	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	28	7	0
// OP_LOAD_ENT	28	201	10033
// OP_STORE_V	10033	10	0
// OP_STORE_V	1112	13	0
// OP_CALL4	534	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	592	10034
// OP_STOREP_F	31	10034	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	10035	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_LOAD_V	28	113	10036
// OP_EQ_V	10036	926	10039
// OP_IFNOT	10039	3	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_DONE	0	0	0
void () LaserTouch = 
{
    
    if(other == self.owner)
    {
        return;
    }
    
    
    if(other.takedamage == DAMAGE_AIM)
    {
        spawn_touchblood(20.000);
        T_Damage(other, self, self.owner, 20.000);
        remove(self);
        return;
    }
    
    self.last_jump_z = time;
    sound(self, CHAN_AUTO, "rally/process/spark4.wav", 1.000, ATTN_NORM);
    
    if(self.velocity == '0.000 0.000 0.000')
    {
        remove(self);
    }
    
};

// spawn_laser
// function begins at statement 12947, parm_start=10041
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	10044	0
// OP_ADDRESS	10044	201	10049
// OP_STOREP_ENT	28	10049	0
// OP_ADDRESS	10044	103	10050
// OP_STOREP_F	241	10050	0
// OP_ADDRESS	10044	104	10051
// OP_STOREP_F	245	10051	0
// OP_ADDRESS	10044	129	10052
// OP_STOREP_S	10053	10052	0
// OP_STORE_V	10041	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	10046	0
// OP_ADDRESS	10044	113	10054
// OP_LOAD_V	28	113	10058
// OP_STORE_V	10058	4	0
// OP_CALL1	471	0	0
// OP_MUL_F	1	883	10061
// OP_ADD_F	10057	10061	10062
// OP_MUL_VF	10046	10062	10063
// OP_STOREP_V	10063	10054	0
// OP_ADDRESS	10044	117	10066
// OP_LOAD_V	10044	113	10069
// OP_STORE_V	10069	4	0
// OP_CALL1	506	0	0
// OP_STOREP_V	1	10066	0
// OP_ADDRESS	10044	567	10072
// OP_LOAD_V	10044	113	10075
// OP_STOREP_V	10075	10072	0
// OP_ADDRESS	10044	146	10078
// OP_STOREP_FNC	10028	10078	0
// OP_ADDRESS	10044	592	10079
// OP_STOREP_F	817	10079	0
// OP_ADDRESS	10044	109	10080
// OP_LOAD_V	10044	105	10083
// OP_STOREP_V	10083	10080	0
// OP_ADDRESS	10044	150	10086
// OP_ADD_F	31	3083	10087
// OP_STOREP_F	10087	10086	0
// OP_ADDRESS	10044	148	10088
// OP_STOREP_FNC	533	10088	0
// OP_STORE_V	10044	4	0
// OP_STORE_V	10089	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	10044	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	926	10	0
// OP_CALL3	464	0	0
// OP_STORE_V	10044	4	0
// OP_LOAD_V	28	105	10090
// OP_MUL_VF	10046	825	10093
// OP_ADD_V	10090	10093	10096
// OP_STORE_V	10096	7	0
// OP_CALL2	462	0	0
// OP_DONE	0	0	0
void (vector dir) spawn_laser = 
{
    local entity missile;
    local entity mpuff;
    local vector vect;
    missile = spawn();
    missile.owner = self;
    missile.movetype = MOVETYPE_BOUNCE;
    missile.solid = SOLID_BBOX;
    missile.classname = "laser";
    vect = normalize(dir);
    missile.velocity = vect * (2000.000 + (vlen(self.velocity) * 1.500));
    missile.angles = vectoangles(missile.velocity);
    missile.old_velocity = missile.velocity;
    missile.touch = LaserTouch;
    missile.last_jump_z = 0.000;
    missile.oldorigin = missile.origin;
    missile.nextthink = time + 0.750;
    missile.think = SUB_Remove;
    setmodel(missile, "progs/laser.mdl");
    setsize(missile, '0.000 0.000 0.000', '0.000 0.000 0.000');
    setorigin(missile, self.origin + (vect * 4.000));
};

// W_FireLaser
// function begins at statement 13002, parm_start=10100
// OP_LOAD_F	28	157	10100
// OP_GE	10100	821	10101
// OP_IFNOT	10101	8	0
// OP_ADDRESS	28	157	10102
// OP_ADDRESS	28	217	10103
// OP_LOAD_F	28	217	10104
// OP_SUB_F	10104	821	10105
// OP_STOREP_F	10105	10103	0
// OP_STOREP_F	10105	10102	0
// OP_GOTO	5	0	0
// OP_ADDRESS	28	157	10106
// OP_ADDRESS	28	217	10107
// OP_STOREP_F	817	10107	0
// OP_STOREP_F	817	10106	0
// OP_STORE_V	28	4	0
// OP_STORE_V	335	7	0
// OP_STORE_V	10108	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	126	10109
// OP_STOREP_F	947	10109	0
// OP_LOAD_ENT	28	548	10110
// OP_LOAD_V	10110	117	10111
// OP_LOAD_V	28	580	10114
// OP_SUB_V	10111	10114	10117
// OP_STORE_V	10117	4	0
// OP_CALL1	461	0	0
// OP_MUL_F	1228	61	10120
// OP_STORE_F	10120	61	0
// OP_STORE_V	61	4	0
// OP_CALL1	499	0	0
// OP_LT	1	2869	10121
// OP_IFNOT	10121	2	0
// OP_STORE_F	817	61	0
// OP_STORE_V	67	4	0
// OP_CALL1	499	0	0
// OP_LT	1	2869	10122
// OP_IFNOT	10122	2	0
// OP_STORE_F	817	67	0
// OP_STORE_V	59	4	0
// OP_CALL1	10040	0	0
// OP_MUL_VF	59	825	10123
// OP_ADD_V	10123	65	10126
// OP_STORE_V	10126	4	0
// OP_CALL1	10040	0	0
// OP_MUL_VF	59	825	10129
// OP_SUB_V	10129	65	10132
// OP_STORE_V	10132	4	0
// OP_CALL1	10040	0	0
// OP_DONE	0	0	0
void () W_FireLaser = 
{
    if(self.currentammo >= 2.000)
    {
        self.currentammo = self.ammo_roobar = self.ammo_roobar - 2.000;
    }
    else
    {
        self.ammo_roobar = 0.000;
        self.currentammo = 0.000;
    }
    
    sound(self, CHAN_WEAPON, "enforcer/enfire.wav", 1.000, ATTN_NORM);
    self.punchangle_x = -2.000;
    makevectors(self.veh_body.angles - self.body_roll);
    v_forward_z = -1.000 * 0.000;
    
    if(fabs(0.000) < 0.100)
    {
        v_forward_z = 0.000;
    }
    
    
    if(fabs(0.000) < 0.100)
    {
        v_right_z = 0.000;
    }
    
    spawn_laser(v_forward);
    spawn_laser((v_forward * 4.000) + v_right);
    spawn_laser((v_forward * 4.000) - v_right);
};

void () spike_touch;
void () superspike_touch;
// launch_spike
// function begins at statement 13053, parm_start=10138
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	359	0
// OP_ADDRESS	359	201	10144
// OP_STOREP_ENT	28	10144	0
// OP_ADDRESS	359	103	10145
// OP_STOREP_F	240	10145	0
// OP_ADDRESS	359	104	10146
// OP_STOREP_F	245	10146	0
// OP_ADDRESS	359	117	10147
// OP_STORE_V	10141	4	0
// OP_CALL1	506	0	0
// OP_STOREP_V	1	10147	0
// OP_ADDRESS	359	146	10150
// OP_STOREP_FNC	10135	10150	0
// OP_ADDRESS	359	129	10151
// OP_STOREP_S	10152	10151	0
// OP_ADDRESS	359	148	10153
// OP_STOREP_FNC	533	10153	0
// OP_ADDRESS	359	150	10154
// OP_ADD_F	31	829	10155
// OP_STOREP_F	10155	10154	0
// OP_STORE_V	359	4	0
// OP_STORE_V	10156	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	359	4	0
// OP_STORE_V	300	7	0
// OP_STORE_V	300	10	0
// OP_CALL3	464	0	0
// OP_STORE_V	359	4	0
// OP_STORE_V	10138	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	359	113	10157
// OP_MUL_VF	10141	9535	10160
// OP_STOREP_V	10160	10157	0
// OP_DONE	0	0	0
void (vector org, vector dir) launch_spike = 
{
    newmis = spawn();
    newmis.owner = self;
    newmis.movetype = MOVETYPE_FLYMISSILE;
    newmis.solid = SOLID_BBOX;
    newmis.angles = vectoangles(dir);
    newmis.touch = spike_touch;
    newmis.classname = "spike";
    newmis.think = SUB_Remove;
    newmis.nextthink = time + 6.000;
    setmodel(newmis, "progs/spike.mdl");
    setsize(newmis, VEC_ORIGIN, VEC_ORIGIN);
    setorigin(newmis, org);
    newmis.velocity = dir * 1500.000;
};

// W_FireSuperSpikes
// function begins at statement 13088, parm_start=10164
// OP_LOAD_ENT	28	548	10168
// OP_LOAD_V	10168	117	10169
// OP_STORE_V	10169	10164	0
// OP_LOAD_F	28	182	10172
// OP_BITAND	10172	228	10173
// OP_IFNOT	10173	12	0
// OP_LOAD_V	28	105	10174
// OP_STORE_V	10174	4	0
// OP_LOAD_V	28	105	10177
// OP_SUB_V	10177	2284	10180
// OP_STORE_V	10180	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_EQ_V	74	1215	10183
// OP_IFNOT	10183	2	0
// OP_STORE_F	817	10164	0
// OP_MUL_F	1228	10164	10184
// OP_STORE_F	10184	10164	0
// OP_STORE_V	10164	4	0
// OP_CALL1	461	0	0
// OP_ADDRESS	28	157	10185
// OP_ADDRESS	28	159	10186
// OP_LOAD_F	28	159	10187
// OP_SUB_F	10187	819	10188
// OP_STOREP_F	10188	10186	0
// OP_STOREP_F	10188	10185	0
// OP_ADDRESS	28	387	10189
// OP_ADD_F	31	1152	10190
// OP_STOREP_F	10190	10189	0
// OP_STORE_V	28	4	0
// OP_STORE_V	335	7	0
// OP_STORE_V	9182	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	387	10191
// OP_ADD_F	31	1152	10192
// OP_STOREP_F	10192	10191	0
// OP_LOAD_V	28	105	10193
// OP_ADD_V	10193	1666	10196
// OP_STORE_V	10196	4	0
// OP_LOAD_V	28	105	10199
// OP_ADD_V	10199	1666	10202
// OP_MUL_VF	59	9421	10205
// OP_ADD_V	10202	10205	10208
// OP_STORE_V	10208	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_NE_E	78	30	10211
// OP_IFNOT	10211	12	0
// OP_LOAD_F	78	163	10212
// OP_NE_F	10212	256	10213
// OP_IFNOT	10213	8	0
// OP_STORE_V	855	4	0
// OP_CALL1	9294	0	0
// OP_STORE_V	78	4	0
// OP_STORE_V	28	7	0
// OP_STORE_V	28	10	0
// OP_STORE_V	1632	13	0
// OP_CALL4	534	0	0
// OP_GOTO	18	0	0
// OP_LT	70	819	10214
// OP_IFNOT	10214	16	0
// OP_STORE_V	351	4	0
// OP_STORE_V	315	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	324	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	71	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	72	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	73	7	0
// OP_CALL2	511	0	0
// OP_DONE	0	0	0
void () W_FireSuperSpikes = 
{
    local vector dir;
    local entity old;
    dir = self.veh_body.angles;
    
    if(self.flags & FL_ONGROUND)
    {
        traceline(self.origin, self.origin - '0.000 0.000 64.000', TRUE, self);
        
        if(trace_plane_normal == '0.000 0.000 1.000')
        {
            dir_x = 0.000;
        }
        
    }
    
    dir_x = -1.000 * dir_x;
    makevectors(dir);
    self.currentammo = self.ammo_nails = self.ammo_nails - 1.000;
    self.attack_finished = time + 0.200;
    sound(self, CHAN_WEAPON, "weapons/spike2.wav", 1.000, ATTN_NORM);
    self.attack_finished = time + 0.200;
    traceline(self.origin + '0.000 0.000 8.000', (self.origin + '0.000 0.000 8.000') + (v_forward * 2048.000), FALSE, self);
    if(trace_ent != world)
    {
        
        if(trace_ent.takedamage != DAMAGE_NO)
        {
            spawn_touchblood(10.000);
            T_Damage(trace_ent, self, self, 40.000);
        }
        
    }
    else
    {
        
        if(trace_fraction < 1.000)
        {
            WriteByte(MSG_BROADCAST, SVC_TEMPENTITY);
            WriteByte(MSG_BROADCAST, TE_GUNSHOT);
            WriteCoord(MSG_BROADCAST, trace_endpos_x);
            WriteCoord(MSG_BROADCAST, 0.000);
            WriteCoord(MSG_BROADCAST, 0.000);
        }
        
    }
    
};

// W_FireSpikes
// function begins at statement 13169, parm_start=10216
// OP_LOAD_F	28	159	10221
// OP_LT	10221	819	10222
// OP_IFNOT	10222	6	0
// OP_ADDRESS	28	154	10223
// OP_CALL0	8577	0	0
// OP_STOREP_F	1	10223	0
// OP_CALL0	931	0	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	154	10224
// OP_EQ_F	10224	263	10225
// OP_IFNOT	10225	3	0
// OP_CALL0	10163	0	0
// OP_RETURN	0	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	335	7	0
// OP_STORE_V	9176	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	387	10226
// OP_ADD_F	31	1152	10227
// OP_STOREP_F	10227	10226	0
// OP_ADDRESS	28	157	10228
// OP_ADDRESS	28	159	10229
// OP_LOAD_F	28	159	10230
// OP_SUB_F	10230	819	10231
// OP_STOREP_F	10231	10229	0
// OP_STOREP_F	10231	10228	0
// OP_STORE_V	59	10217	0
// OP_LOAD_ENT	28	548	10232
// OP_LOAD_V	10232	105	10233
// OP_MUL_VF	65	10216	10236
// OP_ADD_V	10233	10236	10239
// OP_STORE_V	10239	4	0
// OP_STORE_V	10217	7	0
// OP_CALL2	10137	0	0
// OP_ADDRESS	28	126	10242
// OP_STOREP_F	947	10242	0
// OP_DONE	0	0	0
void (float ox) W_FireSpikes = 
{
    local vector dir;
    local entity old;
    
    if(self.ammo_nails < 1.000)
    {
        self.weapon = W_BestWeapon();
        W_SetCurrentAmmo();
        return;
    }
    
    
    if(self.weapon == IT_SUPER_NAILGUN)
    {
        W_FireSuperSpikes();
        return;
    }
    
    sound(self, CHAN_WEAPON, "weapons/rocket1i.wav", 1.000, ATTN_NORM);
    self.attack_finished = time + 0.200;
    self.currentammo = self.ammo_nails = self.ammo_nails - 1.000;
    dir = v_forward;
    launch_spike(self.veh_body.origin + (v_right * ox), dir);
    self.punchangle_x = -2.000;
};

.float hit_z;
// spike_touch
// function begins at statement 13208, parm_start=10244
// OP_LOAD_ENT	28	201	10245
// OP_EQ_E	29	10245	10246
// OP_IFNOT	10246	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	104	10247
// OP_EQ_F	10247	244	10248
// OP_IFNOT	10248	2	0
// OP_RETURN	0	0	0
// OP_LOAD_V	28	105	10249
// OP_STORE_V	10249	4	0
// OP_CALL1	498	0	0
// OP_EQ_F	1	295	10252
// OP_IFNOT	10252	4	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	163	10253
// OP_IFNOT	10253	36	0
// OP_STORE_V	845	4	0
// OP_CALL1	9294	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	28	7	0
// OP_LOAD_ENT	28	201	10254
// OP_STORE_V	10254	10	0
// OP_STORE_V	845	13	0
// OP_CALL4	534	0	0
// OP_CALL0	466	0	0
// OP_STORE_F	1	10244	0
// OP_LT	10244	2575	10255
// OP_IFNOT	10255	8	0
// OP_STORE_V	29	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	9179	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	16	0	0
// OP_LT	10244	5974	10256
// OP_IFNOT	10256	8	0
// OP_STORE_V	29	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	9180	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	7	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	9181	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	33	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	315	7	0
// OP_CALL2	507	0	0
// OP_LOAD_S	28	129	10257
// OP_EQ_S	10257	10258	10259
// OP_IFNOT	10259	5	0
// OP_STORE_V	351	4	0
// OP_STORE_V	329	7	0
// OP_CALL2	507	0	0
// OP_GOTO	11	0	0
// OP_LOAD_S	28	129	10260
// OP_EQ_S	10260	10261	10262
// OP_IFNOT	10262	5	0
// OP_STORE_V	351	4	0
// OP_STORE_V	330	7	0
// OP_CALL2	507	0	0
// OP_GOTO	4	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	322	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	351	4	0
// OP_LOAD_F	28	106	10263
// OP_STORE_V	10263	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	351	4	0
// OP_LOAD_F	28	107	10264
// OP_STORE_V	10264	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	351	4	0
// OP_LOAD_F	28	108	10265
// OP_STORE_V	10265	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_DONE	0	0	0
void () spike_touch = 
{
    local float rand;
    
    if(other == self.owner)
    {
        return;
    }
    
    
    if(other.solid == SOLID_TRIGGER)
    {
        return;
    }
    
    
    if(pointcontents(self.origin) == CONTENT_SKY)
    {
        remove(self);
        return;
    }
    
    if(other.takedamage)
    {
        spawn_touchblood(15.000);
        T_Damage(other, self, self.owner, 15.000);
        rand = random();
        if(rand < 0.300)
        {
            sound(other, CHAN_AUTO, "weapons/ric1.wav", 1.000, ATTN_NORM);
        }
        else
        {
            if(rand < 0.650)
            {
                sound(other, CHAN_AUTO, "weapons/ric2.wav", 1.000, ATTN_NORM);
            }
            else
            {
                sound(other, CHAN_AUTO, "weapons/ric3.wav", 1.000, ATTN_NORM);
            }
            
        }
        
    }
    else
    {
        WriteByte(MSG_BROADCAST, SVC_TEMPENTITY);
        if(self.classname == "wizspike")
        {
            WriteByte(MSG_BROADCAST, TE_WIZSPIKE);
        }
        else
        {
            if(self.classname == "knightspike")
            {
                WriteByte(MSG_BROADCAST, TE_KNIGHTSPIKE);
            }
            else
            {
                WriteByte(MSG_BROADCAST, TE_SPIKE);
            }
            
        }
        
        WriteCoord(MSG_BROADCAST, self.origin_x);
        WriteCoord(MSG_BROADCAST, self.origin_y);
        WriteCoord(MSG_BROADCAST, self.origin_z);
    }
    
    remove(self);
};

// superspike_touch
// function begins at statement 13296, parm_start=10266
// OP_LOAD_ENT	28	201	10267
// OP_EQ_E	29	10267	10268
// OP_IFNOT	10268	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	104	10269
// OP_EQ_F	10269	244	10270
// OP_IFNOT	10270	2	0
// OP_RETURN	0	0	0
// OP_LOAD_V	28	105	10271
// OP_STORE_V	10271	4	0
// OP_CALL1	498	0	0
// OP_EQ_F	1	295	10274
// OP_IFNOT	10274	4	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	163	10275
// OP_IFNOT	10275	36	0
// OP_STORE_V	3974	4	0
// OP_CALL1	9294	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	28	7	0
// OP_LOAD_ENT	28	201	10276
// OP_STORE_V	10276	10	0
// OP_STORE_V	2522	13	0
// OP_CALL4	534	0	0
// OP_CALL0	466	0	0
// OP_STORE_F	1	10266	0
// OP_LT	10266	2575	10277
// OP_IFNOT	10277	8	0
// OP_STORE_V	29	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	9179	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	16	0	0
// OP_LT	10266	5974	10278
// OP_IFNOT	10278	8	0
// OP_STORE_V	29	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	9180	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	7	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	9181	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	19	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	315	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	323	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	351	4	0
// OP_LOAD_F	28	106	10279
// OP_STORE_V	10279	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	351	4	0
// OP_LOAD_F	28	107	10280
// OP_STORE_V	10280	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	351	4	0
// OP_LOAD_F	28	108	10281
// OP_STORE_V	10281	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_DONE	0	0	0
void () superspike_touch = 
{
    local float rand;
    
    if(other == self.owner)
    {
        return;
    }
    
    
    if(other.solid == SOLID_TRIGGER)
    {
        return;
    }
    
    
    if(pointcontents(self.origin) == CONTENT_SKY)
    {
        remove(self);
        return;
    }
    
    if(other.takedamage)
    {
        spawn_touchblood(18.000);
        T_Damage(other, self, self.owner, 30.000);
        rand = random();
        if(rand < 0.300)
        {
            sound(other, CHAN_AUTO, "weapons/ric1.wav", 1.000, ATTN_NORM);
        }
        else
        {
            if(rand < 0.650)
            {
                sound(other, CHAN_AUTO, "weapons/ric2.wav", 1.000, ATTN_NORM);
            }
            else
            {
                sound(other, CHAN_AUTO, "weapons/ric3.wav", 1.000, ATTN_NORM);
            }
            
        }
        
    }
    else
    {
        WriteByte(MSG_BROADCAST, SVC_TEMPENTITY);
        WriteByte(MSG_BROADCAST, TE_SUPERSPIKE);
        WriteCoord(MSG_BROADCAST, self.origin_x);
        WriteCoord(MSG_BROADCAST, self.origin_y);
        WriteCoord(MSG_BROADCAST, self.origin_z);
    }
    
    remove(self);
};

// W_SetCurrentAmmo
// function begins at statement 13370, parm_start=10282
// OP_ADDRESS	28	162	10282
// OP_LOAD_F	28	162	10283
// OP_LOAD_F	28	162	10284
// OP_BITOR	269	270	10285
// OP_BITOR	10285	283	10286
// OP_BITOR	10286	282	10287
// OP_BITOR	10287	271	10288
// OP_BITAND	10284	10288	10289
// OP_SUB_F	10283	10289	10290
// OP_STOREP_F	10290	10282	0
// OP_LOAD_F	28	154	10291
// OP_EQ_F	10291	277	10292
// OP_IFNOT	10292	19	0
// OP_ADDRESS	28	157	10293
// OP_LOAD_F	28	217	10294
// OP_STOREP_F	10294	10293	0
// OP_ADDRESS	28	162	10295
// OP_LOAD_F	28	162	10296
// OP_BITOR	10296	271	10297
// OP_STOREP_F	10297	10295	0
// OP_LOAD_S	28	129	10298
// OP_EQ_S	10298	880	10299
// OP_IFNOT	10299	8	0
// OP_GT	738	819	10300
// OP_IFNOT	10300	6	0
// OP_LOAD_ENT	28	548	10301
// OP_ADDRESS	10301	93	10302
// OP_LOAD_F	28	685	10303
// OP_ADD_F	10303	819	10304
// OP_STOREP_F	10304	10302	0
// OP_GOTO	123	0	0
// OP_LOAD_F	28	154	10305
// OP_EQ_F	10305	280	10306
// OP_IFNOT	10306	19	0
// OP_ADDRESS	28	157	10307
// OP_LOAD_F	28	217	10308
// OP_STOREP_F	10308	10307	0
// OP_ADDRESS	28	162	10309
// OP_LOAD_F	28	162	10310
// OP_BITOR	10310	271	10311
// OP_STOREP_F	10311	10309	0
// OP_LOAD_S	28	129	10312
// OP_EQ_S	10312	880	10313
// OP_IFNOT	10313	8	0
// OP_GT	738	819	10314
// OP_IFNOT	10314	6	0
// OP_LOAD_ENT	28	548	10315
// OP_ADDRESS	10315	93	10316
// OP_LOAD_F	28	685	10317
// OP_ADD_F	10317	821	10318
// OP_STOREP_F	10318	10316	0
// OP_GOTO	102	0	0
// OP_LOAD_F	28	154	10319
// OP_EQ_F	10319	263	10320
// OP_IFNOT	10320	19	0
// OP_ADDRESS	28	157	10321
// OP_LOAD_F	28	159	10322
// OP_STOREP_F	10322	10321	0
// OP_ADDRESS	28	162	10323
// OP_LOAD_F	28	162	10324
// OP_BITOR	10324	269	10325
// OP_STOREP_F	10325	10323	0
// OP_LOAD_S	28	129	10326
// OP_EQ_S	10326	880	10327
// OP_IFNOT	10327	8	0
// OP_GT	738	819	10328
// OP_IFNOT	10328	6	0
// OP_LOAD_ENT	28	548	10329
// OP_ADDRESS	10329	93	10330
// OP_LOAD_F	28	685	10331
// OP_ADD_F	10331	823	10332
// OP_STOREP_F	10332	10330	0
// OP_GOTO	81	0	0
// OP_LOAD_F	28	154	10333
// OP_EQ_F	10333	279	10334
// OP_IFNOT	10334	19	0
// OP_ADDRESS	28	157	10335
// OP_LOAD_F	28	160	10336
// OP_STOREP_F	10336	10335	0
// OP_ADDRESS	28	162	10337
// OP_LOAD_F	28	162	10338
// OP_BITOR	10338	270	10339
// OP_STOREP_F	10339	10337	0
// OP_LOAD_S	28	129	10340
// OP_EQ_S	10340	880	10341
// OP_IFNOT	10341	8	0
// OP_GT	738	819	10342
// OP_IFNOT	10342	6	0
// OP_LOAD_ENT	28	548	10343
// OP_ADDRESS	10343	93	10344
// OP_LOAD_F	28	685	10345
// OP_ADD_F	10345	825	10346
// OP_STOREP_F	10346	10344	0
// OP_GOTO	60	0	0
// OP_LOAD_F	28	154	10347
// OP_EQ_F	10347	278	10348
// OP_IFNOT	10348	19	0
// OP_ADDRESS	28	157	10349
// OP_LOAD_F	28	160	10350
// OP_STOREP_F	10350	10349	0
// OP_ADDRESS	28	162	10351
// OP_LOAD_F	28	162	10352
// OP_BITOR	10352	270	10353
// OP_STOREP_F	10353	10351	0
// OP_LOAD_S	28	129	10354
// OP_EQ_S	10354	880	10355
// OP_IFNOT	10355	8	0
// OP_GT	738	819	10356
// OP_IFNOT	10356	6	0
// OP_LOAD_ENT	28	548	10357
// OP_ADDRESS	10357	93	10358
// OP_LOAD_F	28	685	10359
// OP_ADD_F	10359	827	10360
// OP_STOREP_F	10360	10358	0
// OP_GOTO	39	0	0
// OP_LOAD_F	28	154	10361
// OP_EQ_F	10361	265	10362
// OP_IFNOT	10362	19	0
// OP_ADDRESS	28	157	10363
// OP_LOAD_F	28	160	10364
// OP_STOREP_F	10364	10363	0
// OP_ADDRESS	28	162	10365
// OP_LOAD_F	28	162	10366
// OP_BITOR	10366	270	10367
// OP_STOREP_F	10367	10365	0
// OP_LOAD_S	28	129	10368
// OP_EQ_S	10368	880	10369
// OP_IFNOT	10369	8	0
// OP_GT	738	819	10370
// OP_IFNOT	10370	6	0
// OP_LOAD_ENT	28	548	10371
// OP_ADDRESS	10371	93	10372
// OP_LOAD_F	28	685	10373
// OP_ADD_F	10373	829	10374
// OP_STOREP_F	10374	10372	0
// OP_GOTO	18	0	0
// OP_LOAD_F	28	154	10375
// OP_EQ_F	10375	276	10376
// OP_IFNOT	10376	13	0
// OP_ADDRESS	28	157	10377
// OP_STOREP_F	817	10377	0
// OP_LOAD_S	28	129	10378
// OP_EQ_S	10378	880	10379
// OP_IFNOT	10379	7	0
// OP_GT	738	819	10380
// OP_IFNOT	10380	5	0
// OP_LOAD_ENT	28	548	10381
// OP_ADDRESS	10381	93	10382
// OP_LOAD_F	28	685	10383
// OP_STOREP_F	10383	10382	0
// OP_GOTO	3	0	0
// OP_ADDRESS	28	157	10384
// OP_STOREP_F	817	10384	0
// OP_DONE	0	0	0
void () W_SetCurrentAmmo = 
{
    self.items = self.items - (self.items & ((((IT_NAILS | IT_ROCKETS) | IT_DETONATORS) | IT_MINES) | IT_CELLS));
    if(self.weapon == IT_ROOBAR)
    {
        self.currentammo = self.ammo_roobar;
        self.items = self.items | IT_CELLS;
        
        if(self.classname == "player")
        {
            
            if(rally_type_index > 1.000)
            {
                self.veh_body.modelindex = self.basemodel + 1.000;
            }
            
        }
        
    }
    else
    {
        if(self.weapon == IT_LASER_GUN)
        {
            self.currentammo = self.ammo_roobar;
            self.items = self.items | IT_CELLS;
            
            if(self.classname == "player")
            {
                
                if(rally_type_index > 1.000)
                {
                    self.veh_body.modelindex = self.basemodel + 2.000;
                }
                
            }
            
        }
        else
        {
            if(self.weapon == IT_SUPER_NAILGUN)
            {
                self.currentammo = self.ammo_nails;
                self.items = self.items | IT_NAILS;
                
                if(self.classname == "player")
                {
                    
                    if(rally_type_index > 1.000)
                    {
                        self.veh_body.modelindex = self.basemodel + 3.000;
                    }
                    
                }
                
            }
            else
            {
                if(self.weapon == IT_MINE_LAUNCHER)
                {
                    self.currentammo = self.ammo_rockets;
                    self.items = self.items | IT_ROCKETS;
                    
                    if(self.classname == "player")
                    {
                        
                        if(rally_type_index > 1.000)
                        {
                            self.veh_body.modelindex = self.basemodel + 4.000;
                        }
                        
                    }
                    
                }
                else
                {
                    if(self.weapon == IT_DETONATOR)
                    {
                        self.currentammo = self.ammo_rockets;
                        self.items = self.items | IT_ROCKETS;
                        
                        if(self.classname == "player")
                        {
                            
                            if(rally_type_index > 1.000)
                            {
                                self.veh_body.modelindex = self.basemodel + 5.000;
                            }
                            
                        }
                        
                    }
                    else
                    {
                        if(self.weapon == IT_ROCKET_LAUNCHER)
                        {
                            self.currentammo = self.ammo_rockets;
                            self.items = self.items | IT_ROCKETS;
                            
                            if(self.classname == "player")
                            {
                                
                                if(rally_type_index > 1.000)
                                {
                                    self.veh_body.modelindex = self.basemodel + 6.000;
                                }
                                
                            }
                            
                        }
                        else
                        {
                            if(self.weapon == IT_NULL)
                            {
                                self.currentammo = 0.000;
                                
                                if(self.classname == "player")
                                {
                                    
                                    if(rally_type_index > 1.000)
                                    {
                                        self.veh_body.modelindex = self.basemodel;
                                    }
                                    
                                }
                                
                            }
                            else
                            {
                                self.currentammo = 0.000;
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
    }
    
};

// W_BestWeapon
// function begins at statement 13524, parm_start=10385
// OP_LOAD_F	28	162	10386
// OP_STORE_F	10386	10385	0
// OP_LOAD_F	28	160	10387
// OP_GE	10387	819	10388
// OP_BITAND	10385	265	10389
// OP_AND	10388	10389	10390
// OP_IFNOT	10390	3	0
// OP_RETURN	265	0	0
// OP_GOTO	35	0	0
// OP_LOAD_F	28	217	10391
// OP_GE	10391	819	10392
// OP_BITAND	10385	277	10393
// OP_AND	10392	10393	10394
// OP_IFNOT	10394	3	0
// OP_RETURN	277	0	0
// OP_GOTO	28	0	0
// OP_LOAD_F	28	160	10395
// OP_GE	10395	819	10396
// OP_BITAND	10385	279	10397
// OP_AND	10396	10397	10398
// OP_IFNOT	10398	3	0
// OP_RETURN	279	0	0
// OP_GOTO	21	0	0
// OP_LOAD_F	28	159	10399
// OP_GE	10399	821	10400
// OP_BITAND	10385	263	10401
// OP_AND	10400	10401	10402
// OP_IFNOT	10402	3	0
// OP_RETURN	263	0	0
// OP_GOTO	14	0	0
// OP_LOAD_F	28	160	10403
// OP_GE	10403	819	10404
// OP_BITAND	10385	278	10405
// OP_AND	10404	10405	10406
// OP_IFNOT	10406	3	0
// OP_RETURN	278	0	0
// OP_GOTO	7	0	0
// OP_LOAD_F	28	217	10407
// OP_GE	10407	819	10408
// OP_BITAND	10385	280	10409
// OP_AND	10408	10409	10410
// OP_IFNOT	10410	2	0
// OP_RETURN	280	0	0
// OP_RETURN	276	0	0
// OP_DONE	0	0	0
float () W_BestWeapon = 
{
    local float it;
    it = self.items;
    if((self.ammo_rockets >= 1.000) && (it & IT_ROCKET_LAUNCHER))
    {
        return IT_ROCKET_LAUNCHER;
    }
    else
    {
        if((self.ammo_roobar >= 1.000) && (it & IT_ROOBAR))
        {
            return IT_ROOBAR;
        }
        else
        {
            if((self.ammo_rockets >= 1.000) && (it & IT_MINE_LAUNCHER))
            {
                return IT_MINE_LAUNCHER;
            }
            else
            {
                if((self.ammo_nails >= 2.000) && (it & IT_SUPER_NAILGUN))
                {
                    return IT_SUPER_NAILGUN;
                }
                else
                {
                    if((self.ammo_rockets >= 1.000) && (it & IT_DETONATOR))
                    {
                        return IT_DETONATOR;
                    }
                    else
                    {
                        
                        if((self.ammo_roobar >= 1.000) && (it & IT_LASER_GUN))
                        {
                            return IT_LASER_GUN;
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
    }
    
    return IT_NULL;
};

// W_CheckNoAmmo
// function begins at statement 13569, parm_start=10412
// OP_LOAD_F	28	157	10412
// OP_GT	10412	817	10413
// OP_IFNOT	10413	2	0
// OP_RETURN	219	0	0
// OP_ADDRESS	28	154	10414
// OP_CALL0	8577	0	0
// OP_STOREP_F	1	10414	0
// OP_CALL0	931	0	0
// OP_RETURN	218	0	0
// OP_DONE	0	0	0
float () W_CheckNoAmmo = 
{
    
    if(self.currentammo > 0.000)
    {
        return TRUE;
    }
    
    self.weapon = W_BestWeapon();
    W_SetCurrentAmmo();
    return FALSE;
};

void () player_axe1;
void () player_axeb1;
void () player_axec1;
void () player_axed1;
void () player_shot1;
void () player_nail1;
void () player_light1;
void () player_rocket1;
// W_Attack
// function begins at statement 13579, parm_start=10423
// OP_CALL0	5890	0	0
// OP_LOAD_F	28	182	10427
// OP_BITAND	10427	692	10428
// OP_NOT_F	10428	0	10429
// OP_LOAD_F	28	665	10430
// OP_SUB_F	31	800	10431
// OP_GT	10430	10431	10432
// OP_AND	10429	10432	10433
// OP_IFNOT	10433	2	0
// OP_RETURN	0	0	0
// OP_LT	738	821	10434
// OP_IFNOT	10434	2	0
// OP_RETURN	0	0	0
// OP_EQ_F	738	821	10435
// OP_LOAD_F	28	640	10436
// OP_LT	10436	819	10437
// OP_AND	10435	10437	10438
// OP_IFNOT	10438	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10439	7	0
// OP_CALL2	520	0	0
// OP_RETURN	0	0	0
// OP_CALL0	10411	0	0
// OP_NOT_F	1	0	10440
// OP_IFNOT	10440	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	154	10441
// OP_EQ_F	10441	276	10442
// OP_IFNOT	10442	2	0
// OP_RETURN	0	0	0
// OP_LOAD_ENT	28	548	10443
// OP_LOAD_V	10443	117	10444
// OP_STORE_V	10444	10424	0
// OP_LOAD_F	28	118	10447
// OP_NE_F	10447	817	10448
// OP_IFNOT	10448	3	0
// OP_MUL_F	1228	10424	10449
// OP_STORE_F	10449	10424	0
// OP_SUB_F	10424	821	10450
// OP_STORE_F	10450	10424	0
// OP_STORE_F	817	10426	0
// OP_STORE_V	10424	4	0
// OP_CALL1	461	0	0
// OP_LOAD_F	28	154	10451
// OP_EQ_F	10451	263	10452
// OP_IFNOT	10452	3	0
// OP_CALL0	10420	0	0
// OP_GOTO	36	0	0
// OP_LOAD_F	28	154	10453
// OP_EQ_F	10453	279	10454
// OP_IFNOT	10454	7	0
// OP_CALL0	10422	0	0
// OP_CALL0	9967	0	0
// OP_ADDRESS	28	387	10455
// OP_ADD_F	31	819	10456
// OP_STOREP_F	10456	10455	0
// OP_GOTO	27	0	0
// OP_LOAD_F	28	154	10457
// OP_EQ_F	10457	278	10458
// OP_IFNOT	10458	7	0
// OP_CALL0	10422	0	0
// OP_CALL0	9783	0	0
// OP_ADDRESS	28	387	10459
// OP_ADD_F	31	2233	10460
// OP_STOREP_F	10460	10459	0
// OP_GOTO	18	0	0
// OP_LOAD_F	28	154	10461
// OP_EQ_F	10461	265	10462
// OP_IFNOT	10462	7	0
// OP_CALL0	10422	0	0
// OP_CALL0	9510	0	0
// OP_ADDRESS	28	387	10463
// OP_ADD_F	31	2236	10464
// OP_STOREP_F	10464	10463	0
// OP_GOTO	9	0	0
// OP_LOAD_F	28	154	10465
// OP_EQ_F	10465	280	10466
// OP_IFNOT	10466	6	0
// OP_CALL0	10422	0	0
// OP_CALL0	10099	0	0
// OP_ADDRESS	28	387	10467
// OP_ADD_F	31	1182	10468
// OP_STOREP_F	10468	10467	0
// OP_DONE	0	0	0
void () W_Attack = 
{
    local float r;
    local vector gun_aim;
    CheckDriverReady();
    
    if((!(self.flags & QR_START_READY)) && (self.ignition_time > (time - SNDLEN_IGNITION)))
    {
        return;
    }
    
    
    if(rally_type_index < 2.000)
    {
        return;
    }
    
    
    if((rally_type_index == 2.000) && (self.last_lap < 1.000))
    {
        centerprint(self, "NO WEAPONS DURING FIRST LAP!");
        return;
    }
    
    
    if(!W_CheckNoAmmo())
    {
        return;
    }
    
    
    if(self.weapon == IT_NULL)
    {
        return;
    }
    
    gun_aim = self.veh_body.angles;
    
    if(self.angles_x != 0.000)
    {
        gun_aim_x = -1.000 * gun_aim_x;
    }
    
    gun_aim_x = gun_aim_x - 2.000;
    gun_aim_z = 0.000;
    makevectors(gun_aim);
    if(self.weapon == IT_SUPER_NAILGUN)
    {
        player_nail1();
    }
    else
    {
        if(self.weapon == IT_MINE_LAUNCHER)
        {
            player_rocket1();
            W_FireMine();
            self.attack_finished = time + 1.000;
        }
        else
        {
            if(self.weapon == IT_DETONATOR)
            {
                player_rocket1();
                W_FireGrenade();
                self.attack_finished = time + 0.600;
            }
            else
            {
                if(self.weapon == IT_ROCKET_LAUNCHER)
                {
                    player_rocket1();
                    W_FireRocket();
                    self.attack_finished = time + 0.800;
                }
                else
                {
                    
                    if(self.weapon == IT_LASER_GUN)
                    {
                        player_rocket1();
                        W_FireLaser();
                        self.attack_finished = time + 0.500;
                    }
                    
                }
                
            }
            
        }
        
    }
    
};

// W_ChangeWeapon
// function begins at statement 13663, parm_start=10470
// OP_LOAD_F	28	162	10473
// OP_STORE_F	10473	10470	0
// OP_STORE_F	817	10471	0
// OP_LT	738	821	10474
// OP_IFNOT	10474	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	173	10475
// OP_EQ_F	10475	819	10476
// OP_IFNOT	10476	2	0
// OP_STORE_F	276	10472	0
// OP_LOAD_F	28	173	10477
// OP_EQ_F	10477	821	10478
// OP_IFNOT	10478	7	0
// OP_STORE_F	277	10472	0
// OP_LOAD_F	28	217	10479
// OP_LT	10479	819	10480
// OP_IFNOT	10480	2	0
// OP_STORE_F	819	10471	0
// OP_GOTO	45	0	0
// OP_LOAD_F	28	173	10481
// OP_EQ_F	10481	823	10482
// OP_IFNOT	10482	7	0
// OP_STORE_F	280	10472	0
// OP_LOAD_F	28	217	10483
// OP_LT	10483	819	10484
// OP_IFNOT	10484	2	0
// OP_STORE_F	819	10471	0
// OP_GOTO	36	0	0
// OP_LOAD_F	28	173	10485
// OP_EQ_F	10485	825	10486
// OP_IFNOT	10486	7	0
// OP_STORE_F	263	10472	0
// OP_LOAD_F	28	159	10487
// OP_LT	10487	819	10488
// OP_IFNOT	10488	2	0
// OP_STORE_F	819	10471	0
// OP_GOTO	27	0	0
// OP_LOAD_F	28	173	10489
// OP_EQ_F	10489	827	10490
// OP_IFNOT	10490	7	0
// OP_STORE_F	278	10472	0
// OP_LOAD_F	28	160	10491
// OP_LT	10491	819	10492
// OP_IFNOT	10492	2	0
// OP_STORE_F	819	10471	0
// OP_GOTO	18	0	0
// OP_LOAD_F	28	173	10493
// OP_EQ_F	10493	829	10494
// OP_IFNOT	10494	7	0
// OP_STORE_F	279	10472	0
// OP_LOAD_F	28	160	10495
// OP_LT	10495	819	10496
// OP_IFNOT	10496	2	0
// OP_STORE_F	819	10471	0
// OP_GOTO	9	0	0
// OP_LOAD_F	28	173	10497
// OP_EQ_F	10497	839	10498
// OP_IFNOT	10498	6	0
// OP_STORE_F	265	10472	0
// OP_LOAD_F	28	160	10499
// OP_LT	10499	819	10500
// OP_IFNOT	10500	2	0
// OP_STORE_F	819	10471	0
// OP_ADDRESS	28	173	10501
// OP_STOREP_F	817	10501	0
// OP_LOAD_F	28	162	10502
// OP_BITAND	10502	10472	10503
// OP_NOT_F	10503	0	10504
// OP_EQ_F	10472	276	10505
// OP_NOT_F	10505	0	10506
// OP_AND	10504	10506	10507
// OP_IFNOT	10507	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10508	7	0
// OP_CALL2	483	0	0
// OP_RETURN	0	0	0
// OP_IFNOT	10471	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10509	7	0
// OP_CALL2	483	0	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	154	10510
// OP_STOREP_F	10472	10510	0
// OP_CALL0	931	0	0
// OP_DONE	0	0	0
void () W_ChangeWeapon = 
{
    local float it;
    local float am;
    local float fl;
    it = self.items;
    am = 0.000;
    
    if(rally_type_index < 2.000)
    {
        return;
    }
    
    
    if(self.impulse == 1.000)
    {
        fl = IT_NULL;
    }
    
    if(self.impulse == 2.000)
    {
        fl = IT_ROOBAR;
        
        if(self.ammo_roobar < 1.000)
        {
            am = 1.000;
        }
        
    }
    else
    {
        if(self.impulse == 3.000)
        {
            fl = IT_LASER_GUN;
            
            if(self.ammo_roobar < 1.000)
            {
                am = 1.000;
            }
            
        }
        else
        {
            if(self.impulse == 4.000)
            {
                fl = IT_SUPER_NAILGUN;
                
                if(self.ammo_nails < 1.000)
                {
                    am = 1.000;
                }
                
            }
            else
            {
                if(self.impulse == 5.000)
                {
                    fl = IT_DETONATOR;
                    
                    if(self.ammo_rockets < 1.000)
                    {
                        am = 1.000;
                    }
                    
                }
                else
                {
                    if(self.impulse == 6.000)
                    {
                        fl = IT_MINE_LAUNCHER;
                        
                        if(self.ammo_rockets < 1.000)
                        {
                            am = 1.000;
                        }
                        
                    }
                    else
                    {
                        
                        if(self.impulse == 7.000)
                        {
                            fl = IT_ROCKET_LAUNCHER;
                            
                            if(self.ammo_rockets < 1.000)
                            {
                                am = 1.000;
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
    }
    
    self.impulse = 0.000;
    
    if((!(self.items & fl)) && (!(fl == IT_NULL)))
    {
        sprint(self, "no weapon.\n");
        return;
    }
    
    
    if(am)
    {
        sprint(self, "not enough ammo.\n");
        return;
    }
    
    self.weapon = fl;
    W_SetCurrentAmmo();
};

// GiveDukesLaunchers
// function begins at statement 13748, parm_start=10512
// OP_STORE_ENT	30	10512	0
// OP_STORE_V	10512	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	3609	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	10512	0
// OP_NE_E	1	30	10513
// OP_IFNOT	10513	4	0
// OP_ADDRESS	10512	160	10514
// OP_STOREP_F	1957	10514	0
// OP_GOTO	-9	0	0
// OP_DONE	0	0	0
void () GiveDukesLaunchers = 
{
    local entity trav;
    trav = world;
    trav = find(trav, classname, "rally_dude");
    
    while(find(trav, classname, "rally_dude") != world)
    {
        trav.ammo_rockets = 100.000;
    }
    
};

void () Awake_Boss;
// CheatCommand
// function begins at statement 13760, parm_start=10517
// OP_EQ_F	738	825	10517
// OP_IFNOT	10517	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10518	7	0
// OP_CALL2	483	0	0
// OP_ADDRESS	28	152	10519
// OP_STOREP_F	819	10519	0
// OP_CALL0	10511	0	0
// OP_RETURN	0	0	0
// OP_OR	35	36	10520
// OP_IFNOT	10520	2	0
// OP_RETURN	0	0	0
// OP_LE	738	819	10521
// OP_IFNOT	10521	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	160	10522
// OP_STOREP_F	1957	10522	0
// OP_ADDRESS	28	159	10523
// OP_STOREP_F	4760	10523	0
// OP_ADDRESS	28	160	10524
// OP_STOREP_F	1957	10524	0
// OP_ADDRESS	28	217	10525
// OP_STOREP_F	1957	10525	0
// OP_ADDRESS	28	162	10526
// OP_LOAD_F	28	162	10527
// OP_BITOR	10527	277	10528
// OP_BITOR	10528	280	10529
// OP_BITOR	10529	263	10530
// OP_BITOR	10530	279	10531
// OP_BITOR	10531	278	10532
// OP_BITOR	10532	265	10533
// OP_BITOR	10533	284	10534
// OP_BITOR	10534	285	10535
// OP_STOREP_F	10535	10526	0
// OP_ADDRESS	28	154	10536
// OP_STOREP_F	265	10536	0
// OP_ADDRESS	28	173	10537
// OP_STOREP_F	817	10537	0
// OP_CALL0	931	0	0
// OP_DONE	0	0	0
void () CheatCommand = 
{
    
    if(rally_type_index == 4.000)
    {
        sprint(self, "That wasn't very wise..\n");
        self.health = 1.000;
        GiveDukesLaunchers();
        return;
    }
    
    
    if(deathmatch || coop)
    {
        return;
    }
    
    
    if(rally_type_index <= 1.000)
    {
        return;
    }
    
    self.ammo_rockets = 100.000;
    self.ammo_nails = 200.000;
    self.ammo_rockets = 100.000;
    self.ammo_roobar = 100.000;
    self.items = (((((((self.items | IT_ROOBAR) | IT_LASER_GUN) | IT_SUPER_NAILGUN) | IT_MINE_LAUNCHER) | IT_DETONATOR) | IT_ROCKET_LAUNCHER) | IT_KEY1) | IT_KEY2;
    self.weapon = IT_ROCKET_LAUNCHER;
    self.impulse = 0.000;
    W_SetCurrentAmmo();
};

// CycleWeaponCommand
// function begins at statement 13800, parm_start=10539
// OP_LT	738	821	10542
// OP_IFNOT	10542	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	162	10543
// OP_STORE_F	10543	10539	0
// OP_ADDRESS	28	173	10544
// OP_STOREP_F	817	10544	0
// OP_STORE_F	817	10541	0
// OP_LT	10541	855	10545
// OP_IFNOT	10545	72	0
// OP_STORE_F	817	10540	0
// OP_LOAD_F	28	154	10546
// OP_EQ_F	10546	265	10547
// OP_IFNOT	10547	8	0
// OP_ADDRESS	28	154	10548
// OP_STOREP_F	277	10548	0
// OP_LOAD_F	28	217	10549
// OP_LT	10549	819	10550
// OP_IFNOT	10550	2	0
// OP_STORE_F	819	10540	0
// OP_GOTO	50	0	0
// OP_LOAD_F	28	154	10551
// OP_EQ_F	10551	277	10552
// OP_IFNOT	10552	8	0
// OP_ADDRESS	28	154	10553
// OP_STOREP_F	280	10553	0
// OP_LOAD_F	28	217	10554
// OP_LT	10554	819	10555
// OP_IFNOT	10555	2	0
// OP_STORE_F	819	10540	0
// OP_GOTO	40	0	0
// OP_LOAD_F	28	154	10556
// OP_EQ_F	10556	280	10557
// OP_IFNOT	10557	8	0
// OP_ADDRESS	28	154	10558
// OP_STOREP_F	263	10558	0
// OP_LOAD_F	28	159	10559
// OP_LT	10559	819	10560
// OP_IFNOT	10560	2	0
// OP_STORE_F	819	10540	0
// OP_GOTO	30	0	0
// OP_LOAD_F	28	154	10561
// OP_EQ_F	10561	263	10562
// OP_IFNOT	10562	8	0
// OP_ADDRESS	28	154	10563
// OP_STOREP_F	279	10563	0
// OP_LOAD_F	28	160	10564
// OP_LT	10564	819	10565
// OP_IFNOT	10565	2	0
// OP_STORE_F	819	10540	0
// OP_GOTO	20	0	0
// OP_LOAD_F	28	154	10566
// OP_EQ_F	10566	279	10567
// OP_IFNOT	10567	8	0
// OP_ADDRESS	28	154	10568
// OP_STOREP_F	278	10568	0
// OP_LOAD_F	28	160	10569
// OP_LT	10569	819	10570
// OP_IFNOT	10570	2	0
// OP_STORE_F	819	10540	0
// OP_GOTO	10	0	0
// OP_LOAD_F	28	154	10571
// OP_EQ_F	10571	278	10572
// OP_IFNOT	10572	7	0
// OP_ADDRESS	28	154	10573
// OP_STOREP_F	265	10573	0
// OP_LOAD_F	28	160	10574
// OP_LT	10574	819	10575
// OP_IFNOT	10575	2	0
// OP_STORE_F	819	10540	0
// OP_LOAD_F	28	162	10576
// OP_LOAD_F	28	154	10577
// OP_BITAND	10576	10577	10578
// OP_EQ_F	10540	817	10579
// OP_AND	10578	10579	10580
// OP_IFNOT	10580	3	0
// OP_CALL0	931	0	0
// OP_RETURN	0	0	0
// OP_ADD_F	10541	819	10581
// OP_STORE_F	10581	10541	0
// OP_GOTO	-72	0	0
// OP_DONE	0	0	0
void () CycleWeaponCommand = 
{
    local float it;
    local float am;
    local float i;
    
    if(rally_type_index < 2.000)
    {
        return;
    }
    
    it = self.items;
    self.impulse = 0.000;
    i = 0.000;
    
    while(i < 10.000)
    {
        am = 0.000;
        if(self.weapon == IT_ROCKET_LAUNCHER)
        {
            self.weapon = IT_ROOBAR;
            
            if(self.ammo_roobar < 1.000)
            {
                am = 1.000;
            }
            
        }
        else
        {
            if(self.weapon == IT_ROOBAR)
            {
                self.weapon = IT_LASER_GUN;
                
                if(self.ammo_roobar < 1.000)
                {
                    am = 1.000;
                }
                
            }
            else
            {
                if(self.weapon == IT_LASER_GUN)
                {
                    self.weapon = IT_SUPER_NAILGUN;
                    
                    if(self.ammo_nails < 1.000)
                    {
                        am = 1.000;
                    }
                    
                }
                else
                {
                    if(self.weapon == IT_SUPER_NAILGUN)
                    {
                        self.weapon = IT_MINE_LAUNCHER;
                        
                        if(self.ammo_rockets < 1.000)
                        {
                            am = 1.000;
                        }
                        
                    }
                    else
                    {
                        if(self.weapon == IT_MINE_LAUNCHER)
                        {
                            self.weapon = IT_DETONATOR;
                            
                            if(self.ammo_rockets < 1.000)
                            {
                                am = 1.000;
                            }
                            
                        }
                        else
                        {
                            
                            if(self.weapon == IT_DETONATOR)
                            {
                                self.weapon = IT_ROCKET_LAUNCHER;
                                
                                if(self.ammo_rockets < 1.000)
                                {
                                    am = 1.000;
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        
        if((self.items & self.weapon) && (am == 0.000))
        {
            W_SetCurrentAmmo();
            return;
        }
        
        i = i + 1.000;
    }
    
};

// ServerflagsCommand
// function begins at statement 13882, parm_start=10583
// OP_MUL_F	38	821	10583
// OP_ADD_F	10583	819	10584
// OP_STORE_F	10584	38	0
// OP_DONE	0	0	0
void () ServerflagsCommand = 
{
    serverflags = (serverflags * 2.000) + 1.000;
};

// QuadCheat
// function begins at statement 13886, parm_start=10586
// OP_OR	35	36	10586
// OP_IFNOT	10586	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	397	10587
// OP_STOREP_F	819	10587	0
// OP_ADDRESS	28	391	10588
// OP_ADD_F	31	2522	10589
// OP_STOREP_F	10589	10588	0
// OP_ADDRESS	28	162	10590
// OP_LOAD_F	28	162	10591
// OP_BITOR	10591	289	10592
// OP_STOREP_F	10592	10590	0
// OP_STORE_V	10593	4	0
// OP_CALL1	484	0	0
// OP_DONE	0	0	0
void () QuadCheat = 
{
    
    if(deathmatch || coop)
    {
        return;
    }
    
    self.super_time = 1.000;
    self.super_damage_finished = time + 30.000;
    self.items = self.items | IT_QUAD;
    dprint("quad cheat\n");
};

// ID
// function begins at statement 13901, parm_start=10595
// OP_DONE	0	0	0
void () ID = 
{
};

void (float opt) Remove_chase_cam;
vector CHASECAM_CLOSE = '15.000 0.000 10.000';
vector CHASECAM_FAR = '30.000 0.000 32.000';
float chasecam_alt;
float chasecam_dist;
float chasecam_zofs;
// Chase_cam_setweapon
// function begins at statement 13902, parm_start=10606
// OP_STORE_ENT	28	10607	0
// OP_STORE_ENT	10606	28	0
// OP_CALL0	931	0	0
// OP_STORE_ENT	10607	28	0
// OP_DONE	0	0	0
void (entity player_ent) Chase_cam_setweapon = 
{
    local entity e;
    e = self;
    self = player_ent;
    W_SetCurrentAmmo();
    self = e;
};

// Start_chase_cam
// function begins at statement 13907, parm_start=10609
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	10610	0
// OP_ADDRESS	10610	201	10611
// OP_STOREP_ENT	10609	10611	0
// OP_ADDRESS	10609	625	10612
// OP_STOREP_ENT	10610	10612	0
// OP_LOAD_ENT	10610	201	10613
// OP_ADDRESS	10613	378	10614
// OP_LOAD_ENT	10610	201	10615
// OP_LOAD_F	10615	378	10616
// OP_BITOR	10616	214	10617
// OP_STOREP_F	10617	10614	0
// OP_ADDRESS	10610	104	10618
// OP_STOREP_F	243	10618	0
// OP_ADDRESS	10610	103	10619
// OP_STOREP_F	239	10619	0
// OP_ADDRESS	10610	117	10620
// OP_LOAD_ENT	10610	201	10623
// OP_LOAD_V	10623	117	10624
// OP_STOREP_V	10624	10620	0
// OP_STORE_V	10610	4	0
// OP_STORE_V	1283	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	10610	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	926	10	0
// OP_CALL3	464	0	0
// OP_STORE_V	10610	4	0
// OP_LOAD_ENT	10610	201	10627
// OP_LOAD_V	10627	105	10628
// OP_STORE_V	10628	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	10610	599	10631
// OP_LOAD_V	10610	105	10634
// OP_STOREP_V	10634	10631	0
// OP_ADDRESS	10610	129	10637
// OP_STOREP_S	10638	10637	0
// OP_ADDRESS	10610	150	10639
// OP_ADD_F	31	1988	10640
// OP_STOREP_F	10640	10639	0
// OP_ADDRESS	10610	148	10641
// OP_STOREP_FNC	4235	10641	0
// OP_LOAD_ENT	10610	201	10642
// OP_STORE_ENT	10642	81	0
// OP_STORE_V	352	4	0
// OP_STORE_V	745	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	352	4	0
// OP_STORE_V	10610	7	0
// OP_CALL2	514	0	0
// OP_STORE_V	10609	4	0
// OP_CALL1	10605	0	0
// OP_ADDRESS	10610	158	10643
// OP_STOREP_F	10603	10643	0
// OP_ADDRESS	10610	161	10644
// OP_STOREP_F	817	10644	0
// OP_DONE	0	0	0
void (entity cam_owner) Start_chase_cam = 
{
    local entity chase_cam;
    chase_cam = spawn();
    chase_cam.owner = cam_owner;
    cam_owner.chasecam = chase_cam;
    chase_cam.owner.speed = chase_cam.owner.speed | CHSCAM_ON;
    chase_cam.solid = SOLID_NOT;
    chase_cam.movetype = MOVETYPE_NOCLIP;
    chase_cam.angles = chase_cam.owner.angles;
    setmodel(chase_cam, "models/null.mdl");
    setsize(chase_cam, '0.000 0.000 0.000', '0.000 0.000 0.000');
    setorigin(chase_cam, chase_cam.owner.origin);
    chase_cam.last_roll = chase_cam.origin;
    chase_cam.classname = "chase_cam";
    chase_cam.nextthink = time + 0.050;
    chase_cam.think = Keep_cam_chasing_owner;
    msg_entity = chase_cam.owner;
    WriteByte(MSG_ONE, SVC_SETVIEWPORT);
    WriteEntity(MSG_ONE, chase_cam);
    Chase_cam_setweapon(cam_owner);
    chase_cam.ammo_shells = chasecam_dist;
    chase_cam.ammo_cells = 0.000;
};

// Reable_chase_cam
// function begins at statement 13964, parm_start=10646
// OP_ADDRESS	28	150	10646
// OP_ADD_F	31	2869	10647
// OP_STOREP_F	10647	10646	0
// OP_LOAD_ENT	28	201	10648
// OP_LOAD_F	10648	152	10649
// OP_LE	10649	817	10650
// OP_IFNOT	10650	4	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_RETURN	0	0	0
// OP_LOAD_ENT	28	201	10651
// OP_LOAD_F	10651	189	10652
// OP_IFNOT	10652	2	0
// OP_RETURN	0	0	0
// OP_LOAD_ENT	28	201	10653
// OP_STORE_V	10653	4	0
// OP_CALL1	10608	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_DONE	0	0	0
void () Reable_chase_cam = 
{
    self.nextthink = time + 0.100;
    
    if(self.owner.health <= 0.000)
    {
        remove(self);
        return;
    }
    
    
    if(self.owner.waterlevel)
    {
        return;
    }
    
    Start_chase_cam(self.owner);
    remove(self);
};

// Remove_chase_cam
// function begins at statement 13984, parm_start=10654
// OP_LOAD_ENT	28	201	10655
// OP_LOAD_F	10655	378	10656
// OP_BITAND	10656	214	10657
// OP_IFNOT	10657	7	0
// OP_LOAD_ENT	28	201	10658
// OP_ADDRESS	10658	378	10659
// OP_LOAD_ENT	28	201	10660
// OP_LOAD_F	10660	378	10661
// OP_SUB_F	10661	214	10662
// OP_STOREP_F	10662	10659	0
// OP_STORE_V	28	4	0
// OP_STORE_V	4128	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	113	10663
// OP_STOREP_V	926	10663	0
// OP_LOAD_ENT	28	201	10666
// OP_STORE_ENT	10666	81	0
// OP_LOAD_ENT	28	201	10667
// OP_STORE_V	10667	4	0
// OP_CALL1	10605	0	0
// OP_NOT_F	10654	0	10668
// OP_IFNOT	10668	7	0
// OP_ADDRESS	28	150	10669
// OP_ADD_F	31	2869	10670
// OP_STOREP_F	10670	10669	0
// OP_ADDRESS	28	148	10671
// OP_STOREP_FNC	10645	10671	0
// OP_GOTO	3	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_DONE	0	0	0
void (float opt) Remove_chase_cam = 
{
    
    if(self.owner.speed & CHSCAM_ON)
    {
        self.owner.speed = self.owner.speed - CHSCAM_ON;
    }
    
    setmodel(self, "");
    self.velocity = '0.000 0.000 0.000';
    msg_entity = self.owner;
    Chase_cam_setweapon(self.owner);
    if(!opt)
    {
        self.nextthink = time + 0.100;
        self.think = Reable_chase_cam;
    }
    else
    {
        remove(self);
    }
    
};

// Toggle_chase_cam
// function begins at statement 14015, parm_start=10673
// OP_LOAD_F	28	378	10673
// OP_BITAND	10673	212	10674
// OP_IFNOT	10674	6	0
// OP_ADDRESS	28	378	10675
// OP_LOAD_F	28	378	10676
// OP_SUB_F	10676	212	10677
// OP_STOREP_F	10677	10675	0
// OP_GOTO	5	0	0
// OP_ADDRESS	28	378	10678
// OP_LOAD_F	28	378	10679
// OP_ADD_F	10679	212	10680
// OP_STOREP_F	10680	10678	0
// OP_LT	738	823	10681
// OP_IFNOT	10681	4	0
// OP_ADDRESS	28	613	10682
// OP_STOREP_F	790	10682	0
// OP_GOTO	4	0	0
// OP_ADDRESS	28	613	10683
// OP_DIV_F	790	821	10684
// OP_STOREP_F	10684	10683	0
// OP_DONE	0	0	0
void () Toggle_chase_cam = 
{
    if(self.speed & CHSCAM_FAR)
    {
        self.speed = self.speed - CHSCAM_FAR;
    }
    else
    {
        self.speed = self.speed + CHSCAM_FAR;
    }
    
    if(rally_type_index < 3.000)
    {
        self.chasecam_zoom = DEFAULT_CHASECAM_ZOOM;
    }
    else
    {
        self.chasecam_zoom = DEFAULT_CHASECAM_ZOOM / 2.000;
    }
    
};

// Toggle_chase_type
// function begins at statement 14036, parm_start=10686
// OP_LOAD_F	28	378	10686
// OP_BITAND	10686	213	10687
// OP_IFNOT	10687	9	0
// OP_ADDRESS	28	378	10688
// OP_LOAD_F	28	378	10689
// OP_SUB_F	10689	213	10690
// OP_STOREP_F	10690	10688	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10691	7	0
// OP_CALL2	483	0	0
// OP_GOTO	8	0	0
// OP_ADDRESS	28	378	10692
// OP_LOAD_F	28	378	10693
// OP_BITOR	10693	213	10694
// OP_STOREP_F	10694	10692	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10695	7	0
// OP_CALL2	483	0	0
// OP_DONE	0	0	0
void () Toggle_chase_type = 
{
    if(self.speed & CHSCAM_ALT)
    {
        self.speed = self.speed - CHSCAM_ALT;
        sprint(self, "View tracking: normal\n");
    }
    else
    {
        self.speed = self.speed | CHSCAM_ALT;
        sprint(self, "View tracking: strafeing\n");
    }
    
};

// SDR_SightThink
// function begins at statement 14055, parm_start=10697
// OP_LOAD_ENT	28	201	10700
// OP_LOAD_ENT	10700	548	10701
// OP_LOAD_V	10701	117	10702
// OP_STORE_V	10702	4	0
// OP_CALL1	461	0	0
// OP_LOAD_ENT	28	201	10705
// OP_LOAD_ENT	10705	548	10706
// OP_LOAD_V	10706	105	10707
// OP_MUL_VF	59	2657	10710
// OP_ADD_V	10707	10710	10713
// OP_STORE_V	10713	10697	0
// OP_STORE_V	10697	4	0
// OP_MUL_VF	59	9421	10716
// OP_ADD_V	10697	10716	10719
// OP_STORE_V	10719	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_EQ_F	70	819	10722
// OP_IFNOT	10722	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	4128	7	0
// OP_CALL2	463	0	0
// OP_RETURN	0	0	0
// OP_LOAD_F	78	163	10723
// OP_IFNOT	10723	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10724	7	0
// OP_CALL2	463	0	0
// OP_GOTO	4	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10725	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	117	10726
// OP_STORE_V	59	4	0
// OP_CALL1	506	0	0
// OP_STOREP_V	1	10726	0
// OP_STORE_V	28	4	0
// OP_STORE_V	71	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	28	150	10729
// OP_ADD_F	31	1988	10730
// OP_STOREP_F	10730	10729	0
// OP_DONE	0	0	0
void () SDR_SightThink = 
{
    local vector org;
    makevectors(self.owner.veh_body.angles);
    org = self.owner.veh_body.origin + (v_forward * 32.000);
    traceline(org, org + (v_forward * 2048.000), FALSE, self);
    
    if(trace_fraction == 1.000)
    {
        setmodel(self, "");
        return;
    }
    
    if(trace_ent.takedamage)
    {
        setmodel(self, "progs/cross2.mdl");
    }
    else
    {
        setmodel(self, "progs/cross1.mdl");
    }
    
    self.angles = vectoangles(v_forward);
    setorigin(self, trace_endpos);
    self.nextthink = time + 0.050;
};

// SDR_SightMake
// function begins at statement 14099, parm_start=10732
// OP_ADDRESS	28	9173	10733
// OP_STOREP_F	219	10733	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	10732	0
// OP_ADDRESS	10732	201	10734
// OP_STOREP_ENT	28	10734	0
// OP_ADDRESS	10732	103	10735
// OP_STOREP_F	239	10735	0
// OP_ADDRESS	10732	104	10736
// OP_STOREP_F	243	10736	0
// OP_STORE_V	10732	4	0
// OP_STORE_V	10725	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	10732	129	10737
// OP_STOREP_S	10738	10737	0
// OP_STORE_V	10732	4	0
// OP_LOAD_V	28	105	10739
// OP_STORE_V	10739	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	10732	148	10742
// OP_STOREP_FNC	10696	10742	0
// OP_ADDRESS	10732	150	10743
// OP_ADD_F	31	1988	10744
// OP_STOREP_F	10744	10743	0
// OP_DONE	0	0	0
void () SDR_SightMake = 
{
    local entity cross;
    self.sight_out = TRUE;
    cross = spawn();
    cross.owner = self;
    cross.movetype = MOVETYPE_NOCLIP;
    cross.solid = SOLID_NOT;
    setmodel(cross, "progs/cross1.mdl");
    cross.classname = "laser_sight";
    setorigin(cross, self.origin);
    cross.think = SDR_SightThink;
    cross.nextthink = time + 0.050;
};

// LaserTargeterTrack
// function begins at statement 14124, parm_start=10746
// OP_LOAD_ENT	28	201	10752
// OP_LOAD_F	10752	378	10753
// OP_BITAND	10753	215	10754
// OP_NOT_F	10754	0	10755
// OP_IFNOT	10755	4	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_RETURN	0	0	0
// OP_LOAD_ENT	28	201	10756
// OP_LOAD_ENT	10756	548	10757
// OP_LOAD_V	10757	117	10758
// OP_STORE_V	10758	4	0
// OP_CALL1	461	0	0
// OP_LOAD_ENT	28	201	10761
// OP_LOAD_V	10761	105	10762
// OP_MUL_VF	59	2657	10765
// OP_ADD_V	10762	10765	10768
// OP_STORE_V	10768	10749	0
// OP_STORE_V	59	10746	0
// OP_STORE_V	10749	4	0
// OP_MUL_VF	10746	9421	10771
// OP_ADD_V	10749	10771	10774
// OP_STORE_V	10774	7	0
// OP_STORE_V	218	10	0
// OP_LOAD_ENT	28	201	10777
// OP_STORE_V	10777	13	0
// OP_CALL4	475	0	0
// OP_MUL_FV	2869	10749	10778
// OP_MUL_FV	2319	71	10781
// OP_ADD_V	10778	10781	10784
// OP_STORE_V	10784	10749	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10749	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	28	150	10787
// OP_ADD_F	31	2869	10788
// OP_STOREP_F	10788	10787	0
// OP_DONE	0	0	0
void () LaserTargeterTrack = 
{
    local vector dir;
    local vector src;
    
    if(!(self.owner.speed & LASERTARG_ON))
    {
        remove(self);
        return;
    }
    
    makevectors(self.owner.veh_body.angles);
    src = self.owner.origin + (v_forward * 32.000);
    dir = v_forward;
    traceline(src, src + (dir * 2048.000), FALSE, self.owner);
    src = (0.100 * src) + (0.900 * trace_endpos);
    setorigin(self, src);
    self.nextthink = time + 0.100;
};

// LaserTargeterToggle
// function begins at statement 14162, parm_start=10789
// OP_LOAD_F	10789	378	10791
// OP_BITAND	10791	215	10792
// OP_IFNOT	10792	6	0
// OP_ADDRESS	10789	378	10793
// OP_LOAD_F	10789	378	10794
// OP_SUB_F	10794	215	10795
// OP_STOREP_F	10795	10793	0
// OP_GOTO	32	0	0
// OP_GT	738	819	10796
// OP_IFNOT	10796	30	0
// OP_ADDRESS	10789	378	10797
// OP_LOAD_F	10789	378	10798
// OP_BITOR	10798	215	10799
// OP_STOREP_F	10799	10797	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	10790	0
// OP_ADDRESS	10790	201	10800
// OP_STOREP_ENT	10789	10800	0
// OP_ADDRESS	10790	103	10801
// OP_STOREP_F	233	10801	0
// OP_ADDRESS	10790	104	10802
// OP_STOREP_F	243	10802	0
// OP_STORE_V	10790	4	0
// OP_STORE_V	10803	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	10790	4	0
// OP_STORE_V	300	7	0
// OP_STORE_V	300	10	0
// OP_CALL3	464	0	0
// OP_STORE_V	10790	4	0
// OP_LOAD_ENT	10790	201	10804
// OP_LOAD_V	10804	105	10805
// OP_STORE_V	10805	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	10790	150	10808
// OP_ADD_F	31	2869	10809
// OP_STOREP_F	10809	10808	0
// OP_ADDRESS	10790	148	10810
// OP_STOREP_FNC	10745	10810	0
// OP_DONE	0	0	0
void (entity targ_owner) LaserTargeterToggle = 
{
    local entity e;
    if(targ_owner.speed & LASERTARG_ON)
    {
        targ_owner.speed = targ_owner.speed - LASERTARG_ON;
    }
    else
    {
        
        if(rally_type_index > 1.000)
        {
            targ_owner.speed = targ_owner.speed | LASERTARG_ON;
            e = spawn();
            e.owner = targ_owner;
            e.movetype = MOVETYPE_NONE;
            e.solid = SOLID_NOT;
            setmodel(e, "progs/s_bubble.spr");
            setsize(e, VEC_ORIGIN, VEC_ORIGIN);
            setorigin(e, e.owner.origin);
            e.nextthink = time + 0.100;
            e.think = LaserTargeterTrack;
        }
        
    }
    
};

// Chase_cam_lvlstart_think
// function begins at statement 14202, parm_start=10812
// OP_LOAD_ENT	28	201	10813
// OP_LOAD_F	10813	378	10814
// OP_BITAND	10814	214	10815
// OP_IFNOT	10815	4	0
// OP_LOAD_ENT	28	201	10816
// OP_STORE_V	10816	4	0
// OP_CALL1	10608	0	0
// OP_LOAD_ENT	28	201	10817
// OP_LOAD_F	10817	378	10818
// OP_BITAND	10818	215	10819
// OP_IFNOT	10819	10	0
// OP_LOAD_ENT	28	201	10820
// OP_ADDRESS	10820	378	10821
// OP_LOAD_ENT	28	201	10822
// OP_LOAD_F	10822	378	10823
// OP_SUB_F	10823	215	10824
// OP_STOREP_F	10824	10821	0
// OP_LOAD_ENT	28	201	10825
// OP_STORE_V	10825	4	0
// OP_CALL1	1155	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_DONE	0	0	0
void () Chase_cam_lvlstart_think = 
{
    local string s;
    
    if(self.owner.speed & CHSCAM_ON)
    {
        Start_chase_cam(self.owner);
    }
    
    
    if(self.owner.speed & LASERTARG_ON)
    {
        self.owner.speed = self.owner.speed - LASERTARG_ON;
        LaserTargeterToggle(self.owner);
    }
    
    remove(self);
};

// Chase_cam_level_start
// function begins at statement 14225, parm_start=10827
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	10827	0
// OP_ADDRESS	10827	201	10828
// OP_STOREP_ENT	28	10828	0
// OP_ADDRESS	10827	103	10829
// OP_STOREP_F	233	10829	0
// OP_ADDRESS	10827	104	10830
// OP_STOREP_F	243	10830	0
// OP_STORE_V	10827	4	0
// OP_STORE_V	4128	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	10827	4	0
// OP_STORE_V	300	7	0
// OP_STORE_V	300	10	0
// OP_CALL3	464	0	0
// OP_STORE_V	10827	4	0
// OP_LOAD_ENT	10827	201	10831
// OP_LOAD_V	10831	105	10832
// OP_STORE_V	10832	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	10827	150	10835
// OP_ADD_F	31	1152	10836
// OP_STOREP_F	10836	10835	0
// OP_ADDRESS	10827	148	10837
// OP_STOREP_FNC	10811	10837	0
// OP_DONE	0	0	0
void () Chase_cam_level_start = 
{
    local entity e;
    e = spawn();
    e.owner = self;
    e.movetype = MOVETYPE_NONE;
    e.solid = SOLID_NOT;
    setmodel(e, "");
    setsize(e, VEC_ORIGIN, VEC_ORIGIN);
    setorigin(e, e.owner.origin);
    e.nextthink = time + 0.200;
    e.think = Chase_cam_lvlstart_think;
};

// Choose_multiskin
// function begins at statement 14251, parm_start=10839
// OP_EQ_F	10839	4760	10840
// OP_IFNOT	10840	11	0
// OP_ADDRESS	28	132	10841
// OP_LOAD_F	28	132	10842
// OP_ADD_F	10842	819	10843
// OP_STOREP_F	10843	10841	0
// OP_LOAD_F	28	132	10844
// OP_EQ_F	10844	3981	10845
// OP_IFNOT	10845	3	0
// OP_ADDRESS	28	132	10846
// OP_STOREP_F	817	10846	0
// OP_GOTO	10	0	0
// OP_ADDRESS	28	132	10847
// OP_LOAD_F	28	132	10848
// OP_SUB_F	10848	819	10849
// OP_STOREP_F	10849	10847	0
// OP_LOAD_F	28	132	10850
// OP_EQ_F	10850	1228	10851
// OP_IFNOT	10851	3	0
// OP_ADDRESS	28	132	10852
// OP_STOREP_F	3974	10852	0
// OP_LOAD_F	28	132	10853
// OP_EQ_F	10853	817	10854
// OP_IFNOT	10854	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10855	7	0
// OP_CALL2	520	0	0
// OP_GOTO	126	0	0
// OP_LOAD_F	28	132	10856
// OP_EQ_F	10856	819	10857
// OP_IFNOT	10857	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10858	7	0
// OP_CALL2	520	0	0
// OP_GOTO	119	0	0
// OP_LOAD_F	28	132	10859
// OP_EQ_F	10859	821	10860
// OP_IFNOT	10860	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10861	7	0
// OP_CALL2	520	0	0
// OP_GOTO	112	0	0
// OP_LOAD_F	28	132	10862
// OP_EQ_F	10862	823	10863
// OP_IFNOT	10863	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10864	7	0
// OP_CALL2	520	0	0
// OP_GOTO	105	0	0
// OP_LOAD_F	28	132	10865
// OP_EQ_F	10865	825	10866
// OP_IFNOT	10866	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10867	7	0
// OP_CALL2	520	0	0
// OP_GOTO	98	0	0
// OP_LOAD_F	28	132	10868
// OP_EQ_F	10868	827	10869
// OP_IFNOT	10869	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10870	7	0
// OP_CALL2	520	0	0
// OP_GOTO	91	0	0
// OP_LOAD_F	28	132	10871
// OP_EQ_F	10871	829	10872
// OP_IFNOT	10872	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10873	7	0
// OP_CALL2	520	0	0
// OP_GOTO	84	0	0
// OP_LOAD_F	28	132	10874
// OP_EQ_F	10874	839	10875
// OP_IFNOT	10875	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10876	7	0
// OP_CALL2	520	0	0
// OP_GOTO	77	0	0
// OP_LOAD_F	28	132	10877
// OP_EQ_F	10877	843	10878
// OP_IFNOT	10878	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10879	7	0
// OP_CALL2	520	0	0
// OP_GOTO	70	0	0
// OP_LOAD_F	28	132	10880
// OP_EQ_F	10880	847	10881
// OP_IFNOT	10881	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10882	7	0
// OP_CALL2	520	0	0
// OP_GOTO	63	0	0
// OP_LOAD_F	28	132	10883
// OP_EQ_F	10883	855	10884
// OP_IFNOT	10884	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10885	7	0
// OP_CALL2	520	0	0
// OP_GOTO	56	0	0
// OP_LOAD_F	28	132	10886
// OP_EQ_F	10886	831	10887
// OP_IFNOT	10887	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10888	7	0
// OP_CALL2	520	0	0
// OP_GOTO	49	0	0
// OP_LOAD_F	28	132	10889
// OP_EQ_F	10889	834	10890
// OP_IFNOT	10890	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10891	7	0
// OP_CALL2	520	0	0
// OP_GOTO	42	0	0
// OP_LOAD_F	28	132	10892
// OP_EQ_F	10892	837	10893
// OP_IFNOT	10893	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10894	7	0
// OP_CALL2	520	0	0
// OP_GOTO	35	0	0
// OP_LOAD_F	28	132	10895
// OP_EQ_F	10895	841	10896
// OP_IFNOT	10896	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10897	7	0
// OP_CALL2	520	0	0
// OP_GOTO	28	0	0
// OP_LOAD_F	28	132	10898
// OP_EQ_F	10898	845	10899
// OP_IFNOT	10899	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10900	7	0
// OP_CALL2	520	0	0
// OP_GOTO	21	0	0
// OP_LOAD_F	28	132	10901
// OP_EQ_F	10901	2670	10902
// OP_IFNOT	10902	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10903	7	0
// OP_CALL2	520	0	0
// OP_GOTO	14	0	0
// OP_LOAD_F	28	132	10904
// OP_EQ_F	10904	4041	10905
// OP_IFNOT	10905	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10906	7	0
// OP_CALL2	520	0	0
// OP_GOTO	7	0	0
// OP_LOAD_F	28	132	10907
// OP_EQ_F	10907	3974	10908
// OP_IFNOT	10908	4	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10909	7	0
// OP_CALL2	520	0	0
// OP_DONE	0	0	0
void (float imp) Choose_multiskin = 
{
    if(imp == 200.000)
    {
        self.skin = self.skin + 1.000;
        
        if(self.skin == 19.000)
        {
            self.skin = 0.000;
        }
        
    }
    else
    {
        self.skin = self.skin - 1.000;
        
        if(self.skin == -1.000)
        {
            self.skin = 18.000;
        }
        
    }
    
    if(self.skin == 0.000)
    {
        centerprint(self, "SKIN: the Good Guy Himself (1)");
    }
    else
    {
        if(self.skin == 1.000)
        {
            centerprint(self, "SKIN: Duke Nukem 3d (2)");
        }
        else
        {
            if(self.skin == 2.000)
            {
                centerprint(self, "SKIN: Mr. Toad (3)");
            }
            else
            {
                if(self.skin == 3.000)
                {
                    centerprint(self, "SKIN: the Stormtrooper (4)");
                }
                else
                {
                    if(self.skin == 4.000)
                    {
                        centerprint(self, "SKIN: Max (5)");
                    }
                    else
                    {
                        if(self.skin == 5.000)
                        {
                            centerprint(self, "SKIN: the Terminator (6)");
                        }
                        else
                        {
                            if(self.skin == 6.000)
                            {
                                centerprint(self, "SKIN: Judge Dredd (7)");
                            }
                            else
                            {
                                if(self.skin == 7.000)
                                {
                                    centerprint(self, "SKIN: Camouflaged soldier (8)");
                                }
                                else
                                {
                                    if(self.skin == 8.000)
                                    {
                                        centerprint(self, "SKIN: Captain Picard (9)");
                                    }
                                    else
                                    {
                                        if(self.skin == 9.000)
                                        {
                                            centerprint(self, "SKIN: the Wizzard (10)");
                                        }
                                        else
                                        {
                                            if(self.skin == 10.000)
                                            {
                                                centerprint(self, "SKIN: the Predator (11)");
                                            }
                                            else
                                            {
                                                if(self.skin == 11.000)
                                                {
                                                    centerprint(self, "SKIN: Skeleton (12)");
                                                }
                                                else
                                                {
                                                    if(self.skin == 12.000)
                                                    {
                                                        centerprint(self, "SKIN: Wan-Fu (13)");
                                                    }
                                                    else
                                                    {
                                                        if(self.skin == 13.000)
                                                        {
                                                            centerprint(self, "SKIN: Henry Rollins (14)");
                                                        }
                                                        else
                                                        {
                                                            if(self.skin == 14.000)
                                                            {
                                                                centerprint(self, "SKIN: He-Man (15)");
                                                            }
                                                            else
                                                            {
                                                                if(self.skin == 15.000)
                                                                {
                                                                    centerprint(self, "SKIN: Boba (16)");
                                                                }
                                                                else
                                                                {
                                                                    if(self.skin == 16.000)
                                                                    {
                                                                        centerprint(self, "SKIN: Superman (17)");
                                                                    }
                                                                    else
                                                                    {
                                                                        if(self.skin == 17.000)
                                                                        {
                                                                            centerprint(self, "SKIN: NYPD Cop (18)");
                                                                        }
                                                                        else
                                                                        {
                                                                            
                                                                            if(self.skin == 18.000)
                                                                            {
                                                                                centerprint(self, "SKIN: Red/Yellow women dude (19)");
                                                                            }
                                                                            
                                                                        }
                                                                        
                                                                    }
                                                                    
                                                                }
                                                                
                                                            }
                                                            
                                                        }
                                                        
                                                    }
                                                    
                                                }
                                                
                                            }
                                            
                                        }
                                        
                                    }
                                    
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
    }
    
};

void () rally_spawn_dude;
// ImpulseCommands
// function begins at statement 14405, parm_start=10911
// OP_LOAD_F	28	173	10915
// OP_EQ_F	10915	817	10916
// OP_IFNOT	10916	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	644	10917
// OP_BITAND	10917	698	10918
// OP_IFNOT	10918	19	0
// OP_LOAD_F	28	173	10919
// OP_EQ_F	10919	1885	10920
// OP_IFNOT	10920	7	0
// OP_STORE_V	28	4	0
// OP_STORE_V	1228	7	0
// OP_CALL2	7125	0	0
// OP_ADDRESS	28	173	10921
// OP_STOREP_F	817	10921	0
// OP_GOTO	9	0	0
// OP_LOAD_F	28	173	10922
// OP_EQ_F	10922	10923	10924
// OP_IFNOT	10924	6	0
// OP_STORE_V	28	4	0
// OP_STORE_V	819	7	0
// OP_CALL2	7125	0	0
// OP_ADDRESS	28	173	10925
// OP_STOREP_F	817	10925	0
// OP_RETURN	0	0	0
// OP_IFNOT	732	13	0
// OP_LOAD_F	28	173	10926
// OP_STORE_F	10926	729	0
// OP_STORE_V	10927	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	729	4	0
// OP_CALL1	485	0	0
// OP_STORE_S	1	10911	0
// OP_STORE_V	10911	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	888	4	0
// OP_CALL1	482	0	0
// OP_STORE_F	218	732	0
// OP_LOAD_F	28	173	10928
// OP_GE	10928	819	10929
// OP_LOAD_F	28	173	10930
// OP_LE	10930	843	10931
// OP_AND	10929	10931	10932
// OP_IFNOT	10932	3	0
// OP_CALL0	10469	0	0
// OP_GOTO	234	0	0
// OP_LOAD_F	28	173	10933
// OP_EQ_F	10933	847	10934
// OP_IFNOT	10934	3	0
// OP_CALL0	10516	0	0
// OP_GOTO	229	0	0
// OP_LOAD_F	28	173	10935
// OP_EQ_F	10935	855	10936
// OP_IFNOT	10936	3	0
// OP_CALL0	10538	0	0
// OP_GOTO	224	0	0
// OP_LOAD_F	28	173	10937
// OP_EQ_F	10937	831	10938
// OP_IFNOT	10938	3	0
// OP_CALL0	10582	0	0
// OP_GOTO	219	0	0
// OP_LOAD_F	28	173	10939
// OP_EQ_F	10939	1112	10940
// OP_IFNOT	10940	18	0
// OP_LOAD_F	28	628	10941
// OP_LT	10941	823	10942
// OP_IFNOT	10942	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	5215	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_GOTO	7	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	5216	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	342	16	0
// OP_CALL5	467	0	0
// OP_GOTO	199	0	0
// OP_LOAD_F	28	173	10943
// OP_EQ_F	10943	10944	10945
// OP_IFNOT	10945	21	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	10946	10	0
// OP_CALL3	477	0	0
// OP_IFNOT	1	2	0
// OP_RETURN	0	0	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	10912	0
// OP_ADDRESS	10912	129	10947
// OP_STOREP_S	10946	10947	0
// OP_ADDRESS	10912	148	10948
// OP_STOREP_FNC	857	10948	0
// OP_ADDRESS	10912	150	10949
// OP_ADD_F	31	1182	10950
// OP_STOREP_F	10950	10949	0
// OP_ADDRESS	10912	158	10951
// OP_STOREP_F	819	10951	0
// OP_ADDRESS	10912	161	10952
// OP_STOREP_F	819	10952	0
// OP_GOTO	176	0	0
// OP_LOAD_F	28	173	10953
// OP_EQ_F	10953	2522	10954
// OP_IFNOT	10954	3	0
// OP_CALL0	10672	0	0
// OP_GOTO	171	0	0
// OP_LOAD_F	28	173	10955
// OP_EQ_F	10955	10956	10957
// OP_IFNOT	10957	19	0
// OP_ADDRESS	28	613	10958
// OP_LOAD_F	28	613	10959
// OP_ADD_F	10959	855	10960
// OP_STOREP_F	10960	10958	0
// OP_LOAD_F	28	613	10961
// OP_STORE_V	10961	4	0
// OP_CALL1	485	0	0
// OP_STORE_S	1	10911	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10962	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10911	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	888	7	0
// OP_CALL2	483	0	0
// OP_GOTO	150	0	0
// OP_LOAD_F	28	173	10963
// OP_EQ_F	10963	2657	10964
// OP_IFNOT	10964	24	0
// OP_ADDRESS	28	613	10965
// OP_LOAD_F	28	613	10966
// OP_SUB_F	10966	855	10967
// OP_STOREP_F	10967	10965	0
// OP_LOAD_F	28	613	10968
// OP_LT	10968	817	10969
// OP_IFNOT	10969	3	0
// OP_ADDRESS	28	613	10970
// OP_STOREP_F	817	10970	0
// OP_LOAD_F	28	613	10971
// OP_STORE_V	10971	4	0
// OP_CALL1	485	0	0
// OP_STORE_S	1	10911	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10962	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10911	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	888	7	0
// OP_CALL2	483	0	0
// OP_GOTO	124	0	0
// OP_LOAD_F	28	173	10972
// OP_EQ_F	10972	1632	10973
// OP_IFNOT	10973	52	0
// OP_LOAD_F	28	611	10974
// OP_EQ_F	10974	715	10975
// OP_IFNOT	10975	4	0
// OP_STORE_V	28	4	0
// OP_STORE_V	1117	7	0
// OP_CALL2	480	0	0
// OP_LOAD_F	28	611	10976
// OP_EQ_F	10976	714	10977
// OP_IFNOT	10977	22	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10978	7	0
// OP_CALL2	480	0	0
// OP_STORE_ENT	28	81	0
// OP_STORE_V	352	4	0
// OP_STORE_V	747	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	352	4	0
// OP_STORE_V	1112	7	0
// OP_CALL2	512	0	0
// OP_STORE_V	352	4	0
// OP_LOAD_F	28	177	10979
// OP_STORE_V	10979	7	0
// OP_CALL2	512	0	0
// OP_STORE_V	352	4	0
// OP_LOAD_F	28	178	10980
// OP_STORE_V	10980	7	0
// OP_CALL2	512	0	0
// OP_ADDRESS	28	611	10981
// OP_STOREP_F	713	10981	0
// OP_GOTO	21	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10982	7	0
// OP_CALL2	480	0	0
// OP_STORE_ENT	28	81	0
// OP_STORE_V	352	4	0
// OP_STORE_V	747	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	352	4	0
// OP_STORE_V	5499	7	0
// OP_CALL2	512	0	0
// OP_STORE_V	352	4	0
// OP_LOAD_F	28	177	10983
// OP_STORE_V	10983	7	0
// OP_CALL2	512	0	0
// OP_STORE_V	352	4	0
// OP_LOAD_F	28	178	10984
// OP_STORE_V	10984	7	0
// OP_CALL2	512	0	0
// OP_ADDRESS	28	611	10985
// OP_STOREP_F	714	10985	0
// OP_GOTO	70	0	0
// OP_LOAD_F	28	173	10986
// OP_EQ_F	10986	10987	10988
// OP_IFNOT	10988	33	0
// OP_STORE_V	28	4	0
// OP_STORE_V	1117	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	1115	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10989	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10978	7	0
// OP_CALL2	480	0	0
// OP_STORE_ENT	28	81	0
// OP_STORE_V	352	4	0
// OP_STORE_V	747	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	352	4	0
// OP_STORE_V	1112	7	0
// OP_CALL2	512	0	0
// OP_STORE_V	352	4	0
// OP_LOAD_F	28	119	10990
// OP_STORE_V	10990	7	0
// OP_CALL2	512	0	0
// OP_STORE_V	352	4	0
// OP_LOAD_F	28	120	10991
// OP_STORE_V	10991	7	0
// OP_CALL2	512	0	0
// OP_ADDRESS	28	611	10992
// OP_STOREP_F	713	10992	0
// OP_STORE_V	28	4	0
// OP_CALL1	930	0	0
// OP_GOTO	35	0	0
// OP_LOAD_F	28	173	10993
// OP_EQ_F	10993	10994	10995
// OP_IFNOT	10995	32	0
// OP_STORE_V	28	4	0
// OP_STORE_V	1117	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10989	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	1115	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10982	7	0
// OP_CALL2	480	0	0
// OP_STORE_ENT	28	81	0
// OP_STORE_V	352	4	0
// OP_STORE_V	747	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	352	4	0
// OP_STORE_V	5499	7	0
// OP_CALL2	512	0	0
// OP_STORE_V	352	4	0
// OP_LOAD_F	28	119	10996
// OP_STORE_V	10996	7	0
// OP_CALL2	512	0	0
// OP_STORE_V	352	4	0
// OP_LOAD_F	28	120	10997
// OP_STORE_V	10997	7	0
// OP_CALL2	512	0	0
// OP_ADDRESS	28	611	10998
// OP_STOREP_F	714	10998	0
// OP_STORE_V	28	4	0
// OP_CALL1	930	0	0
// OP_LOAD_F	28	173	10999
// OP_EQ_F	10999	11000	11001
// OP_NOT_F	35	0	11002
// OP_AND	11001	11002	11003
// OP_IFNOT	11003	16	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10978	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	11004	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	11005	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	11006	7	0
// OP_CALL2	520	0	0
// OP_ADDRESS	28	611	11007
// OP_STOREP_F	715	11007	0
// OP_GOTO	322	0	0
// OP_LOAD_F	28	173	11008
// OP_EQ_F	11008	2611	11009
// OP_IFNOT	11009	5	0
// OP_NOT_F	35	0	11010
// OP_IFNOT	11010	2	0
// OP_CALL0	6438	0	0
// OP_GOTO	315	0	0
// OP_LOAD_F	28	173	11011
// OP_EQ_F	11011	11012	11013
// OP_IFNOT	11013	6	0
// OP_ADDRESS	28	684	11014
// OP_LOAD_F	28	684	11015
// OP_BITOR	11015	704	11016
// OP_STOREP_F	11016	11014	0
// OP_GOTO	307	0	0
// OP_LOAD_F	28	173	11017
// OP_EQ_F	11017	11018	11019
// OP_IFNOT	11019	8	0
// OP_ADDRESS	28	684	11020
// OP_LOAD_F	28	684	11021
// OP_LOAD_F	28	684	11022
// OP_BITAND	11022	704	11023
// OP_SUB_F	11021	11023	11024
// OP_STOREP_F	11024	11020	0
// OP_GOTO	297	0	0
// OP_LOAD_F	28	173	11025
// OP_EQ_F	11025	2228	11026
// OP_IFNOT	11026	3	0
// OP_STORE_F	219	732	0
// OP_GOTO	292	0	0
// OP_LOAD_F	28	173	11027
// OP_EQ_F	11027	2677	11028
// OP_IFNOT	11028	8	0
// OP_ADDRESS	28	606	11029
// OP_STOREP_F	219	11029	0
// OP_ADDRESS	28	604	11030
// OP_STOREP_F	218	11030	0
// OP_ADDRESS	28	605	11031
// OP_STOREP_F	218	11031	0
// OP_GOTO	282	0	0
// OP_LOAD_F	28	173	11032
// OP_EQ_F	11032	11033	11034
// OP_IFNOT	11034	4	0
// OP_ADDRESS	28	606	11035
// OP_STOREP_F	218	11035	0
// OP_GOTO	276	0	0
// OP_LOAD_F	28	173	11036
// OP_EQ_F	11036	11037	11038
// OP_IFNOT	11038	8	0
// OP_ADDRESS	28	606	11039
// OP_STOREP_F	218	11039	0
// OP_ADDRESS	28	605	11040
// OP_STOREP_F	219	11040	0
// OP_ADDRESS	28	604	11041
// OP_STOREP_F	219	11041	0
// OP_GOTO	266	0	0
// OP_LOAD_F	28	173	11042
// OP_EQ_F	11042	11043	11044
// OP_IFNOT	11044	4	0
// OP_ADDRESS	28	605	11045
// OP_STOREP_F	218	11045	0
// OP_GOTO	260	0	0
// OP_LOAD_F	28	173	11046
// OP_EQ_F	11046	7023	11047
// OP_IFNOT	11047	6	0
// OP_ADDRESS	28	607	11048
// OP_STOREP_F	219	11048	0
// OP_ADDRESS	28	608	11049
// OP_STOREP_F	218	11049	0
// OP_GOTO	252	0	0
// OP_LOAD_F	28	173	11050
// OP_EQ_F	11050	11051	11052
// OP_IFNOT	11052	4	0
// OP_ADDRESS	28	607	11053
// OP_STOREP_F	218	11053	0
// OP_GOTO	246	0	0
// OP_LOAD_F	28	173	11054
// OP_EQ_F	11054	11055	11056
// OP_IFNOT	11056	6	0
// OP_ADDRESS	28	607	11057
// OP_STOREP_F	218	11057	0
// OP_ADDRESS	28	608	11058
// OP_STOREP_F	219	11058	0
// OP_GOTO	238	0	0
// OP_LOAD_F	28	173	11059
// OP_EQ_F	11059	11060	11061
// OP_IFNOT	11061	4	0
// OP_ADDRESS	28	608	11062
// OP_STOREP_F	218	11062	0
// OP_GOTO	232	0	0
// OP_LOAD_F	28	173	11063
// OP_EQ_F	11063	1957	11064
// OP_IFNOT	11064	5	0
// OP_ADDRESS	28	688	11065
// OP_STOREP_F	819	11065	0
// OP_STORE_F	819	689	0
// OP_GOTO	225	0	0
// OP_LOAD_F	28	173	11066
// OP_EQ_F	11066	11067	11068
// OP_IFNOT	11068	5	0
// OP_ADDRESS	28	688	11069
// OP_STOREP_F	821	11069	0
// OP_STORE_F	821	689	0
// OP_GOTO	218	0	0
// OP_LOAD_F	28	173	11070
// OP_GE	11070	5807	11071
// OP_LOAD_F	28	173	11072
// OP_LE	11072	11073	11074
// OP_AND	11071	11074	11075
// OP_IFNOT	11075	14	0
// OP_LOAD_F	28	173	11076
// OP_EQ_F	11076	11073	11077
// OP_IFNOT	11077	4	0
// OP_ADDRESS	28	612	11078
// OP_STOREP_F	1112	11078	0
// OP_GOTO	5	0	0
// OP_ADDRESS	28	612	11079
// OP_LOAD_F	28	173	11080
// OP_SUB_F	11080	5807	11081
// OP_STOREP_F	11081	11079	0
// OP_STORE_V	28	4	0
// OP_CALL1	930	0	0
// OP_GOTO	199	0	0
// OP_LOAD_F	28	173	11082
// OP_EQ_F	11082	4760	11083
// OP_IFNOT	11083	16	0
// OP_LOAD_ENT	28	548	11084
// OP_ADDRESS	11084	132	11085
// OP_LOAD_ENT	28	548	11086
// OP_LOAD_F	11086	132	11087
// OP_ADD_F	11087	819	11088
// OP_STOREP_F	11088	11085	0
// OP_LOAD_ENT	28	548	11089
// OP_LOAD_F	11089	132	11090
// OP_LOAD_F	28	579	11091
// OP_GT	11090	11091	11092
// OP_IFNOT	11092	4	0
// OP_LOAD_ENT	28	548	11093
// OP_ADDRESS	11093	132	11094
// OP_STOREP_F	819	11094	0
// OP_GOTO	181	0	0
// OP_LOAD_F	28	173	11095
// OP_EQ_F	11095	11096	11097
// OP_LOAD_F	28	644	11098
// OP_BITAND	11098	692	11099
// OP_NOT_F	11099	0	11100
// OP_AND	11097	11100	11101
// OP_IFNOT	11101	23	0
// OP_LOAD_F	28	579	11102
// OP_GT	11102	819	11103
// OP_LOAD_F	28	132	11104
// OP_EQ_F	11104	817	11105
// OP_AND	11103	11105	11106
// OP_IFNOT	11106	4	0
// OP_ADDRESS	28	132	11107
// OP_STOREP_F	819	11107	0
// OP_GOTO	12	0	0
// OP_ADDRESS	28	628	11108
// OP_LOAD_F	28	628	11109
// OP_ADD_F	11109	819	11110
// OP_STOREP_F	11110	11108	0
// OP_ADDRESS	28	132	11111
// OP_STOREP_F	817	11111	0
// OP_LOAD_F	28	628	11112
// OP_GT	11112	791	11113
// OP_IFNOT	11113	3	0
// OP_ADDRESS	28	628	11114
// OP_STOREP_F	821	11114	0
// OP_CALL0	932	0	0
// OP_GOTO	152	0	0
// OP_LOAD_F	28	173	11115
// OP_EQ_F	11115	11116	11117
// OP_IFNOT	11117	9	0
// OP_ADDRESS	28	628	11118
// OP_STOREP_F	821	11118	0
// OP_ADDRESS	28	132	11119
// OP_STOREP_F	817	11119	0
// OP_CALL0	932	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	930	0	0
// OP_GOTO	141	0	0
// OP_LOAD_F	28	173	11120
// OP_EQ_F	11120	11121	11122
// OP_IFNOT	11122	9	0
// OP_ADDRESS	28	628	11123
// OP_STOREP_F	821	11123	0
// OP_ADDRESS	28	132	11124
// OP_STOREP_F	819	11124	0
// OP_CALL0	932	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	930	0	0
// OP_GOTO	130	0	0
// OP_LOAD_F	28	173	11125
// OP_EQ_F	11125	11126	11127
// OP_IFNOT	11127	9	0
// OP_ADDRESS	28	628	11128
// OP_STOREP_F	823	11128	0
// OP_ADDRESS	28	132	11129
// OP_STOREP_F	817	11129	0
// OP_CALL0	932	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	930	0	0
// OP_GOTO	119	0	0
// OP_LOAD_F	28	173	11130
// OP_EQ_F	11130	11131	11132
// OP_IFNOT	11132	9	0
// OP_ADDRESS	28	628	11133
// OP_STOREP_F	825	11133	0
// OP_ADDRESS	28	132	11134
// OP_STOREP_F	817	11134	0
// OP_CALL0	932	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	930	0	0
// OP_GOTO	108	0	0
// OP_LOAD_F	28	173	11135
// OP_EQ_F	11135	11136	11137
// OP_IFNOT	11137	9	0
// OP_ADDRESS	28	628	11138
// OP_STOREP_F	825	11138	0
// OP_ADDRESS	28	132	11139
// OP_STOREP_F	819	11139	0
// OP_CALL0	932	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	930	0	0
// OP_GOTO	97	0	0
// OP_LOAD_F	28	173	11140
// OP_EQ_F	11140	11141	11142
// OP_IFNOT	11142	9	0
// OP_ADDRESS	28	628	11143
// OP_STOREP_F	827	11143	0
// OP_ADDRESS	28	132	11144
// OP_STOREP_F	817	11144	0
// OP_CALL0	932	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	930	0	0
// OP_GOTO	86	0	0
// OP_LOAD_F	28	173	11145
// OP_EQ_F	11145	11146	11147
// OP_IFNOT	11147	9	0
// OP_ADDRESS	28	628	11148
// OP_STOREP_F	827	11148	0
// OP_ADDRESS	28	132	11149
// OP_STOREP_F	819	11149	0
// OP_CALL0	932	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	930	0	0
// OP_GOTO	75	0	0
// OP_LOAD_F	28	173	11150
// OP_EQ_F	11150	2295	11151
// OP_IFNOT	11151	7	0
// OP_STORE_V	28	4	0
// OP_STORE_V	11152	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	930	0	0
// OP_GOTO	66	0	0
// OP_LOAD_F	28	173	11153
// OP_EQ_F	11153	11154	11155
// OP_IFNOT	11155	9	0
// OP_STORE_V	28	4	0
// OP_STORE_V	11156	7	0
// OP_CALL2	480	0	0
// OP_ADDRESS	28	155	11157
// OP_STOREP_S	1367	11157	0
// OP_STORE_V	28	4	0
// OP_CALL1	930	0	0
// OP_GOTO	55	0	0
// OP_LOAD_F	28	173	11158
// OP_EQ_F	11158	11159	11160
// OP_IFNOT	11160	9	0
// OP_STORE_V	28	4	0
// OP_STORE_V	11156	7	0
// OP_CALL2	480	0	0
// OP_ADDRESS	28	155	11161
// OP_STOREP_S	11162	11161	0
// OP_STORE_V	28	4	0
// OP_CALL1	930	0	0
// OP_GOTO	44	0	0
// OP_LOAD_F	28	173	11163
// OP_GE	11163	11164	11165
// OP_LOAD_F	28	173	11166
// OP_LE	11166	11167	11168
// OP_AND	11165	11168	11169
// OP_IFNOT	11169	9	0
// OP_ADDRESS	28	613	11170
// OP_LOAD_F	28	173	11171
// OP_SUB_F	11171	11164	11172
// OP_MUL_F	11172	855	11173
// OP_STOREP_F	11173	11170	0
// OP_STORE_V	28	4	0
// OP_CALL1	930	0	0
// OP_GOTO	30	0	0
// OP_LOAD_F	28	173	11174
// OP_EQ_F	11174	1177	11175
// OP_IFNOT	11175	23	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	10913	0
// OP_ADDRESS	10913	129	11176
// OP_STOREP_S	11177	11176	0
// OP_ADDRESS	10913	117	11178
// OP_LOAD_V	28	117	11181
// OP_STOREP_V	11181	11178	0
// OP_STORE_V	10913	4	0
// OP_LOAD_V	28	105	11184
// OP_LOAD_V	28	555	11187
// OP_MUL_VF	11187	2223	11190
// OP_ADD_V	11184	11190	11193
// OP_ADD_V	11193	7028	11196
// OP_STORE_V	11196	7	0
// OP_CALL2	462	0	0
// OP_STORE_ENT	28	10914	0
// OP_STORE_ENT	10913	28	0
// OP_CALL0	10910	0	0
// OP_STORE_ENT	10914	28	0
// OP_STORE_V	10913	4	0
// OP_CALL1	474	0	0
// OP_GOTO	5	0	0
// OP_LOAD_F	28	173	11199
// OP_EQ_F	11199	11200	11201
// OP_IFNOT	11201	2	0
// OP_CALL0	10585	0	0
// OP_ADDRESS	28	173	11202
// OP_STOREP_F	817	11202	0
// OP_DONE	0	0	0
void () ImpulseCommands = 
{
    local string stemp;
    local entity e_credits;
    local entity dude;
    local entity oself;
    
    if(self.impulse == 0.000)
    {
        return;
    }
    
    
    if(self.racing_flags & QR_OBSERVER)
    {
        if(self.impulse == 150.000)
        {
            SetObserverSpot(self, -1.000);
            self.impulse = 0.000;
        }
        else
        {
            
            if(self.impulse == 151.000)
            {
                SetObserverSpot(self, 1.000);
                self.impulse = 0.000;
            }
            
        }
        
        return;
    }
    
    
    if(SetInterRaceTime)
    {
        inter_race_time = self.impulse;
        bprint("Inter-Race time set at: ");
        stemp = ftos(inter_race_time);
        bprint(stemp);
        bprint("\n");
        SetInterRaceTime = FALSE;
    }
    
    if((self.impulse >= 1.000) && (self.impulse <= 8.000))
    {
        W_ChangeWeapon();
    }
    else
    {
        if(self.impulse == 9.000)
        {
            CheatCommand();
        }
        else
        {
            if(self.impulse == 10.000)
            {
                CycleWeaponCommand();
            }
            else
            {
                if(self.impulse == 11.000)
                {
                    ServerflagsCommand();
                }
                else
                {
                    if(self.impulse == 20.000)
                    {
                        if(self.car_index < 3.000)
                        {
                            sound(self, CHAN_AUTO, "rally/meepmeep.wav", 1.000, ATTN_STATIC);
                        }
                        else
                        {
                            sound(self, CHAN_AUTO, "rally/nexus/horn.wav", 1.000, ATTN_STATIC);
                        }
                        
                    }
                    else
                    {
                        if(self.impulse == 21.000)
                        {
                            
                            if(find(world, classname, "credits"))
                            {
                                return;
                            }
                            
                            e_credits = spawn();
                            e_credits.classname = "credits";
                            e_credits.think = StartDemoCredits;
                            e_credits.nextthink = time + 0.500;
                            e_credits.ammo_shells = 1.000;
                            e_credits.ammo_cells = 1.000;
                        }
                        else
                        {
                            if(self.impulse == 30.000)
                            {
                                Toggle_chase_cam();
                            }
                            else
                            {
                                if(self.impulse == 31.000)
                                {
                                    self.chasecam_zoom = self.chasecam_zoom + 10.000;
                                    stemp = ftos(self.chasecam_zoom);
                                    sprint(self, "Zoom set at: ");
                                    sprint(self, stemp);
                                    sprint(self, "\n");
                                }
                                else
                                {
                                    if(self.impulse == 32.000)
                                    {
                                        self.chasecam_zoom = self.chasecam_zoom - 10.000;
                                        
                                        if(self.chasecam_zoom < 0.000)
                                        {
                                            self.chasecam_zoom = 0.000;
                                        }
                                        
                                        stemp = ftos(self.chasecam_zoom);
                                        sprint(self, "Zoom set at: ");
                                        sprint(self, stemp);
                                        sprint(self, "\n");
                                    }
                                    else
                                    {
                                        if(self.impulse == 40.000)
                                        {
                                            
                                            if(self.cam == CAM_INCAR)
                                            {
                                                stuffcmd(self, "cl_anglespeedkey 1.5\n");
                                            }
                                            
                                            if(self.cam == CAM_CHASEFAR)
                                            {
                                                stuffcmd(self, "fov 90\n");
                                                msg_entity = self;
                                                WriteByte(MSG_ONE, SVC_SETVIEWANGLES);
                                                WriteAngle(MSG_ONE, 20.000);
                                                WriteAngle(MSG_ONE, self.v_angle_y);
                                                WriteAngle(MSG_ONE, self.v_angle_z);
                                                self.cam = CAM_CHASECLOSE;
                                            }
                                            else
                                            {
                                                stuffcmd(self, "fov 110\n");
                                                msg_entity = self;
                                                WriteByte(MSG_ONE, SVC_SETVIEWANGLES);
                                                WriteAngle(MSG_ONE, 35.000);
                                                WriteAngle(MSG_ONE, self.v_angle_y);
                                                WriteAngle(MSG_ONE, self.v_angle_z);
                                                self.cam = CAM_CHASEFAR;
                                            }
                                            
                                        }
                                        else
                                        {
                                            if(self.impulse == 41.000)
                                            {
                                                stuffcmd(self, "cl_anglespeedkey 1.5\n");
                                                stuffcmd(self, "+mlook\n");
                                                stuffcmd(self, "-speed\n");
                                                stuffcmd(self, "fov 90\n");
                                                msg_entity = self;
                                                WriteByte(MSG_ONE, SVC_SETVIEWANGLES);
                                                WriteAngle(MSG_ONE, 20.000);
                                                WriteAngle(MSG_ONE, self.angles_y);
                                                WriteAngle(MSG_ONE, self.angles_z);
                                                self.cam = CAM_CHASECLOSE;
                                                CallClientPrefs(self);
                                            }
                                            else
                                            {
                                                
                                                if(self.impulse == 42.000)
                                                {
                                                    stuffcmd(self, "cl_anglespeedkey 1.5\n");
                                                    stuffcmd(self, "-speed\n");
                                                    stuffcmd(self, "+mlook\n");
                                                    stuffcmd(self, "fov 110\n");
                                                    msg_entity = self;
                                                    WriteByte(MSG_ONE, SVC_SETVIEWANGLES);
                                                    WriteAngle(MSG_ONE, 35.000);
                                                    WriteAngle(MSG_ONE, self.angles_y);
                                                    WriteAngle(MSG_ONE, self.angles_z);
                                                    self.cam = CAM_CHASEFAR;
                                                    CallClientPrefs(self);
                                                }
                                                
                                            }
                                            
                                        }
                                        
                                    }
                                    
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
    }
    
    if((self.impulse == 43.000) && !deathmatch)
    {
        stuffcmd(self, "fov 90\n");
        stuffcmd(self, "cl_anglespeedkey 6\n");
        stuffcmd(self, "+speed\n");
        centerprint(self, "In-Car view selected, use keys to steer\n\nPress C to change back to chasecam");
        self.cam = CAM_INCAR;
    }
    else
    {
        if(self.impulse == 50.000)
        {
            
            if(!deathmatch)
            {
                ToggleHeadlights();
            }
            
        }
        else
        {
            if(self.impulse == 55.000)
            {
                self.misc_flags = self.misc_flags | MISC_HORN_ON;
            }
            else
            {
                if(self.impulse == 56.000)
                {
                    self.misc_flags = self.misc_flags - (self.misc_flags & MISC_HORN_ON);
                }
                else
                {
                    if(self.impulse == 60.000)
                    {
                        SetInterRaceTime = TRUE;
                    }
                    else
                    {
                        if(self.impulse == 80.000)
                        {
                            self.accelerating = TRUE;
                            self.reversing = FALSE;
                            self.reversekey = FALSE;
                        }
                        else
                        {
                            if(self.impulse == 81.000)
                            {
                                self.accelerating = FALSE;
                            }
                            else
                            {
                                if(self.impulse == 85.000)
                                {
                                    self.accelerating = FALSE;
                                    self.reversekey = TRUE;
                                    self.reversing = TRUE;
                                }
                                else
                                {
                                    if(self.impulse == 86.000)
                                    {
                                        self.reversekey = FALSE;
                                    }
                                    else
                                    {
                                        if(self.impulse == 90.000)
                                        {
                                            self.zoomin = TRUE;
                                            self.zoomout = FALSE;
                                        }
                                        else
                                        {
                                            if(self.impulse == 91.000)
                                            {
                                                self.zoomin = FALSE;
                                            }
                                            else
                                            {
                                                if(self.impulse == 92.000)
                                                {
                                                    self.zoomin = FALSE;
                                                    self.zoomout = TRUE;
                                                }
                                                else
                                                {
                                                    if(self.impulse == 93.000)
                                                    {
                                                        self.zoomout = FALSE;
                                                    }
                                                    else
                                                    {
                                                        if(self.impulse == 100.000)
                                                        {
                                                            self.start_challenge = 1.000;
                                                            challenge = 1.000;
                                                        }
                                                        else
                                                        {
                                                            if(self.impulse == 101.000)
                                                            {
                                                                self.start_challenge = 2.000;
                                                                challenge = 2.000;
                                                            }
                                                            else
                                                            {
                                                                if((self.impulse >= 120.000) && (self.impulse <= 130.000))
                                                                {
                                                                    if(self.impulse == 130.000)
                                                                    {
                                                                        self.tracking_speed = 20.000;
                                                                    }
                                                                    else
                                                                    {
                                                                        self.tracking_speed = self.impulse - 120.000;
                                                                    }
                                                                    
                                                                    CallClientPrefs(self);
                                                                }
                                                                else
                                                                {
                                                                    if(self.impulse == 200.000)
                                                                    {
                                                                        self.veh_body.skin = self.veh_body.skin + 1.000;
                                                                        
                                                                        if(self.veh_body.skin > self.num_skins)
                                                                        {
                                                                            self.veh_body.skin = 1.000;
                                                                        }
                                                                        
                                                                    }
                                                                    else
                                                                    {
                                                                        if((self.impulse == 201.000) && (!(self.racing_flags & QR_START_READY)))
                                                                        {
                                                                            if((self.num_skins > 1.000) && (self.skin == 0.000))
                                                                            {
                                                                                self.skin = 1.000;
                                                                            }
                                                                            else
                                                                            {
                                                                                self.car_index = self.car_index + 1.000;
                                                                                self.skin = 0.000;
                                                                                
                                                                                if(self.car_index > NUM_CARS)
                                                                                {
                                                                                    self.car_index = 2.000;
                                                                                }
                                                                                
                                                                            }
                                                                            
                                                                            SetCarDetails();
                                                                        }
                                                                        else
                                                                        {
                                                                            if(self.impulse == 210.000)
                                                                            {
                                                                                self.car_index = 2.000;
                                                                                self.skin = 0.000;
                                                                                SetCarDetails();
                                                                                CallClientPrefs(self);
                                                                            }
                                                                            else
                                                                            {
                                                                                if(self.impulse == 211.000)
                                                                                {
                                                                                    self.car_index = 2.000;
                                                                                    self.skin = 1.000;
                                                                                    SetCarDetails();
                                                                                    CallClientPrefs(self);
                                                                                }
                                                                                else
                                                                                {
                                                                                    if(self.impulse == 212.000)
                                                                                    {
                                                                                        self.car_index = 3.000;
                                                                                        self.skin = 0.000;
                                                                                        SetCarDetails();
                                                                                        CallClientPrefs(self);
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if(self.impulse == 213.000)
                                                                                        {
                                                                                            self.car_index = 4.000;
                                                                                            self.skin = 0.000;
                                                                                            SetCarDetails();
                                                                                            CallClientPrefs(self);
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if(self.impulse == 214.000)
                                                                                            {
                                                                                                self.car_index = 4.000;
                                                                                                self.skin = 1.000;
                                                                                                SetCarDetails();
                                                                                                CallClientPrefs(self);
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if(self.impulse == 215.000)
                                                                                                {
                                                                                                    self.car_index = 5.000;
                                                                                                    self.skin = 0.000;
                                                                                                    SetCarDetails();
                                                                                                    CallClientPrefs(self);
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if(self.impulse == 216.000)
                                                                                                    {
                                                                                                        self.car_index = 5.000;
                                                                                                        self.skin = 1.000;
                                                                                                        SetCarDetails();
                                                                                                        CallClientPrefs(self);
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if(self.impulse == 220.000)
                                                                                                        {
                                                                                                            stuffcmd(self, "r_drawviewmodel 0\n");
                                                                                                            CallClientPrefs(self);
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if(self.impulse == 221.000)
                                                                                                            {
                                                                                                                stuffcmd(self, "r_drawviewmodel 1\n");
                                                                                                                self.weaponmodel = "models/wheel.mdl";
                                                                                                                CallClientPrefs(self);
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if(self.impulse == 222.000)
                                                                                                                {
                                                                                                                    stuffcmd(self, "r_drawviewmodel 1\n");
                                                                                                                    self.weaponmodel = "models/wheelsm.mdl";
                                                                                                                    CallClientPrefs(self);
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if((self.impulse >= 230.000) && (self.impulse <= 240.000))
                                                                                                                    {
                                                                                                                        self.chasecam_zoom = (self.impulse - 230.000) * 10.000;
                                                                                                                        CallClientPrefs(self);
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if(self.impulse == 254.000)
                                                                                                                        {
                                                                                                                            dude = spawn();
                                                                                                                            dude.classname = "rally_spawn_dude";
                                                                                                                            dude.angles = self.angles;
                                                                                                                            setorigin(dude, (self.origin + (self.veh_dir * 64.000)) + '0.000 0.000 32.000');
                                                                                                                            oself = self;
                                                                                                                            self = dude;
                                                                                                                            rally_spawn_dude();
                                                                                                                            self = oself;
                                                                                                                            remove(dude);
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            
                                                                                                                            if(self.impulse == 255.000)
                                                                                                                            {
                                                                                                                                QuadCheat();
                                                                                                                            }
                                                                                                                            
                                                                                                                        }
                                                                                                                        
                                                                                                                    }
                                                                                                                    
                                                                                                                }
                                                                                                                
                                                                                                            }
                                                                                                            
                                                                                                        }
                                                                                                        
                                                                                                    }
                                                                                                    
                                                                                                }
                                                                                                
                                                                                            }
                                                                                            
                                                                                        }
                                                                                        
                                                                                    }
                                                                                    
                                                                                }
                                                                                
                                                                            }
                                                                            
                                                                        }
                                                                        
                                                                    }
                                                                    
                                                                }
                                                                
                                                            }
                                                            
                                                        }
                                                        
                                                    }
                                                    
                                                }
                                                
                                            }
                                            
                                        }
                                        
                                    }
                                    
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
    }
    
    self.impulse = 0.000;
};

// W_WeaponFrame
// function begins at statement 15028, parm_start=11204
// OP_LOAD_F	28	387	11204
// OP_LT	31	11204	11205
// OP_IFNOT	11205	2	0
// OP_RETURN	0	0	0
// OP_CALL0	540	0	0
// OP_LOAD_F	28	170	11206
// OP_IFNOT	11206	3	0
// OP_CALL0	9171	0	0
// OP_CALL0	539	0	0
// OP_DONE	0	0	0
void () W_WeaponFrame = 
{
    
    if(time < self.attack_finished)
    {
        return;
    }
    
    ImpulseCommands();
    
    if(self.button0)
    {
        SuperDamageSound();
        W_Attack();
    }
    
};

// SuperDamageSound
// function begins at statement 15038, parm_start=11207
// OP_LOAD_F	28	391	11207
// OP_GT	11207	31	11208
// OP_IFNOT	11208	13	0
// OP_LOAD_F	28	398	11209
// OP_LT	11209	31	11210
// OP_IFNOT	11210	10	0
// OP_ADDRESS	28	398	11211
// OP_ADD_F	31	819	11212
// OP_STOREP_F	11212	11211	0
// OP_STORE_V	28	4	0
// OP_STORE_V	338	7	0
// OP_STORE_V	9062	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_RETURN	0	0	0
// OP_DONE	0	0	0
void () SuperDamageSound = 
{
    
    if(self.super_damage_finished > time)
    {
        
        if(self.super_sound < time)
        {
            self.super_sound = time + 1.000;
            sound(self, CHAN_BODY, "items/damage3.wav", 1.000, ATTN_NORM);
        }
        
    }
    
    return;
};

// oldchasecam
// function begins at statement 15055, parm_start=11214
// OP_LOAD_ENT	28	201	11230
// OP_LOAD_F	11230	611	11231
// OP_EQ_F	11231	714	11232
// OP_IFNOT	11232	7	0
// OP_LOAD_ENT	28	201	11233
// OP_LOAD_F	11233	613	11234
// OP_ADD_F	10599	11234	11235
// OP_STORE_F	11235	10603	0
// OP_STORE_F	10601	10604	0
// OP_GOTO	6	0	0
// OP_LOAD_ENT	28	201	11236
// OP_LOAD_F	11236	613	11237
// OP_ADD_F	10596	11237	11238
// OP_STORE_F	11238	10603	0
// OP_STORE_F	10598	10604	0
// OP_LOAD_ENT	28	201	11239
// OP_LOAD_F	11239	177	11240
// OP_STORE_F	11240	11218	0
// OP_STORE_V	11217	4	0
// OP_CALL1	461	0	0
// OP_STORE_V	4913	4	0
// OP_CALL1	501	0	0
// OP_MUL_VF	59	1	11241
// OP_LOAD_ENT	28	201	11244
// OP_LOAD_V	11244	113	11245
// OP_SUB_V	11241	11245	11248
// OP_STORE_V	11248	4	0
// OP_CALL1	471	0	0
// OP_DIV_F	1	843	11251
// OP_ADD_F	11251	2223	11252
// OP_STORE_F	11252	11228	0
// OP_STORE_V	4913	4	0
// OP_CALL1	501	0	0
// OP_MUL_VF	65	1	11253
// OP_LOAD_ENT	28	201	11256
// OP_LOAD_V	11256	113	11257
// OP_SUB_V	11253	11257	11260
// OP_STORE_V	11260	4	0
// OP_CALL1	471	0	0
// OP_DIV_F	1	843	11263
// OP_STORE_F	11263	11229	0
// OP_STORE_V	59	11217	0
// OP_LOAD_ENT	28	201	11264
// OP_LOAD_F	11264	378	11265
// OP_BITAND	11265	213	11266
// OP_IFNOT	11266	20	0
// OP_LT	11228	11267	11268
// OP_LOAD_ENT	28	201	11269
// OP_LOAD_F	11269	176	11270
// OP_LT	11270	11271	11272
// OP_OR	11268	11272	11273
// OP_IFNOT	11273	4	0
// OP_ADDRESS	28	161	11274
// OP_STOREP_F	817	11274	0
// OP_GOTO	10	0	0
// OP_LT	11229	2677	11275
// OP_IFNOT	11275	4	0
// OP_ADDRESS	28	161	11276
// OP_STOREP_F	819	11276	0
// OP_GOTO	5	0	0
// OP_GT	11229	11277	11278
// OP_IFNOT	11278	3	0
// OP_ADDRESS	28	161	11279
// OP_STOREP_F	821	11279	0
// OP_GOTO	3	0	0
// OP_ADDRESS	28	161	11280
// OP_STOREP_F	817	11280	0
// OP_LOAD_ENT	28	201	11281
// OP_LOAD_V	11281	175	11282
// OP_STORE_V	11282	4	0
// OP_CALL1	461	0	0
// OP_LOAD_ENT	28	201	11285
// OP_LOAD_V	11285	105	11286
// OP_LOAD_F	28	158	11289
// OP_MUL_VF	59	11289	11290
// OP_SUB_V	11286	11290	11293
// OP_STORE_V	11293	11214	0
// OP_LOAD_F	28	161	11296
// OP_NOT_F	11296	0	11297
// OP_IFNOT	11297	26	0
// OP_LOAD_ENT	28	201	11298
// OP_LOAD_F	11298	176	11299
// OP_GT	11299	2670	11300
// OP_IFNOT	11300	19	0
// OP_LOAD_ENT	28	201	11301
// OP_LOAD_F	11301	176	11302
// OP_SUB_F	11302	2670	11303
// OP_MUL_VF	11217	11303	11304
// OP_ADD_V	11214	11304	11307
// OP_STORE_V	11307	11214	0
// OP_LOAD_ENT	28	201	11310
// OP_LOAD_F	11310	176	11311
// OP_SUB_F	11311	2670	11312
// OP_MUL_F	11312	1152	11313
// OP_SUB_F	10604	11313	11314
// OP_STORE_F	11314	11224	0
// OP_LT	11224	817	11315
// OP_IFNOT	11315	2	0
// OP_STORE_F	817	11224	0
// OP_ADD_F	11216	11224	11316
// OP_STORE_F	11316	11216	0
// OP_GOTO	3	0	0
// OP_ADD_F	11216	10604	11317
// OP_STORE_F	11317	11216	0
// OP_GOTO	11	0	0
// OP_LOAD_F	28	161	11318
// OP_EQ_F	11318	819	11319
// OP_IFNOT	11319	5	0
// OP_MUL_VF	65	10604	11320
// OP_SUB_V	11214	11320	11323
// OP_STORE_V	11323	11214	0
// OP_GOTO	4	0	0
// OP_MUL_VF	65	10604	11326
// OP_ADD_V	11214	11326	11329
// OP_STORE_V	11329	11214	0
// OP_LOAD_ENT	28	201	11332
// OP_LOAD_V	11332	105	11333
// OP_STORE_V	11333	4	0
// OP_STORE_V	11214	7	0
// OP_STORE_V	219	10	0
// OP_LOAD_ENT	28	201	11336
// OP_STORE_V	11336	13	0
// OP_CALL4	475	0	0
// OP_MUL_VF	59	821	11337
// OP_ADD_V	71	11337	11340
// OP_STORE_V	11340	11214	0
// OP_ADDRESS	28	158	11343
// OP_LOAD_ENT	28	201	11344
// OP_LOAD_V	11344	105	11345
// OP_SUB_V	71	11345	11348
// OP_STORE_V	11348	4	0
// OP_CALL1	471	0	0
// OP_ADD_F	855	1	11351
// OP_STOREP_F	11351	11343	0
// OP_STORE_V	11214	4	0
// OP_ADD_V	11214	7028	11352
// OP_STORE_V	11352	7	0
// OP_STORE_V	219	10	0
// OP_LOAD_ENT	28	201	11355
// OP_STORE_V	11355	13	0
// OP_CALL4	475	0	0
// OP_LT	70	819	11356
// OP_IFNOT	11356	13	0
// OP_SUB_V	71	7028	11357
// OP_STORE_V	11357	11217	0
// OP_STORE_V	11214	4	0
// OP_SUB_V	11214	7028	11360
// OP_STORE_V	11360	7	0
// OP_STORE_V	219	10	0
// OP_LOAD_ENT	28	201	11363
// OP_STORE_V	11363	13	0
// OP_CALL4	475	0	0
// OP_EQ_F	70	819	11364
// OP_IFNOT	11364	2	0
// OP_STORE_V	11217	11214	0
// OP_LOAD_ENT	28	201	11365
// OP_LOAD_ENT	11365	548	11366
// OP_LOAD_V	11366	117	11367
// OP_LOAD_ENT	28	201	11370
// OP_LOAD_V	11370	580	11371
// OP_SUB_V	11367	11371	11374
// OP_STORE_V	11374	4	0
// OP_CALL1	461	0	0
// OP_GT	61	817	11377
// OP_IFNOT	11377	5	0
// OP_MUL_F	61	10603	11378
// OP_MUL_F	11378	1182	11379
// OP_ADD_F	11216	11379	11380
// OP_STORE_F	11380	11216	0
// OP_LOAD_ENT	28	201	11381
// OP_LOAD_F	11381	613	11382
// OP_LE	11382	1112	11383
// OP_LT	61	817	11384
// OP_AND	11383	11384	11385
// OP_IFNOT	11385	4	0
// OP_MUL_F	61	2657	11386
// OP_SUB_F	11216	11386	11387
// OP_STORE_F	11387	11216	0
// OP_LOAD_V	28	105	11388
// OP_SUB_V	11214	11388	11391
// OP_STORE_V	11391	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	11217	0
// OP_LOAD_V	28	105	11394
// OP_SUB_V	11214	11394	11397
// OP_STORE_V	11397	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	11223	0
// OP_ADDRESS	28	595	11400
// OP_MUL_VF	11217	11223	11403
// OP_MUL_VF	11403	855	11406
// OP_STOREP_V	11406	11400	0
// OP_LOAD_V	28	595	11409
// OP_MUL_VF	11409	32	11412
// OP_STORE_V	11412	4	0
// OP_CALL1	471	0	0
// OP_LT	1	11223	11415
// OP_IFNOT	11415	8	0
// OP_ADDRESS	28	599	11416
// OP_LOAD_V	28	599	11419
// OP_LOAD_V	28	595	11422
// OP_MUL_VF	11422	32	11425
// OP_ADD_V	11419	11425	11428
// OP_STOREP_V	11428	11416	0
// OP_GOTO	3	0	0
// OP_ADDRESS	28	599	11431
// OP_STOREP_V	11214	11431	0
// OP_ADDRESS	28	602	11434
// OP_STOREP_F	11216	11434	0
// OP_LOAD_ENT	28	201	11435
// OP_LOAD_V	11435	105	11436
// OP_LOAD_V	28	599	11439
// OP_SUB_V	11436	11439	11442
// OP_STORE_V	11442	4	0
// OP_CALL1	471	0	0
// OP_GT	1	11445	11446
// OP_IFNOT	11446	13	0
// OP_ADDRESS	28	599	11447
// OP_LOAD_ENT	28	201	11450
// OP_LOAD_V	11450	105	11451
// OP_LOAD_V	28	599	11454
// OP_LOAD_ENT	28	201	11457
// OP_LOAD_V	11457	105	11458
// OP_SUB_V	11454	11458	11461
// OP_STORE_V	11461	4	0
// OP_CALL1	468	0	0
// OP_MUL_VF	1	11445	11464
// OP_ADD_V	11451	11464	11467
// OP_STOREP_V	11467	11447	0
// OP_LOAD_ENT	28	201	11470
// OP_LOAD_F	11470	613	11471
// OP_STORE_F	11471	11227	0
// OP_LOAD_ENT	28	201	11472
// OP_LOAD_V	11472	105	11473
// OP_LOAD_V	28	599	11476
// OP_LOAD_ENT	28	201	11479
// OP_LOAD_V	11479	105	11480
// OP_SUB_V	11476	11480	11483
// OP_STORE_V	11483	4	0
// OP_CALL1	468	0	0
// OP_MUL_VF	1	11227	11486
// OP_ADD_V	11473	11486	11489
// OP_STORE_V	11489	11214	0
// OP_STORE_F	11216	11225	0
// OP_LOAD_ENT	28	201	11492
// OP_LOAD_V	11492	113	11493
// OP_STORE_V	11493	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	11226	0
// OP_LOAD_F	28	108	11496
// OP_GT	11216	11496	11497
// OP_IFNOT	11497	17	0
// OP_LOAD_F	28	108	11498
// OP_DIV_F	11226	778	11500
// OP_MUL_F	11499	11500	11501
// OP_ADD_F	11501	1112	11502
// OP_MUL_F	11502	32	11503
// OP_ADD_F	11498	11503	11504
// OP_STORE_F	11504	11216	0
// OP_GT	11216	11225	11505
// OP_IFNOT	11505	2	0
// OP_STORE_F	11225	11216	0
// OP_SUB_F	11216	11225	11506
// OP_LT	11506	11507	11508
// OP_IFNOT	11508	3	0
// OP_SUB_F	11225	2657	11509
// OP_STORE_F	11509	11216	0
// OP_GOTO	16	0	0
// OP_LOAD_F	28	108	11510
// OP_DIV_F	11226	778	11511
// OP_MUL_F	11499	11511	11512
// OP_ADD_F	11512	1112	11513
// OP_MUL_F	11513	32	11514
// OP_SUB_F	11510	11514	11515
// OP_STORE_F	11515	11216	0
// OP_LT	11216	11225	11516
// OP_IFNOT	11516	2	0
// OP_STORE_F	11225	11216	0
// OP_SUB_F	11216	11225	11517
// OP_GT	11517	2657	11518
// OP_IFNOT	11518	3	0
// OP_ADD_F	11225	2657	11519
// OP_STORE_F	11519	11216	0
// OP_STORE_V	28	4	0
// OP_STORE_V	11214	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	28	158	11520
// OP_LOAD_F	28	158	11521
// OP_ADD_F	11521	825	11522
// OP_STOREP_F	11522	11520	0
// OP_LOAD_F	28	158	11523
// OP_GT	11523	10603	11524
// OP_IFNOT	11524	3	0
// OP_ADDRESS	28	158	11525
// OP_STOREP_F	10603	11525	0
// OP_LOAD_V	28	109	11526
// OP_LOAD_V	28	105	11529
// OP_EQ_V	11526	11529	11532
// OP_IFNOT	11532	7	0
// OP_GT	11223	2522	11533
// OP_IFNOT	11533	5	0
// OP_ADDRESS	28	159	11534
// OP_LOAD_F	28	159	11535
// OP_ADD_F	11535	819	11536
// OP_STOREP_F	11536	11534	0
// OP_LOAD_F	28	159	11537
// OP_GT	11537	823	11538
// OP_IFNOT	11538	7	0
// OP_LOAD_ENT	28	201	11539
// OP_STORE_V	11539	4	0
// OP_CALL1	10608	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	109	11540
// OP_LOAD_V	28	105	11543
// OP_STOREP_V	11543	11540	0
// OP_DONE	0	0	0
void () oldchasecam = 
{
    local vector spot2;
    local vector dir;
    local vector cam_angles;
    local float dist;
    local float cap;
    local float ftemp;
    local float vel_speed;
    local float dist2;
    local float f_f;
    local float f_r;
    if(self.owner.cam == CAM_CHASEFAR)
    {
        chasecam_dist = CHASECAM_FAR_x + self.owner.chasecam_zoom;
        chasecam_zofs = 32.000;
    }
    else
    {
        chasecam_dist = CHASECAM_CLOSE_x + self.owner.chasecam_zoom;
        chasecam_zofs = 10.000;
    }
    
    dir_y = self.owner.v_angle_y;
    makevectors(dir);
    f_f = ((vlen((v_forward * cvar("sv_maxspeed")) - self.owner.velocity)) / 8.000) + 64.000;
    f_r = (vlen((v_right * cvar("sv_maxspeed")) - self.owner.velocity)) / 8.000;
    dir = v_forward;
    if(self.owner.speed & CHSCAM_ALT)
    {
        if((f_f < 160.000) || (self.owner.v_angle_x < -45.000))
        {
            self.ammo_cells = 0.000;
        }
        else
        {
            if(f_r < 80.000)
            {
                self.ammo_cells = 1.000;
            }
            else
            {
                
                if(f_r > 560.000)
                {
                    self.ammo_cells = 2.000;
                }
                
            }
            
        }
        
    }
    else
    {
        self.ammo_cells = 0.000;
    }
    
    makevectors(self.owner.v_angle);
    spot2 = self.owner.origin - (v_forward * self.ammo_shells);
    if(!self.ammo_cells)
    {
        if(self.owner.v_angle_x > 16.000)
        {
            spot2 = spot2 + (dir * (self.owner.v_angle_x - 16.000));
            cap = chasecam_zofs - ((self.owner.v_angle_x - 16.000) * 0.200);
            
            if(cap < 0.000)
            {
                cap = 0.000;
            }
            
            spot2_z = 0.000 + cap;
        }
        else
        {
            spot2_z = 0.000 + chasecam_zofs;
        }
        
    }
    else
    {
        if(self.ammo_cells == 1.000)
        {
            spot2 = spot2 - (v_right * chasecam_zofs);
        }
        else
        {
            spot2 = spot2 + (v_right * chasecam_zofs);
        }
        
    }
    
    traceline(self.owner.origin, spot2, TRUE, self.owner);
    spot2 = trace_endpos + (v_forward * 2.000);
    self.ammo_shells = 10.000 + (vlen(trace_endpos - self.owner.origin));
    traceline(spot2, spot2 + '0.000 0.000 32.000', TRUE, self.owner);
    
    if(trace_fraction < 1.000)
    {
        dir = trace_endpos - '0.000 0.000 32.000';
        traceline(spot2, spot2 - '0.000 0.000 32.000', TRUE, self.owner);
        
        if(trace_fraction == 1.000)
        {
            spot2 = dir;
        }
        
    }
    
    makevectors(self.owner.veh_body.angles - self.owner.body_roll);
    
    if(0.000 > 0.000)
    {
        spot2_z = 0.000 + ((0.000 * chasecam_dist) * 0.500);
    }
    
    
    if((self.owner.chasecam_zoom <= 20.000) && (0.000 < 0.000))
    {
        spot2_z = 0.000 - (0.000 * 32.000);
    }
    
    dir = normalize(spot2 - self.origin);
    dist = vlen(spot2 - self.origin);
    self.roll_velocity = (dir * dist) * 10.000;
    if((vlen(self.roll_velocity * frametime)) < dist)
    {
        self.last_roll = self.last_roll + (self.roll_velocity * frametime);
    }
    else
    {
        self.last_roll = spot2;
    }
    
    self.last_roll_z = 0.000;
    
    if((vlen(self.owner.origin - self.last_roll)) > 256.000)
    {
        self.last_roll = self.owner.origin + ((normalize(self.last_roll - self.owner.origin)) * 256.000);
    }
    
    dist2 = self.owner.chasecam_zoom;
    spot2 = self.owner.origin + ((normalize(self.last_roll - self.owner.origin)) * dist2);
    ftemp = 0.000;
    vel_speed = vlen(self.owner.velocity);
    if(0.000 > self.origin_z)
    {
        spot2_z = self.origin_z + (((6400.000 * (vel_speed / MAX_SPEED)) + 20.000) * frametime);
        
        if(0.000 > ftemp)
        {
            spot2_z = ftemp;
        }
        
        
        if((0.000 - ftemp) < -32.000)
        {
            spot2_z = ftemp - 32.000;
        }
        
    }
    else
    {
        spot2_z = self.origin_z - (((6400.000 * (vel_speed / MAX_SPEED)) + 20.000) * frametime);
        
        if(0.000 < ftemp)
        {
            spot2_z = ftemp;
        }
        
        
        if((0.000 - ftemp) > 32.000)
        {
            spot2_z = ftemp + 32.000;
        }
        
    }
    
    setorigin(self, spot2);
    self.ammo_shells = self.ammo_shells + 4.000;
    
    if(self.ammo_shells > chasecam_dist)
    {
        self.ammo_shells = chasecam_dist;
    }
    
    
    if(self.oldorigin == self.origin)
    {
        
        if(dist > 30.000)
        {
            self.ammo_nails = self.ammo_nails + 1.000;
        }
        
    }
    
    
    if(self.ammo_nails > 3.000)
    {
        Start_chase_cam(self.owner);
        remove(self);
        return;
    }
    
    self.oldorigin = self.origin;
};

// Keep_cam_chasing_owner
// function begins at statement 15373, parm_start=11546
// OP_LOAD_ENT	28	201	11564
// OP_LOAD_F	11564	611	11565
// OP_NE_F	11565	715	11566
// OP_LOAD_ENT	28	201	11567
// OP_LOAD_F	11567	611	11568
// OP_NE_F	11568	716	11569
// OP_AND	11566	11569	11570
// OP_IFNOT	11570	248	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	11571
// OP_LOAD_ENT	28	201	11574
// OP_LOAD_V	11574	575	11575
// OP_ADD_V	11571	11575	11578
// OP_STORE_V	11578	7	0
// OP_CALL2	462	0	0
// OP_LOAD_ENT	28	201	11581
// OP_LOAD_F	11581	611	11582
// OP_EQ_F	11582	714	11583
// OP_IFNOT	11583	7	0
// OP_LOAD_ENT	28	201	11584
// OP_LOAD_F	11584	613	11585
// OP_ADD_F	10599	11585	11586
// OP_STORE_F	11586	10603	0
// OP_STORE_F	10601	10604	0
// OP_GOTO	9	0	0
// OP_LOAD_ENT	28	201	11587
// OP_LOAD_F	11587	613	11588
// OP_ADD_F	10596	11588	11589
// OP_STORE_F	11589	10603	0
// OP_STORE_F	10598	10604	0
// OP_LOAD_ENT	28	201	11590
// OP_LOAD_F	11590	612	11591
// OP_STORE_F	11591	11563	0
// OP_LT	10603	827	11592
// OP_IFNOT	11592	2	0
// OP_STORE_F	827	10603	0
// OP_LOAD_ENT	28	201	11593
// OP_LOAD_V	11593	175	11594
// OP_STORE_V	11594	4	0
// OP_CALL1	461	0	0
// OP_STORE_V	59	11549	0
// OP_LOAD_ENT	28	201	11597
// OP_LOAD_V	11597	113	11598
// OP_STORE_V	11598	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	11561	0
// OP_LOAD_ENT	28	201	11601
// OP_LOAD_V	11601	113	11602
// OP_NE_V	11602	926	11605
// OP_IFNOT	11605	7	0
// OP_LOAD_ENT	28	201	11606
// OP_LOAD_V	11606	113	11607
// OP_STORE_V	11607	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	11555	0
// OP_GOTO	7	0	0
// OP_LOAD_ENT	28	201	11610
// OP_LOAD_ENT	11610	548	11611
// OP_LOAD_V	11611	117	11612
// OP_STORE_V	11612	4	0
// OP_CALL1	461	0	0
// OP_STORE_V	59	11555	0
// OP_DIV_F	778	823	11615
// OP_GT	11561	11615	11616
// OP_LOAD_ENT	28	201	11617
// OP_LOAD_F	11617	611	11618
// OP_EQ_F	11618	713	11619
// OP_AND	11616	11619	11620
// OP_LOAD_F	28	644	11621
// OP_BITAND	11621	703	11622
// OP_NOT_F	11622	0	11623
// OP_AND	11620	11623	11624
// OP_IFNOT	11624	65	0
// OP_LOAD_ENT	28	201	11625
// OP_LOAD_V	11625	105	11626
// OP_DIV_F	11561	778	11629
// OP_LOAD_ENT	28	201	11630
// OP_LOAD_F	11630	613	11631
// OP_MUL_F	11631	1182	11632
// OP_MUL_F	11629	11632	11633
// OP_ADD_F	10603	11633	11634
// OP_MUL_FV	11634	11555	11635
// OP_SUB_V	11626	11635	11638
// OP_MUL_VF	1215	10604	11641
// OP_ADD_V	11638	11641	11644
// OP_STORE_V	11644	11546	0
// OP_LOAD_F	28	108	11647
// OP_STORE_F	11647	11548	0
// OP_LOAD_ENT	28	201	11648
// OP_LOAD_ENT	11648	548	11649
// OP_LOAD_V	11649	117	11650
// OP_LOAD_ENT	28	201	11653
// OP_LOAD_V	11653	580	11654
// OP_SUB_V	11650	11654	11657
// OP_STORE_V	11657	4	0
// OP_CALL1	461	0	0
// OP_MUL_F	1228	61	11660
// OP_STORE_F	11660	61	0
// OP_GT	61	817	11661
// OP_IFNOT	11661	5	0
// OP_MUL_F	61	10603	11662
// OP_MUL_F	11662	1182	11663
// OP_ADD_F	11548	11663	11664
// OP_STORE_F	11664	11548	0
// OP_LOAD_V	28	105	11665
// OP_SUB_V	11546	11665	11668
// OP_STORE_V	11668	4	0
// OP_CALL1	468	0	0
// OP_MUL_VF	1	5807	11671
// OP_MUL_VF	11671	32	11674
// OP_STORE_V	11674	11552	0
// OP_LOAD_V	28	105	11677
// OP_SUB_V	11546	11677	11680
// OP_STORE_V	11680	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	11562	0
// OP_STORE_V	11552	4	0
// OP_CALL1	471	0	0
// OP_GT	11562	1	11683
// OP_IFNOT	11683	7	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	11684
// OP_ADD_V	11684	11552	11687
// OP_STORE_V	11687	7	0
// OP_CALL2	462	0	0
// OP_GOTO	4	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	11546	7	0
// OP_CALL2	462	0	0
// OP_LOAD_V	28	105	11690
// OP_LOAD_ENT	28	201	11693
// OP_LOAD_V	11693	105	11694
// OP_SUB_V	11690	11694	11697
// OP_STORE_V	11697	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	11562	0
// OP_GOTO	2	0	0
// OP_STORE_F	10603	11562	0
// OP_LOAD_ENT	28	201	11700
// OP_LOAD_V	11700	105	11701
// OP_MUL_FV	11562	11549	11704
// OP_SUB_V	11701	11704	11707
// OP_MUL_VF	1215	10604	11710
// OP_ADD_V	11707	11710	11713
// OP_STORE_V	11713	11546	0
// OP_LOAD_ENT	28	201	11716
// OP_LOAD_V	11716	105	11717
// OP_LOAD_ENT	28	201	11720
// OP_LOAD_V	11720	105	11721
// OP_SUB_V	11546	11721	11724
// OP_STORE_V	11724	4	0
// OP_CALL1	468	0	0
// OP_MUL_VF	1	11562	11727
// OP_ADD_V	11717	11727	11730
// OP_STORE_V	11730	11546	0
// OP_LOAD_ENT	28	201	11733
// OP_LOAD_F	11733	611	11734
// OP_EQ_F	11734	713	11735
// OP_LOAD_F	28	644	11736
// OP_BITAND	11736	703	11737
// OP_NOT_F	11737	0	11738
// OP_AND	11735	11738	11739
// OP_IFNOT	11739	35	0
// OP_LOAD_V	28	105	11740
// OP_SUB_V	11546	11740	11743
// OP_STORE_V	11743	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	11562	0
// OP_LOAD_V	28	105	11746
// OP_SUB_V	11546	11746	11749
// OP_STORE_V	11749	4	0
// OP_CALL1	468	0	0
// OP_LOAD_ENT	28	201	11752
// OP_LOAD_F	11752	613	11753
// OP_MUL_F	11563	1112	11754
// OP_ADD_F	11753	11754	11755
// OP_MUL_F	11562	1748	11756
// OP_GT	11562	2670	11757
// OP_MUL_F	11756	11757	11758
// OP_ADD_F	11755	11758	11759
// OP_MUL_VF	1	11759	11760
// OP_MUL_VF	11760	32	11763
// OP_STORE_V	11763	11552	0
// OP_STORE_V	11552	4	0
// OP_CALL1	471	0	0
// OP_GT	11562	1	11766
// OP_IFNOT	11766	7	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	11767
// OP_ADD_V	11767	11552	11770
// OP_STORE_V	11770	7	0
// OP_CALL2	462	0	0
// OP_GOTO	4	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	11546	7	0
// OP_CALL2	462	0	0
// OP_GOTO	10	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	11546	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	28	644	11773
// OP_LOAD_F	28	644	11774
// OP_LOAD_F	28	644	11775
// OP_BITAND	11775	703	11776
// OP_SUB_F	11774	11776	11777
// OP_STOREP_F	11777	11773	0
// OP_ADDRESS	28	113	11778
// OP_STOREP_V	926	11778	0
// OP_LOAD_V	28	105	11781
// OP_STORE_V	11781	4	0
// OP_LOAD_ENT	28	201	11784
// OP_LOAD_V	11784	105	11785
// OP_STORE_V	11785	7	0
// OP_STORE_V	218	10	0
// OP_LOAD_ENT	28	201	11788
// OP_STORE_V	11788	13	0
// OP_CALL4	475	0	0
// OP_LT	70	819	11789
// OP_IFNOT	11789	13	0
// OP_LOAD_V	28	105	11790
// OP_LOAD_ENT	28	201	11793
// OP_LOAD_V	11793	105	11794
// OP_SUB_V	11790	11794	11797
// OP_STORE_V	11797	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	11552	0
// OP_STORE_V	28	4	0
// OP_MUL_VF	11552	825	11800
// OP_SUB_V	71	11800	11803
// OP_STORE_V	11803	7	0
// OP_CALL2	462	0	0
// OP_LOAD_ENT	28	201	11806
// OP_LOAD_V	11806	105	11807
// OP_STORE_V	11807	4	0
// OP_LOAD_V	28	105	11810
// OP_STORE_V	11810	7	0
// OP_STORE_V	218	10	0
// OP_LOAD_ENT	28	201	11813
// OP_STORE_V	11813	13	0
// OP_CALL4	475	0	0
// OP_LT	70	819	11814
// OP_IFNOT	11814	13	0
// OP_LOAD_V	28	105	11815
// OP_LOAD_ENT	28	201	11818
// OP_LOAD_V	11818	105	11819
// OP_SUB_V	11815	11819	11822
// OP_STORE_V	11822	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	11552	0
// OP_STORE_V	28	4	0
// OP_MUL_VF	11552	825	11825
// OP_SUB_V	71	11825	11828
// OP_STORE_V	11828	7	0
// OP_CALL2	462	0	0
// OP_GOTO	137	0	0
// OP_LOAD_ENT	28	201	11831
// OP_LOAD_F	11831	611	11832
// OP_EQ_F	11832	716	11833
// OP_IFNOT	11833	87	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	11834
// OP_LOAD_ENT	28	201	11837
// OP_LOAD_V	11837	575	11838
// OP_ADD_V	11834	11838	11841
// OP_STORE_V	11841	7	0
// OP_CALL2	462	0	0
// OP_LOAD_ENT	28	201	11844
// OP_LOAD_ENT	11844	548	11845
// OP_LOAD_V	11845	117	11846
// OP_LOAD_ENT	28	201	11849
// OP_LOAD_V	11849	580	11850
// OP_SUB_V	11846	11850	11853
// OP_STORE_V	11853	4	0
// OP_CALL1	461	0	0
// OP_LOAD_ENT	28	201	11856
// OP_LOAD_V	11856	105	11857
// OP_MUL_VF	59	3330	11860
// OP_SUB_V	11857	11860	11863
// OP_MUL_VF	62	2657	11866
// OP_ADD_V	11863	11866	11869
// OP_STORE_V	11869	11546	0
// OP_LOAD_V	28	105	11872
// OP_SUB_V	11546	11872	11875
// OP_STORE_V	11875	4	0
// OP_CALL1	468	0	0
// OP_MUL_VF	1	1632	11878
// OP_MUL_VF	11878	32	11881
// OP_STORE_V	11881	11552	0
// OP_LOAD_V	28	105	11884
// OP_SUB_V	11546	11884	11887
// OP_STORE_V	11887	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	11562	0
// OP_STORE_V	11552	4	0
// OP_CALL1	471	0	0
// OP_GT	11562	1	11890
// OP_IFNOT	11890	7	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	11891
// OP_ADD_V	11891	11552	11894
// OP_STORE_V	11894	7	0
// OP_CALL2	462	0	0
// OP_GOTO	4	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	11546	7	0
// OP_CALL2	462	0	0
// OP_LOAD_ENT	28	201	11897
// OP_LOAD_V	11897	105	11898
// OP_LOAD_V	28	105	11901
// OP_SUB_V	11898	11901	11904
// OP_STORE_V	11904	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	11558	0
// OP_STORE_V	11558	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	11558	0
// OP_MUL_F	1228	11558	11907
// OP_STORE_F	11907	11558	0
// OP_GT	11558	865	11908
// OP_IFNOT	11908	4	0
// OP_SUB_F	11558	867	11909
// OP_STORE_F	11909	11558	0
// OP_GOTO	5	0	0
// OP_LT	11558	4428	11910
// OP_IFNOT	11910	3	0
// OP_ADD_F	11558	867	11911
// OP_STORE_F	11911	11558	0
// OP_LOAD_ENT	28	201	11912
// OP_STORE_ENT	11912	81	0
// OP_STORE_V	352	4	0
// OP_STORE_V	747	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	352	4	0
// OP_STORE_V	11558	7	0
// OP_CALL2	512	0	0
// OP_STORE_V	352	4	0
// OP_STORE_V	11559	7	0
// OP_CALL2	512	0	0
// OP_STORE_V	352	4	0
// OP_STORE_V	11560	7	0
// OP_CALL2	512	0	0
// OP_LOAD_ENT	28	201	11913
// OP_ADDRESS	11913	675	11914
// OP_STOREP_F	11559	11914	0
// OP_GOTO	47	0	0
// OP_LOAD_ENT	28	201	11915
// OP_STORE_ENT	11915	28	0
// OP_LOAD_ENT	28	548	11916
// OP_STORE_V	11916	4	0
// OP_LOAD_ENT	28	625	11917
// OP_STORE_V	11917	7	0
// OP_STORE_V	817	10	0
// OP_STORE_V	947	13	0
// OP_STORE_V	839	16	0
// OP_CALL5	1441	0	0
// OP_LOAD_ENT	28	625	11918
// OP_STORE_ENT	11918	28	0
// OP_LOAD_ENT	28	201	11919
// OP_LOAD_ENT	11919	548	11920
// OP_LOAD_V	11920	117	11921
// OP_STORE_V	11921	11558	0
// OP_MUL_F	1228	11558	11924
// OP_STORE_F	11924	11558	0
// OP_ADD_F	11558	845	11925
// OP_STORE_F	11925	11558	0
// OP_GT	11558	865	11926
// OP_IFNOT	11926	4	0
// OP_SUB_F	11558	867	11927
// OP_STORE_F	11927	11558	0
// OP_GOTO	5	0	0
// OP_LT	11558	4428	11928
// OP_IFNOT	11928	3	0
// OP_ADD_F	11558	867	11929
// OP_STORE_F	11929	11558	0
// OP_LOAD_ENT	28	201	11930
// OP_STORE_ENT	11930	81	0
// OP_STORE_V	352	4	0
// OP_STORE_V	747	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	352	4	0
// OP_STORE_V	11558	7	0
// OP_CALL2	512	0	0
// OP_STORE_V	352	4	0
// OP_STORE_V	11559	7	0
// OP_CALL2	512	0	0
// OP_STORE_V	352	4	0
// OP_STORE_V	11560	7	0
// OP_CALL2	512	0	0
// OP_LOAD_ENT	28	201	11931
// OP_ADDRESS	11931	174	11932
// OP_STOREP_F	219	11932	0
// OP_DONE	0	0	0
void () Keep_cam_chasing_owner = 
{
    local vector spot;
    local vector view_dir;
    local vector ideal_vec;
    local vector veh_vel;
    local vector cam_angles;
    local float veh_speed;
    local float ideal_dist;
    local float track_speed;
    if((self.owner.cam != CAM_INCAR) && (self.owner.cam != CAM_TEST))
    {
        setorigin(self, self.origin + self.owner.lastmove);
        if(self.owner.cam == CAM_CHASEFAR)
        {
            chasecam_dist = CHASECAM_FAR_x + self.owner.chasecam_zoom;
            chasecam_zofs = 32.000;
        }
        else
        {
            chasecam_dist = CHASECAM_CLOSE_x + self.owner.chasecam_zoom;
            chasecam_zofs = 10.000;
            track_speed = self.owner.tracking_speed;
        }
        
        
        if(chasecam_dist < 5.000)
        {
            chasecam_dist = 5.000;
        }
        
        makevectors(self.owner.v_angle);
        view_dir = v_forward;
        veh_speed = vlen(self.owner.velocity);
        if(self.owner.velocity != '0.000 0.000 0.000')
        {
            veh_vel = normalize(self.owner.velocity);
        }
        else
        {
            makevectors(self.owner.veh_body.angles);
            veh_vel = v_forward;
        }
        
        if(((veh_speed > (MAX_SPEED / 3.000)) && (self.owner.cam == CAM_CHASECLOSE)) && (!(self.racing_flags & QR_RESPAWN_FLAG)))
        {
            spot = (self.owner.origin - ((chasecam_dist + ((veh_speed / MAX_SPEED) * (self.owner.chasecam_zoom * 0.500))) * veh_vel)) + ('0.000 0.000 1.000' * chasecam_zofs);
            spot_z = self.origin_z;
            makevectors(self.owner.veh_body.angles - self.owner.body_roll);
            v_forward_z = -1.000 * 0.000;
            
            if(0.000 > 0.000)
            {
                spot_z = 0.000 + ((0.000 * chasecam_dist) * 0.500);
            }
            
            ideal_vec = ((normalize(spot - self.origin)) * 120.000) * frametime;
            ideal_dist = vlen(spot - self.origin);
            if(ideal_dist > vlen(ideal_vec))
            {
                setorigin(self, self.origin + ideal_vec);
            }
            else
            {
                setorigin(self, spot);
            }
            
            ideal_dist = vlen(self.origin - self.owner.origin);
        }
        else
        {
            ideal_dist = chasecam_dist;
        }
        
        spot = (self.owner.origin - (ideal_dist * view_dir)) + ('0.000 0.000 1.000' * chasecam_zofs);
        spot = self.owner.origin + ((normalize(spot - self.owner.origin)) * ideal_dist);
        if((self.owner.cam == CAM_CHASECLOSE) && (!(self.racing_flags & QR_RESPAWN_FLAG)))
        {
            ideal_dist = vlen(spot - self.origin);
            ideal_vec = ((normalize(spot - self.origin)) * ((self.owner.chasecam_zoom + (track_speed * 20.000)) + ((ideal_dist * 2.500) * (ideal_dist > 16.000)))) * frametime;
            if(ideal_dist > vlen(ideal_vec))
            {
                setorigin(self, self.origin + ideal_vec);
            }
            else
            {
                setorigin(self, spot);
            }
            
        }
        else
        {
            setorigin(self, spot);
            self.racing_flags = self.racing_flags - (self.racing_flags & QR_RESPAWN_FLAG);
        }
        
        self.velocity = '0.000 0.000 0.000';
        traceline(self.origin, self.owner.origin, FALSE, self.owner);
        
        if(trace_fraction < 1.000)
        {
            ideal_vec = normalize(self.origin - self.owner.origin);
            setorigin(self, trace_endpos - (ideal_vec * 4.000));
        }
        
        traceline(self.owner.origin, self.origin, FALSE, self.owner);
        
        if(trace_fraction < 1.000)
        {
            ideal_vec = normalize(self.origin - self.owner.origin);
            setorigin(self, trace_endpos - (ideal_vec * 4.000));
        }
        
    }
    else
    {
        if(self.owner.cam == CAM_TEST)
        {
            setorigin(self, self.origin + self.owner.lastmove);
            makevectors(self.owner.veh_body.angles - self.owner.body_roll);
            spot = (self.owner.origin - (v_forward * 48.000)) + (v_up * 32.000);
            ideal_vec = ((normalize(spot - self.origin)) * 40.000) * frametime;
            ideal_dist = vlen(spot - self.origin);
            if(ideal_dist > vlen(ideal_vec))
            {
                setorigin(self, self.origin + ideal_vec);
            }
            else
            {
                setorigin(self, spot);
            }
            
            cam_angles = normalize(self.owner.origin - self.origin);
            cam_angles = vectoangles(cam_angles);
            cam_angles_x = -1.000 * cam_angles_x;
            if(cam_angles_x > 180.000)
            {
                cam_angles_x = cam_angles_x - 360.000;
            }
            else
            {
                
                if(cam_angles_x < -180.000)
                {
                    cam_angles_x = cam_angles_x + 360.000;
                }
                
            }
            
            msg_entity = self.owner;
            WriteByte(MSG_ONE, SVC_SETVIEWANGLES);
            WriteAngle(MSG_ONE, cam_angles_x);
            WriteAngle(MSG_ONE, 0.000);
            WriteAngle(MSG_ONE, 0.000);
            self.owner.last_heading = 0.000;
        }
        else
        {
            self = self.owner;
            SetVehPosition(self.veh_body, self.chasecam, 0.000, -2.000, 7.000);
            self = self.chasecam;
            cam_angles = self.owner.veh_body.angles;
            cam_angles_x = -1.000 * cam_angles_x;
            cam_angles_x = cam_angles_x + 15.000;
            if(cam_angles_x > 180.000)
            {
                cam_angles_x = cam_angles_x - 360.000;
            }
            else
            {
                
                if(cam_angles_x < -180.000)
                {
                    cam_angles_x = cam_angles_x + 360.000;
                }
                
            }
            
            msg_entity = self.owner;
            WriteByte(MSG_ONE, SVC_SETVIEWANGLES);
            WriteAngle(MSG_ONE, cam_angles_x);
            WriteAngle(MSG_ONE, 0.000);
            WriteAngle(MSG_ONE, 0.000);
            self.owner.fixangle = TRUE;
        }
        
    }
    
};

void () InitBodyQue;
// main
// function begins at statement 15765, parm_start=11934
// OP_STORE_V	11934	4	0
// OP_CALL1	484	0	0
// OP_STORE_V	11935	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11936	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11937	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11938	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11939	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11940	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	11941	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11942	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11943	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11944	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11945	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11946	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	11947	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11948	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11949	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11950	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11951	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11952	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11953	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11954	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11955	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11956	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11957	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11958	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11959	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11960	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11961	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11962	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11963	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11964	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11965	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11966	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11967	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11968	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11969	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11970	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11971	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11972	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11973	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11974	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11975	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11976	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11977	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11978	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11979	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11980	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11981	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11982	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11983	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11984	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11985	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11986	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11987	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11988	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11989	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11990	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11991	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11992	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11993	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11994	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11995	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11996	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11997	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11998	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11999	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	12000	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	12001	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12002	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12003	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12004	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12005	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12006	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	12007	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	12008	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	12009	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	12010	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	12011	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	12012	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	12013	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	12014	4	0
// OP_CALL1	516	0	0
// OP_STORE_V	11946	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12015	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12016	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12017	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12018	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12019	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12020	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12021	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12022	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12023	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12024	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12025	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12026	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12027	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12028	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12029	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12030	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12031	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12032	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12033	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12034	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12035	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12036	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12037	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12038	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12039	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12040	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12041	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12042	4	0
// OP_CALL1	524	0	0
// OP_STORE_V	12043	4	0
// OP_CALL1	524	0	0
// OP_DONE	0	0	0
void () main = 
{
    dprint("main function\n");
    precache_file("progs.dat");
    precache_file("gfx.wad");
    precache_file("quake.rc");
    precache_file("default.cfg");
    precache_file("end1.bin");
    precache_file2("end2.bin");
    precache_file("demo1.dem");
    precache_file("demo2.dem");
    precache_file("demo3.dem");
    precache_file("gfx/palette.lmp");
    precache_file("gfx/colormap.lmp");
    precache_file2("gfx/pop.lmp");
    precache_file("gfx/complete.lmp");
    precache_file("gfx/inter.lmp");
    precache_file("gfx/ranking.lmp");
    precache_file("gfx/vidmodes.lmp");
    precache_file("gfx/finale.lmp");
    precache_file("gfx/conback.lmp");
    precache_file("gfx/qplaque.lmp");
    precache_file("gfx/menudot1.lmp");
    precache_file("gfx/menudot2.lmp");
    precache_file("gfx/menudot3.lmp");
    precache_file("gfx/menudot4.lmp");
    precache_file("gfx/menudot5.lmp");
    precache_file("gfx/menudot6.lmp");
    precache_file("gfx/menuplyr.lmp");
    precache_file("gfx/bigbox.lmp");
    precache_file("gfx/dim_modm.lmp");
    precache_file("gfx/dim_drct.lmp");
    precache_file("gfx/dim_ipx.lmp");
    precache_file("gfx/dim_tcp.lmp");
    precache_file("gfx/dim_mult.lmp");
    precache_file("gfx/mainmenu.lmp");
    precache_file("gfx/box_tl.lmp");
    precache_file("gfx/box_tm.lmp");
    precache_file("gfx/box_tr.lmp");
    precache_file("gfx/box_ml.lmp");
    precache_file("gfx/box_mm.lmp");
    precache_file("gfx/box_mm2.lmp");
    precache_file("gfx/box_mr.lmp");
    precache_file("gfx/box_bl.lmp");
    precache_file("gfx/box_bm.lmp");
    precache_file("gfx/box_br.lmp");
    precache_file("gfx/sp_menu.lmp");
    precache_file("gfx/ttl_sgl.lmp");
    precache_file("gfx/ttl_main.lmp");
    precache_file("gfx/ttl_cstm.lmp");
    precache_file("gfx/mp_menu.lmp");
    precache_file("gfx/netmen1.lmp");
    precache_file("gfx/netmen2.lmp");
    precache_file("gfx/netmen3.lmp");
    precache_file("gfx/netmen4.lmp");
    precache_file("gfx/netmen5.lmp");
    precache_file("gfx/sell.lmp");
    precache_file("gfx/help0.lmp");
    precache_file("gfx/help1.lmp");
    precache_file("gfx/help2.lmp");
    precache_file("gfx/help3.lmp");
    precache_file("gfx/help4.lmp");
    precache_file("gfx/help5.lmp");
    precache_file("gfx/pause.lmp");
    precache_file("gfx/loading.lmp");
    precache_file("gfx/p_option.lmp");
    precache_file("gfx/p_load.lmp");
    precache_file("gfx/p_save.lmp");
    precache_file("gfx/p_multi.lmp");
    precache_sound("misc/menu1.wav");
    precache_sound("misc/menu2.wav");
    precache_sound("misc/menu3.wav");
    precache_sound("ambience/water1.wav");
    precache_sound("ambience/wind2.wav");
    precache_file("maps/start.bsp");
    precache_file("maps/e1m1.bsp");
    precache_file("maps/e1m2.bsp");
    precache_file("maps/e1m3.bsp");
    precache_file("maps/e1m4.bsp");
    precache_file("maps/e1m5.bsp");
    precache_file("maps/e1m6.bsp");
    precache_file("maps/e1m7.bsp");
    precache_file("maps/e1m8.bsp");
    precache_file2("gfx/pop.lmp");
    precache_file2("maps/e2m1.bsp");
    precache_file2("maps/e2m2.bsp");
    precache_file2("maps/e2m3.bsp");
    precache_file2("maps/e2m4.bsp");
    precache_file2("maps/e2m5.bsp");
    precache_file2("maps/e2m6.bsp");
    precache_file2("maps/e2m7.bsp");
    precache_file2("maps/e3m1.bsp");
    precache_file2("maps/e3m2.bsp");
    precache_file2("maps/e3m3.bsp");
    precache_file2("maps/e3m4.bsp");
    precache_file2("maps/e3m5.bsp");
    precache_file2("maps/e3m6.bsp");
    precache_file2("maps/e3m7.bsp");
    precache_file2("maps/e4m1.bsp");
    precache_file2("maps/e4m2.bsp");
    precache_file2("maps/e4m3.bsp");
    precache_file2("maps/e4m4.bsp");
    precache_file2("maps/e4m5.bsp");
    precache_file2("maps/e4m6.bsp");
    precache_file2("maps/e4m7.bsp");
    precache_file2("maps/e4m8.bsp");
    precache_file2("maps/end.bsp");
    precache_file2("maps/dm1.bsp");
    precache_file2("maps/dm2.bsp");
    precache_file2("maps/dm3.bsp");
    precache_file2("maps/dm4.bsp");
    precache_file2("maps/dm5.bsp");
    precache_file2("maps/dm6.bsp");
};

entity lastspawn;
// worldspawn
// function begins at statement 15988, parm_start=12046
// OP_STORE_ENT	30	12044	0
// OP_CALL0	11933	0	0
// OP_NE_F	731	819	12048
// OP_IFNOT	12048	4	0
// OP_STORE_F	827	729	0
// OP_STORE_F	817	732	0
// OP_STORE_F	819	731	0
// OP_STORE_F	817	733	0
// OP_STORE_F	817	734	0
// OP_LOAD_S	28	130	12049
// OP_EQ_S	12049	12014	12050
// OP_IFNOT	12050	5	0
// OP_STORE_V	3176	4	0
// OP_STORE_V	12051	7	0
// OP_CALL2	519	0	0
// OP_GOTO	4	0	0
// OP_STORE_V	3176	4	0
// OP_STORE_V	12052	7	0
// OP_CALL2	519	0	0
// OP_STORE_F	819	724	0
// OP_STORE_F	817	728	0
// OP_STORE_V	12053	4	0
// OP_CALL1	501	0	0
// OP_STORE_F	1	37	0
// OP_STORE_V	4913	4	0
// OP_STORE_V	12054	7	0
// OP_CALL2	519	0	0
// OP_STORE_V	3176	4	0
// OP_STORE_V	12055	7	0
// OP_CALL2	519	0	0
// OP_STORE_V	12056	4	0
// OP_STORE_V	12057	7	0
// OP_CALL2	519	0	0
// OP_STORE_V	12058	4	0
// OP_STORE_V	12059	7	0
// OP_CALL2	519	0	0
// OP_STORE_V	12060	4	0
// OP_STORE_V	12061	7	0
// OP_CALL2	519	0	0
// OP_STORE_V	12062	4	0
// OP_STORE_V	12061	7	0
// OP_CALL2	519	0	0
// OP_STORE_V	12063	4	0
// OP_STORE_V	12064	7	0
// OP_CALL2	519	0	0
// OP_STORE_V	1171	4	0
// OP_STORE_V	12065	7	0
// OP_CALL2	519	0	0
// OP_STORE_V	12066	4	0
// OP_STORE_V	1172	7	0
// OP_CALL2	519	0	0
// OP_STORE_V	5582	4	0
// OP_STORE_V	12067	7	0
// OP_CALL2	519	0	0
// OP_STORE_V	1173	4	0
// OP_STORE_V	1172	7	0
// OP_CALL2	519	0	0
// OP_STORE_F	696	723	0
// OP_STORE_F	31	727	0
// OP_CALL0	9174	0	0
// OP_STORE_V	5265	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12068	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	8357	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12069	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12070	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12071	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12072	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12073	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12074	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12075	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12076	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	7562	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12077	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12078	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12079	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12080	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12081	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12082	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	8805	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	8639	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	8534	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12083	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12084	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	9062	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12085	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12086	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12087	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12088	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12089	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12090	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12091	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12092	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12093	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12094	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12095	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12096	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12097	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12098	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12099	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12100	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12101	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	9218	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12102	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12103	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12104	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12105	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12106	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	1814	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	1815	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12107	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12108	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4173	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4167	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4172	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12109	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	5215	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	6226	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	5907	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	5904	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12110	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12111	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12112	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12113	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12114	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12115	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3577	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12116	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12117	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12118	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	2569	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	2232	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	9707	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	9032	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	9033	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	8241	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	2235	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	2238	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	2239	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3578	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3631	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12119	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	2582	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	6805	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	2274	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12120	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	10035	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	6169	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	5967	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12121	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12122	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12123	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12124	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12125	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3451	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	5216	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	2230	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3453	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3455	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3457	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3459	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	5901	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	2583	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	2586	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	2588	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	2590	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	5361	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3649	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3650	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	10108	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4189	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4010	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4012	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4014	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4016	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4018	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4020	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4022	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4024	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4026	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4028	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4030	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4032	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4034	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4036	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4038	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4040	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4043	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4045	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4047	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4051	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3985	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3988	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3990	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3992	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3994	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3996	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3998	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4000	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4004	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4005	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4081	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4084	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4086	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4088	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4090	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4092	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4094	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4096	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4100	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4101	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3960	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3963	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3965	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3967	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3969	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3971	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3973	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3976	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3980	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3982	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4056	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4059	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4061	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4063	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4065	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4067	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4069	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4071	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4075	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	4076	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3874	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3873	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3877	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3895	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3889	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	3900	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12126	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12127	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12128	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12129	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12130	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12131	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	10803	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	9469	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12132	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12133	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12134	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12135	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	9570	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12136	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	10156	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	10089	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	9821	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12137	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12138	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12139	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	3487	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	6190	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	9164	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	9281	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12140	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	954	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	1046	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	6832	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	6858	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	7065	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	7034	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	7047	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12141	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	987	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	1012	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	1265	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	1528	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	9899	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	1283	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	1367	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	11162	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12142	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12143	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12144	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12145	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	8835	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12146	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12147	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	6299	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	6032	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	989	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12148	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12149	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12150	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12151	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12152	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12153	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	956	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12154	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12155	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12156	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12157	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12158	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12159	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	1048	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12160	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12161	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12162	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12163	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12164	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12165	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	1014	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12166	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12167	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12168	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12169	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12170	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	12171	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	817	4	0
// OP_STORE_V	3958	7	0
// OP_CALL2	493	0	0
// OP_STORE_V	819	4	0
// OP_STORE_V	12172	7	0
// OP_CALL2	493	0	0
// OP_STORE_V	821	4	0
// OP_STORE_V	12173	7	0
// OP_CALL2	493	0	0
// OP_STORE_V	823	4	0
// OP_STORE_V	12174	7	0
// OP_CALL2	493	0	0
// OP_STORE_V	825	4	0
// OP_STORE_V	12175	7	0
// OP_CALL2	493	0	0
// OP_STORE_V	827	4	0
// OP_STORE_V	12176	7	0
// OP_CALL2	493	0	0
// OP_STORE_V	829	4	0
// OP_STORE_V	12177	7	0
// OP_CALL2	493	0	0
// OP_STORE_V	839	4	0
// OP_STORE_V	12178	7	0
// OP_CALL2	493	0	0
// OP_STORE_V	843	4	0
// OP_STORE_V	12179	7	0
// OP_CALL2	493	0	0
// OP_STORE_V	847	4	0
// OP_STORE_V	12180	7	0
// OP_CALL2	493	0	0
// OP_STORE_V	855	4	0
// OP_STORE_V	12181	7	0
// OP_CALL2	493	0	0
// OP_STORE_V	831	4	0
// OP_STORE_V	12182	7	0
// OP_CALL2	493	0	0
// OP_STORE_V	12183	4	0
// OP_STORE_V	4054	7	0
// OP_CALL2	493	0	0
// OP_LOAD_F	30	644	12184
// OP_BITAND	12184	701	12185
// OP_IFNOT	12185	3	0
// OP_BITOR	723	701	12186
// OP_STORE_F	12186	723	0
// OP_NOT_F	35	0	12187
// OP_NOT_F	36	0	12188
// OP_AND	12187	12188	12189
// OP_IFNOT	12189	53	0
// OP_CALL0	466	0	0
// OP_MUL_F	1	827	12190
// OP_STORE_F	12190	12047	0
// OP_LE	12047	819	12191
// OP_IFNOT	12191	9	0
// OP_STORE_V	12192	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	926	4	0
// OP_STORE_V	12192	7	0
// OP_STORE_V	819	10	0
// OP_STORE_V	339	13	0
// OP_CALL4	521	0	0
// OP_GOTO	40	0	0
// OP_LE	12047	821	12193
// OP_IFNOT	12193	9	0
// OP_STORE_V	12194	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	926	4	0
// OP_STORE_V	12194	7	0
// OP_STORE_V	819	10	0
// OP_STORE_V	339	13	0
// OP_CALL4	521	0	0
// OP_GOTO	30	0	0
// OP_LE	12047	823	12195
// OP_IFNOT	12195	9	0
// OP_STORE_V	12196	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	926	4	0
// OP_STORE_V	12196	7	0
// OP_STORE_V	819	10	0
// OP_STORE_V	339	13	0
// OP_CALL4	521	0	0
// OP_GOTO	20	0	0
// OP_LE	12047	825	12197
// OP_IFNOT	12197	9	0
// OP_STORE_V	12198	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	926	4	0
// OP_STORE_V	12198	7	0
// OP_STORE_V	819	10	0
// OP_STORE_V	339	13	0
// OP_CALL4	521	0	0
// OP_GOTO	10	0	0
// OP_LE	12047	827	12199
// OP_IFNOT	12199	8	0
// OP_STORE_V	12200	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	926	4	0
// OP_STORE_V	12200	7	0
// OP_STORE_V	819	10	0
// OP_STORE_V	339	13	0
// OP_CALL4	521	0	0
// OP_STORE_F	817	738	0
// OP_STORE_F	817	737	0
// OP_LOAD_S	30	130	12201
// OP_EQ_S	12201	12006	12202
// OP_IFNOT	12202	2	0
// OP_RETURN	0	0	0
// OP_LOAD_S	30	687	12203
// OP_EQ_S	12203	7086	12204
// OP_IFNOT	12204	7	0
// OP_LT	37	831	12205
// OP_GT	37	837	12206
// OP_OR	12205	12206	12207
// OP_IFNOT	12207	2	0
// OP_STORE_F	819	738	0
// OP_GOTO	46	0	0
// OP_LOAD_S	30	687	12208
// OP_EQ_S	12208	12209	12210
// OP_IFNOT	12210	8	0
// OP_LT	37	831	12211
// OP_GT	37	837	12212
// OP_OR	12211	12212	12213
// OP_IFNOT	12213	3	0
// OP_STORE_F	819	738	0
// OP_STORE_F	717	737	0
// OP_GOTO	36	0	0
// OP_LOAD_S	30	687	12214
// OP_EQ_S	12214	7092	12215
// OP_IFNOT	12215	7	0
// OP_LT	37	831	12216
// OP_GT	37	837	12217
// OP_OR	12216	12217	12218
// OP_IFNOT	12218	2	0
// OP_STORE_F	821	738	0
// OP_GOTO	27	0	0
// OP_LOAD_S	30	687	12219
// OP_EQ_S	12219	7098	12220
// OP_IFNOT	12220	3	0
// OP_STORE_F	823	738	0
// OP_GOTO	22	0	0
// OP_LOAD_S	30	687	12221
// OP_EQ_S	12221	7101	12222
// OP_IFNOT	12222	6	0
// OP_NE_F	37	837	12223
// OP_IFNOT	12223	3	0
// OP_STORE_F	825	738	0
// OP_STORE_F	817	743	0
// OP_GOTO	14	0	0
// OP_LOAD_S	30	687	12224
// OP_EQ_S	12224	7104	12225
// OP_IFNOT	12225	5	0
// OP_NE_F	37	837	12226
// OP_IFNOT	12226	2	0
// OP_STORE_F	827	738	0
// OP_GOTO	7	0	0
// OP_LOAD_S	30	687	12227
// OP_EQ_S	12227	7107	12228
// OP_IFNOT	12228	4	0
// OP_NE_F	37	837	12229
// OP_IFNOT	12229	2	0
// OP_STORE_F	829	738	0
// OP_EQ_F	738	817	12230
// OP_IFNOT	12230	2	0
// OP_STORE_F	823	738	0
// OP_DONE	0	0	0
void () worldspawn = 
{
    local string str;
    local float rnd;
    lastspawn = world;
    InitBodyQue();
    
    if(init_done != 1.000)
    {
        inter_race_time = 5.000;
        SetInterRaceTime = 0.000;
        init_done = 1.000;
    }
    
    num_markers = 0.000;
    num_bots = 0.000;
    if(self.model == "maps/e1m8.bsp")
    {
        cvar_set("sv_gravity", "100");
    }
    else
    {
        cvar_set("sv_gravity", "800");
    }
    
    first_startfinish_flag = 1.000;
    race_finish_time = 0.000;
    teamplay = cvar("teamplay");
    cvar_set("sv_maxspeed", "2000");
    cvar_set("sv_gravity", "600");
    cvar_set("sv_friction", "1.7");
    cvar_set("sv_accelerate", "0.8");
    cvar_set("cl_movespeedkey", "1");
    cvar_set("cl_anglespeedkey", "1");
    cvar_set("cl_forwardspeed", "1700");
    cvar_set("cl_rollangle", "2.5");
    cvar_set("cl_sidespeed", "0");
    cvar_set("cl_backspeed", "300");
    cvar_set("cl_bob", "0");
    global_racing_flags = QR_NO_STARTFINISH;
    race_start_time = time;
    W_Precache();
    precache_sound("demon/dland2.wav");
    precache_sound("misc/h2ohit1.wav");
    precache_sound("items/itembk2.wav");
    precache_sound("player/plyrjmp8.wav");
    precache_sound("player/land.wav");
    precache_sound("player/land2.wav");
    precache_sound("player/drown1.wav");
    precache_sound("player/drown2.wav");
    precache_sound("player/gasp1.wav");
    precache_sound("player/gasp2.wav");
    precache_sound("player/h2odeath.wav");
    precache_sound("misc/talk.wav");
    precache_sound("player/teledth1.wav");
    precache_sound("misc/r_tele1.wav");
    precache_sound("misc/r_tele2.wav");
    precache_sound("misc/r_tele3.wav");
    precache_sound("misc/r_tele4.wav");
    precache_sound("misc/r_tele5.wav");
    precache_sound("weapons/lock4.wav");
    precache_sound("weapons/pkup.wav");
    precache_sound("items/armor1.wav");
    precache_sound("weapons/lhit.wav");
    precache_sound("weapons/lstart.wav");
    precache_sound("items/damage3.wav");
    precache_sound("misc/power.wav");
    precache_sound("player/gib.wav");
    precache_sound("player/udeath.wav");
    precache_sound("player/tornoff2.wav");
    precache_sound("player/pain1.wav");
    precache_sound("player/pain2.wav");
    precache_sound("player/pain3.wav");
    precache_sound("player/pain4.wav");
    precache_sound("player/pain5.wav");
    precache_sound("player/pain6.wav");
    precache_sound("player/death1.wav");
    precache_sound("player/death2.wav");
    precache_sound("player/death3.wav");
    precache_sound("player/death4.wav");
    precache_sound("player/death5.wav");
    precache_sound("weapons/ax1.wav");
    precache_sound("player/axhit1.wav");
    precache_sound("player/axhit2.wav");
    precache_sound("player/h2ojump.wav");
    precache_sound("player/slimbrn2.wav");
    precache_sound("player/inh2o.wav");
    precache_sound("player/inlava.wav");
    precache_sound("misc/outwater.wav");
    precache_sound("player/lburn1.wav");
    precache_sound("player/lburn2.wav");
    precache_sound("misc/water1.wav");
    precache_sound("misc/water2.wav");
    precache_sound("rally/rev2.wav");
    precache_sound("rally/rev3.wav");
    precache_sound("rally/rev4.wav");
    precache_sound("rally/tone1.wav");
    precache_sound("rally/meepmeep.wav");
    precache_sound("rally/lapcom.wav");
    precache_sound("rally/start.wav");
    precache_sound("rally/start2.wav");
    precache_sound("rally/roll.wav");
    precache_sound("rally/crash.wav");
    precache_sound("rally/crash1.wav");
    precache_sound("rally/crash2.wav");
    precache_sound("rally/crash3.wav");
    precache_sound("rally/crash4.wav");
    precache_sound("rally/crash5.wav");
    precache_sound("rally/slide.wav");
    precache_sound("rally/skidtarm.wav");
    precache_sound("rally/skidgrav.wav");
    precache_sound("rally/skidmud.wav");
    precache_sound("rally/bangbang.wav");
    precache_sound("rally/minebeep.wav");
    precache_sound("items/protect.wav");
    precache_sound("items/protect2.wav");
    precache_sound("items/protect3.wav");
    precache_sound("rally/process/bang01.wav");
    precache_sound("rally/process/bang02.wav");
    precache_sound("rally/process/bang03.wav");
    precache_sound("rally/process/crsh01.wav");
    precache_sound("rally/process/elect02.wav");
    precache_sound("rally/process/drft01.wav");
    precache_sound("rally/process/drft02.wav");
    precache_sound("rally/process/htcone01.wav");
    precache_sound("rally/process/rolltest.wav");
    precache_sound("rally/process/buzztst1.wav");
    precache_sound("rally/process/spark4.wav");
    precache_sound("rally/voice/win3.wav");
    precache_sound("rally/voice/gotst01.wav");
    precache_sound("rally/voice/lapcm01.wav");
    precache_sound("rally/voice/tone01.wav");
    precache_sound("rally/voice/tone04.wav");
    precache_sound("rally/voice/tone05.wav");
    precache_sound("rally/voice/checkpnt.wav");
    precache_sound("rally/nexus/wall.wav");
    precache_sound("rally/nexus/horn.wav");
    precache_sound("rally/ray/susp1.wav");
    precache_sound("rally/ray/crash2.wav");
    precache_sound("rally/ray/crash3.wav");
    precache_sound("rally/ray/crash4.wav");
    precache_sound("rally/ray/crash5.wav");
    precache_sound("rally/ray/engstart.wav");
    precache_sound("rally/ray/skidgrav.wav");
    precache_sound("rally/ray/screech1.wav");
    precache_sound("rally/ray/screech2.wav");
    precache_sound("rally/ray/screech3.wav");
    precache_sound("rally/ray/screech4.wav");
    precache_sound("rally/dude/sevpain1.wav");
    precache_sound("rally/dude/sevpain2.wav");
    precache_sound("enforcer/enfire.wav");
    precache_sound("rally/engine/suidle.wav");
    precache_sound("rally/engine/su01.wav");
    precache_sound("rally/engine/su02.wav");
    precache_sound("rally/engine/su03.wav");
    precache_sound("rally/engine/su04.wav");
    precache_sound("rally/engine/su05.wav");
    precache_sound("rally/engine/su06.wav");
    precache_sound("rally/engine/su07.wav");
    precache_sound("rally/engine/su08.wav");
    precache_sound("rally/engine/su09.wav");
    precache_sound("rally/engine/su10.wav");
    precache_sound("rally/engine/su11.wav");
    precache_sound("rally/engine/su12.wav");
    precache_sound("rally/engine/su13.wav");
    precache_sound("rally/engine/su14.wav");
    precache_sound("rally/engine/su15.wav");
    precache_sound("rally/engine/su16.wav");
    precache_sound("rally/engine/su17.wav");
    precache_sound("rally/engine/su18.wav");
    precache_sound("rally/engine/su19.wav");
    precache_sound("rally/engine/su20.wav");
    precache_sound("rally/engine/test01.wav");
    precache_sound("rally/engine/test02.wav");
    precache_sound("rally/engine/test03.wav");
    precache_sound("rally/engine/test04.wav");
    precache_sound("rally/engine/test05.wav");
    precache_sound("rally/engine/test06.wav");
    precache_sound("rally/engine/test07.wav");
    precache_sound("rally/engine/test08.wav");
    precache_sound("rally/engine/test09.wav");
    precache_sound("rally/engine/test10.wav");
    precache_sound("rally/engine/tri01.wav");
    precache_sound("rally/engine/tri02.wav");
    precache_sound("rally/engine/tri03.wav");
    precache_sound("rally/engine/tri04.wav");
    precache_sound("rally/engine/tri05.wav");
    precache_sound("rally/engine/tri06.wav");
    precache_sound("rally/engine/tri07.wav");
    precache_sound("rally/engine/tri08.wav");
    precache_sound("rally/engine/tri09.wav");
    precache_sound("rally/engine/tri10.wav");
    precache_sound("rally/engine/ma01.wav");
    precache_sound("rally/engine/ma02.wav");
    precache_sound("rally/engine/ma03.wav");
    precache_sound("rally/engine/ma04.wav");
    precache_sound("rally/engine/ma05.wav");
    precache_sound("rally/engine/ma06.wav");
    precache_sound("rally/engine/ma07.wav");
    precache_sound("rally/engine/ma08.wav");
    precache_sound("rally/engine/ma09.wav");
    precache_sound("rally/engine/ma10.wav");
    precache_sound("rally/engine/aa01.wav");
    precache_sound("rally/engine/aa02.wav");
    precache_sound("rally/engine/aa03.wav");
    precache_sound("rally/engine/aa04.wav");
    precache_sound("rally/engine/aa05.wav");
    precache_sound("rally/engine/aa06.wav");
    precache_sound("rally/engine/aa07.wav");
    precache_sound("rally/engine/aa08.wav");
    precache_sound("rally/engine/aa09.wav");
    precache_sound("rally/engine/aa10.wav");
    precache_sound("rally/engine/rev/highrev.wav");
    precache_sound("rally/engine/rev/highrev2.wav");
    precache_sound("rally/engine/rev/takeoff.wav");
    precache_sound("rally/engine/rev/backrev.wav");
    precache_sound("rally/engine/rev/backrev2.wav");
    precache_sound("rally/engine/rev/backrev3.wav");
    precache_model("progs/player.mdl");
    precache_model("progs/eyes.mdl");
    precache_model("progs/h_player.mdl");
    precache_model("progs/gib1.mdl");
    precache_model("progs/gib2.mdl");
    precache_model("progs/gib3.mdl");
    precache_model("progs/s_bubble.spr");
    precache_model("progs/s_explod.spr");
    precache_model("progs/bolt.mdl");
    precache_model("progs/bolt2.mdl");
    precache_model("progs/bolt3.mdl");
    precache_model("progs/lavaball.mdl");
    precache_model("models/missile.mdl");
    precache_model("progs/grenade.mdl");
    precache_model("progs/spike.mdl");
    precache_model("progs/laser.mdl");
    precache_model("models/detnator.mdl");
    precache_model("progs/s_spike.mdl");
    precache_model("models/w_mine.mdl");
    precache_model("models/w_detntr.mdl");
    precache_model("models/gibs.mdl");
    precache_model("models/trophy.mdl");
    precache_model("progs/backpack.mdl");
    precache_model("progs/zom_gib.mdl");
    precache_model("progs/v_light.mdl");
    precache_model("models/sumacar.mdl");
    precache_model("models/triton.mdl");
    precache_model("models/cone.mdl");
    precache_model("models/baracade.mdl");
    precache_model("models/stopsign.mdl");
    precache_model("models/stoptop.mdl");
    precache_model("models/stoppost.mdl");
    precache_model("models/roobar.mdl");
    precache_model("models/zumacar.mdl");
    precache_model("models/mycar.mdl");
    precache_model("models/fwhl.mdl");
    precache_model("models/whl.mdl");
    precache_model("models/mine.mdl");
    precache_model("models/null.mdl");
    precache_model("models/wheel.mdl");
    precache_model("models/wheelsm.mdl");
    precache_model("models/qr_rock.mdl");
    precache_model("models/qr_rock2.mdl");
    precache_model("models/qr_nail2.mdl");
    precache_model("models/qr_light.mdl");
    precache_model("maps/b_nail0.bsp");
    precache_model("models/kangaroo.mdl");
    precache_model("models/dude.mdl");
    precache_model("models/marker.mdl");
    precache_model("models/finish.mdl");
    precache_model("models/zumabase.mdl");
    precache_model("models/zumaroo.mdl");
    precache_model("models/zumalght.mdl");
    precache_model("models/zumanail.mdl");
    precache_model("models/zumamine.mdl");
    precache_model("models/zumadetn.mdl");
    precache_model("models/zumarock.mdl");
    precache_model("models/sumabase.mdl");
    precache_model("models/sumaroo.mdl");
    precache_model("models/sumalght.mdl");
    precache_model("models/sumanail.mdl");
    precache_model("models/sumamine.mdl");
    precache_model("models/sumadetn.mdl");
    precache_model("models/sumarock.mdl");
    precache_model("models/tritbase.mdl");
    precache_model("models/tritroo.mdl");
    precache_model("models/tritlght.mdl");
    precache_model("models/tritnail.mdl");
    precache_model("models/tritmine.mdl");
    precache_model("models/tritdetn.mdl");
    precache_model("models/tritrock.mdl");
    precache_model("models/mgnabase.mdl");
    precache_model("models/mgnaroo.mdl");
    precache_model("models/mgnalght.mdl");
    precache_model("models/mgnanail.mdl");
    precache_model("models/mgnamine.mdl");
    precache_model("models/mgnadetn.mdl");
    precache_model("models/mgnarock.mdl");
    lightstyle(0.000, "m");
    lightstyle(1.000, "mmnmmommommnonmmonqnmmo");
    lightstyle(2.000, "abcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcba");
    lightstyle(3.000, "mmmmmaaaaammmmmaaaaaabcdefgabcdefg");
    lightstyle(4.000, "mamamamamama");
    lightstyle(5.000, "jklmnopqrstuvwxyzyxwvutsrqponmlkj");
    lightstyle(6.000, "nmonqnmomnmomomno");
    lightstyle(7.000, "mmmaaaabcdefgmmmmaaaammmaamm");
    lightstyle(8.000, "mmmaaammmaaammmabcdefaaaammmmabcdefmmmaaaa");
    lightstyle(9.000, "aaaaaaaazzzzzzzz");
    lightstyle(10.000, "mmamammmmammamamaaamammma");
    lightstyle(11.000, "abcdefghijklmnopqrrqponmlkjihgfedcba");
    lightstyle(63.000, "a");
    
    if(world.racing_flags & QR_NO_SIDEWAYS_ROLL)
    {
        global_racing_flags = global_racing_flags | QR_NO_SIDEWAYS_ROLL;
    }
    
    
    if(!deathmatch && !coop)
    {
        rnd = random() * 5.000;
        if(rnd <= 1.000)
        {
            precache_sound("rally/music/funk.wav");
            ambientsound('0.000 0.000 0.000', "rally/music/funk.wav", 1.000, ATTN_NONE);
        }
        else
        {
            if(rnd <= 2.000)
            {
                precache_sound("rally/music/rock.wav");
                ambientsound('0.000 0.000 0.000', "rally/music/rock.wav", 1.000, ATTN_NONE);
            }
            else
            {
                if(rnd <= 3.000)
                {
                    precache_sound("rally/music/soft.wav");
                    ambientsound('0.000 0.000 0.000', "rally/music/soft.wav", 1.000, ATTN_NONE);
                }
                else
                {
                    if(rnd <= 4.000)
                    {
                        precache_sound("rally/music/hiphop.wav");
                        ambientsound('0.000 0.000 0.000', "rally/music/hiphop.wav", 1.000, ATTN_NONE);
                    }
                    else
                    {
                        
                        if(rnd <= 5.000)
                        {
                            precache_sound("rally/music/indust.wav");
                            ambientsound('0.000 0.000 0.000', "rally/music/indust.wav", 1.000, ATTN_NONE);
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
    }
    
    rally_type_index = 0.000;
    racing_type = 0.000;
    
    if(world.model == "maps/start.bsp")
    {
        return;
    }
    
    if(world.race_type == "racing")
    {
        
        if((teamplay < 11.000) || (teamplay > 13.000))
        {
            rally_type_index = 1.000;
        }
        
    }
    else
    {
        if(world.race_type == "racing_timetrial")
        {
            
            if((teamplay < 11.000) || (teamplay > 13.000))
            {
                rally_type_index = 1.000;
                racing_type = RT_TIME_TRIAL;
            }
            
        }
        else
        {
            if(world.race_type == "racing_dm")
            {
                
                if((teamplay < 11.000) || (teamplay > 13.000))
                {
                    rally_type_index = 2.000;
                }
                
            }
            else
            {
                if(world.race_type == "dm")
                {
                    rally_type_index = 3.000;
                }
                else
                {
                    if(world.race_type == "cult_kill")
                    {
                        
                        if(teamplay != 13.000)
                        {
                            rally_type_index = 4.000;
                            cult_kills = 0.000;
                        }
                        
                    }
                    else
                    {
                        if(world.race_type == "gib_duke")
                        {
                            
                            if(teamplay != 13.000)
                            {
                                rally_type_index = 5.000;
                            }
                            
                        }
                        else
                        {
                            
                            if(world.race_type == "last_man")
                            {
                                
                                if(teamplay != 13.000)
                                {
                                    rally_type_index = 6.000;
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
    }
    
    
    if(rally_type_index == 0.000)
    {
        rally_type_index = 3.000;
    }
    
};

// StartFrame
// function begins at statement 16720, parm_start=12231
// OP_EQ_F	37	817	12235
// OP_IFNOT	12235	4	0
// OP_STORE_V	12053	4	0
// OP_CALL1	501	0	0
// OP_STORE_F	1	37	0
// OP_STORE_V	4339	4	0
// OP_CALL1	501	0	0
// OP_STORE_F	1	363	0
// OP_ADD_F	362	819	12236
// OP_STORE_F	12236	362	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	10053	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	12231	0
// OP_NE_E	12231	30	12237
// OP_IFNOT	12237	30	0
// OP_LOAD_F	12231	592	12238
// OP_NE_F	12238	817	12239
// OP_IFNOT	12239	14	0
// OP_ADDRESS	12231	567	12240
// OP_LOAD_V	12231	113	12243
// OP_STOREP_V	12243	12240	0
// OP_LOAD_V	12231	113	12246
// OP_STORE_V	12246	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	12232	0
// OP_ADDRESS	12231	117	12249
// OP_STORE_V	12232	4	0
// OP_CALL1	506	0	0
// OP_STOREP_V	1	12249	0
// OP_ADDRESS	12231	592	12252
// OP_STOREP_F	817	12252	0
// OP_ADDRESS	12231	116	12253
// OP_LOAD_F	12231	570	12254
// OP_STORE_V	3176	4	0
// OP_CALL1	501	0	0
// OP_MUL_F	1	32	12255
// OP_ADD_F	12254	12255	12256
// OP_STOREP_F	12256	12253	0
// OP_STORE_V	12231	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	10053	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	12231	0
// OP_GOTO	-30	0	0
// OP_DONE	0	0	0
void () StartFrame = 
{
    local entity laser;
    local vector vect;
    
    if(teamplay == 0.000)
    {
        teamplay = cvar("teamplay");
    }
    
    skill = cvar("skill");
    framecount = framecount + 1.000;
    laser = find(world, classname, "laser");
    
    while(laser != world)
    {
        
        if(laser.last_jump_z != 0.000)
        {
            laser.old_velocity = laser.velocity;
            vect = normalize(laser.velocity);
            laser.angles = vectoangles(vect);
            laser.last_jump_z = 0.000;
        }
        
        laser.velocity_z = laser.old_velocity_z + (cvar("sv_gravity") * frametime);
        laser = find(laser, classname, "laser");
    }
    
};

entity bodyque_head;
// bodyque
// function begins at statement 16767, parm_start=12259
// OP_DONE	0	0	0
void () bodyque = 
{
};

// InitBodyQue
// function begins at statement 16768, parm_start=12259
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	12257	0
// OP_ADDRESS	12257	129	12260
// OP_STOREP_S	12261	12260	0
// OP_ADDRESS	12257	201	12262
// OP_CALL0	473	0	0
// OP_STOREP_ENT	1	12262	0
// OP_LOAD_ENT	12257	201	12263
// OP_ADDRESS	12263	129	12264
// OP_STOREP_S	12261	12264	0
// OP_LOAD_ENT	12257	201	12265
// OP_ADDRESS	12265	201	12266
// OP_CALL0	473	0	0
// OP_STOREP_ENT	1	12266	0
// OP_LOAD_ENT	12257	201	12267
// OP_LOAD_ENT	12267	201	12268
// OP_ADDRESS	12268	129	12269
// OP_STOREP_S	12261	12269	0
// OP_LOAD_ENT	12257	201	12270
// OP_LOAD_ENT	12270	201	12271
// OP_ADDRESS	12271	201	12272
// OP_CALL0	473	0	0
// OP_STOREP_ENT	1	12272	0
// OP_LOAD_ENT	12257	201	12273
// OP_LOAD_ENT	12273	201	12274
// OP_LOAD_ENT	12274	201	12275
// OP_ADDRESS	12275	129	12276
// OP_STOREP_S	12261	12276	0
// OP_LOAD_ENT	12257	201	12277
// OP_LOAD_ENT	12277	201	12278
// OP_LOAD_ENT	12278	201	12279
// OP_ADDRESS	12279	201	12280
// OP_STOREP_ENT	12257	12280	0
// OP_DONE	0	0	0
void () InitBodyQue = 
{
    local entity e;
    bodyque_head = spawn();
    bodyque_head.classname = "bodyque";
    bodyque_head.owner = spawn();
    bodyque_head.owner.classname = "bodyque";
    bodyque_head.owner.owner = spawn();
    bodyque_head.owner.owner.classname = "bodyque";
    bodyque_head.owner.owner.owner = spawn();
    bodyque_head.owner.owner.owner.classname = "bodyque";
    bodyque_head.owner.owner.owner.owner = bodyque_head;
};

// CopyToBodyQue
// function begins at statement 16802, parm_start=12282
// OP_ADDRESS	12257	117	12283
// OP_LOAD_V	12282	117	12286
// OP_STOREP_V	12286	12283	0
// OP_ADDRESS	12257	130	12289
// OP_LOAD_S	12282	130	12290
// OP_STOREP_S	12290	12289	0
// OP_ADDRESS	12257	93	12291
// OP_LOAD_F	12282	93	12292
// OP_STOREP_F	12292	12291	0
// OP_ADDRESS	12257	131	12293
// OP_LOAD_F	12282	131	12294
// OP_STOREP_F	12294	12293	0
// OP_ADDRESS	12257	183	12295
// OP_LOAD_F	12282	183	12296
// OP_STOREP_F	12296	12295	0
// OP_ADDRESS	12257	103	12297
// OP_LOAD_F	12282	103	12298
// OP_STOREP_F	12298	12297	0
// OP_ADDRESS	12257	113	12299
// OP_LOAD_V	12282	113	12302
// OP_STOREP_V	12302	12299	0
// OP_ADDRESS	12257	182	12305
// OP_STOREP_F	817	12305	0
// OP_STORE_V	12257	4	0
// OP_LOAD_V	12282	105	12306
// OP_STORE_V	12306	7	0
// OP_CALL2	462	0	0
// OP_STORE_V	12257	4	0
// OP_LOAD_V	12282	134	12309
// OP_STORE_V	12309	7	0
// OP_LOAD_V	12282	138	12312
// OP_STORE_V	12312	10	0
// OP_CALL3	464	0	0
// OP_LOAD_ENT	12257	201	12315
// OP_STORE_ENT	12315	12257	0
// OP_DONE	0	0	0
void (entity ent) CopyToBodyQue = 
{
    bodyque_head.angles = ent.angles;
    bodyque_head.model = ent.model;
    bodyque_head.modelindex = ent.modelindex;
    bodyque_head.frame = ent.frame;
    bodyque_head.colormap = ent.colormap;
    bodyque_head.movetype = ent.movetype;
    bodyque_head.velocity = ent.velocity;
    bodyque_head.flags = 0.000;
    setorigin(bodyque_head, ent.origin);
    setsize(bodyque_head, ent.mins, ent.maxs);
    bodyque_head = bodyque_head.owner;
};

void () player_pain;
void () player_stand1;
void (vector org, entity death_owner) spawn_tdeath;
float modelindex_eyes;
float modelindex_player;
float intermission_running;
float intermission_exittime;
// info_intermission
// function begins at statement 16838, parm_start=12324
// OP_DONE	0	0	0
void () info_intermission = 
{
};

// SetChangeParms
// function begins at statement 16839, parm_start=12324
// OP_LOAD_F	28	152	12324
// OP_LE	12324	817	12325
// OP_IFNOT	12325	3	0
// OP_CALL0	90	0	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	162	12326
// OP_LOAD_F	28	162	12327
// OP_LOAD_F	28	162	12328
// OP_BITOR	284	285	12329
// OP_BITOR	12329	286	12330
// OP_BITOR	12330	287	12331
// OP_BITOR	12331	288	12332
// OP_BITOR	12332	289	12333
// OP_BITAND	12328	12333	12334
// OP_SUB_F	12327	12334	12335
// OP_STOREP_F	12335	12326	0
// OP_LOAD_F	28	152	12336
// OP_GT	12336	1957	12337
// OP_IFNOT	12337	3	0
// OP_ADDRESS	28	152	12338
// OP_STOREP_F	1957	12338	0
// OP_LOAD_F	28	152	12339
// OP_LT	12339	2611	12340
// OP_IFNOT	12340	3	0
// OP_ADDRESS	28	152	12341
// OP_STOREP_F	2611	12341	0
// OP_LOAD_F	28	162	12342
// OP_STORE_F	12342	43	0
// OP_LOAD_F	28	152	12343
// OP_STORE_F	12343	44	0
// OP_LOAD_F	28	188	12344
// OP_STORE_F	12344	45	0
// OP_LOAD_F	28	158	12345
// OP_LT	12345	1380	12346
// OP_IFNOT	12346	3	0
// OP_STORE_F	1380	46	0
// OP_GOTO	3	0	0
// OP_LOAD_F	28	158	12347
// OP_STORE_F	12347	46	0
// OP_LOAD_F	28	159	12348
// OP_STORE_F	12348	47	0
// OP_LOAD_F	28	160	12349
// OP_STORE_F	12349	48	0
// OP_LOAD_F	28	161	12350
// OP_STORE_F	12350	49	0
// OP_LOAD_F	28	154	12351
// OP_STORE_F	12351	50	0
// OP_LOAD_F	28	187	12352
// OP_MUL_F	12352	1957	12353
// OP_STORE_F	12353	51	0
// OP_STORE_F	689	52	0
// OP_DONE	0	0	0
void () SetChangeParms = 
{
    
    if(self.health <= 0.000)
    {
        SetNewParms();
        return;
    }
    
    self.items = self.items - (self.items & (((((IT_KEY1 | IT_KEY2) | IT_INVISIBILITY) | IT_INVULNERABILITY) | IT_SUIT) | IT_QUAD));
    
    if(self.health > 100.000)
    {
        self.health = 100.000;
    }
    
    
    if(self.health < 50.000)
    {
        self.health = 50.000;
    }
    
    parm1 = self.items;
    parm2 = self.health;
    parm3 = self.armorvalue;
    if(self.ammo_shells < 25.000)
    {
        parm4 = 25.000;
    }
    else
    {
        parm4 = self.ammo_shells;
    }
    
    parm5 = self.ammo_nails;
    parm6 = self.ammo_rockets;
    parm7 = self.ammo_cells;
    parm8 = self.weapon;
    parm9 = self.armortype * 100.000;
    parm10 = challenge;
};

// SetNewParms
// function begins at statement 16891, parm_start=12354
// OP_LOAD_S	30	130	12354
// OP_EQ_S	12354	12006	12355
// OP_IFNOT	12355	3	0
// OP_STORE_F	263	43	0
// OP_GOTO	2	0	0
// OP_STORE_F	276	43	0
// OP_STORE_F	1957	44	0
// OP_STORE_F	817	45	0
// OP_STORE_F	817	46	0
// OP_STORE_F	817	47	0
// OP_STORE_F	817	48	0
// OP_STORE_F	817	49	0
// OP_STORE_F	817	50	0
// OP_STORE_F	817	51	0
// OP_STORE_F	689	52	0
// OP_NOT_F	35	0	12356
// OP_NOT_F	36	0	12357
// OP_AND	12356	12357	12358
// OP_IFNOT	12358	2	0
// OP_STORE_F	817	58	0
// OP_DONE	0	0	0
void () SetNewParms = 
{
    if(world.model == "maps/start.bsp")
    {
        parm1 = IT_SUPER_NAILGUN;
    }
    else
    {
        parm1 = IT_NULL;
    }
    
    parm2 = 100.000;
    parm3 = 0.000;
    parm4 = 0.000;
    parm5 = 0.000;
    parm6 = 0.000;
    parm7 = 0.000;
    parm8 = 0.000;
    parm9 = 0.000;
    parm10 = challenge;
    
    if(!deathmatch && !coop)
    {
        parm16 = 0.000;
    }
    
};

// DecodeLevelParms
// function begins at statement 16912, parm_start=12360
// OP_IFNOT	38	5	0
// OP_LOAD_S	30	130	12361
// OP_EQ_S	12361	12006	12362
// OP_IFNOT	12362	2	0
// OP_CALL0	90	0	0
// OP_ADDRESS	28	162	12363
// OP_STOREP_F	43	12363	0
// OP_ADDRESS	28	152	12364
// OP_STOREP_F	44	12364	0
// OP_ADDRESS	28	188	12365
// OP_STOREP_F	45	12365	0
// OP_ADDRESS	28	158	12366
// OP_STOREP_F	46	12366	0
// OP_ADDRESS	28	159	12367
// OP_STOREP_F	47	12367	0
// OP_ADDRESS	28	160	12368
// OP_STOREP_F	48	12368	0
// OP_ADDRESS	28	161	12369
// OP_STOREP_F	49	12369	0
// OP_ADDRESS	28	154	12370
// OP_STOREP_F	50	12370	0
// OP_ADDRESS	28	187	12371
// OP_MUL_F	51	9305	12372
// OP_STOREP_F	12372	12371	0
// OP_ADDRESS	28	688	12373
// OP_STOREP_F	52	12373	0
// OP_STORE_F	52	689	0
// OP_NOT_F	35	0	12374
// OP_NOT_F	36	0	12375
// OP_AND	12374	12375	12376
// OP_IFNOT	12376	3	0
// OP_ADDRESS	28	378	12377
// OP_STOREP_F	58	12377	0
// OP_EQ_F	689	1228	12378
// OP_IFNOT	12378	13	0
// OP_STORE_F	823	738	0
// OP_STORE_F	817	719	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	6002	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	12360	0
// OP_NE_E	12360	30	12379
// OP_IFNOT	12379	3	0
// OP_STORE_V	12360	4	0
// OP_CALL1	474	0	0
// OP_GOTO	34	0	0
// OP_GE	689	819	12380
// OP_IFNOT	12380	32	0
// OP_EQ_F	689	821	12381
// OP_IFNOT	12381	4	0
// OP_STORE_V	817	4	0
// OP_STORE_V	4054	7	0
// OP_CALL2	493	0	0
// OP_LOAD_S	30	130	12382
// OP_EQ_S	12382	12383	12384
// OP_IFNOT	12384	13	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	12360	0
// OP_ADDRESS	12360	148	12385
// OP_STOREP_FNC	7183	12385	0
// OP_ADDRESS	12360	150	12386
// OP_ADD_F	31	2869	12387
// OP_STOREP_F	12387	12386	0
// OP_ADDRESS	12360	201	12388
// OP_STOREP_ENT	28	12388	0
// OP_ADDRESS	12360	647	12389
// OP_STOREP_F	31	12389	0
// OP_GOTO	12	0	0
// OP_LOAD_ENT	28	554	12390
// OP_NE_E	12390	30	12391
// OP_IFNOT	12391	4	0
// OP_LOAD_ENT	28	554	12392
// OP_STORE_V	12392	4	0
// OP_CALL1	474	0	0
// OP_STORE_F	819	738	0
// OP_STORE_F	717	737	0
// OP_ADDRESS	28	157	12393
// OP_STOREP_F	794	12393	0
// OP_CALL0	7173	0	0
// OP_DONE	0	0	0
void () DecodeLevelParms = 
{
    local entity ent;
    
    if(serverflags)
    {
        
        if(world.model == "maps/start.bsp")
        {
            SetNewParms();
        }
        
    }
    
    self.items = parm1;
    self.health = parm2;
    self.armorvalue = parm3;
    self.ammo_shells = parm4;
    self.ammo_nails = parm5;
    self.ammo_rockets = parm6;
    self.ammo_cells = parm7;
    self.weapon = parm8;
    self.armortype = parm9 * 0.010;
    challenge = self.start_challenge = parm10;
    
    if(!deathmatch && !coop)
    {
        self.speed = parm16;
    }
    
    if(challenge == -1.000)
    {
        rally_type_index = 3.000;
        hold_flag = 0.000;
        ent = find(world, classname, "race_starter");
        
        if(ent != world)
        {
            remove(ent);
        }
        
    }
    else
    {
        
        if(challenge >= 1.000)
        {
            
            if(challenge == 2.000)
            {
                lightstyle(0.000, "a");
            }
            
            if(world.model == "maps/cult.bsp")
            {
                ent = spawn();
                ent.think = CultIntroThink;
                ent.nextthink = time + 0.100;
                ent.owner = self;
                ent.last_idle = time;
            }
            else
            {
                
                if(self.gun != world)
                {
                    remove(self.gun);
                }
                
                rally_type_index = 1.000;
                racing_type = RT_TIME_TRIAL;
                self.currentammo = TIMETRIAL_STARTTIME;
                RemoveAllWeaponItems();
            }
            
        }
        
    }
    
};

// FindIntermission
// function begins at statement 16993, parm_start=12395
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	12397	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	12395	0
// OP_IFNOT	12395	22	0
// OP_CALL0	466	0	0
// OP_MUL_F	1	825	12398
// OP_STORE_F	12398	12396	0
// OP_GT	12396	819	12399
// OP_IFNOT	12399	16	0
// OP_STORE_V	12395	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	12397	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	12395	0
// OP_NOT_ENT	12395	0	12400
// OP_IFNOT	12400	6	0
// OP_STORE_V	12395	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	12397	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	12395	0
// OP_SUB_F	12396	819	12401
// OP_STORE_F	12401	12396	0
// OP_GOTO	-16	0	0
// OP_RETURN	12395	0	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	7120	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	12395	0
// OP_IFNOT	12395	22	0
// OP_CALL0	466	0	0
// OP_MUL_F	1	825	12402
// OP_STORE_F	12402	12396	0
// OP_GT	12396	819	12403
// OP_IFNOT	12403	16	0
// OP_STORE_V	12395	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	7120	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	12395	0
// OP_NOT_ENT	12395	0	12404
// OP_IFNOT	12404	6	0
// OP_STORE_V	12395	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	7120	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	12395	0
// OP_SUB_F	12396	819	12405
// OP_STORE_F	12405	12396	0
// OP_GOTO	-16	0	0
// OP_RETURN	12395	0	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	7124	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	12395	0
// OP_IFNOT	12395	2	0
// OP_RETURN	12395	0	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	12406	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	12395	0
// OP_IFNOT	12395	2	0
// OP_RETURN	12395	0	0
// OP_STORE_V	12407	4	0
// OP_CALL1	470	0	0
// OP_DONE	0	0	0
entity () FindIntermission = 
{
    local entity spot;
    local float cyc;
    spot = find(world, classname, "info_intermission");
    
    if(spot)
    {
        cyc = random() * 4.000;
        
        while(cyc > 1.000)
        {
            spot = find(spot, classname, "info_intermission");
            
            if(!spot)
            {
                spot = find(spot, classname, "info_intermission");
            }
            
            cyc = cyc - 1.000;
        }
        
        return spot;
    }
    
    spot = find(world, classname, "rally_observer_cam");
    
    if(spot)
    {
        cyc = random() * 4.000;
        
        while(cyc > 1.000)
        {
            spot = find(spot, classname, "rally_observer_cam");
            
            if(!spot)
            {
                spot = find(spot, classname, "rally_observer_cam");
            }
            
            cyc = cyc - 1.000;
        }
        
        return spot;
    }
    
    spot = find(world, classname, "info_player_start");
    
    if(spot)
    {
        return spot;
    }
    
    spot = find(world, classname, "testplayerstart");
    
    if(spot)
    {
        return spot;
    }
    
    objerror("FindIntermission: no spot");
};

// GotoNextMap
// function begins at statement 17064, parm_start=12409
// OP_STORE_V	12409	4	0
// OP_CALL1	501	0	0
// OP_IFNOT	1	4	0
// OP_STORE_V	34	4	0
// OP_CALL1	518	0	0
// OP_GOTO	39	0	0
// OP_GT	689	817	12410
// OP_IFNOT	12410	25	0
// OP_LOAD_S	30	130	12411
// OP_EQ_S	12411	12006	12412
// OP_IFNOT	12412	3	0
// OP_STORE_S	12413	6130	0
// OP_GOTO	17	0	0
// OP_LOAD_S	30	130	12414
// OP_EQ_S	12414	5950	12415
// OP_IFNOT	12415	3	0
// OP_STORE_S	12416	6130	0
// OP_GOTO	12	0	0
// OP_LOAD_S	30	130	12417
// OP_EQ_S	12417	1946	12418
// OP_IFNOT	12418	3	0
// OP_STORE_S	12419	6130	0
// OP_GOTO	7	0	0
// OP_LOAD_S	30	130	12420
// OP_EQ_S	12420	5957	12421
// OP_IFNOT	12421	3	0
// OP_STORE_S	12422	6130	0
// OP_GOTO	2	0	0
// OP_STORE_S	12423	6130	0
// OP_STORE_V	6130	4	0
// OP_CALL1	518	0	0
// OP_GOTO	13	0	0
// OP_LOAD_S	30	686	12424
// OP_NE_S	12424	4128	12425
// OP_IFNOT	12425	5	0
// OP_LOAD_S	30	686	12426
// OP_STORE_V	12426	4	0
// OP_CALL1	518	0	0
// OP_GOTO	6	0	0
// OP_EQ_S	6130	4128	12427
// OP_IFNOT	12427	2	0
// OP_STORE_S	34	6130	0
// OP_STORE_V	6130	4	0
// OP_CALL1	518	0	0
// OP_DONE	0	0	0
void () GotoNextMap = 
{
    if(cvar("samelevel"))
    {
        changelevel(mapname);
    }
    else
    {
        if(challenge > 0.000)
        {
            if(world.model == "maps/start.bsp")
            {
                nextmap = "qrally01";
            }
            else
            {
                if(world.model == "maps/qrally01.bsp")
                {
                    nextmap = "qrally02";
                }
                else
                {
                    if(world.model == "maps/qrally02.bsp")
                    {
                        nextmap = "qrally03";
                    }
                    else
                    {
                        if(world.model == "maps/qrally03.bsp")
                        {
                            nextmap = "cult";
                        }
                        else
                        {
                            nextmap = "start";
                        }
                        
                    }
                    
                }
                
            }
            
            changelevel(nextmap);
        }
        else
        {
            if(world.nexttrack != "")
            {
                changelevel(world.nexttrack);
            }
            else
            {
                
                if(nextmap == "")
                {
                    nextmap = mapname;
                }
                
                changelevel(nextmap);
            }
            
        }
        
    }
    
};

// ExitIntermission
// function begins at statement 17109, parm_start=12429
// OP_IFNOT	35	3	0
// OP_CALL0	12408	0	0
// OP_RETURN	0	0	0
// OP_ADD_F	31	819	12429
// OP_STORE_F	12429	12322	0
// OP_ADD_F	12321	819	12430
// OP_STORE_F	12430	12321	0
// OP_EQ_F	12321	821	12431
// OP_IFNOT	12431	112	0
// OP_LOAD_S	30	130	12432
// OP_EQ_S	12432	12383	12433
// OP_IFNOT	12433	18	0
// OP_STORE_V	353	4	0
// OP_STORE_V	320	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	821	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	823	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	319	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	12434	7	0
// OP_CALL2	513	0	0
// OP_STORE_F	817	689	0
// OP_RETURN	0	0	0
// OP_LOAD_S	30	130	12435
// OP_EQ_S	12435	12013	12436
// OP_IFNOT	12436	29	0
// OP_STORE_V	353	4	0
// OP_STORE_V	320	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	821	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	823	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	12437	4	0
// OP_CALL1	501	0	0
// OP_NOT_F	1	0	12438
// OP_IFNOT	12438	8	0
// OP_STORE_V	353	4	0
// OP_STORE_V	319	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	12439	7	0
// OP_CALL2	513	0	0
// OP_GOTO	7	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	319	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	12440	7	0
// OP_CALL2	513	0	0
// OP_RETURN	0	0	0
// OP_GOTO	60	0	0
// OP_LOAD_S	30	130	12441
// OP_EQ_S	12441	12020	12442
// OP_IFNOT	12442	18	0
// OP_STORE_V	353	4	0
// OP_STORE_V	320	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	821	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	823	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	319	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	12443	7	0
// OP_CALL2	513	0	0
// OP_RETURN	0	0	0
// OP_GOTO	40	0	0
// OP_LOAD_S	30	130	12444
// OP_EQ_S	12444	12027	12445
// OP_IFNOT	12445	18	0
// OP_STORE_V	353	4	0
// OP_STORE_V	320	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	821	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	823	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	319	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	12446	7	0
// OP_CALL2	513	0	0
// OP_RETURN	0	0	0
// OP_GOTO	20	0	0
// OP_LOAD_S	30	130	12447
// OP_EQ_S	12447	12035	12448
// OP_IFNOT	12448	17	0
// OP_STORE_V	353	4	0
// OP_STORE_V	320	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	821	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	823	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	319	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	12449	7	0
// OP_CALL2	513	0	0
// OP_RETURN	0	0	0
// OP_CALL0	12408	0	0
// OP_EQ_F	12321	823	12450
// OP_IFNOT	12450	19	0
// OP_STORE_V	12437	4	0
// OP_CALL1	501	0	0
// OP_NOT_F	1	0	12451
// OP_IFNOT	12451	5	0
// OP_STORE_V	353	4	0
// OP_STORE_V	321	7	0
// OP_CALL2	507	0	0
// OP_RETURN	0	0	0
// OP_BITAND	38	845	12452
// OP_EQ_F	12452	845	12453
// OP_IFNOT	12453	8	0
// OP_STORE_V	353	4	0
// OP_STORE_V	319	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	12454	7	0
// OP_CALL2	513	0	0
// OP_RETURN	0	0	0
// OP_CALL0	12408	0	0
// OP_DONE	0	0	0
void () ExitIntermission = 
{
    
    if(deathmatch)
    {
        GotoNextMap();
        return;
    }
    
    intermission_exittime = time + 1.000;
    intermission_running = intermission_running + 1.000;
    
    if(intermission_running == 2.000)
    {
        
        if(world.model == "maps/cult.bsp")
        {
            WriteByte(MSG_ALL, SVC_CDTRACK);
            WriteByte(MSG_ALL, 2.000);
            WriteByte(MSG_ALL, 3.000);
            WriteByte(MSG_ALL, SVC_FINALE);
            WriteString(MSG_ALL, "Now that the Duke Cult has been\nterminated, their attempts to revive\nChthon, and destroy the Quake Community\nwith their combined evil forces has been\navoided. Thanks to your supurb driving\nskills, and advanced weaponry, the Quake\nCommunity will now thrive, and\ncontinue to knock down any other attempt to\nknock Quake from it's throne.\n\nAs a reward for your efforts\nand achievements, you are awarded\nyour very own vehicle of mass\ndestruction. You may now go forth, and\nconquer the world, QuakeRally style!\n\nWho needs a Ferrari, when\nyou have QuakeRally!");
            challenge = 0.000;
            return;
        }
        
        if(world.model == "maps/e1m7.bsp")
        {
            WriteByte(MSG_ALL, SVC_CDTRACK);
            WriteByte(MSG_ALL, 2.000);
            WriteByte(MSG_ALL, 3.000);
            if(!cvar("registered"))
            {
                WriteByte(MSG_ALL, SVC_FINALE);
                WriteString(MSG_ALL, "As the corpse of the monstrous entity\nChthon sinks back into the lava whence\nit rose, you grip the Rune of Earth\nMagic tightly. Now that you have\nconquered the Dimension of the Doomed,\nrealm of Earth Magic, you are ready to\ncomplete your task in the other three\nhaunted lands of Quake. Or are you? If\nyou don't register Quake, you'll never\nknow what awaits you in the Realm of\nBlack Magic, the Netherworld, and the\nElder World!");
            }
            else
            {
                WriteByte(MSG_ALL, SVC_FINALE);
                WriteString(MSG_ALL, "As the corpse of the monstrous entity\nChthon sinks back into the lava whence\nit rose, you grip the Rune of Earth\nMagic tightly. Now that you have\nconquered the Dimension of the Doomed,\nrealm of Earth Magic, you are ready to\ncomplete your task. A Rune of magic\npower lies at the end of each haunted\nland of Quake. Go forth, seek the\ntotality of the four Runes!");
            }
            
            return;
        }
        else
        {
            if(world.model == "maps/e2m6.bsp")
            {
                WriteByte(MSG_ALL, SVC_CDTRACK);
                WriteByte(MSG_ALL, 2.000);
                WriteByte(MSG_ALL, 3.000);
                WriteByte(MSG_ALL, SVC_FINALE);
                WriteString(MSG_ALL, "The Rune of Black Magic throbs evilly in\nyour hand and whispers dark thoughts\ninto your brain. You learn the inmost\nlore of the Hell-Mother; Shub-Niggurath!\nYou now know that she is behind all the\nterrible plotting which has led to so\nmuch death and horror. But she is not\ninviolate! Armed with this Rune, you\nrealize that once all four Runes are\ncombined, the gate to Shub-Niggurath's\nPit will open, and you can face the\nWitch-Goddess herself in her frightful\notherworld cathedral.");
                return;
            }
            else
            {
                if(world.model == "maps/e3m6.bsp")
                {
                    WriteByte(MSG_ALL, SVC_CDTRACK);
                    WriteByte(MSG_ALL, 2.000);
                    WriteByte(MSG_ALL, 3.000);
                    WriteByte(MSG_ALL, SVC_FINALE);
                    WriteString(MSG_ALL, "The charred viscera of diabolic horrors\nbubble viscously as you seize the Rune\nof Hell Magic. Its heat scorches your\nhand, and its terrible secrets blight\nyour mind. Gathering the shreds of your\ncourage, you shake the devil's shackles\nfrom your soul, and become ever more\nhard and determined to destroy the\nhideous creatures whose mere existence\nthreatens the souls and psyches of all\nthe population of Earth.");
                    return;
                }
                else
                {
                    
                    if(world.model == "maps/e4m7.bsp")
                    {
                        WriteByte(MSG_ALL, SVC_CDTRACK);
                        WriteByte(MSG_ALL, 2.000);
                        WriteByte(MSG_ALL, 3.000);
                        WriteByte(MSG_ALL, SVC_FINALE);
                        WriteString(MSG_ALL, "Despite the awful might of the Elder\nWorld, you have achieved the Rune of\nElder Magic, capstone of all types of\narcane wisdom. Beyond good and evil,\nbeyond life and death, the Rune\npulsates, heavy with import. Patient and\npotent, the Elder Being Shub-Niggurath\nweaves her dire plans to clear off all\nlife from the Earth, and bring her own\nfoul offspring to our world! For all the\ndwellers in these nightmare dimensions\nare her descendants! Once all Runes of\nmagic power are united, the energy\nbehind them will blast open the Gateway\nto Shub-Niggurath, and you can travel\nthere to foil the Hell-Mother's plots\nin person.");
                        return;
                    }
                    
                }
                
            }
            
        }
        
        GotoNextMap();
    }
    
    
    if(intermission_running == 3.000)
    {
        
        if(!cvar("registered"))
        {
            WriteByte(MSG_ALL, SVC_SELLSCREEN);
            return;
        }
        
        
        if((serverflags & 15.000) == 15.000)
        {
            WriteByte(MSG_ALL, SVC_FINALE);
            WriteString(MSG_ALL, "Now, you have all four Runes. You sense\ntremendous invisible forces moving to\nunseal ancient barriers. Shub-Niggurath\nhad hoped to use the Runes Herself to\nclear off the Earth, but now instead,\nyou will use them to enter her home and\nconfront her as an avatar of avenging\nEarth-life. If you defeat her, you will\nbe remembered forever as the savior of\nthe planet. If she conquers, it will be\nas if you had never been born.");
            return;
        }
        
    }
    
    GotoNextMap();
};

// IntermissionThink
// function begins at statement 17251, parm_start=12456
// OP_LT	31	12322	12456
// OP_IFNOT	12456	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	170	12457
// OP_NOT_F	12457	0	12458
// OP_LOAD_F	28	171	12459
// OP_NOT_F	12459	0	12460
// OP_AND	12458	12460	12461
// OP_LOAD_F	28	172	12462
// OP_NOT_F	12462	0	12463
// OP_AND	12461	12463	12464
// OP_IFNOT	12464	2	0
// OP_RETURN	0	0	0
// OP_CALL0	12428	0	0
// OP_DONE	0	0	0
void () IntermissionThink = 
{
    
    if(time < intermission_exittime)
    {
        return;
    }
    
    
    if((!self.button0 && !self.button1) && !self.button2)
    {
        return;
    }
    
    ExitIntermission();
};

// CalcPlayerStats
// function begins at statement 17266, parm_start=12466
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	880	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	12466	0
// OP_NE_E	12466	30	12467
// OP_IFNOT	12467	9	0
// OP_ADDRESS	12466	180	12468
// OP_STOREP_S	12469	12468	0
// OP_STORE_V	12466	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	880	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	12466	0
// OP_GOTO	-9	0	0
// OP_DONE	0	0	0
void () CalcPlayerStats = 
{
    local entity plyr;
    plyr = find(world, classname, "player");
    
    while(plyr != world)
    {
        plyr.netname = "Xx";
        plyr = find(plyr, classname, "player");
    }
    
};

// execute_changelevel
// function begins at statement 17282, parm_start=12470
// OP_STORE_F	819	12321	0
// OP_IFNOT	35	4	0
// OP_ADD_F	31	827	12471
// OP_STORE_F	12471	12322	0
// OP_GOTO	3	0	0
// OP_ADD_F	31	821	12472
// OP_STORE_F	12472	12322	0
// OP_STORE_V	353	4	0
// OP_STORE_V	320	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	823	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	823	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	880	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	29	0
// OP_NE_E	29	30	12473
// OP_IFNOT	12473	17	0
// OP_ADDRESS	29	166	12474
// OP_STOREP_V	926	12474	0
// OP_ADDRESS	29	163	12477
// OP_STOREP_F	256	12477	0
// OP_ADDRESS	29	104	12478
// OP_STOREP_F	243	12478	0
// OP_ADDRESS	29	103	12479
// OP_STOREP_F	233	12479	0
// OP_ADDRESS	29	93	12480
// OP_STOREP_F	817	12480	0
// OP_STORE_V	29	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	880	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	29	0
// OP_GOTO	-17	0	0
// OP_CALL0	12465	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	318	7	0
// OP_CALL2	507	0	0
// OP_DONE	0	0	0
void () execute_changelevel = 
{
    local entity pos;
    intermission_running = 1.000;
    if(deathmatch)
    {
        intermission_exittime = time + 5.000;
    }
    else
    {
        intermission_exittime = time + 2.000;
    }
    
    WriteByte(MSG_ALL, SVC_CDTRACK);
    WriteByte(MSG_ALL, 3.000);
    WriteByte(MSG_ALL, 3.000);
    other = find(world, classname, "player");
    
    while(other != world)
    {
        other.view_ofs = '0.000 0.000 0.000';
        other.takedamage = DAMAGE_NO;
        other.solid = SOLID_NOT;
        other.movetype = MOVETYPE_NONE;
        other.modelindex = 0.000;
        other = find(other, classname, "player");
    }
    
    CalcPlayerStats();
    WriteByte(MSG_ALL, SVC_INTERMISSION);
};

// changelevel_touch
// function begins at statement 17326, parm_start=12482
// OP_LOAD_S	29	129	12483
// OP_NE_S	12483	880	12484
// OP_IFNOT	12484	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	12485	4	0
// OP_CALL1	501	0	0
// OP_IFNOT	1	7	0
// OP_STORE_V	29	4	0
// OP_STORE_V	28	7	0
// OP_STORE_V	28	10	0
// OP_STORE_V	12486	13	0
// OP_CALL4	534	0	0
// OP_RETURN	0	0	0
// OP_LOAD_S	30	130	12487
// OP_EQ_S	12487	12006	12488
// OP_IFNOT	12488	12	0
// OP_ADDRESS	29	688	12489
// OP_LOAD_F	28	688	12490
// OP_STOREP_F	12490	12489	0
// OP_STORE_F	12490	689	0
// OP_LOAD_S	28	365	12491
// OP_EQ_S	12491	12492	12493
// OP_IFNOT	12493	5	0
// OP_STORE_V	29	4	0
// OP_STORE_V	12494	7	0
// OP_CALL2	520	0	0
// OP_RETURN	0	0	0
// OP_LOAD_S	29	180	12495
// OP_STORE_V	12495	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	12496	4	0
// OP_CALL1	482	0	0
// OP_LOAD_S	28	365	12497
// OP_STORE_S	12497	6130	0
// OP_CALL0	532	0	0
// OP_LOAD_F	28	195	12498
// OP_BITAND	12498	819	12499
// OP_EQ_F	35	817	12500
// OP_AND	12499	12500	12501
// OP_IFNOT	12501	3	0
// OP_CALL0	12408	0	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	146	12502
// OP_STOREP_FNC	531	12502	0
// OP_ADDRESS	28	148	12503
// OP_STOREP_FNC	6131	12503	0
// OP_ADDRESS	28	150	12504
// OP_ADD_F	31	2869	12505
// OP_STOREP_F	12505	12504	0
// OP_DONE	0	0	0
void () changelevel_touch = 
{
    local entity pos;
    
    if(other.classname != "player")
    {
        return;
    }
    
    
    if(cvar("noexit"))
    {
        T_Damage(other, self, self, 50000.000);
        return;
    }
    
    
    if(world.model == "maps/start.bsp")
    {
        challenge = other.start_challenge = self.start_challenge;
        
        if(self.map == "qrally04")
        {
            centerprint(other, "Map not available, to be released\nat a later date\n");
            return;
        }
        
    }
    
    bprint(other.netname);
    bprint(" exited the level\n");
    nextmap = self.map;
    SUB_UseTargets();
    
    if((self.spawnflags & 1.000) && (deathmatch == 0.000))
    {
        GotoNextMap();
        return;
    }
    
    self.touch = SUB_Null;
    self.think = execute_changelevel;
    self.nextthink = time + 0.100;
};

// trigger_changelevel
// function begins at statement 17376, parm_start=12507
// OP_LOAD_S	28	365	12507
// OP_NOT_S	12507	0	12508
// OP_IFNOT	12508	3	0
// OP_STORE_V	12509	4	0
// OP_CALL1	470	0	0
// OP_CALL0	7404	0	0
// OP_ADDRESS	28	146	12510
// OP_STOREP_FNC	12481	12510	0
// OP_DONE	0	0	0
void () trigger_changelevel = 
{
    
    if(!self.map)
    {
        objerror("chagnelevel trigger doesn't have map");
    }
    
    InitTrigger();
    self.touch = changelevel_touch;
};

void () set_suicide_frame;
// respawn
// function begins at statement 17385, parm_start=12513
// OP_EQ_F	738	825	12513
// OP_LOAD_F	28	682	12514
// OP_LE	12514	817	12515
// OP_AND	12513	12515	12516
// OP_IFNOT	12516	4	0
// OP_STORE_V	28	4	0
// OP_STORE_V	12517	7	0
// OP_CALL2	480	0	0
// OP_IFNOT	36	5	0
// OP_STORE_V	28	4	0
// OP_CALL1	525	0	0
// OP_CALL0	88	0	0
// OP_GOTO	3	0	0
// OP_CALL0	90	0	0
// OP_CALL0	88	0	0
// OP_DONE	0	0	0
void () respawn = 
{
    
    if((rally_type_index == 4.000) && (self.cult_cars <= 0.000))
    {
        stuffcmd(self, "restart\n");
    }
    
    if(coop)
    {
        setspawnparms(self);
        PutClientInServer();
    }
    else
    {
        SetNewParms();
        PutClientInServer();
    }
    
};

// ClientKill
// function begins at statement 17401, parm_start=12518
// OP_LOAD_S	28	180	12518
// OP_STORE_V	12518	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	12519	4	0
// OP_CALL1	482	0	0
// OP_CALL0	12511	0	0
// OP_ADDRESS	28	93	12520
// OP_STOREP_F	12320	12520	0
// OP_GE	738	823	12521
// OP_NE_F	738	825	12522
// OP_AND	12521	12522	12523
// OP_IFNOT	12523	5	0
// OP_ADDRESS	28	153	12524
// OP_LOAD_F	28	153	12525
// OP_SUB_F	12525	821	12526
// OP_STOREP_F	12526	12524	0
// OP_CALL0	12512	0	0
// OP_DONE	0	0	0
void () ClientKill = 
{
    bprint(self.netname);
    bprint(" suicides\n");
    set_suicide_frame();
    self.modelindex = modelindex_player;
    
    if((rally_type_index >= 3.000) && (rally_type_index != 4.000))
    {
        self.frags = self.frags - 2.000;
    }
    
    respawn();
};

// CheckSpawnPoint
// function begins at statement 17419, parm_start=12528
// OP_RETURN	218	0	0
// OP_DONE	0	0	0
float (vector v) CheckSpawnPoint = 
{
    return FALSE;
};

// SelectSpawnPoint
// function begins at statement 17421, parm_start=12532
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	12406	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	12532	0
// OP_IFNOT	12532	2	0
// OP_RETURN	12532	0	0
// OP_EQ_F	35	1957	12533
// OP_IFNOT	12533	8	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	7124	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	12532	0
// OP_IFNOT	12532	2	0
// OP_RETURN	12532	0	0
// OP_NOT_F	719	0	12534
// OP_LOAD_F	28	637	12535
// OP_GT	12535	817	12536
// OP_AND	12534	12536	12537
// OP_IFNOT	12537	6	0
// OP_LOAD_ENT	28	638	12538
// OP_STORE_ENT	12538	12532	0
// OP_NE_E	12532	30	12539
// OP_IFNOT	12539	2	0
// OP_RETURN	12532	0	0
// OP_STORE_V	12044	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	12540	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	12044	0
// OP_EQ_E	12044	30	12541
// OP_IFNOT	12541	6	0
// OP_STORE_V	12044	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	12540	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	12044	0
// OP_NE_E	12044	30	12542
// OP_IFNOT	12542	2	0
// OP_RETURN	12044	0	0
// OP_IFNOT	38	8	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	12543	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	12532	0
// OP_IFNOT	12532	2	0
// OP_RETURN	12532	0	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	7124	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	12532	0
// OP_NOT_ENT	12532	0	12544
// OP_IFNOT	12544	3	0
// OP_STORE_V	12545	4	0
// OP_CALL1	469	0	0
// OP_RETURN	12532	0	0
// OP_DONE	0	0	0
entity () SelectSpawnPoint = 
{
    local entity spot;
    spot = find(world, classname, "testplayerstart");
    
    if(spot)
    {
        return spot;
    }
    
    
    if(deathmatch == 100.000)
    {
        spot = find(world, classname, "info_player_start");
        
        if(spot)
        {
            return spot;
        }
        
    }
    
    
    if(!hold_flag && (self.last_marker_num > 0.000))
    {
        spot = self.last_marker;
        
        if(spot != world)
        {
            return spot;
        }
        
    }
    
    lastspawn = find(lastspawn, classname, "info_player_deathmatch");
    
    if(lastspawn == world)
    {
        lastspawn = find(lastspawn, classname, "info_player_deathmatch");
    }
    
    
    if(lastspawn != world)
    {
        return lastspawn;
    }
    
    
    if(serverflags)
    {
        spot = find(world, classname, "info_player_start2");
        
        if(spot)
        {
            return spot;
        }
        
    }
    
    spot = find(world, classname, "info_player_start");
    
    if(!spot)
    {
        error("PutClientInServer: no info_player_start on level");
    }
    
    return spot;
};

// area_clear
// function begins at statement 17481, parm_start=12547
// OP_LOAD_V	28	105	12548
// OP_STORE_V	12548	4	0
// OP_STORE_V	2223	7	0
// OP_CALL2	481	0	0
// OP_STORE_ENT	1	12547	0
// OP_NE_E	12547	30	12551
// OP_IFNOT	12551	14	0
// OP_NE_E	12547	28	12552
// OP_LOAD_F	12547	104	12553
// OP_EQ_F	12553	243	12554
// OP_LOAD_F	12547	104	12555
// OP_EQ_F	12555	244	12556
// OP_OR	12554	12556	12557
// OP_NOT_F	12557	0	12558
// OP_AND	12552	12558	12559
// OP_IFNOT	12559	2	0
// OP_RETURN	817	0	0
// OP_LOAD_ENT	12547	164	12560
// OP_STORE_ENT	12560	12547	0
// OP_GOTO	-14	0	0
// OP_RETURN	819	0	0
// OP_DONE	0	0	0
float () area_clear = 
{
    local entity trav;
    trav = findradius(self.origin, 64.000);
    
    while(trav != world)
    {
        
        if((trav != self) && (!((trav.solid == SOLID_NOT) || (trav.solid == SOLID_TRIGGER))))
        {
            return 0.000;
        }
        
        trav = trav.chain;
    }
    
    return 1.000;
};

void () PlayerDie;
// PutClientInServer
// function begins at statement 17503, parm_start=12562
// OP_ADDRESS	28	129	12577
// OP_STOREP_S	880	12577	0
// OP_ADDRESS	28	152	12578
// OP_STOREP_F	1957	12578	0
// OP_ADDRESS	28	163	12579
// OP_STOREP_F	258	12579	0
// OP_ADDRESS	28	104	12580
// OP_STOREP_F	246	12580	0
// OP_ADDRESS	28	103	12581
// OP_STOREP_F	234	12581	0
// OP_ADDRESS	28	402	12582
// OP_STOREP_F	817	12582	0
// OP_ADDRESS	28	185	12583
// OP_STOREP_F	1957	12583	0
// OP_ADDRESS	28	182	12584
// OP_ADD_F	222	228	12585
// OP_STOREP_F	12585	12584	0
// OP_ADDRESS	28	405	12586
// OP_ADD_F	31	834	12587
// OP_STOREP_F	12587	12586	0
// OP_ADDRESS	28	434	12588
// OP_STOREP_F	821	12588	0
// OP_ADDRESS	28	391	12589
// OP_STOREP_F	817	12589	0
// OP_ADDRESS	28	392	12590
// OP_STOREP_F	817	12590	0
// OP_ADDRESS	28	390	12591
// OP_STOREP_F	817	12591	0
// OP_ADDRESS	28	389	12592
// OP_STOREP_F	817	12592	0
// OP_ADDRESS	28	133	12593
// OP_STOREP_F	817	12593	0
// OP_ADDRESS	28	393	12594
// OP_STOREP_F	817	12594	0
// OP_LOAD_ENT	28	673	12595
// OP_NE_E	12595	30	12596
// OP_IFNOT	12596	6	0
// OP_LOAD_ENT	28	673	12597
// OP_STORE_V	12597	4	0
// OP_CALL1	474	0	0
// OP_ADDRESS	28	673	12598
// OP_STOREP_ENT	30	12598	0
// OP_CALL0	12359	0	0
// OP_GE	738	821	12599
// OP_IFNOT	12599	16	0
// OP_ADDRESS	28	158	12600
// OP_STOREP_F	817	12600	0
// OP_ADDRESS	28	162	12601
// OP_LOAD_F	28	162	12602
// OP_BITOR	12602	263	12603
// OP_STOREP_F	12603	12601	0
// OP_EQ_F	738	825	12604
// OP_IFNOT	12604	4	0
// OP_ADDRESS	28	159	12605
// OP_STOREP_F	1885	12605	0
// OP_GOTO	3	0	0
// OP_ADDRESS	28	159	12606
// OP_STOREP_F	2611	12606	0
// OP_ADDRESS	28	154	12607
// OP_STOREP_F	263	12607	0
// OP_ADDRESS	28	387	12608
// OP_STOREP_F	31	12608	0
// OP_ADDRESS	28	376	12609
// OP_STOREP_FNC	12561	12609	0
// OP_ADDRESS	28	165	12610
// OP_STOREP_F	252	12610	0
// OP_ADDRESS	28	431	12611
// OP_STOREP_F	817	12611	0
// OP_CALL0	12531	0	0
// OP_STORE_ENT	1	12562	0
// OP_ADDRESS	28	1754	12612
// OP_STOREP_F	31	12612	0
// OP_LOAD_V	12562	117	12613
// OP_STORE_V	12613	4	0
// OP_CALL1	461	0	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	12562	105	12616
// OP_ADD_V	12616	1535	12619
// OP_STORE_V	12619	7	0
// OP_CALL2	462	0	0
// OP_STORE_F	817	12576	0
// OP_CALL0	12546	0	0
// OP_NOT_F	1	0	12622
// OP_LT	12576	827	12623
// OP_AND	12622	12623	12624
// OP_IFNOT	12624	10	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	12625
// OP_MUL_VF	59	3330	12628
// OP_ADD_V	12625	12628	12631
// OP_STORE_V	12631	7	0
// OP_CALL2	462	0	0
// OP_ADD_F	12576	819	12634
// OP_STORE_F	12634	12576	0
// OP_GOTO	-13	0	0
// OP_EQ_F	12576	827	12635
// OP_IFNOT	12635	6	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	12562	105	12636
// OP_ADD_V	12636	1535	12639
// OP_STORE_V	12639	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	28	117	12642
// OP_LOAD_V	12562	117	12645
// OP_STOREP_V	12645	12642	0
// OP_ADDRESS	28	174	12648
// OP_STOREP_F	219	12648	0
// OP_ADDRESS	28	113	12649
// OP_STOREP_V	926	12649	0
// OP_STORE_V	28	4	0
// OP_STORE_V	754	7	0
// OP_STORE_V	757	10	0
// OP_CALL3	464	0	0
// OP_ADDRESS	28	166	12652
// OP_STOREP_V	12655	12652	0
// OP_STORE_V	28	4	0
// OP_STORE_V	1283	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	589	12658
// OP_STOREP_F	219	12658	0
// OP_LOAD_ENT	28	547	12659
// OP_EQ_E	12659	30	12660
// OP_IFNOT	12660	40	0
// OP_CALL0	1156	0	0
// OP_LOAD_F	28	378	12661
// OP_BITAND	12661	214	12662
// OP_NOT_F	12662	0	12663
// OP_IFNOT	12663	5	0
// OP_ADDRESS	28	378	12664
// OP_LOAD_F	28	378	12665
// OP_ADD_F	12665	214	12666
// OP_STOREP_F	12666	12664	0
// OP_STORE_V	28	4	0
// OP_CALL1	10608	0	0
// OP_NE_E	726	30	12667
// OP_IFNOT	12667	26	0
// OP_STORE_ENT	726	12563	0
// OP_LOAD_ENT	12563	668	12668
// OP_NE_E	12668	30	12669
// OP_IFNOT	12669	4	0
// OP_LOAD_ENT	12563	668	12670
// OP_STORE_ENT	12670	12563	0
// OP_GOTO	-5	0	0
// OP_ADDRESS	12563	668	12671
// OP_STOREP_ENT	28	12671	0
// OP_ADDRESS	28	667	12672
// OP_STOREP_ENT	12563	12672	0
// OP_ADDRESS	28	668	12673
// OP_STOREP_ENT	30	12673	0
// OP_ADDRESS	28	641	12674
// OP_STOREP_F	31	12674	0
// OP_ADDRESS	28	644	12675
// OP_LOAD_F	28	644	12676
// OP_BITOR	12676	692	12677
// OP_STOREP_F	12677	12675	0
// OP_ADDRESS	28	644	12678
// OP_LOAD_F	28	644	12679
// OP_LOAD_F	28	644	12680
// OP_BITAND	12680	698	12681
// OP_SUB_F	12679	12681	12682
// OP_STOREP_F	12682	12678	0
// OP_GOTO	79	0	0
// OP_CALL0	492	0	0
// OP_LOAD_V	12562	117	12683
// OP_STORE_V	12683	4	0
// OP_CALL1	461	0	0
// OP_LOAD_ENT	28	547	12686
// OP_STORE_V	12686	4	0
// OP_LOAD_V	28	105	12687
// OP_MUL_VF	59	751	12690
// OP_SUB_V	12687	12690	12693
// OP_STORE_V	12693	7	0
// OP_CALL2	462	0	0
// OP_LOAD_ENT	28	548	12696
// OP_ADDRESS	12696	117	12697
// OP_STOREP_V	926	12697	0
// OP_LOAD_ENT	28	548	12700
// OP_ADDRESS	12700	121	12701
// OP_STOREP_V	926	12701	0
// OP_LOAD_ENT	28	548	12704
// OP_ADDRESS	12704	595	12705
// OP_STOREP_V	926	12705	0
// OP_LOAD_ENT	28	548	12708
// OP_ADDRESS	12708	555	12709
// OP_STOREP_V	926	12709	0
// OP_LOAD_ENT	28	547	12712
// OP_ADDRESS	12712	555	12713
// OP_STOREP_V	59	12713	0
// OP_ADDRESS	28	109	12716
// OP_LOAD_V	28	105	12719
// OP_STOREP_V	12719	12716	0
// OP_ADDRESS	28	621	12722
// OP_STOREP_V	926	12722	0
// OP_ADDRESS	28	580	12725
// OP_STOREP_V	926	12725	0
// OP_LOAD_F	28	119	12728
// OP_STORE_F	12728	542	0
// OP_ADDRESS	28	644	12729
// OP_LOAD_F	28	644	12730
// OP_LOAD_F	28	644	12731
// OP_BITAND	12731	697	12732
// OP_SUB_F	12730	12732	12733
// OP_STOREP_F	12733	12729	0
// OP_ADDRESS	28	644	12734
// OP_LOAD_F	28	644	12735
// OP_BITOR	12735	703	12736
// OP_STOREP_F	12736	12734	0
// OP_LOAD_ENT	28	625	12737
// OP_STORE_V	12737	4	0
// OP_LOAD_V	28	105	12738
// OP_STORE_V	12738	7	0
// OP_CALL2	462	0	0
// OP_LOAD_F	28	611	12741
// OP_NE_F	12741	715	12742
// OP_IFNOT	12742	26	0
// OP_STORE_ENT	28	81	0
// OP_STORE_V	352	4	0
// OP_STORE_V	747	7	0
// OP_CALL2	507	0	0
// OP_LOAD_F	28	611	12743
// OP_EQ_F	12743	713	12744
// OP_IFNOT	12744	5	0
// OP_STORE_V	352	4	0
// OP_STORE_V	845	7	0
// OP_CALL2	512	0	0
// OP_GOTO	7	0	0
// OP_LOAD_F	28	611	12745
// OP_EQ_F	12745	714	12746
// OP_IFNOT	12746	4	0
// OP_STORE_V	352	4	0
// OP_STORE_V	5499	7	0
// OP_CALL2	512	0	0
// OP_STORE_V	352	4	0
// OP_LOAD_F	28	119	12747
// OP_STORE_V	12747	7	0
// OP_CALL2	512	0	0
// OP_STORE_V	352	4	0
// OP_LOAD_F	28	120	12748
// OP_STORE_V	12748	7	0
// OP_CALL2	512	0	0
// OP_LOAD_ENT	28	548	12749
// OP_ADDRESS	12749	621	12750
// OP_STOREP_V	926	12750	0
// OP_CALL0	931	0	0
// OP_ADDRESS	28	152	12753
// OP_STOREP_F	1957	12753	0
// OP_ADDRESS	28	188	12754
// OP_STOREP_F	817	12754	0
// OP_ADDRESS	28	654	12755
// OP_STOREP_F	1228	12755	0
// OP_ADDRESS	28	192	12756
// OP_STOREP_F	817	12756	0
// OP_LOAD_F	28	644	12757
// OP_BITAND	12757	693	12758
// OP_NOT_F	12758	0	12759
// OP_IFNOT	12759	15	0
// OP_ADDRESS	28	640	12760
// OP_STOREP_F	817	12760	0
// OP_ADDRESS	28	642	12761
// OP_STOREP_F	12762	12761	0
// OP_ADDRESS	28	641	12763
// OP_STOREP_F	817	12763	0
// OP_ADDRESS	28	637	12764
// OP_STOREP_F	817	12764	0
// OP_ADDRESS	28	638	12765
// OP_STOREP_ENT	30	12765	0
// OP_ADDRESS	28	644	12766
// OP_LOAD_F	28	644	12767
// OP_BITOR	12767	693	12768
// OP_STOREP_F	12768	12766	0
// OP_OR	35	36	12769
// OP_IFNOT	12769	9	0
// OP_LOAD_V	28	117	12770
// OP_STORE_V	12770	4	0
// OP_CALL1	461	0	0
// OP_LOAD_V	28	105	12773
// OP_MUL_VF	59	1112	12776
// OP_ADD_V	12773	12776	12779
// OP_STORE_V	12779	4	0
// OP_CALL1	858	0	0
// OP_LOAD_V	28	105	12782
// OP_STORE_V	12782	4	0
// OP_STORE_V	28	7	0
// OP_CALL2	12318	0	0
// OP_DONE	0	0	0
void () PutClientInServer = 
{
    local entity spot;
    local entity plyr;
    local vector VehBoxMin;
    local vector VehBoxMax;
    local vector plyrBoxMin;
    local vector plyrBoxMax;
    local float ftemp;
    self.classname = "player";
    self.health = 100.000;
    self.takedamage = DAMAGE_AIM;
    self.solid = SOLID_SLIDEBOX;
    self.movetype = MOVETYPE_WALK;
    self.show_hostile = 0.000;
    self.max_health = 100.000;
    self.flags = FL_CLIENT + FL_ONGROUND;
    self.air_finished = time + 12.000;
    self.dmg = 2.000;
    self.super_damage_finished = 0.000;
    self.radsuit_finished = 0.000;
    self.invisible_finished = 0.000;
    self.invincible_finished = 0.000;
    self.effects = 0.000;
    self.invincible_time = 0.000;
    
    if(self.mine_attached != world)
    {
        remove(self.mine_attached);
        self.mine_attached = world;
    }
    
    DecodeLevelParms();
    
    if(rally_type_index >= 2.000)
    {
        self.ammo_shells = 0.000;
        self.items = self.items | IT_SUPER_NAILGUN;
        if(rally_type_index == 4.000)
        {
            self.ammo_nails = 150.000;
        }
        else
        {
            self.ammo_nails = 50.000;
        }
        
        self.weapon = IT_SUPER_NAILGUN;
    }
    
    self.attack_finished = time;
    self.th_die = PlayerDie;
    self.deadflag = DEAD_NO;
    self.pausetime = 0.000;
    spot = SelectSpawnPoint();
    self.spawn_time = time;
    makevectors(spot.angles);
    setorigin(self, spot.origin + '0.000 0.000 16.000');
    ftemp = 0.000;
    
    while(!area_clear() && (ftemp < 5.000))
    {
        setorigin(self, self.origin + (v_forward * 48.000));
        ftemp = ftemp + 1.000;
    }
    
    
    if(ftemp == 5.000)
    {
        setorigin(self, spot.origin + '0.000 0.000 16.000');
    }
    
    self.angles = spot.angles;
    self.fixangle = TRUE;
    self.velocity = '0.000 0.000 0.000';
    setsize(self, VEH_MIN, VEH_MAX);
    self.view_ofs = '0.000 0.000 14.000';
    setmodel(self, "models/null.mdl");
    self.use_surface_angle = TRUE;
    if(self.veh_tail == world)
    {
        CreateVehicleEntities();
        
        if(!(self.speed & CHSCAM_ON))
        {
            self.speed = self.speed + CHSCAM_ON;
        }
        
        Start_chase_cam(self);
        
        if(current_leader != world)
        {
            plyr = current_leader;
            
            while(plyr.behind != world)
            {
                plyr = plyr.behind;
            }
            
            plyr.behind = self;
            self.ahead = plyr;
            self.behind = world;
            self.last_lap_time = time;
            self.racing_flags = self.racing_flags | QR_START_READY;
            self.racing_flags = self.racing_flags - (self.racing_flags & QR_OBSERVER);
        }
        
    }
    else
    {
        droptofloor();
        makevectors(spot.angles);
        setorigin(self.veh_tail, self.origin - (v_forward * TAIL_DIST));
        self.veh_body.angles = '0.000 0.000 0.000';
        self.veh_body.avelocity = '0.000 0.000 0.000';
        self.veh_body.roll_velocity = '0.000 0.000 0.000';
        self.veh_body.veh_dir = '0.000 0.000 0.000';
        self.veh_tail.veh_dir = v_forward;
        self.oldorigin = self.origin;
        self.last_velocity = '0.000 0.000 0.000';
        self.body_roll = '0.000 0.000 0.000';
        plyr_angles_y = self.angles_y;
        self.racing_flags = self.racing_flags - (self.racing_flags & QR_JUST_LANDED);
        self.racing_flags = self.racing_flags | QR_RESPAWN_FLAG;
        setorigin(self.chasecam, self.origin);
        
        if(self.cam != CAM_INCAR)
        {
            msg_entity = self;
            WriteByte(MSG_ONE, SVC_SETVIEWANGLES);
            if(self.cam == CAM_CHASECLOSE)
            {
                WriteAngle(MSG_ONE, 15.000);
            }
            else
            {
                
                if(self.cam == CAM_CHASEFAR)
                {
                    WriteAngle(MSG_ONE, 35.000);
                }
                
            }
            
            WriteAngle(MSG_ONE, self.angles_y);
            WriteAngle(MSG_ONE, self.angles_z);
        }
        
    }
    
    self.veh_body.last_velocity = '0.000 0.000 0.000';
    W_SetCurrentAmmo();
    self.health = 100.000;
    self.armorvalue = 0.000;
    self.last_engine_ratio = -1.000;
    self.yaw_speed = 0.000;
    
    if(!(self.racing_flags & QR_RACING))
    {
        self.last_lap = 0.000;
        self.fastest_lap = 999999.000;
        self.last_lap_time = 0.000;
        self.last_marker_num = 0.000;
        self.last_marker = world;
        self.racing_flags = self.racing_flags | QR_RACING;
    }
    
    
    if(deathmatch || coop)
    {
        makevectors(self.angles);
        spawn_tfog(self.origin + (v_forward * 20.000));
    }
    
    spawn_tdeath(self.origin, self);
};

// info_player_start
// function begins at statement 17788, parm_start=12785
// OP_DONE	0	0	0
void () info_player_start = 
{
};

// info_player_start2
// function begins at statement 17789, parm_start=12786
// OP_DONE	0	0	0
void () info_player_start2 = 
{
};

// testplayerstart
// function begins at statement 17790, parm_start=12787
// OP_DONE	0	0	0
void () testplayerstart = 
{
};

// info_player_deathmatch
// function begins at statement 17791, parm_start=12788
// OP_DONE	0	0	0
void () info_player_deathmatch = 
{
};

// info_player_coop
// function begins at statement 17792, parm_start=12789
// OP_DONE	0	0	0
void () info_player_coop = 
{
};

// NextLevel
// function begins at statement 17793, parm_start=12790
// OP_EQ_S	34	12423	12791
// OP_IFNOT	12791	43	0
// OP_STORE_V	12437	4	0
// OP_CALL1	501	0	0
// OP_NOT_F	1	0	12792
// OP_IFNOT	12792	3	0
// OP_STORE_S	12793	34	0
// OP_GOTO	32	0	0
// OP_BITAND	38	819	12794
// OP_NOT_F	12794	0	12795
// OP_IFNOT	12795	5	0
// OP_STORE_S	12793	34	0
// OP_ADD_F	38	819	12796
// OP_STORE_F	12796	38	0
// OP_GOTO	25	0	0
// OP_BITAND	38	821	12797
// OP_NOT_F	12797	0	12798
// OP_IFNOT	12798	5	0
// OP_STORE_S	12799	34	0
// OP_ADD_F	38	821	12800
// OP_STORE_F	12800	38	0
// OP_GOTO	18	0	0
// OP_BITAND	38	825	12801
// OP_NOT_F	12801	0	12802
// OP_IFNOT	12802	5	0
// OP_STORE_S	12803	34	0
// OP_ADD_F	38	825	12804
// OP_STORE_F	12804	38	0
// OP_GOTO	11	0	0
// OP_BITAND	38	843	12805
// OP_NOT_F	12805	0	12806
// OP_IFNOT	12806	5	0
// OP_STORE_S	12807	34	0
// OP_ADD_F	38	843	12808
// OP_STORE_F	12808	38	0
// OP_GOTO	4	0	0
// OP_STORE_S	12423	34	0
// OP_SUB_F	38	845	12809
// OP_STORE_F	12809	38	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	12790	0
// OP_ADDRESS	12790	365	12810
// OP_STOREP_S	34	12810	0
// OP_GOTO	17	0	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	12811	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	12790	0
// OP_NOT_ENT	12790	0	12812
// OP_IFNOT	12812	10	0
// OP_STORE_V	12409	4	0
// OP_CALL1	501	0	0
// OP_NOT_F	1	0	12813
// OP_IFNOT	12813	2	0
// OP_STORE_S	12423	34	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	12790	0
// OP_ADDRESS	12790	365	12814
// OP_STOREP_S	34	12814	0
// OP_LOAD_S	12790	365	12815
// OP_STORE_S	12815	6130	0
// OP_STORE_F	219	356	0
// OP_LOAD_F	12790	150	12816
// OP_LT	12816	31	12817
// OP_IFNOT	12817	6	0
// OP_ADDRESS	12790	148	12818
// OP_STOREP_FNC	6131	12818	0
// OP_ADDRESS	12790	150	12819
// OP_ADD_F	31	2869	12820
// OP_STOREP_F	12820	12819	0
// OP_DONE	0	0	0
void () NextLevel = 
{
    local entity o;
    if(mapname == "start")
    {
        if(!cvar("registered"))
        {
            mapname = "e1m1";
        }
        else
        {
            if(!(serverflags & 1.000))
            {
                mapname = "e1m1";
                serverflags = serverflags + 1.000;
            }
            else
            {
                if(!(serverflags & 2.000))
                {
                    mapname = "e2m1";
                    serverflags = serverflags + 2.000;
                }
                else
                {
                    if(!(serverflags & 4.000))
                    {
                        mapname = "e3m1";
                        serverflags = serverflags + 4.000;
                    }
                    else
                    {
                        if(!(serverflags & 8.000))
                        {
                            mapname = "e4m1";
                            serverflags = serverflags + 8.000;
                        }
                        else
                        {
                            mapname = "start";
                            serverflags = serverflags - 15.000;
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        o = spawn();
        o.map = mapname;
    }
    else
    {
        o = find(world, classname, "trigger_changelevel");
        
        if(!o)
        {
            
            if(!cvar("samelevel"))
            {
                mapname = "start";
            }
            
            o = spawn();
            o.map = mapname;
        }
        
    }
    
    nextmap = o.map;
    gameover = TRUE;
    
    if(o.nextthink < time)
    {
        o.think = execute_changelevel;
        o.nextthink = time + 0.100;
    }
    
};

// CheckRules
// function begins at statement 17865, parm_start=12822
// OP_IFNOT	356	2	0
// OP_RETURN	0	0	0
// OP_EQ_F	738	825	12824
// OP_IFNOT	12824	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	12825	4	0
// OP_CALL1	501	0	0
// OP_MUL_F	1	2228	12826
// OP_STORE_F	12826	12822	0
// OP_STORE_V	12827	4	0
// OP_CALL1	501	0	0
// OP_STORE_F	1	12823	0
// OP_GE	31	12822	12828
// OP_AND	12822	12828	12829
// OP_IFNOT	12829	3	0
// OP_CALL0	12789	0	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	153	12830
// OP_GE	12830	12823	12831
// OP_AND	12823	12831	12832
// OP_IFNOT	12832	3	0
// OP_CALL0	12789	0	0
// OP_RETURN	0	0	0
// OP_DONE	0	0	0
void () CheckRules = 
{
    local float timelimit;
    local float fraglimit;
    
    if(gameover)
    {
        return;
    }
    
    
    if(rally_type_index == 4.000)
    {
        return;
    }
    
    timelimit = cvar("timelimit") * 60.000;
    fraglimit = cvar("fraglimit");
    
    if(timelimit && (time >= timelimit))
    {
        NextLevel();
        return;
    }
    
    
    if(fraglimit && (self.frags >= fraglimit))
    {
        NextLevel();
        return;
    }
    
};

// PlayerDeathThink
// function begins at statement 17889, parm_start=12834
// OP_LOAD_F	28	182	12836
// OP_BITAND	12836	228	12837
// OP_IFNOT	12837	18	0
// OP_LOAD_V	28	113	12838
// OP_STORE_V	12838	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	12835	0
// OP_SUB_F	12835	1112	12841
// OP_STORE_F	12841	12835	0
// OP_LE	12835	817	12842
// OP_IFNOT	12842	4	0
// OP_ADDRESS	28	113	12843
// OP_STOREP_V	926	12843	0
// OP_GOTO	7	0	0
// OP_ADDRESS	28	113	12846
// OP_LOAD_V	28	113	12849
// OP_STORE_V	12849	4	0
// OP_CALL1	468	0	0
// OP_MUL_FV	12835	1	12852
// OP_STOREP_V	12852	12846	0
// OP_LOAD_F	28	165	12855
// OP_EQ_F	12855	254	12856
// OP_IFNOT	12856	11	0
// OP_LOAD_F	28	172	12857
// OP_LOAD_F	28	171	12858
// OP_OR	12857	12858	12859
// OP_LOAD_F	28	170	12860
// OP_OR	12859	12860	12861
// OP_IFNOT	12861	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	165	12862
// OP_STOREP_F	255	12862	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	172	12863
// OP_NOT_F	12863	0	12864
// OP_LOAD_F	28	171	12865
// OP_NOT_F	12865	0	12866
// OP_AND	12864	12866	12867
// OP_LOAD_F	28	170	12868
// OP_NOT_F	12868	0	12869
// OP_AND	12867	12869	12870
// OP_IFNOT	12870	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	170	12871
// OP_STOREP_F	817	12871	0
// OP_ADDRESS	28	171	12872
// OP_STOREP_F	817	12872	0
// OP_ADDRESS	28	172	12873
// OP_STOREP_F	817	12873	0
// OP_EQ_F	738	819	12874
// OP_EQ_F	737	717	12875
// OP_AND	12874	12875	12876
// OP_LOAD_F	28	644	12877
// OP_BITAND	12877	702	12878
// OP_AND	12876	12878	12879
// OP_IFNOT	12879	5	0
// OP_STORE_V	28	4	0
// OP_STORE_V	12517	7	0
// OP_CALL2	480	0	0
// OP_GOTO	2	0	0
// OP_CALL0	12512	0	0
// OP_DONE	0	0	0
void () PlayerDeathThink = 
{
    local entity old_self;
    local float forward;
    
    if(self.flags & FL_ONGROUND)
    {
        forward = vlen(self.velocity);
        forward = forward - 20.000;
        if(forward <= 0.000)
        {
            self.velocity = '0.000 0.000 0.000';
        }
        else
        {
            self.velocity = forward * normalize(self.velocity);
        }
        
    }
    
    
    if(self.deadflag == DEAD_DEAD)
    {
        
        if((self.button2 || self.button1) || self.button0)
        {
            return;
        }
        
        self.deadflag = DEAD_RESPAWNABLE;
        return;
    }
    
    
    if((!self.button2 && !self.button1) && !self.button0)
    {
        return;
    }
    
    self.button0 = 0.000;
    self.button1 = 0.000;
    self.button2 = 0.000;
    if(((rally_type_index == 1.000) && (racing_type == RT_TIME_TRIAL)) && (self.racing_flags & QR_OUT_OF_TIME))
    {
        stuffcmd(self, "restart\n");
    }
    else
    {
        respawn();
    }
    
};

// PlayerJump
// function begins at statement 17951, parm_start=12881
// OP_LOAD_F	28	182	12887
// OP_BITAND	12887	230	12888
// OP_IFNOT	12888	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	189	12889
// OP_GE	12889	821	12890
// OP_IFNOT	12890	38	0
// OP_LOAD_F	28	190	12891
// OP_EQ_F	12891	292	12892
// OP_IFNOT	12892	4	0
// OP_ADDRESS	28	116	12893
// OP_STOREP_F	1957	12893	0
// OP_GOTO	9	0	0
// OP_LOAD_F	28	190	12894
// OP_EQ_F	12894	293	12895
// OP_IFNOT	12895	4	0
// OP_ADDRESS	28	116	12896
// OP_STOREP_F	2677	12896	0
// OP_GOTO	3	0	0
// OP_ADDRESS	28	116	12897
// OP_STOREP_F	2611	12897	0
// OP_LOAD_F	28	404	12898
// OP_LT	12898	31	12899
// OP_IFNOT	12899	20	0
// OP_ADDRESS	28	404	12900
// OP_ADD_F	31	819	12901
// OP_STOREP_F	12901	12900	0
// OP_CALL0	466	0	0
// OP_LT	1	1182	12902
// OP_IFNOT	12902	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	338	7	0
// OP_STORE_V	12107	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	7	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	338	7	0
// OP_STORE_V	12108	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	182	12903
// OP_BITAND	12903	228	12904
// OP_NOT_F	12904	0	12905
// OP_IFNOT	12905	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	182	12906
// OP_BITAND	12906	231	12907
// OP_NOT_F	12907	0	12908
// OP_IFNOT	12908	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	182	12909
// OP_LOAD_F	28	182	12910
// OP_LOAD_F	28	182	12911
// OP_BITAND	12911	231	12912
// OP_SUB_F	12910	12912	12913
// OP_STOREP_F	12913	12909	0
// OP_ADDRESS	28	182	12914
// OP_LOAD_F	28	182	12915
// OP_SUB_F	12915	228	12916
// OP_STOREP_F	12916	12914	0
// OP_ADDRESS	28	172	12917
// OP_STOREP_F	817	12917	0
// OP_STORE_V	28	4	0
// OP_STORE_V	338	7	0
// OP_STORE_V	12069	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	116	12918
// OP_LOAD_F	28	116	12919
// OP_ADD_F	12919	1957	12920
// OP_STOREP_F	12920	12918	0
// OP_DONE	0	0	0
void () PlayerJump = 
{
    local vector start;
    local vector end;
    
    if(self.flags & FL_WATERJUMP)
    {
        return;
    }
    
    
    if(self.waterlevel >= 2.000)
    {
        if(self.watertype == CONTENT_WATER)
        {
            self.velocity_z = 100.000;
        }
        else
        {
            if(self.watertype == CONTENT_SLIME)
            {
                self.velocity_z = 80.000;
            }
            else
            {
                self.velocity_z = 50.000;
            }
            
        }
        
        
        if(self.swim_flag < time)
        {
            self.swim_flag = time + 1.000;
            if(random() < 0.500)
            {
                sound(self, CHAN_BODY, "misc/water1.wav", 1.000, ATTN_NORM);
            }
            else
            {
                sound(self, CHAN_BODY, "misc/water2.wav", 1.000, ATTN_NORM);
            }
            
        }
        
        return;
    }
    
    
    if(!(self.flags & FL_ONGROUND))
    {
        return;
    }
    
    
    if(!(self.flags & FL_JUMPRELEASED))
    {
        return;
    }
    
    self.flags = self.flags - (self.flags & FL_JUMPRELEASED);
    self.flags = self.flags - FL_ONGROUND;
    self.button2 = 0.000;
    sound(self, CHAN_BODY, "player/plyrjmp8.wav", 1.000, ATTN_NORM);
    self.velocity_z = self.velocity_z + 100.000;
};

.float dmgtime;
// WaterMove
// function begins at statement 18028, parm_start=12923
// OP_LOAD_F	28	103	12923
// OP_EQ_F	12923	239	12924
// OP_IFNOT	12924	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	152	12925
// OP_LT	12925	817	12926
// OP_IFNOT	12926	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	189	12927
// OP_NE_F	12927	823	12928
// OP_IFNOT	12928	26	0
// OP_LOAD_F	28	405	12929
// OP_LT	12929	31	12930
// OP_IFNOT	12930	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	12075	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	11	0	0
// OP_LOAD_F	28	405	12931
// OP_ADD_F	31	847	12932
// OP_LT	12931	12932	12933
// OP_IFNOT	12933	7	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	12074	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	405	12934
// OP_ADD_F	31	834	12935
// OP_STOREP_F	12935	12934	0
// OP_ADDRESS	28	434	12936
// OP_STOREP_F	821	12936	0
// OP_LOAD_F	28	189	12937
// OP_NOT_F	12937	0	12938
// OP_IFNOT	12938	15	0
// OP_LOAD_F	28	182	12939
// OP_BITAND	12939	223	12940
// OP_IFNOT	12940	11	0
// OP_STORE_V	28	4	0
// OP_STORE_V	338	7	0
// OP_STORE_V	12106	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	182	12941
// OP_LOAD_F	28	182	12942
// OP_SUB_F	12942	223	12943
// OP_STOREP_F	12943	12941	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	190	12944
// OP_EQ_F	12944	294	12945
// OP_IFNOT	12945	22	0
// OP_LOAD_F	28	12921	12946
// OP_LT	12946	31	12947
// OP_IFNOT	12947	18	0
// OP_LOAD_F	28	392	12948
// OP_GT	12948	31	12949
// OP_IFNOT	12949	5	0
// OP_ADDRESS	28	12921	12950
// OP_ADD_F	31	819	12951
// OP_STOREP_F	12951	12950	0
// OP_GOTO	4	0	0
// OP_ADDRESS	28	12921	12952
// OP_ADD_F	31	1152	12953
// OP_STOREP_F	12953	12952	0
// OP_STORE_V	28	4	0
// OP_STORE_V	30	7	0
// OP_STORE_V	30	10	0
// OP_LOAD_F	28	189	12954
// OP_MUL_F	1112	12954	12955
// OP_STORE_V	12955	13	0
// OP_CALL4	534	0	0
// OP_GOTO	20	0	0
// OP_LOAD_F	28	190	12956
// OP_EQ_F	12956	293	12957
// OP_IFNOT	12957	17	0
// OP_LOAD_F	28	12921	12958
// OP_LT	12958	31	12959
// OP_LOAD_F	28	392	12960
// OP_LT	12960	31	12961
// OP_AND	12959	12961	12962
// OP_IFNOT	12962	11	0
// OP_ADDRESS	28	12921	12963
// OP_ADD_F	31	819	12964
// OP_STOREP_F	12964	12963	0
// OP_STORE_V	28	4	0
// OP_STORE_V	30	7	0
// OP_STORE_V	30	10	0
// OP_LOAD_F	28	189	12965
// OP_MUL_F	843	12965	12966
// OP_STORE_V	12966	13	0
// OP_CALL4	534	0	0
// OP_LOAD_F	28	182	12967
// OP_BITAND	12967	223	12968
// OP_NOT_F	12968	0	12969
// OP_IFNOT	12969	34	0
// OP_LOAD_F	28	190	12970
// OP_EQ_F	12970	294	12971
// OP_IFNOT	12971	7	0
// OP_STORE_V	28	4	0
// OP_STORE_V	338	7	0
// OP_STORE_V	12105	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_LOAD_F	28	190	12972
// OP_EQ_F	12972	292	12973
// OP_IFNOT	12973	7	0
// OP_STORE_V	28	4	0
// OP_STORE_V	338	7	0
// OP_STORE_V	12104	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_LOAD_F	28	190	12974
// OP_EQ_F	12974	293	12975
// OP_IFNOT	12975	7	0
// OP_STORE_V	28	4	0
// OP_STORE_V	338	7	0
// OP_STORE_V	12103	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	182	12976
// OP_LOAD_F	28	182	12977
// OP_ADD_F	12977	223	12978
// OP_STOREP_F	12978	12976	0
// OP_ADDRESS	28	12921	12979
// OP_STOREP_F	817	12979	0
// OP_LOAD_F	28	182	12980
// OP_BITAND	12980	230	12981
// OP_NOT_F	12981	0	12982
// OP_IFNOT	12982	10	0
// OP_ADDRESS	28	113	12983
// OP_LOAD_V	28	113	12986
// OP_LOAD_F	28	189	12989
// OP_MUL_F	2236	12989	12990
// OP_MUL_F	12990	32	12991
// OP_LOAD_V	28	113	12992
// OP_MUL_FV	12991	12992	12995
// OP_SUB_V	12986	12995	12998
// OP_STOREP_V	12998	12983	0
// OP_DONE	0	0	0
void () WaterMove = 
{
    
    if(self.movetype == MOVETYPE_NOCLIP)
    {
        return;
    }
    
    
    if(self.health < 0.000)
    {
        return;
    }
    
    
    if(self.waterlevel != 3.000)
    {
        if(self.air_finished < time)
        {
            sound(self, CHAN_VOICE, "player/gasp2.wav", 1.000, ATTN_NORM);
        }
        else
        {
            
            if(self.air_finished < (time + 9.000))
            {
                sound(self, CHAN_VOICE, "player/gasp1.wav", 1.000, ATTN_NORM);
            }
            
        }
        
        self.air_finished = time + 12.000;
        self.dmg = 2.000;
    }
    
    
    if(!self.waterlevel)
    {
        
        if(self.flags & FL_INWATER)
        {
            sound(self, CHAN_BODY, "misc/outwater.wav", 1.000, ATTN_NORM);
            self.flags = self.flags - FL_INWATER;
        }
        
        return;
    }
    
    if(self.watertype == CONTENT_LAVA)
    {
        
        if(self.dmgtime < time)
        {
            if(self.radsuit_finished > time)
            {
                self.dmgtime = time + 1.000;
            }
            else
            {
                self.dmgtime = time + 0.200;
            }
            
            T_Damage(self, world, world, 20.000 * self.waterlevel);
        }
        
    }
    else
    {
        
        if(self.watertype == CONTENT_SLIME)
        {
            
            if((self.dmgtime < time) && (self.radsuit_finished < time))
            {
                self.dmgtime = time + 1.000;
                T_Damage(self, world, world, 8.000 * self.waterlevel);
            }
            
        }
        
    }
    
    
    if(!(self.flags & FL_INWATER))
    {
        
        if(self.watertype == CONTENT_LAVA)
        {
            sound(self, CHAN_BODY, "player/inlava.wav", 1.000, ATTN_NORM);
        }
        
        
        if(self.watertype == CONTENT_WATER)
        {
            sound(self, CHAN_BODY, "player/inh2o.wav", 1.000, ATTN_NORM);
        }
        
        
        if(self.watertype == CONTENT_SLIME)
        {
            sound(self, CHAN_BODY, "player/slimbrn2.wav", 1.000, ATTN_NORM);
        }
        
        self.flags = self.flags + FL_INWATER;
        self.dmgtime = 0.000;
    }
    
    
    if(!(self.flags & FL_WATERJUMP))
    {
        self.velocity = self.velocity - (((0.800 * self.waterlevel) * frametime) * self.velocity);
    }
    
};

// CheckWaterJump
// function begins at statement 18175, parm_start=13002
// OP_LOAD_V	28	117	13008
// OP_STORE_V	13008	4	0
// OP_CALL1	461	0	0
// OP_LOAD_V	28	105	13011
// OP_STORE_V	13011	13002	0
// OP_ADD_F	13004	843	13014
// OP_STORE_F	13014	13004	0
// OP_STORE_F	817	61	0
// OP_STORE_V	59	4	0
// OP_CALL1	468	0	0
// OP_MUL_VF	59	13015	13016
// OP_ADD_V	13002	13016	13019
// OP_STORE_V	13019	13005	0
// OP_STORE_V	13002	4	0
// OP_STORE_V	13005	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_LT	70	819	13022
// OP_IFNOT	13022	34	0
// OP_LOAD_F	28	141	13023
// OP_ADD_F	13004	13023	13024
// OP_SUB_F	13024	843	13025
// OP_STORE_F	13025	13004	0
// OP_MUL_VF	59	13015	13026
// OP_ADD_V	13002	13026	13029
// OP_STORE_V	13029	13005	0
// OP_ADDRESS	28	202	13032
// OP_MUL_VF	74	13035	13036
// OP_STOREP_V	13036	13032	0
// OP_STORE_V	13002	4	0
// OP_STORE_V	13005	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_EQ_F	70	819	13039
// OP_IFNOT	13039	17	0
// OP_ADDRESS	28	182	13040
// OP_LOAD_F	28	182	13041
// OP_BITOR	13041	230	13042
// OP_STOREP_F	13042	13040	0
// OP_ADDRESS	28	116	13043
// OP_STOREP_F	9612	13043	0
// OP_ADDRESS	28	182	13044
// OP_LOAD_F	28	182	13045
// OP_LOAD_F	28	182	13046
// OP_BITAND	13046	231	13047
// OP_SUB_F	13045	13047	13048
// OP_STOREP_F	13048	13044	0
// OP_ADDRESS	28	186	13049
// OP_ADD_F	31	821	13050
// OP_STOREP_F	13050	13049	0
// OP_RETURN	0	0	0
// OP_DONE	0	0	0
void () CheckWaterJump = 
{
    local vector start;
    local vector end;
    makevectors(self.angles);
    start = self.origin;
    start_z = 0.000 + 8.000;
    v_forward_z = 0.000;
    normalize(v_forward);
    end = start + (v_forward * 24.000);
    traceline(start, end, TRUE, self);
    
    if(trace_fraction < 1.000)
    {
        start_z = (0.000 + self.maxs_z) - 8.000;
        end = start + (v_forward * 24.000);
        self.movedir = trace_plane_normal * -50.000;
        traceline(start, end, TRUE, self);
        
        if(trace_fraction == 1.000)
        {
            self.flags = self.flags | FL_WATERJUMP;
            self.velocity_z = 225.000;
            self.flags = self.flags - (self.flags & FL_JUMPRELEASED);
            self.teleport_time = time + 2.000;
            return;
        }
        
    }
    
};

// PlayerPreThink
// function begins at statement 18229, parm_start=13051
// OP_LOAD_F	28	644	13059
// OP_BITAND	13059	698	13060
// OP_IFNOT	13060	2	0
// OP_RETURN	0	0	0
// OP_IFNOT	12321	3	0
// OP_CALL0	12455	0	0
// OP_RETURN	0	0	0
// OP_LOAD_V	28	166	13061
// OP_EQ_V	13061	926	13064
// OP_IFNOT	13064	2	0
// OP_RETURN	0	0	0
// OP_LOAD_V	28	175	13065
// OP_STORE_V	13065	4	0
// OP_CALL1	461	0	0
// OP_CALL0	12821	0	0
// OP_CALL0	12922	0	0
// OP_LOAD_F	28	152	13068
// OP_GT	13068	817	13069
// OP_LOAD_F	28	189	13070
// OP_GE	13070	821	13071
// OP_AND	13069	13071	13072
// OP_IFNOT	13072	22	0
// OP_STORE_V	28	4	0
// OP_STORE_V	13073	7	0
// OP_CALL2	480	0	0
// OP_CALL0	12512	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	12102	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	819	16	0
// OP_CALL5	467	0	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	13058	0
// OP_ADDRESS	13058	201	13074
// OP_STOREP_ENT	28	13074	0
// OP_ADDRESS	13058	378	13075
// OP_STOREP_F	11200	13075	0
// OP_ADDRESS	13058	148	13076
// OP_STOREP_FNC	7194	13076	0
// OP_ADDRESS	13058	150	13077
// OP_ADD_F	31	819	13078
// OP_STOREP_F	13078	13077	0
// OP_LOAD_F	28	165	13079
// OP_GE	13079	254	13080
// OP_IFNOT	13080	3	0
// OP_CALL0	12833	0	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	165	13081
// OP_EQ_F	13081	253	13082
// OP_IFNOT	13082	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	431	13083
// OP_LT	31	13083	13084
// OP_IFNOT	13084	3	0
// OP_ADDRESS	28	113	13085
// OP_STOREP_V	926	13085	0
// OP_CALL0	5105	0	0
// OP_DONE	0	0	0
void () PlayerPreThink = 
{
    local float r;
    local vector v1;
    local vector v2;
    local entity water_think;
    
    if(self.racing_flags & QR_OBSERVER)
    {
        return;
    }
    
    
    if(intermission_running)
    {
        IntermissionThink();
        return;
    }
    
    
    if(self.view_ofs == '0.000 0.000 0.000')
    {
        return;
    }
    
    makevectors(self.v_angle);
    CheckRules();
    WaterMove();
    
    if((self.health > 0.000) && (self.waterlevel >= 2.000))
    {
        stuffcmd(self, "v_cshift 0 0 64 255\n");
        respawn();
        sound(self, CHAN_AUTO, "player/h2ojump.wav", 1.000, 1.000);
        water_think = spawn();
        water_think.owner = self;
        water_think.speed = 255.000;
        water_think.think = WaterScreenThink;
        water_think.nextthink = time + 1.000;
    }
    
    
    if(self.deadflag >= DEAD_DEAD)
    {
        PlayerDeathThink();
        return;
    }
    
    
    if(self.deadflag == DEAD_DYING)
    {
        return;
    }
    
    
    if(time < self.pausetime)
    {
        self.velocity = '0.000 0.000 0.000';
    }
    
    VehiclePreThink();
};

// CheckPowerups
// function begins at statement 18288, parm_start=13089
// OP_LOAD_F	28	152	13089
// OP_LE	13089	817	13090
// OP_IFNOT	13090	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	390	13091
// OP_IFNOT	13091	63	0
// OP_LOAD_F	28	396	13092
// OP_LT	13092	31	13093
// OP_IFNOT	13093	13	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	9052	10	0
// OP_STORE_V	1182	13	0
// OP_STORE_V	341	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	396	13094
// OP_CALL0	466	0	0
// OP_MUL_F	1	823	13095
// OP_ADD_F	13095	819	13096
// OP_ADD_F	31	13096	13097
// OP_STOREP_F	13097	13094	0
// OP_LOAD_F	28	390	13098
// OP_ADD_F	31	823	13099
// OP_LT	13098	13099	13100
// OP_IFNOT	13100	28	0
// OP_LOAD_F	28	395	13101
// OP_EQ_F	13101	819	13102
// OP_IFNOT	13102	16	0
// OP_STORE_V	28	4	0
// OP_STORE_V	13103	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	6225	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	9051	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	395	13104
// OP_ADD_F	31	819	13105
// OP_STOREP_F	13105	13104	0
// OP_LOAD_F	28	395	13106
// OP_LT	13106	31	13107
// OP_IFNOT	13107	7	0
// OP_ADDRESS	28	395	13108
// OP_ADD_F	31	819	13109
// OP_STOREP_F	13109	13108	0
// OP_STORE_V	28	4	0
// OP_STORE_V	6225	7	0
// OP_CALL2	480	0	0
// OP_LOAD_F	28	390	13110
// OP_LT	13110	31	13111
// OP_IFNOT	13111	9	0
// OP_ADDRESS	28	162	13112
// OP_LOAD_F	28	162	13113
// OP_SUB_F	13113	286	13114
// OP_STOREP_F	13114	13112	0
// OP_ADDRESS	28	390	13115
// OP_STOREP_F	817	13115	0
// OP_ADDRESS	28	395	13116
// OP_STOREP_F	817	13116	0
// OP_ADDRESS	28	131	13117
// OP_STOREP_F	817	13117	0
// OP_ADDRESS	28	93	13118
// OP_STOREP_F	12319	13118	0
// OP_GOTO	3	0	0
// OP_ADDRESS	28	93	13119
// OP_STOREP_F	12320	13119	0
// OP_LOAD_F	28	389	13120
// OP_IFNOT	13120	57	0
// OP_LOAD_F	28	389	13121
// OP_ADD_F	31	823	13122
// OP_LT	13121	13122	13123
// OP_IFNOT	13123	28	0
// OP_LOAD_F	28	393	13124
// OP_EQ_F	13124	819	13125
// OP_IFNOT	13125	16	0
// OP_STORE_V	28	4	0
// OP_STORE_V	13126	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	6225	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	9033	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	393	13127
// OP_ADD_F	31	819	13128
// OP_STOREP_F	13128	13127	0
// OP_LOAD_F	28	393	13129
// OP_LT	13129	31	13130
// OP_IFNOT	13130	7	0
// OP_ADDRESS	28	393	13131
// OP_ADD_F	31	819	13132
// OP_STOREP_F	13132	13131	0
// OP_STORE_V	28	4	0
// OP_STORE_V	6225	7	0
// OP_CALL2	480	0	0
// OP_LOAD_F	28	389	13133
// OP_LT	13133	31	13134
// OP_IFNOT	13134	9	0
// OP_ADDRESS	28	162	13135
// OP_LOAD_F	28	162	13136
// OP_SUB_F	13136	287	13137
// OP_STOREP_F	13137	13135	0
// OP_ADDRESS	28	393	13138
// OP_STOREP_F	817	13138	0
// OP_ADDRESS	28	389	13139
// OP_STOREP_F	817	13139	0
// OP_LOAD_F	28	389	13140
// OP_GT	13140	31	13141
// OP_IFNOT	13141	6	0
// OP_ADDRESS	28	133	13142
// OP_LOAD_F	28	133	13143
// OP_BITOR	13143	350	13144
// OP_STOREP_F	13144	13142	0
// OP_GOTO	7	0	0
// OP_ADDRESS	28	133	13145
// OP_LOAD_F	28	133	13146
// OP_LOAD_F	28	133	13147
// OP_BITAND	13147	350	13148
// OP_SUB_F	13146	13148	13149
// OP_STOREP_F	13149	13145	0
// OP_LOAD_F	28	391	13150
// OP_IFNOT	13150	57	0
// OP_LOAD_F	28	391	13151
// OP_ADD_F	31	823	13152
// OP_LT	13151	13152	13153
// OP_IFNOT	13153	28	0
// OP_LOAD_F	28	397	13154
// OP_EQ_F	13154	819	13155
// OP_IFNOT	13155	16	0
// OP_STORE_V	28	4	0
// OP_STORE_V	13156	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	6225	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	9061	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	397	13157
// OP_ADD_F	31	819	13158
// OP_STOREP_F	13158	13157	0
// OP_LOAD_F	28	397	13159
// OP_LT	13159	31	13160
// OP_IFNOT	13160	7	0
// OP_ADDRESS	28	397	13161
// OP_ADD_F	31	819	13162
// OP_STOREP_F	13162	13161	0
// OP_STORE_V	28	4	0
// OP_STORE_V	6225	7	0
// OP_CALL2	480	0	0
// OP_LOAD_F	28	391	13163
// OP_LT	13163	31	13164
// OP_IFNOT	13164	9	0
// OP_ADDRESS	28	162	13165
// OP_LOAD_F	28	162	13166
// OP_SUB_F	13166	289	13167
// OP_STOREP_F	13167	13165	0
// OP_ADDRESS	28	391	13168
// OP_STOREP_F	817	13168	0
// OP_ADDRESS	28	397	13169
// OP_STOREP_F	817	13169	0
// OP_LOAD_F	28	391	13170
// OP_GT	13170	31	13171
// OP_IFNOT	13171	6	0
// OP_ADDRESS	28	133	13172
// OP_LOAD_F	28	133	13173
// OP_BITOR	13173	350	13174
// OP_STOREP_F	13174	13172	0
// OP_GOTO	7	0	0
// OP_ADDRESS	28	133	13175
// OP_LOAD_F	28	133	13176
// OP_LOAD_F	28	133	13177
// OP_BITAND	13177	350	13178
// OP_SUB_F	13176	13178	13179
// OP_STOREP_F	13179	13175	0
// OP_LOAD_F	28	392	13180
// OP_IFNOT	13180	46	0
// OP_ADDRESS	28	405	13181
// OP_ADD_F	31	834	13182
// OP_STOREP_F	13182	13181	0
// OP_LOAD_F	28	392	13183
// OP_ADD_F	31	823	13184
// OP_LT	13183	13184	13185
// OP_IFNOT	13185	28	0
// OP_LOAD_F	28	399	13186
// OP_EQ_F	13186	819	13187
// OP_IFNOT	13187	16	0
// OP_STORE_V	28	4	0
// OP_STORE_V	13188	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	6225	7	0
// OP_CALL2	480	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	9042	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	399	13189
// OP_ADD_F	31	819	13190
// OP_STOREP_F	13190	13189	0
// OP_LOAD_F	28	399	13191
// OP_LT	13191	31	13192
// OP_IFNOT	13192	7	0
// OP_ADDRESS	28	399	13193
// OP_ADD_F	31	819	13194
// OP_STOREP_F	13194	13193	0
// OP_STORE_V	28	4	0
// OP_STORE_V	6225	7	0
// OP_CALL2	480	0	0
// OP_LOAD_F	28	392	13195
// OP_LT	13195	31	13196
// OP_IFNOT	13196	9	0
// OP_ADDRESS	28	162	13197
// OP_LOAD_F	28	162	13198
// OP_SUB_F	13198	288	13199
// OP_STOREP_F	13199	13197	0
// OP_ADDRESS	28	399	13200
// OP_STOREP_F	817	13200	0
// OP_ADDRESS	28	392	13201
// OP_STOREP_F	817	13201	0
// OP_DONE	0	0	0
void () CheckPowerups = 
{
    
    if(self.health <= 0.000)
    {
        return;
    }
    
    if(self.invisible_finished)
    {
        
        if(self.invisible_sound < time)
        {
            sound(self, CHAN_AUTO, "items/inv3.wav", 0.500, ATTN_IDLE);
            self.invisible_sound = time + ((random() * 3.000) + 1.000);
        }
        
        
        if(self.invisible_finished < (time + 3.000))
        {
            
            if(self.invisible_time == 1.000)
            {
                sprint(self, "Ring of Shadows magic is fading\n");
                stuffcmd(self, "bf\n");
                sound(self, CHAN_AUTO, "items/inv2.wav", 1.000, ATTN_NORM);
                self.invisible_time = time + 1.000;
            }
            
            
            if(self.invisible_time < time)
            {
                self.invisible_time = time + 1.000;
                stuffcmd(self, "bf\n");
            }
            
        }
        
        
        if(self.invisible_finished < time)
        {
            self.items = self.items - IT_INVISIBILITY;
            self.invisible_finished = 0.000;
            self.invisible_time = 0.000;
        }
        
        self.frame = 0.000;
        self.modelindex = modelindex_eyes;
    }
    else
    {
        self.modelindex = modelindex_player;
    }
    
    
    if(self.invincible_finished)
    {
        
        if(self.invincible_finished < (time + 3.000))
        {
            
            if(self.invincible_time == 1.000)
            {
                sprint(self, "Protection is almost burned out\n");
                stuffcmd(self, "bf\n");
                sound(self, CHAN_AUTO, "items/protect2.wav", 1.000, ATTN_NORM);
                self.invincible_time = time + 1.000;
            }
            
            
            if(self.invincible_time < time)
            {
                self.invincible_time = time + 1.000;
                stuffcmd(self, "bf\n");
            }
            
        }
        
        
        if(self.invincible_finished < time)
        {
            self.items = self.items - IT_INVULNERABILITY;
            self.invincible_time = 0.000;
            self.invincible_finished = 0.000;
        }
        
        if(self.invincible_finished > time)
        {
            self.effects = self.effects | EF_DIMLIGHT;
        }
        else
        {
            self.effects = self.effects - (self.effects & EF_DIMLIGHT);
        }
        
    }
    
    
    if(self.super_damage_finished)
    {
        
        if(self.super_damage_finished < (time + 3.000))
        {
            
            if(self.super_time == 1.000)
            {
                sprint(self, "Quad Damage is wearing off\n");
                stuffcmd(self, "bf\n");
                sound(self, CHAN_AUTO, "items/damage2.wav", 1.000, ATTN_NORM);
                self.super_time = time + 1.000;
            }
            
            
            if(self.super_time < time)
            {
                self.super_time = time + 1.000;
                stuffcmd(self, "bf\n");
            }
            
        }
        
        
        if(self.super_damage_finished < time)
        {
            self.items = self.items - IT_QUAD;
            self.super_damage_finished = 0.000;
            self.super_time = 0.000;
        }
        
        if(self.super_damage_finished > time)
        {
            self.effects = self.effects | EF_DIMLIGHT;
        }
        else
        {
            self.effects = self.effects - (self.effects & EF_DIMLIGHT);
        }
        
    }
    
    
    if(self.radsuit_finished)
    {
        self.air_finished = time + 12.000;
        
        if(self.radsuit_finished < (time + 3.000))
        {
            
            if(self.rad_time == 1.000)
            {
                sprint(self, "Air supply in Biosuit expiring\n");
                stuffcmd(self, "bf\n");
                sound(self, CHAN_AUTO, "items/suit2.wav", 1.000, ATTN_NORM);
                self.rad_time = time + 1.000;
            }
            
            
            if(self.rad_time < time)
            {
                self.rad_time = time + 1.000;
                stuffcmd(self, "bf\n");
            }
            
        }
        
        
        if(self.radsuit_finished < time)
        {
            self.items = self.items - IT_SUIT;
            self.rad_time = 0.000;
            self.radsuit_finished = 0.000;
        }
        
    }
    
};

// PlayerPostThink
// function begins at statement 18522, parm_start=13202
// OP_LOAD_F	28	644	13208
// OP_BITAND	13208	698	13209
// OP_IFNOT	13209	9	0
// OP_LOAD_S	28	130	13210
// OP_NE_S	13210	4128	13211
// OP_IFNOT	13211	4	0
// OP_STORE_V	28	4	0
// OP_STORE_V	4128	7	0
// OP_CALL2	463	0	0
// OP_CALL0	540	0	0
// OP_RETURN	0	0	0
// OP_EQ_F	738	825	13212
// OP_LOAD_F	28	182	13213
// OP_BITAND	13213	225	13214
// OP_AND	13212	13214	13215
// OP_IFNOT	13215	6	0
// OP_STORE_V	28	4	0
// OP_STORE_V	13216	7	0
// OP_CALL2	483	0	0
// OP_ADDRESS	28	152	13217
// OP_STOREP_F	819	13217	0
// OP_LOAD_V	28	621	13218
// OP_STORE_V	13218	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	13203	0
// OP_LOAD_V	28	113	13221
// OP_STORE_V	13221	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	13202	0
// OP_LT	13202	13203	13224
// OP_IFNOT	13224	33	0
// OP_DIV_F	778	823	13225
// OP_GT	13203	13225	13226
// OP_SUB_F	13203	13202	13227
// OP_GT	13227	4760	13228
// OP_AND	13226	13228	13229
// OP_IFNOT	13229	27	0
// OP_LOAD_V	28	105	13230
// OP_STORE_V	13230	4	0
// OP_STORE_V	13233	7	0
// OP_CALL2	481	0	0
// OP_STORE_ENT	1	13206	0
// OP_NE_E	13206	30	13234
// OP_LOAD_S	13206	129	13235
// OP_NE_S	13235	880	13236
// OP_AND	13234	13236	13237
// OP_LOAD_S	13206	129	13238
// OP_NE_S	13238	1187	13239
// OP_AND	13237	13239	13240
// OP_IFNOT	13240	4	0
// OP_LOAD_ENT	13206	164	13241
// OP_STORE_ENT	13241	13206	0
// OP_GOTO	-10	0	0
// OP_NE_E	13206	30	13242
// OP_IFNOT	13242	9	0
// OP_LOAD_F	28	116	13243
// OP_STORE_F	13243	13205	0
// OP_ADDRESS	28	113	13244
// OP_LOAD_V	28	621	13247
// OP_MUL_VF	13247	2319	13250
// OP_STOREP_V	13250	13244	0
// OP_ADDRESS	28	116	13253
// OP_STOREP_F	13205	13253	0
// OP_IFNOT	719	5	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	109	13254
// OP_STORE_V	13254	7	0
// OP_CALL2	462	0	0
// OP_LOAD_S	28	129	13257
// OP_EQ_S	13257	880	13258
// OP_IFNOT	13258	3	0
// OP_ADDRESS	28	119	13259
// OP_STOREP_F	542	13259	0
// OP_LOAD_V	28	166	13260
// OP_EQ_V	13260	926	13263
// OP_IFNOT	13263	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	165	13264
// OP_IFNOT	13264	2	0
// OP_RETURN	0	0	0
// OP_CALL0	11203	0	0
// OP_LOAD_F	28	182	13265
// OP_BITAND	13265	228	13266
// OP_NOT_F	13266	0	13267
// OP_IFNOT	13267	4	0
// OP_ADDRESS	28	403	13268
// OP_LOAD_F	28	116	13269
// OP_STOREP_F	13269	13268	0
// OP_CALL0	13088	0	0
// OP_CALL0	1154	0	0
// OP_DONE	0	0	0
void () PlayerPostThink = 
{
    local float mspeed;
    local float aspeed;
    local float r;
    local float zvel;
    local entity ent;
    local entity mine;
    
    if(self.racing_flags & QR_OBSERVER)
    {
        
        if(self.model != "")
        {
            setmodel(self, "");
        }
        
        ImpulseCommands();
        return;
    }
    
    
    if((rally_type_index == 4.000) && (self.flags & FL_GODMODE))
    {
        sprint(self, "Cheats never prosper..");
        self.health = 1.000;
    }
    
    aspeed = vlen(self.last_velocity);
    mspeed = vlen(self.velocity);
    
    if(mspeed < aspeed)
    {
        
        if((aspeed > (MAX_SPEED / 3.000)) && ((aspeed - mspeed) > 200.000))
        {
            ent = findradius(self.origin, 196.000);
            
            while(((ent != world) && (ent.classname != "player")) && (ent.classname != "rally_bot"))
            {
                ent = ent.chain;
            }
            
            
            if(ent != world)
            {
                zvel = self.velocity_z;
                self.velocity = self.last_velocity * 0.900;
                self.velocity_z = zvel;
            }
            
        }
        
    }
    
    
    if(hold_flag)
    {
        setorigin(self, self.oldorigin);
    }
    
    
    if(self.classname == "player")
    {
        self.angles_y = 0.000;
    }
    
    
    if(self.view_ofs == '0.000 0.000 0.000')
    {
        return;
    }
    
    
    if(self.deadflag)
    {
        return;
    }
    
    W_WeaponFrame();
    
    if(!(self.flags & FL_ONGROUND))
    {
        self.jump_flag = self.velocity_z;
    }
    
    CheckPowerups();
    MoveVehicle();
};

// ClientConnect
// function begins at statement 18613, parm_start=13270
// OP_STORE_F	218	13274	0
// OP_LT	738	823	13275
// OP_IFNOT	13275	4	0
// OP_NE_E	726	30	13276
// OP_IFNOT	13276	2	0
// OP_STORE_F	219	13274	0
// OP_IFNOT	13274	5	0
// OP_ADDRESS	28	644	13277
// OP_LOAD_F	28	644	13278
// OP_BITOR	13278	698	13279
// OP_STOREP_F	13279	13277	0
// OP_LOAD_S	28	180	13280
// OP_STORE_V	13280	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	13281	4	0
// OP_CALL1	482	0	0
// OP_ADDRESS	28	547	13282
// OP_STOREP_ENT	30	13282	0
// OP_IFNOT	12321	2	0
// OP_CALL0	12428	0	0
// OP_DONE	0	0	0
void () ClientConnect = 
{
    local entity spot;
    local vector vec;
    local float make_observer;
    make_observer = FALSE;
    
    if(rally_type_index < 3.000)
    {
        
        if(current_leader != world)
        {
            make_observer = TRUE;
        }
        
    }
    
    
    if(make_observer)
    {
        self.racing_flags = self.racing_flags | QR_OBSERVER;
    }
    
    bprint(self.netname);
    bprint(" entered the game\n");
    self.veh_tail = world;
    
    if(intermission_running)
    {
        ExitIntermission();
    }
    
};

// RestartMap
// function begins at statement 18634, parm_start=13284
// OP_STORE_V	34	4	0
// OP_CALL1	518	0	0
// OP_DONE	0	0	0
void () RestartMap = 
{
    changelevel(mapname);
};

// ClientDisconnect
// function begins at statement 18637, parm_start=13284
// OP_IFNOT	356	2	0
// OP_RETURN	0	0	0
// OP_CALL0	5865	0	0
// OP_LT	738	823	13287
// OP_NE_E	726	30	13288
// OP_AND	13287	13288	13289
// OP_IFNOT	13289	49	0
// OP_STORE_V	949	4	0
// OP_CALL1	501	0	0
// OP_LOAD_ENT	28	667	13290
// OP_EQ_E	13290	30	13291
// OP_AND	1	13291	13292
// OP_LOAD_ENT	28	668	13293
// OP_EQ_E	13293	30	13294
// OP_AND	13292	13294	13295
// OP_IFNOT	13295	10	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	13285	0
// OP_ADDRESS	13285	148	13296
// OP_STOREP_FNC	13283	13296	0
// OP_ADDRESS	13285	150	13297
// OP_ADD_F	31	1152	13298
// OP_STOREP_F	13298	13297	0
// OP_STORE_ENT	30	726	0
// OP_GOTO	30	0	0
// OP_LOAD_ENT	28	667	13299
// OP_NE_E	13299	30	13300
// OP_IFNOT	13300	17	0
// OP_LOAD_ENT	28	668	13301
// OP_NE_E	13301	30	13302
// OP_IFNOT	13302	10	0
// OP_LOAD_ENT	28	667	13303
// OP_ADDRESS	13303	668	13304
// OP_LOAD_ENT	28	668	13305
// OP_STOREP_ENT	13305	13304	0
// OP_LOAD_ENT	28	668	13306
// OP_ADDRESS	13306	667	13307
// OP_LOAD_ENT	28	667	13308
// OP_STOREP_ENT	13308	13307	0
// OP_GOTO	4	0	0
// OP_LOAD_ENT	28	667	13309
// OP_ADDRESS	13309	668	13310
// OP_STOREP_ENT	30	13310	0
// OP_GOTO	11	0	0
// OP_LOAD_ENT	28	668	13311
// OP_NE_E	13311	30	13312
// OP_IFNOT	13312	7	0
// OP_LOAD_ENT	28	668	13313
// OP_ADDRESS	13313	667	13314
// OP_STOREP_ENT	30	13314	0
// OP_LOAD_ENT	28	668	13315
// OP_STORE_ENT	13315	726	0
// OP_GOTO	2	0	0
// OP_STORE_ENT	30	726	0
// OP_GOTO	25	0	0
// OP_STORE_F	817	13286	0
// OP_STORE_ENT	30	13284	0
// OP_STORE_V	13284	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	880	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	13284	0
// OP_NE_E	1	30	13316
// OP_IFNOT	13316	6	0
// OP_NE_E	13284	28	13317
// OP_IFNOT	13317	3	0
// OP_ADD_F	13286	819	13318
// OP_STORE_F	13318	13286	0
// OP_GOTO	-11	0	0
// OP_NOT_F	13286	0	13319
// OP_IFNOT	13319	9	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	13285	0
// OP_ADDRESS	13285	148	13320
// OP_STOREP_FNC	13283	13320	0
// OP_ADDRESS	13285	150	13321
// OP_ADD_F	31	1152	13322
// OP_STOREP_F	13322	13321	0
// OP_STORE_ENT	30	726	0
// OP_LOAD_S	28	180	13323
// OP_STORE_V	13323	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	13324	4	0
// OP_CALL1	482	0	0
// OP_LOAD_F	28	153	13325
// OP_STORE_V	13325	4	0
// OP_CALL1	485	0	0
// OP_STORE_V	1	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	13326	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	338	7	0
// OP_STORE_V	12088	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	339	16	0
// OP_CALL5	467	0	0
// OP_CALL0	12511	0	0
// OP_LE	738	821	13327
// OP_NE_E	720	30	13328
// OP_AND	13327	13328	13329
// OP_IFNOT	13329	36	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	880	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	13284	0
// OP_NE_E	13284	30	13330
// OP_IFNOT	13330	21	0
// OP_NE_E	13284	28	13331
// OP_LOAD_F	13284	644	13332
// OP_BITAND	13332	692	13333
// OP_NOT_F	13333	0	13334
// OP_AND	13331	13334	13335
// OP_LOAD_F	13284	644	13336
// OP_BITAND	13336	698	13337
// OP_NOT_F	13337	0	13338
// OP_AND	13335	13338	13339
// OP_LOAD_F	13284	165	13340
// OP_NOT_F	13340	0	13341
// OP_AND	13339	13341	13342
// OP_IFNOT	13342	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	13284	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	880	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	13284	0
// OP_GOTO	-21	0	0
// OP_ADDRESS	720	644	13343
// OP_LOAD_F	720	644	13344
// OP_LOAD_F	720	644	13345
// OP_BITAND	13345	690	13346
// OP_SUB_F	13344	13346	13347
// OP_STOREP_F	13347	13343	0
// OP_ADDRESS	720	640	13348
// OP_STOREP_F	823	13348	0
// OP_DONE	0	0	0
void () ClientDisconnect = 
{
    local entity plyr;
    local entity restartent;
    local float pcount;
    
    if(gameover)
    {
        return;
    }
    
    DestroyVehicleParts();
    if((rally_type_index < 3.000) && (current_leader != world))
    {
        if((cvar("deathmatch") && (self.ahead == world)) && (self.behind == world))
        {
            restartent = spawn();
            restartent.think = RestartMap;
            restartent.nextthink = time + 0.200;
            current_leader = world;
        }
        else
        {
            if(self.ahead != world)
            {
                if(self.behind != world)
                {
                    self.ahead.behind = self.behind;
                    self.behind.ahead = self.ahead;
                }
                else
                {
                    self.ahead.behind = world;
                }
                
            }
            else
            {
                if(self.behind != world)
                {
                    self.behind.ahead = world;
                    current_leader = self.behind;
                }
                else
                {
                    current_leader = world;
                }
                
            }
            
        }
        
    }
    else
    {
        pcount = 0.000;
        plyr = world;
        plyr = find(plyr, classname, "player");
        
        while(find(plyr, classname, "player") != world)
        {
            
            if(plyr != self)
            {
                pcount = pcount + 1.000;
            }
            
        }
        
        
        if(!pcount)
        {
            restartent = spawn();
            restartent.think = RestartMap;
            restartent.nextthink = time + 0.200;
            current_leader = world;
        }
        
    }
    
    bprint(self.netname);
    bprint(" left the game with ");
    bprint(ftos(self.frags));
    bprint(" frags\n");
    sound(self, CHAN_BODY, "player/tornoff2.wav", 1.000, ATTN_NONE);
    set_suicide_frame();
    
    if((rally_type_index <= 2.000) && (starter != world))
    {
        plyr = find(world, classname, "player");
        
        while(plyr != world)
        {
            
            if((((plyr != self) && (!(plyr.racing_flags & QR_START_READY))) && (!(plyr.racing_flags & QR_OBSERVER))) && !plyr.deadflag)
            {
                return;
            }
            
            plyr = find(plyr, classname, "player");
        }
        
        starter.racing_flags = starter.racing_flags - (starter.racing_flags & QR_NOT_RACING);
        starter.last_lap = 3.000;
    }
    
};

// ClientObituary
// function begins at statement 18775, parm_start=13349
// OP_CALL0	466	0	0
// OP_STORE_F	1	13351	0
// OP_EQ_F	738	825	13355
// OP_IFNOT	13355	2	0
// OP_RETURN	0	0	0
// OP_LT	738	821	13356
// OP_IFNOT	13356	2	0
// OP_RETURN	0	0	0
// OP_LOAD_S	13349	129	13357
// OP_EQ_S	13357	880	13358
// OP_IFNOT	13358	293	0
// OP_LOAD_S	13350	129	13359
// OP_EQ_S	13359	13360	13361
// OP_IFNOT	13361	19	0
// OP_LOAD_S	13349	180	13362
// OP_STORE_V	13362	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	13363	4	0
// OP_CALL1	482	0	0
// OP_LOAD_ENT	13350	201	13364
// OP_LOAD_S	13364	180	13365
// OP_STORE_V	13365	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	888	4	0
// OP_CALL1	482	0	0
// OP_LOAD_ENT	13350	201	13366
// OP_ADDRESS	13366	153	13367
// OP_LOAD_ENT	13350	201	13368
// OP_LOAD_F	13368	153	13369
// OP_ADD_F	13369	819	13370
// OP_STOREP_F	13370	13367	0
// OP_RETURN	0	0	0
// OP_LOAD_S	13350	129	13371
// OP_EQ_S	13371	13372	13373
// OP_IFNOT	13373	13	0
// OP_STORE_V	13374	4	0
// OP_CALL1	482	0	0
// OP_LOAD_S	13349	180	13375
// OP_STORE_V	13375	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	13376	4	0
// OP_CALL1	482	0	0
// OP_ADDRESS	13349	153	13377
// OP_LOAD_F	13349	153	13378
// OP_SUB_F	13378	819	13379
// OP_STOREP_F	13379	13377	0
// OP_RETURN	0	0	0
// OP_LOAD_S	13350	129	13380
// OP_EQ_S	13380	880	13381
// OP_IFNOT	13381	112	0
// OP_EQ_E	13349	13350	13382
// OP_IFNOT	13382	23	0
// OP_GE	738	823	13383
// OP_IFNOT	13383	5	0
// OP_ADDRESS	13350	153	13384
// OP_LOAD_F	13350	153	13385
// OP_SUB_F	13385	819	13386
// OP_STOREP_F	13386	13384	0
// OP_LOAD_S	13349	180	13387
// OP_STORE_V	13387	4	0
// OP_CALL1	482	0	0
// OP_LOAD_F	13349	154	13388
// OP_EQ_F	13388	2223	13389
// OP_LOAD_F	13349	189	13390
// OP_GT	13390	819	13391
// OP_AND	13389	13391	13392
// OP_IFNOT	13392	4	0
// OP_STORE_V	13393	4	0
// OP_CALL1	482	0	0
// OP_RETURN	0	0	0
// OP_STORE_V	13394	4	0
// OP_CALL1	482	0	0
// OP_RETURN	0	0	0
// OP_GOTO	86	0	0
// OP_ADDRESS	13349	407	13395
// OP_STOREP_S	3473	13395	0
// OP_IFNOT	3473	43	0
// OP_ADDRESS	13350	153	13396
// OP_LOAD_F	13350	153	13397
// OP_ADD_F	13397	819	13398
// OP_STOREP_F	13398	13396	0
// OP_CALL0	466	0	0
// OP_MUL_F	1	823	13399
// OP_STORE_F	13399	13351	0
// OP_LT	13351	819	13400
// OP_IFNOT	13400	10	0
// OP_LOAD_S	13350	180	13401
// OP_STORE_V	13401	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	13402	4	0
// OP_CALL1	482	0	0
// OP_LOAD_S	13349	180	13403
// OP_STORE_V	13403	4	0
// OP_CALL1	482	0	0
// OP_GOTO	20	0	0
// OP_LT	13351	821	13404
// OP_IFNOT	13404	10	0
// OP_LOAD_S	13349	180	13405
// OP_STORE_V	13405	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	13406	4	0
// OP_CALL1	482	0	0
// OP_LOAD_S	13350	180	13407
// OP_STORE_V	13407	4	0
// OP_CALL1	482	0	0
// OP_GOTO	9	0	0
// OP_LOAD_S	13349	180	13408
// OP_STORE_V	13408	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	13409	4	0
// OP_CALL1	482	0	0
// OP_LOAD_S	13350	180	13410
// OP_STORE_V	13410	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	888	4	0
// OP_CALL1	482	0	0
// OP_ADDRESS	13349	407	13411
// OP_STOREP_S	4128	13411	0
// OP_GOTO	41	0	0
// OP_ADDRESS	13350	153	13412
// OP_LOAD_F	13350	153	13413
// OP_ADD_F	13413	819	13414
// OP_STOREP_F	13414	13412	0
// OP_LOAD_F	13350	154	13415
// OP_STORE_F	13415	13351	0
// OP_EQ_F	13351	277	13416
// OP_IFNOT	13416	3	0
// OP_STORE_S	13417	13353	0
// OP_STORE_S	888	13354	0
// OP_EQ_F	13351	263	13418
// OP_IFNOT	13418	3	0
// OP_STORE_S	13419	13353	0
// OP_STORE_S	13420	13354	0
// OP_EQ_F	13351	279	13421
// OP_IFNOT	13421	3	0
// OP_STORE_S	13422	13353	0
// OP_STORE_S	13423	13354	0
// OP_EQ_F	13351	278	13424
// OP_IFNOT	13424	3	0
// OP_STORE_S	13425	13353	0
// OP_STORE_S	13426	13354	0
// OP_EQ_F	13351	280	13427
// OP_IFNOT	13427	3	0
// OP_STORE_S	13428	13353	0
// OP_STORE_S	13429	13354	0
// OP_EQ_F	13351	265	13430
// OP_IFNOT	13430	3	0
// OP_STORE_S	13431	13353	0
// OP_STORE_S	13432	13354	0
// OP_LOAD_S	13349	180	13433
// OP_STORE_V	13433	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	13353	4	0
// OP_CALL1	482	0	0
// OP_LOAD_S	13350	180	13434
// OP_STORE_V	13434	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	13354	4	0
// OP_CALL1	482	0	0
// OP_RETURN	0	0	0
// OP_GOTO	143	0	0
// OP_ADDRESS	13349	153	13435
// OP_LOAD_F	13349	153	13436
// OP_SUB_F	13436	819	13437
// OP_STOREP_F	13437	13435	0
// OP_LOAD_S	13349	180	13438
// OP_STORE_V	13438	4	0
// OP_CALL1	482	0	0
// OP_LOAD_F	13350	182	13439
// OP_BITAND	13439	224	13440
// OP_IFNOT	13440	4	0
// OP_STORE_V	13441	4	0
// OP_CALL1	482	0	0
// OP_RETURN	0	0	0
// OP_LOAD_S	13350	129	13442
// OP_EQ_S	13442	13443	13444
// OP_IFNOT	13444	4	0
// OP_STORE_V	13445	4	0
// OP_CALL1	482	0	0
// OP_RETURN	0	0	0
// OP_LOAD_F	13350	104	13446
// OP_EQ_F	13446	247	13447
// OP_NE_E	13350	30	13448
// OP_AND	13447	13448	13449
// OP_IFNOT	13449	4	0
// OP_STORE_V	13450	4	0
// OP_CALL1	482	0	0
// OP_RETURN	0	0	0
// OP_LOAD_S	13350	129	13451
// OP_EQ_S	13451	13452	13453
// OP_LOAD_S	13350	129	13454
// OP_EQ_S	13454	13455	13456
// OP_OR	13453	13456	13457
// OP_IFNOT	13457	4	0
// OP_STORE_V	13458	4	0
// OP_CALL1	482	0	0
// OP_RETURN	0	0	0
// OP_LOAD_S	13350	129	13459
// OP_EQ_S	13459	13460	13461
// OP_IFNOT	13461	4	0
// OP_STORE_V	13462	4	0
// OP_CALL1	482	0	0
// OP_RETURN	0	0	0
// OP_LOAD_S	13350	129	13463
// OP_EQ_S	13463	12811	13464
// OP_IFNOT	13464	4	0
// OP_STORE_V	13465	4	0
// OP_CALL1	482	0	0
// OP_RETURN	0	0	0
// OP_LOAD_F	13349	190	13466
// OP_STORE_F	13466	13351	0
// OP_EQ_F	13351	13467	13468
// OP_IFNOT	13468	17	0
// OP_CALL0	466	0	0
// OP_STORE_F	1	13352	0
// OP_LT	13352	1930	13469
// OP_IFNOT	13469	4	0
// OP_STORE_V	13470	4	0
// OP_CALL1	482	0	0
// OP_GOTO	8	0	0
// OP_LT	13352	2619	13471
// OP_IFNOT	13471	4	0
// OP_STORE_V	13472	4	0
// OP_CALL1	482	0	0
// OP_GOTO	3	0	0
// OP_STORE_V	13473	4	0
// OP_CALL1	482	0	0
// OP_RETURN	0	0	0
// OP_GOTO	30	0	0
// OP_EQ_F	13351	9450	13474
// OP_IFNOT	13474	11	0
// OP_CALL0	466	0	0
// OP_LT	1	1182	13475
// OP_IFNOT	13475	4	0
// OP_STORE_V	13476	4	0
// OP_CALL1	482	0	0
// OP_GOTO	3	0	0
// OP_STORE_V	13477	4	0
// OP_CALL1	482	0	0
// OP_RETURN	0	0	0
// OP_GOTO	18	0	0
// OP_EQ_F	13351	1483	13478
// OP_IFNOT	13478	16	0
// OP_LOAD_F	13349	152	13479
// OP_LT	13479	3214	13480
// OP_IFNOT	13480	4	0
// OP_STORE_V	13481	4	0
// OP_CALL1	482	0	0
// OP_RETURN	0	0	0
// OP_CALL0	466	0	0
// OP_LT	1	1182	13482
// OP_IFNOT	13482	4	0
// OP_STORE_V	13483	4	0
// OP_CALL1	482	0	0
// OP_GOTO	3	0	0
// OP_STORE_V	13484	4	0
// OP_CALL1	482	0	0
// OP_RETURN	0	0	0
// OP_LOAD_S	13349	407	13485
// OP_EQ_S	13485	13486	13487
// OP_IFNOT	13487	6	0
// OP_ADDRESS	13349	407	13488
// OP_STOREP_S	4128	13488	0
// OP_STORE_V	13489	4	0
// OP_CALL1	482	0	0
// OP_RETURN	0	0	0
// OP_LOAD_S	13349	407	13490
// OP_EQ_S	13490	1817	13491
// OP_IFNOT	13491	22	0
// OP_ADDRESS	13349	407	13492
// OP_STOREP_S	4128	13492	0
// OP_CALL0	466	0	0
// OP_MUL_F	1	823	13493
// OP_STORE_F	13493	13352	0
// OP_LT	13352	819	13494
// OP_IFNOT	13494	4	0
// OP_STORE_V	13495	4	0
// OP_CALL1	482	0	0
// OP_GOTO	10	0	0
// OP_LE	13352	821	13496
// OP_IFNOT	13496	4	0
// OP_STORE_V	13497	4	0
// OP_CALL1	482	0	0
// OP_GOTO	5	0	0
// OP_LE	13352	823	13498
// OP_IFNOT	13498	3	0
// OP_STORE_V	13499	4	0
// OP_CALL1	482	0	0
// OP_RETURN	0	0	0
// OP_GOTO	12	0	0
// OP_LOAD_S	13349	407	13500
// OP_EQ_S	13500	3620	13501
// OP_IFNOT	13501	9	0
// OP_ADDRESS	13349	407	13502
// OP_STOREP_S	4128	13502	0
// OP_STORE_V	13503	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	13349	4	0
// OP_STORE_V	13504	7	0
// OP_CALL2	520	0	0
// OP_RETURN	0	0	0
// OP_STORE_V	13441	4	0
// OP_CALL1	482	0	0
// OP_DONE	0	0	0
void (entity targ, entity attacker) ClientObituary = 
{
    local float rnum;
    local float rnd;
    local string deathstring;
    local string deathstring2;
    rnum = random();
    
    if(rally_type_index == 4.000)
    {
        return;
    }
    
    
    if(rally_type_index < 2.000)
    {
        return;
    }
    
    
    if(targ.classname == "player")
    {
        
        if(attacker.classname == "teledeath")
        {
            bprint(targ.netname);
            bprint(" was telefragged by ");
            bprint(attacker.owner.netname);
            bprint("\n");
            attacker.owner.frags = attacker.owner.frags + 1.000;
            return;
        }
        
        
        if(attacker.classname == "teledeath2")
        {
            bprint("Satan's power deflects ");
            bprint(targ.netname);
            bprint("'s telefrag\n");
            targ.frags = targ.frags - 1.000;
            return;
        }
        
        if(attacker.classname == "player")
        {
            if(targ == attacker)
            {
                
                if(rally_type_index >= 3.000)
                {
                    attacker.frags = attacker.frags - 1.000;
                }
                
                bprint(targ.netname);
                
                if((targ.weapon == 64.000) && (targ.waterlevel > 1.000))
                {
                    bprint(" discharges into the water.\n");
                    return;
                }
                
                bprint(" becomes bored with life\n");
                return;
            }
            else
            {
                targ.deathtype = "car_collision";
                if("car_collision")
                {
                    attacker.frags = attacker.frags + 1.000;
                    rnum = random() * 3.000;
                    if(rnum < 1.000)
                    {
                        bprint(attacker.netname);
                        bprint(" demolished ");
                        bprint(targ.netname);
                    }
                    else
                    {
                        if(rnum < 2.000)
                        {
                            bprint(targ.netname);
                            bprint(" was rammed by ");
                            bprint(attacker.netname);
                        }
                        else
                        {
                            bprint(targ.netname);
                            bprint(" suffered a fatal collision with ");
                            bprint(attacker.netname);
                        }
                        
                    }
                    
                    bprint("\n");
                    targ.deathtype = "";
                }
                else
                {
                    attacker.frags = attacker.frags + 1.000;
                    rnum = attacker.weapon;
                    
                    if(rnum == IT_ROOBAR)
                    {
                        deathstring = " was demolished by ";
                        deathstring2 = "\n";
                    }
                    
                    
                    if(rnum == IT_SUPER_NAILGUN)
                    {
                        deathstring = " was smothered in ";
                        deathstring2 = "'s nails\n";
                    }
                    
                    
                    if(rnum == IT_MINE_LAUNCHER)
                    {
                        deathstring = " was destroyed by ";
                        deathstring2 = "'s mine\n";
                    }
                    
                    
                    if(rnum == IT_DETONATOR)
                    {
                        deathstring = " couldn't shake ";
                        deathstring2 = "'s detonator\n";
                    }
                    
                    
                    if(rnum == IT_LASER_GUN)
                    {
                        deathstring = " was cooked by ";
                        deathstring2 = "'s lasers\n";
                    }
                    
                    
                    if(rnum == IT_ROCKET_LAUNCHER)
                    {
                        deathstring = " rides ";
                        deathstring2 = "'s rocket\n";
                    }
                    
                    bprint(targ.netname);
                    bprint(deathstring);
                    bprint(attacker.netname);
                    bprint(deathstring2);
                }
                
            }
            
            return;
        }
        else
        {
            targ.frags = targ.frags - 1.000;
            bprint(targ.netname);
            
            if(attacker.flags & FL_MONSTER)
            {
                bprint(" died\n");
                return;
            }
            
            
            if(attacker.classname == "explo_box")
            {
                bprint(" blew up\n");
                return;
            }
            
            
            if((attacker.solid == SOLID_BSP) && (attacker != world))
            {
                bprint(" was squished\n");
                return;
            }
            
            
            if((attacker.classname == "trap_shooter") || (attacker.classname == "trap_spikeshooter"))
            {
                bprint(" was spiked\n");
                return;
            }
            
            
            if(attacker.classname == "fireball")
            {
                bprint(" ate a lavaball\n");
                return;
            }
            
            
            if(attacker.classname == "trigger_changelevel")
            {
                bprint(" tried to leave\n");
                return;
            }
            
            rnum = targ.watertype;
            if(rnum == -3.000)
            {
                rnd = random();
                if(rnd < 0.400)
                {
                    bprint(" sleeps with the fishes\n");
                }
                else
                {
                    if(rnd < 0.700)
                    {
                        bprint(" sucks it down\n");
                    }
                    else
                    {
                        bprint("'s car exploded underwater\n");
                    }
                    
                }
                
                return;
            }
            else
            {
                if(rnum == -4.000)
                {
                    if(random() < 0.500)
                    {
                        bprint(" gulped a load of slime\n");
                    }
                    else
                    {
                        bprint(" can't exist on slime alone\n");
                    }
                    
                    return;
                }
                else
                {
                    
                    if(rnum == -5.000)
                    {
                        
                        if(targ.health < -15.000)
                        {
                            bprint(" burst into flames\n");
                            return;
                        }
                        
                        if(random() < 0.500)
                        {
                            bprint(" turned into hot slag\n");
                        }
                        else
                        {
                            bprint(" visits the Volcano God\n");
                        }
                        
                        return;
                    }
                    
                }
                
            }
            
            
            if(targ.deathtype == "falling")
            {
                targ.deathtype = "";
                bprint(" fell to his death\n");
                return;
            }
            
            if(targ.deathtype == "rolled_car")
            {
                targ.deathtype = "";
                rnd = random() * 3.000;
                if(rnd < 1.000)
                {
                    bprint(" lost control\n");
                }
                else
                {
                    if(rnd <= 2.000)
                    {
                        bprint(" crashed and burnt\n");
                    }
                    else
                    {
                        
                        if(rnd <= 3.000)
                        {
                            bprint(" kissed the dirt\n");
                        }
                        
                    }
                    
                }
                
                return;
            }
            else
            {
                
                if(targ.deathtype == "repulsor_feedback")
                {
                    targ.deathtype = "";
                    bprint("'s repulsor overloaded\n");
                    centerprint(targ, "Repsulor Feedback");
                    return;
                }
                
            }
            
            bprint(" died\n");
        }
        
    }
    
};

float BOT_ACCEL = 800.000;
float BOT_TURNSPEED = 90.000;
float BOT_MAXSPEED = 800.000;
float BOT_MAX_SLOWDOWN = 10.000;
.vector lastpostorg;
.vector backup_velocity;
.float last_think_time;
.float maxspeed;
.float last_changemaxspeed_time;
.float speeding_up;
// FindGoalMarker
// function begins at statement 19079, parm_start=13521
// OP_LOAD_ENT	13521	194	13524
// OP_LOAD_F	13524	158	13525
// OP_EQ_F	13525	733	13526
// OP_IFNOT	13526	3	0
// OP_STORE_F	819	13523	0
// OP_GOTO	5	0	0
// OP_LOAD_ENT	13521	194	13527
// OP_LOAD_F	13527	158	13528
// OP_ADD_F	13528	819	13529
// OP_STORE_F	13529	13523	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	6733	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	13522	0
// OP_NE_E	13522	30	13530
// OP_IFNOT	13530	11	0
// OP_LOAD_F	13522	158	13531
// OP_EQ_F	13531	13523	13532
// OP_IFNOT	13532	2	0
// OP_RETURN	13522	0	0
// OP_STORE_V	13522	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	6733	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	13522	0
// OP_GOTO	-11	0	0
// OP_STORE_V	13533	4	0
// OP_CALL1	484	0	0
// OP_LOAD_ENT	13521	194	13534
// OP_RETURN	13534	0	0
// OP_DONE	0	0	0
entity (entity bot) FindGoalMarker = 
{
    local entity goal;
    local float marker_no;
    if(bot.goalentity.ammo_shells == num_markers)
    {
        marker_no = 1.000;
    }
    else
    {
        marker_no = bot.goalentity.ammo_shells + 1.000;
    }
    
    goal = find(world, classname, "rally_bot_marker");
    
    while(goal != world)
    {
        
        if(goal.ammo_shells == marker_no)
        {
            return goal;
        }
        
        goal = find(goal, classname, "rally_bot_marker");
    }
    
    dprint("BOT_ERROR: Unable to find next bot marker\n");
    return bot.goalentity;
};

.entity e_avoid;
// checkforjump
// function begins at statement 19111, parm_start=13537
// OP_RETURN	218	0	0
// OP_DONE	0	0	0
float (entity mt) checkforjump = 
{
    local float origheight;
    return FALSE;
};

// BotCheckMove
// function begins at statement 19113, parm_start=13540
// OP_MUL_VF	65	13540	13548
// OP_STORE_V	13548	13545	0
// OP_STORE_F	13542	13547	0
// OP_LOAD_ENT	28	432	13551
// OP_STORE_ENT	13551	13544	0
// OP_LOAD_V	28	105	13552
// OP_ADD_V	13552	13545	13555
// OP_STORE_V	13555	4	0
// OP_LOAD_V	13544	105	13558
// OP_ADD_V	13558	13545	13561
// OP_STORE_V	13561	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	13544	13	0
// OP_CALL4	475	0	0
// OP_LT	70	819	13564
// OP_LT	70	13543	13565
// OP_AND	13564	13565	13566
// OP_IFNOT	13566	3	0
// OP_RETURN	70	0	0
// OP_GOTO	2	0	0
// OP_RETURN	13543	0	0
// OP_DONE	0	0	0
float (vector offset, float frac) BotCheckMove = 
{
    local entity targ;
    local vector trans;
    trans = v_right * offset_x;
    trans_z = 0.000;
    targ = self.movetarget;
    traceline(self.origin + trans, targ.origin + trans, FALSE, targ);
    if((trace_fraction < 1.000) && (trace_fraction < frac))
    {
        return trace_fraction;
    }
    else
    {
        return frac;
    }
    
};

void () BotInAir;
// movetotarget
// function begins at statement 19135, parm_start=13569
// OP_STORE_F	817	13582	0
// OP_LOAD_ENT	28	432	13583
// OP_LOAD_V	13583	105	13584
// OP_LOAD_V	28	105	13587
// OP_SUB_V	13584	13587	13590
// OP_STORE_V	13590	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	13572	0
// OP_LOAD_V	28	105	13593
// OP_STORE_V	13593	13575	0
// OP_LOAD_V	28	113	13596
// OP_STORE_V	13596	4	0
// OP_CALL1	471	0	0
// OP_LOAD_F	28	13517	13599
// OP_SUB_F	31	13599	13600
// OP_MUL_F	1	13600	13601
// OP_STORE_F	13601	13581	0
// OP_GT	13581	817	13602
// OP_IFNOT	13602	10	0
// OP_LOAD_F	28	119	13603
// OP_STORE_V	13603	4	0
// OP_STORE_V	13581	7	0
// OP_CALL2	491	0	0
// OP_IFNOT	1	2	0
// OP_RETURN	219	0	0
// OP_SUB_F	13581	825	13604
// OP_STORE_F	13604	13581	0
// OP_GOTO	-10	0	0
// OP_RETURN	218	0	0
// OP_LOAD_ENT	28	432	13605
// OP_STORE_ENT	13605	13578	0
// OP_LOAD_F	28	182	13606
// OP_BITAND	13606	228	13607
// OP_IFNOT	13607	20	0
// OP_LOAD_V	28	105	13608
// OP_STORE_V	13608	13572	0
// OP_LOAD_V	28	113	13611
// OP_STORE_V	13611	4	0
// OP_CALL1	471	0	0
// OP_LOAD_F	28	13517	13614
// OP_SUB_F	31	13614	13615
// OP_MUL_F	1	13615	13616
// OP_STORE_F	13616	13581	0
// OP_LOAD_F	28	119	13617
// OP_STORE_V	13617	4	0
// OP_STORE_V	13581	7	0
// OP_CALL2	491	0	0
// OP_IFNOT	1	6	0
// OP_LOAD_F	28	108	13618
// OP_SUB_F	13574	13618	13619
// OP_LT	13619	2657	13620
// OP_IFNOT	13620	2	0
// OP_RETURN	219	0	0
// OP_STORE_V	13621	4	0
// OP_CALL1	482	0	0
// OP_STORE_F	819	13579	0
// OP_LOAD_V	28	117	13622
// OP_STORE_V	13622	4	0
// OP_CALL1	461	0	0
// OP_STORE_V	926	4	0
// OP_STORE_V	13579	7	0
// OP_CALL2	13539	0	0
// OP_STORE_F	1	13579	0
// OP_STORE_V	13625	4	0
// OP_STORE_V	13579	7	0
// OP_CALL2	13539	0	0
// OP_STORE_F	1	13579	0
// OP_STORE_V	13628	4	0
// OP_STORE_V	13579	7	0
// OP_CALL2	13539	0	0
// OP_STORE_F	1	13579	0
// OP_STORE_V	13631	4	0
// OP_STORE_V	13579	7	0
// OP_CALL2	13539	0	0
// OP_STORE_F	1	13579	0
// OP_STORE_V	13634	4	0
// OP_STORE_V	13579	7	0
// OP_CALL2	13539	0	0
// OP_STORE_F	1	13579	0
// OP_STORE_V	13637	4	0
// OP_STORE_V	13579	7	0
// OP_CALL2	13539	0	0
// OP_STORE_F	1	13579	0
// OP_STORE_V	13640	4	0
// OP_STORE_V	13579	7	0
// OP_CALL2	13539	0	0
// OP_STORE_F	1	13579	0
// OP_STORE_V	13643	4	0
// OP_STORE_V	13579	7	0
// OP_CALL2	13539	0	0
// OP_STORE_F	1	13579	0
// OP_STORE_V	13646	4	0
// OP_STORE_V	13579	7	0
// OP_CALL2	13539	0	0
// OP_STORE_F	1	13579	0
// OP_LT	13579	819	13649
// OP_LOAD_V	13578	105	13650
// OP_LOAD_V	28	105	13653
// OP_SUB_V	13650	13653	13656
// OP_MUL_FV	13579	13656	13659
// OP_STORE_V	13659	4	0
// OP_CALL1	471	0	0
// OP_LE	1	819	13662
// OP_AND	13649	13662	13663
// OP_IFNOT	13663	17	0
// OP_LOAD_F	28	182	13664
// OP_BITAND	13664	228	13665
// OP_NOT_F	13665	0	13666
// OP_IFNOT	13666	11	0
// OP_EQ_E	78	30	13667
// OP_IFNOT	13667	9	0
// OP_ADDRESS	28	113	13668
// OP_LOAD_V	28	113	13671
// OP_STORE_V	13671	4	0
// OP_CALL1	471	0	0
// OP_MUL_FV	1	74	13674
// OP_MUL_VF	13674	1182	13677
// OP_SUB_V	13677	5291	13680
// OP_STOREP_V	13680	13668	0
// OP_RETURN	218	0	0
// OP_GOTO	52	0	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	13683
// OP_LOAD_V	13578	105	13686
// OP_LOAD_V	28	105	13689
// OP_SUB_V	13686	13689	13692
// OP_MUL_VF	13692	13579	13695
// OP_ADD_V	13683	13695	13698
// OP_STORE_V	13698	7	0
// OP_CALL2	462	0	0
// OP_LT	13579	819	13701
// OP_IFNOT	13701	12	0
// OP_LOAD_V	13578	105	13702
// OP_LOAD_V	28	105	13705
// OP_SUB_V	13702	13705	13708
// OP_STORE_V	13708	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	13572	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	13711
// OP_SUB_V	13711	13572	13714
// OP_STORE_V	13714	7	0
// OP_CALL2	462	0	0
// OP_LOAD_F	28	182	13717
// OP_BITAND	13717	228	13718
// OP_STORE_V	28	4	0
// OP_CALL1	497	0	0
// OP_NOT_F	1	0	13719
// OP_AND	13718	13719	13720
// OP_IFNOT	13720	22	0
// OP_CALL0	13567	0	0
// OP_LOAD_V	28	117	13721
// OP_STORE_V	13721	13569	0
// OP_LOAD_ENT	28	548	13724
// OP_LOAD_F	13724	118	13725
// OP_STORE_F	13725	13569	0
// OP_STORE_V	13569	4	0
// OP_CALL1	461	0	0
// OP_ADDRESS	28	113	13726
// OP_LOAD_V	28	113	13729
// OP_STORE_V	13729	4	0
// OP_CALL1	471	0	0
// OP_MUL_VF	59	1	13732
// OP_STOREP_V	13732	13726	0
// OP_LOAD_F	28	116	13735
// OP_LT	13735	817	13736
// OP_IFNOT	13736	3	0
// OP_ADDRESS	28	116	13737
// OP_STOREP_F	817	13737	0
// OP_STORE_V	13738	4	0
// OP_CALL1	482	0	0
// OP_RETURN	219	0	0
// OP_DONE	0	0	0
float () movetotarget = 
{
    local vector trans;
    local vector vect;
    local vector org;
    local entity targ;
    local float frac;
    local float done;
    local float dist;
    local float i;
    i = 0.000;
    vect = normalize(self.movetarget.origin - self.origin);
    org = self.origin;
    dist = vlen(self.velocity) * (time - self.last_think_time);
    
    while(dist > 0.000)
    {
        
        if(walkmove(self.angles_y, dist))
        {
            return TRUE;
        }
        
        dist = dist - 4.000;
    }
    
    return FALSE;
    targ = self.movetarget;
    
    if(self.flags & FL_ONGROUND)
    {
        vect = self.origin;
        dist = vlen(self.velocity) * (time - self.last_think_time);
        
        if(walkmove(self.angles_y, dist))
        {
            
            if((0.000 - self.origin_z) < 32.000)
            {
                return TRUE;
            }
            
        }
        
    }
    
    bprint("using custom movement\n");
    frac = 1.000;
    makevectors(self.angles);
    frac = BotCheckMove('0.000 0.000 0.000', frac);
    frac = BotCheckMove('0.000 0.000 30.000', frac);
    frac = BotCheckMove('0.000 0.000 -14.000', frac);
    frac = BotCheckMove('15.000 0.000 0.000', frac);
    frac = BotCheckMove('-15.000 0.000 0.000', frac);
    frac = BotCheckMove('15.000 0.000 30.000', frac);
    frac = BotCheckMove('-15.000 0.000 30.000', frac);
    frac = BotCheckMove('15.000 0.000 -14.000', frac);
    frac = BotCheckMove('-15.000 0.000 -14.000', frac);
    if((frac < 1.000) && ((vlen(frac * (targ.origin - self.origin))) <= 1.000))
    {
        
        if(!(self.flags & FL_ONGROUND))
        {
            
            if(trace_ent == world)
            {
                self.velocity = ((vlen(self.velocity) * trace_plane_normal) * 0.500) - '0.000 0.000 50.000';
            }
            
        }
        
        return FALSE;
    }
    else
    {
        setorigin(self, self.origin + ((targ.origin - self.origin) * frac));
        
        if(frac < 1.000)
        {
            vect = normalize(targ.origin - self.origin);
            setorigin(self, self.origin - vect);
        }
        
        
        if((self.flags & FL_ONGROUND) && !checkbottom(self))
        {
            BotInAir();
            trans = self.angles;
            trans_x = self.veh_body.angles_x;
            makevectors(trans);
            self.velocity = v_forward * vlen(self.velocity);
            
            if(self.velocity_z < 0.000)
            {
                self.velocity_z = 0.000;
            }
            
            bprint("bot now in air: MOVETOTARGET\n");
        }
        
        return TRUE;
    }
    
};

// CheckInAir
// function begins at statement 19308, parm_start=13740
// OP_LOAD_V	28	105	13743
// OP_STORE_V	13743	13740	0
// OP_STORE_V	13740	4	0
// OP_SUB_V	13740	7028	13746
// OP_STORE_V	13746	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_LT	70	819	13749
// OP_IFNOT	13749	2	0
// OP_RETURN	218	0	0
// OP_ADD_V	13740	13750	13753
// OP_STORE_V	13753	4	0
// OP_ADD_V	13740	13756	13759
// OP_STORE_V	13759	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_LT	70	819	13762
// OP_IFNOT	13762	2	0
// OP_RETURN	218	0	0
// OP_ADD_V	13740	13763	13766
// OP_STORE_V	13766	4	0
// OP_ADD_V	13740	13769	13772
// OP_STORE_V	13772	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_LT	70	819	13775
// OP_IFNOT	13775	2	0
// OP_RETURN	218	0	0
// OP_ADD_V	13740	13776	13779
// OP_STORE_V	13779	4	0
// OP_ADD_V	13740	13782	13785
// OP_STORE_V	13785	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_LT	70	819	13788
// OP_IFNOT	13788	2	0
// OP_RETURN	218	0	0
// OP_ADD_V	13740	13789	13792
// OP_STORE_V	13792	4	0
// OP_ADD_V	13740	13795	13798
// OP_STORE_V	13798	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_LT	70	819	13801
// OP_IFNOT	13801	2	0
// OP_RETURN	218	0	0
// OP_RETURN	219	0	0
// OP_DONE	0	0	0
float () CheckInAir = 
{
    local vector org;
    org = self.origin;
    traceline(org, org - '0.000 0.000 32.000', FALSE, self);
    
    if(trace_fraction < 1.000)
    {
        return FALSE;
    }
    
    traceline(org + '14.000 14.000 0.000', org + '14.000 14.000 -32.000', FALSE, self);
    
    if(trace_fraction < 1.000)
    {
        return FALSE;
    }
    
    traceline(org + '-14.000 14.000 0.000', org + '-14.000 14.000 -32.000', FALSE, self);
    
    if(trace_fraction < 1.000)
    {
        return FALSE;
    }
    
    traceline(org + '14.000 -14.000 0.000', org + '14.000 -14.000 -32.000', FALSE, self);
    
    if(trace_fraction < 1.000)
    {
        return FALSE;
    }
    
    traceline(org + '-14.000 -14.000 0.000', org + '-14.000 -14.000 -32.000', FALSE, self);
    
    if(trace_fraction < 1.000)
    {
        return FALSE;
    }
    
    return TRUE;
};

// BotInAir
// function begins at statement 19361, parm_start=13802
// OP_STORE_V	13802	4	0
// OP_CALL1	482	0	0
// OP_ADDRESS	28	182	13803
// OP_LOAD_F	28	182	13804
// OP_LOAD_F	28	182	13805
// OP_BITAND	13805	228	13806
// OP_SUB_F	13804	13806	13807
// OP_STOREP_F	13807	13803	0
// OP_ADDRESS	28	683	13808
// OP_LOAD_F	28	683	13809
// OP_BITOR	13809	712	13810
// OP_STOREP_F	13810	13808	0
// OP_ADDRESS	28	592	13811
// OP_STOREP_F	817	13811	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	13812
// OP_ADD_V	13812	1215	13815
// OP_STORE_V	13815	7	0
// OP_CALL2	462	0	0
// OP_DONE	0	0	0
void () BotInAir = 
{
    bprint("bot is in air\n");
    self.flags = self.flags - (self.flags & FL_ONGROUND);
    self.bot_flags = self.bot_flags | BF_STARTJUMP;
    self.last_jump_z = 0.000;
    setorigin(self, self.origin + '0.000 0.000 1.000');
};

// bot_think
// function begins at statement 19381, parm_start=13819
// OP_ADDRESS	28	13509	13868
// OP_LOAD_V	28	109	13871
// OP_STOREP_V	13871	13868	0
// OP_ADDRESS	28	109	13874
// OP_LOAD_V	28	105	13877
// OP_STOREP_V	13877	13874	0
// OP_LOAD_F	28	182	13880
// OP_BITAND	13880	228	13881
// OP_NOT_F	13881	0	13882
// OP_STORE_V	28	4	0
// OP_CALL1	497	0	0
// OP_AND	13882	1	13883
// OP_IFNOT	13883	6	0
// OP_ADDRESS	28	182	13884
// OP_LOAD_F	28	182	13885
// OP_BITOR	13885	228	13886
// OP_STOREP_F	13886	13884	0
// OP_GOTO	7	0	0
// OP_LOAD_F	28	182	13887
// OP_BITAND	13887	228	13888
// OP_CALL0	13739	0	0
// OP_AND	13888	1	13889
// OP_IFNOT	13889	2	0
// OP_CALL0	13567	0	0
// OP_LOAD_F	28	13519	13890
// OP_SUB_F	31	821	13891
// OP_LT	13890	13891	13892
// OP_IFNOT	13892	52	0
// OP_STORE_F	855	13829	0
// OP_LOAD_F	28	13518	13893
// OP_LT	13893	13507	13894
// OP_IFNOT	13894	14	0
// OP_LOAD_F	28	13518	13895
// OP_SUB_F	13507	2611	13896
// OP_GT	13895	13896	13897
// OP_IFNOT	13897	7	0
// OP_LOAD_F	28	13520	13898
// OP_IFNOT	13898	3	0
// OP_STORE_F	839	13829	0
// OP_GOTO	2	0	0
// OP_STORE_F	837	13829	0
// OP_GOTO	3	0	0
// OP_ADDRESS	28	13520	13899
// OP_STOREP_F	219	13899	0
// OP_GOTO	13	0	0
// OP_LOAD_F	28	13518	13900
// OP_ADD_F	13507	2611	13901
// OP_LT	13900	13901	13902
// OP_IFNOT	13902	7	0
// OP_LOAD_F	28	13520	13903
// OP_IFNOT	13903	3	0
// OP_STORE_F	839	13829	0
// OP_GOTO	2	0	0
// OP_STORE_F	837	13829	0
// OP_GOTO	3	0	0
// OP_ADDRESS	28	13520	13904
// OP_STOREP_F	218	13904	0
// OP_ADDRESS	28	13518	13905
// OP_LOAD_F	28	13518	13906
// OP_CALL0	466	0	0
// OP_MUL_F	1	1112	13907
// OP_ADD_F	13906	13907	13908
// OP_SUB_F	13908	13829	13909
// OP_STOREP_F	13909	13905	0
// OP_LOAD_F	28	13518	13910
// OP_SUB_F	13507	1957	13911
// OP_LT	13910	13911	13912
// OP_IFNOT	13912	5	0
// OP_ADDRESS	28	13518	13913
// OP_SUB_F	13507	1957	13914
// OP_STOREP_F	13914	13913	0
// OP_GOTO	8	0	0
// OP_LOAD_F	28	13518	13915
// OP_ADD_F	13507	1957	13916
// OP_GT	13915	13916	13917
// OP_IFNOT	13917	4	0
// OP_ADDRESS	28	13518	13918
// OP_ADD_F	13507	1957	13919
// OP_STOREP_F	13919	13918	0
// OP_LOAD_F	28	182	13920
// OP_BITAND	13920	228	13921
// OP_NOT_F	13921	0	13922
// OP_IFNOT	13922	18	0
// OP_ADDRESS	28	595	13923
// OP_STOREP_V	926	13923	0
// OP_ADDRESS	28	116	13926
// OP_LOAD_F	28	116	13927
// OP_STORE_V	3176	4	0
// OP_CALL1	501	0	0
// OP_LOAD_F	28	13517	13928
// OP_SUB_F	31	13928	13929
// OP_MUL_F	1	13929	13930
// OP_SUB_F	13927	13930	13931
// OP_STOREP_F	13931	13926	0
// OP_LOAD_F	28	116	13932
// OP_LT	13932	13933	13934
// OP_IFNOT	13934	3	0
// OP_ADDRESS	28	116	13935
// OP_STOREP_F	13933	13935	0
// OP_GOTO	3	0	0
// OP_ADDRESS	28	116	13936
// OP_STOREP_F	817	13936	0
// OP_LOAD_F	28	116	13937
// OP_STORE_F	13937	13830	0
// OP_LOAD_F	28	182	13938
// OP_BITAND	13938	228	13939
// OP_IFNOT	13939	94	0
// OP_LOAD_ENT	28	547	13940
// OP_LOAD_V	13940	555	13941
// OP_STORE_V	13941	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	13850	0
// OP_STORE_V	13851	4	0
// OP_LOAD_ENT	28	548	13944
// OP_LOAD_F	13944	119	13945
// OP_STORE_V	13945	7	0
// OP_CALL2	860	0	0
// OP_STORE_V	1	4	0
// OP_CALL1	499	0	0
// OP_GT	1	845	13946
// OP_IFNOT	13946	8	0
// OP_ADDRESS	28	113	13947
// OP_LOAD_V	28	113	13950
// OP_CALL0	466	0	0
// OP_MUL_F	1	1988	13953
// OP_SUB_F	2319	13953	13954
// OP_MUL_VF	13950	13954	13955
// OP_STOREP_V	13955	13947	0
// OP_LOAD_ENT	28	194	13958
// OP_LOAD_V	13958	105	13959
// OP_LOAD_V	28	105	13962
// OP_SUB_V	13959	13962	13965
// OP_STORE_V	13965	13819	0
// OP_STORE_V	13819	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	13819	0
// OP_LOAD_F	28	13517	13968
// OP_SUB_F	31	13968	13969
// OP_MUL_F	13505	13969	13970
// OP_CALL0	466	0	0
// OP_SUB_F	1	1182	13971
// OP_MUL_F	13971	1152	13972
// OP_ADD_F	819	13972	13973
// OP_MUL_F	13970	13973	13974
// OP_STORE_F	13974	13862	0
// OP_LOAD_V	28	113	13975
// OP_STORE_V	13975	4	0
// OP_CALL1	471	0	0
// OP_EQ_F	1	817	13978
// OP_IFNOT	13978	11	0
// OP_ADDRESS	28	113	13979
// OP_LOAD_ENT	28	194	13982
// OP_LOAD_V	13982	105	13983
// OP_LOAD_V	28	105	13986
// OP_SUB_V	13983	13986	13989
// OP_STORE_V	13989	4	0
// OP_CALL1	468	0	0
// OP_MUL_VF	1	855	13992
// OP_STOREP_V	13992	13979	0
// OP_GOTO	19	0	0
// OP_LT	37	823	13995
// OP_LOAD_F	28	666	13996
// OP_EQ_F	13996	819	13997
// OP_AND	13995	13997	13998
// OP_IFNOT	13998	6	0
// OP_LOAD_F	28	13517	13999
// OP_SUB_F	31	13999	14000
// OP_MUL_F	13505	14000	14001
// OP_MUL_F	14001	2236	14002
// OP_STORE_F	14002	13862	0
// OP_ADDRESS	28	113	14003
// OP_LOAD_V	28	113	14006
// OP_LOAD_V	28	113	14009
// OP_STORE_V	14009	4	0
// OP_CALL1	468	0	0
// OP_MUL_VF	1	13862	14012
// OP_ADD_V	14006	14012	14015
// OP_STOREP_V	14015	14003	0
// OP_STORE_F	819	13864	0
// OP_LT	37	823	14018
// OP_LOAD_F	28	666	14019
// OP_EQ_F	14019	819	14020
// OP_AND	14018	14020	14021
// OP_IFNOT	14021	2	0
// OP_STORE_F	2236	13864	0
// OP_LOAD_V	28	113	14022
// OP_STORE_V	14022	4	0
// OP_CALL1	471	0	0
// OP_LOAD_F	28	13518	14025
// OP_MUL_F	14025	13864	14026
// OP_GT	1	14026	14027
// OP_IFNOT	14027	9	0
// OP_ADDRESS	28	113	14028
// OP_LOAD_V	28	113	14031
// OP_STORE_V	14031	4	0
// OP_CALL1	468	0	0
// OP_LOAD_F	28	13518	14034
// OP_MUL_F	14034	13864	14035
// OP_MUL_VF	1	14035	14036
// OP_STOREP_V	14036	14028	0
// OP_LOAD_V	28	113	14039
// OP_STORE_V	14039	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	13828	0
// OP_LOAD_F	28	182	14042
// OP_BITAND	14042	228	14043
// OP_IFNOT	14043	167	0
// OP_LOAD_F	28	683	14044
// OP_BITAND	14044	710	14045
// OP_NOT_F	14045	0	14046
// OP_LOAD_F	28	182	14047
// OP_BITAND	14047	711	14048
// OP_NOT_F	14048	0	14049
// OP_AND	14046	14049	14050
// OP_IFNOT	14050	39	0
// OP_LOAD_V	28	105	14051
// OP_STORE_V	14051	4	0
// OP_LOAD_ENT	28	194	14054
// OP_LOAD_V	14054	105	14055
// OP_STORE_V	14055	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_EQ_F	70	819	14058
// OP_IFNOT	14058	3	0
// OP_STORE_F	13820	13829	0
// OP_GOTO	3	0	0
// OP_LOAD_F	28	191	14059
// OP_STORE_F	14059	13829	0
// OP_ADDRESS	28	119	14060
// OP_LOAD_F	28	119	14061
// OP_STORE_V	14061	4	0
// OP_STORE_V	13829	7	0
// OP_STORE_V	13506	10	0
// OP_CALL3	1453	0	0
// OP_STOREP_F	1	14060	0
// OP_LOAD_F	28	119	14062
// OP_STORE_V	14062	4	0
// OP_STORE_V	13829	7	0
// OP_CALL2	860	0	0
// OP_STORE_V	1	4	0
// OP_CALL1	499	0	0
// OP_GT	1	5499	14063
// OP_IFNOT	14063	10	0
// OP_ADDRESS	28	113	14064
// OP_LOAD_V	28	113	14067
// OP_LOAD_V	28	113	14070
// OP_STORE_V	14070	4	0
// OP_CALL1	468	0	0
// OP_MUL_VF	1	13862	14073
// OP_MUL_VF	14073	821	14076
// OP_SUB_V	14067	14076	14079
// OP_STOREP_V	14079	14064	0
// OP_LOAD_F	28	119	14082
// OP_EQ_F	14082	13820	14083
// OP_LOAD_F	28	683	14084
// OP_BITAND	14084	710	14085
// OP_NOT_F	14085	0	14086
// OP_AND	14083	14086	14087
// OP_IFNOT	14087	114	0
// OP_LOAD_V	28	117	14088
// OP_STORE_V	14088	4	0
// OP_CALL1	461	0	0
// OP_LOAD_V	28	105	14091
// OP_STORE_V	14091	13825	0
// OP_STORE_V	13825	4	0
// OP_MUL_VF	59	14094	14095
// OP_ADD_V	13825	14095	14098
// OP_STORE_V	14098	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_EQ_E	78	30	14101
// OP_IFNOT	14101	12	0
// OP_LOAD_V	28	105	14102
// OP_MUL_VF	65	2670	14105
// OP_SUB_V	14102	14105	14108
// OP_STORE_V	14108	13825	0
// OP_STORE_V	13825	4	0
// OP_MUL_VF	59	14094	14111
// OP_ADD_V	13825	14111	14114
// OP_STORE_V	14114	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_EQ_E	78	30	14117
// OP_IFNOT	14117	12	0
// OP_LOAD_V	28	105	14118
// OP_MUL_VF	65	2670	14121
// OP_ADD_V	14118	14121	14124
// OP_STORE_V	14124	13825	0
// OP_STORE_V	13825	4	0
// OP_MUL_VF	59	14094	14127
// OP_ADD_V	13825	14127	14130
// OP_STORE_V	14130	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_EQ_E	78	30	14133
// OP_IFNOT	14133	12	0
// OP_LOAD_V	28	105	14134
// OP_MUL_VF	65	2657	14137
// OP_SUB_V	14134	14137	14140
// OP_STORE_V	14140	13825	0
// OP_STORE_V	13825	4	0
// OP_MUL_VF	59	14094	14143
// OP_ADD_V	13825	14143	14146
// OP_STORE_V	14146	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_EQ_E	78	30	14149
// OP_IFNOT	14149	12	0
// OP_LOAD_V	28	105	14150
// OP_MUL_VF	65	2657	14153
// OP_ADD_V	14150	14153	14156
// OP_STORE_V	14156	13825	0
// OP_STORE_V	13825	4	0
// OP_MUL_VF	59	14094	14159
// OP_ADD_V	13825	14159	14162
// OP_STORE_V	14162	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_EQ_E	78	30	14165
// OP_IFNOT	14165	12	0
// OP_LOAD_V	28	105	14166
// OP_MUL_VF	65	3330	14169
// OP_SUB_V	14166	14169	14172
// OP_STORE_V	14172	13825	0
// OP_STORE_V	13825	4	0
// OP_MUL_VF	59	14094	14175
// OP_ADD_V	13825	14175	14178
// OP_STORE_V	14178	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_EQ_E	78	30	14181
// OP_IFNOT	14181	12	0
// OP_LOAD_V	28	105	14182
// OP_MUL_VF	65	3330	14185
// OP_ADD_V	14182	14185	14188
// OP_STORE_V	14188	13825	0
// OP_STORE_V	13825	4	0
// OP_MUL_VF	59	14094	14191
// OP_ADD_V	13825	14191	14194
// OP_STORE_V	14194	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_NE_E	78	30	14197
// OP_LOAD_F	78	104	14198
// OP_EQ_F	14198	245	14199
// OP_AND	14197	14199	14200
// OP_LOAD_V	78	113	14201
// OP_STORE_V	14201	4	0
// OP_CALL1	471	0	0
// OP_LT	1	13828	14204
// OP_AND	14200	14204	14205
// OP_IFNOT	14205	8	0
// OP_ADDRESS	28	13535	14206
// OP_STOREP_ENT	78	14206	0
// OP_ADDRESS	28	683	14207
// OP_LOAD_F	28	683	14208
// OP_BITOR	14208	711	14209
// OP_STOREP_F	14209	14207	0
// OP_GOTO	7	0	0
// OP_ADDRESS	28	683	14210
// OP_LOAD_F	28	683	14211
// OP_LOAD_F	28	683	14212
// OP_BITAND	14212	711	14213
// OP_SUB_F	14211	14213	14214
// OP_STOREP_F	14214	14210	0
// OP_LOAD_ENT	28	432	14215
// OP_STORE_V	14215	4	0
// OP_LOAD_V	28	105	14216
// OP_LOAD_V	28	113	14219
// OP_LOAD_F	28	13517	14222
// OP_SUB_F	31	14222	14223
// OP_MUL_VF	14219	14223	14224
// OP_ADD_V	14216	14224	14227
// OP_STORE_V	14227	7	0
// OP_CALL2	462	0	0
// OP_LOAD_V	28	105	14230
// OP_LOAD_ENT	28	194	14233
// OP_LOAD_V	14233	105	14234
// OP_SUB_V	14230	14234	14237
// OP_STORE_V	14237	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	13865	0
// OP_CALL0	84	0	0
// OP_STORE_F	219	13849	0
// OP_LOAD_F	28	182	14240
// OP_BITAND	14240	228	14241
// OP_IFNOT	14241	37	0
// OP_LOAD_ENT	28	432	14242
// OP_LOAD_V	14242	105	14243
// OP_STORE_V	14243	13825	0
// OP_LOAD_ENT	28	432	14246
// OP_STORE_ENT	14246	28	0
// OP_LOAD_ENT	28	548	14247
// OP_LOAD_V	14247	117	14248
// OP_STORE_V	14248	4	0
// OP_CALL1	461	0	0
// OP_ADDRESS	28	105	14251
// OP_LOAD_V	28	105	14254
// OP_ADD_V	14254	1666	14257
// OP_ADD_F	61	1182	14260
// OP_MUL_VF	1215	14260	14261
// OP_LOAD_V	28	105	14264
// OP_LOAD_ENT	28	201	14267
// OP_LOAD_V	14267	105	14268
// OP_SUB_V	14264	14268	14271
// OP_STORE_V	14271	4	0
// OP_CALL1	471	0	0
// OP_MUL_VF	14261	1	14274
// OP_ADD_V	14257	14274	14277
// OP_STOREP_V	14277	14251	0
// OP_CALL0	492	0	0
// OP_IFNOT	1	8	0
// OP_LOAD_F	28	108	14280
// OP_SUB_F	13827	14280	14281
// OP_GT	14281	13015	14282
// OP_IFNOT	14282	3	0
// OP_ADDRESS	28	105	14283
// OP_STOREP_V	13825	14283	0
// OP_GOTO	3	0	0
// OP_ADDRESS	28	105	14286
// OP_STOREP_V	13825	14286	0
// OP_LOAD_ENT	28	201	14289
// OP_STORE_ENT	14289	28	0
// OP_LOAD_F	28	182	14290
// OP_BITAND	14290	228	14291
// OP_IFNOT	14291	231	0
// OP_IFNOT	13849	229	0
// OP_CALL0	13568	0	0
// OP_NOT_F	1	0	14292
// OP_LOAD_F	28	683	14293
// OP_BITAND	14293	711	14294
// OP_OR	14292	14294	14295
// OP_IFNOT	14295	217	0
// OP_LOAD_V	28	105	14296
// OP_LOAD_V	28	109	14299
// OP_EQ_V	14296	14299	14302
// OP_IFNOT	14302	5	0
// OP_ADDRESS	28	683	14303
// OP_LOAD_F	28	683	14304
// OP_BITOR	14304	710	14305
// OP_STOREP_F	14305	14303	0
// OP_LOAD_V	28	105	14306
// OP_LOAD_V	28	109	14309
// OP_SUB_V	14306	14309	14312
// OP_STORE_V	14312	4	0
// OP_CALL1	471	0	0
// OP_LOAD_F	28	13517	14315
// OP_SUB_F	31	14315	14316
// OP_DIV_F	1	14316	14317
// OP_STORE_F	14317	13828	0
// OP_LOAD_V	28	113	14318
// OP_STORE_V	14318	4	0
// OP_CALL1	468	0	0
// OP_MUL_VF	1	13828	14321
// OP_STORE_V	14321	13837	0
// OP_STORE_V	13837	4	0
// OP_CALL1	471	0	0
// OP_SUB_F	13828	1	14324
// OP_GT	14324	13508	14325
// OP_IFNOT	14325	9	0
// OP_ADDRESS	28	113	14326
// OP_LOAD_V	28	113	14329
// OP_STORE_V	13837	4	0
// OP_CALL1	468	0	0
// OP_MUL_VF	1	13508	14332
// OP_SUB_V	14329	14332	14335
// OP_STOREP_V	14335	14326	0
// OP_GOTO	3	0	0
// OP_ADDRESS	28	113	14338
// OP_STOREP_V	13837	14338	0
// OP_LOAD_F	28	683	14341
// OP_BITAND	14341	710	14342
// OP_NOT_F	14342	0	14343
// OP_IFNOT	14343	84	0
// OP_LOAD_F	28	683	14344
// OP_BITAND	14344	711	14345
// OP_IFNOT	14345	80	0
// OP_LOAD_ENT	28	194	14346
// OP_LOAD_V	14346	105	14347
// OP_LOAD_ENT	28	13535	14350
// OP_LOAD_V	14350	105	14351
// OP_SUB_V	14347	14351	14354
// OP_STORE_V	14354	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	13837	0
// OP_STORE_V	13837	4	0
// OP_CALL1	461	0	0
// OP_LOAD_ENT	28	13535	14357
// OP_LOAD_V	14357	105	14358
// OP_STORE_V	14358	13825	0
// OP_STORE_V	13825	4	0
// OP_MUL_VF	65	14094	14361
// OP_ADD_V	13825	14361	14364
// OP_STORE_V	14364	7	0
// OP_STORE_V	218	10	0
// OP_LOAD_ENT	28	13535	14367
// OP_STORE_V	14367	13	0
// OP_CALL4	475	0	0
// OP_SUB_V	71	13825	14368
// OP_STORE_V	14368	13834	0
// OP_STORE_V	71	13843	0
// OP_STORE_V	13825	4	0
// OP_MUL_VF	65	14094	14371
// OP_SUB_V	13825	14371	14374
// OP_STORE_V	14374	7	0
// OP_STORE_V	218	10	0
// OP_LOAD_ENT	28	13535	14377
// OP_STORE_V	14377	13	0
// OP_CALL4	475	0	0
// OP_SUB_V	71	13825	14378
// OP_STORE_V	14378	13831	0
// OP_STORE_V	71	13840	0
// OP_STORE_V	13831	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	13846	0
// OP_STORE_V	13834	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	13847	0
// OP_GT	13846	13847	14381
// OP_IFNOT	14381	19	0
// OP_LOAD_V	28	105	14382
// OP_SUB_V	13840	14382	14385
// OP_STORE_V	14385	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	13837	0
// OP_STORE_V	13837	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	13837	0
// OP_ADDRESS	28	119	14388
// OP_LOAD_F	28	119	14389
// OP_STORE_V	14389	4	0
// OP_CALL1	859	0	0
// OP_STORE_V	1	4	0
// OP_STORE_V	13838	7	0
// OP_STORE_V	13506	10	0
// OP_CALL3	1453	0	0
// OP_STOREP_F	1	14388	0
// OP_GOTO	19	0	0
// OP_LOAD_V	28	105	14390
// OP_SUB_V	13843	14390	14393
// OP_STORE_V	14393	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	13837	0
// OP_STORE_V	13837	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	13837	0
// OP_ADDRESS	28	119	14396
// OP_LOAD_F	28	119	14397
// OP_STORE_V	14397	4	0
// OP_CALL1	859	0	0
// OP_STORE_V	1	4	0
// OP_STORE_V	13838	7	0
// OP_MUL_F	13506	821	14398
// OP_STORE_V	14398	10	0
// OP_CALL3	1453	0	0
// OP_STOREP_F	1	14396	0
// OP_GOTO	92	0	0
// OP_LOAD_ENT	28	194	14399
// OP_LOAD_V	14399	105	14400
// OP_LOAD_V	28	105	14403
// OP_SUB_V	14400	14403	14406
// OP_STORE_V	14406	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	13837	0
// OP_STORE_V	13837	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	13837	0
// OP_STORE_V	13837	4	0
// OP_CALL1	461	0	0
// OP_LOAD_V	28	105	14409
// OP_STORE_V	14409	13825	0
// OP_STORE_V	13825	4	0
// OP_MUL_VF	59	2223	14412
// OP_ADD_V	13825	14412	14415
// OP_STORE_V	14415	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_LT	70	819	14418
// OP_EQ_E	78	30	14419
// OP_AND	14418	14419	14420
// OP_IFNOT	14420	14	0
// OP_STORE_V	74	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	13837	0
// OP_ADDRESS	28	119	14421
// OP_LOAD_F	28	119	14422
// OP_STORE_V	14422	4	0
// OP_CALL1	859	0	0
// OP_STORE_V	1	4	0
// OP_STORE_V	13838	7	0
// OP_MUL_F	13506	821	14423
// OP_STORE_V	14423	10	0
// OP_CALL3	1453	0	0
// OP_STOREP_F	1	14421	0
// OP_STORE_V	13825	4	0
// OP_MUL_VF	65	14094	14424
// OP_ADD_V	13825	14424	14427
// OP_STORE_V	14427	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_SUB_V	71	13825	14430
// OP_STORE_V	14430	13834	0
// OP_STORE_V	13825	4	0
// OP_MUL_VF	65	14094	14433
// OP_SUB_V	13825	14433	14436
// OP_STORE_V	14436	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_SUB_V	71	13825	14439
// OP_STORE_V	14439	13831	0
// OP_STORE_V	13831	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	13846	0
// OP_STORE_V	13834	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	13847	0
// OP_GT	13846	13847	14442
// OP_IFNOT	14442	14	0
// OP_ADDRESS	28	119	14443
// OP_LOAD_F	28	119	14444
// OP_STORE_V	14444	4	0
// OP_CALL1	859	0	0
// OP_STORE_V	1	4	0
// OP_LOAD_F	28	119	14445
// OP_ADD_F	14445	13506	14446
// OP_STORE_V	14446	7	0
// OP_DIV_F	13506	819	14447
// OP_STORE_V	14447	10	0
// OP_CALL3	1453	0	0
// OP_STOREP_F	1	14443	0
// OP_GOTO	15	0	0
// OP_GT	13847	13846	14448
// OP_IFNOT	14448	13	0
// OP_ADDRESS	28	119	14449
// OP_LOAD_F	28	119	14450
// OP_STORE_V	14450	4	0
// OP_CALL1	859	0	0
// OP_STORE_V	1	4	0
// OP_LOAD_F	28	119	14451
// OP_SUB_F	14451	13506	14452
// OP_STORE_V	14452	7	0
// OP_DIV_F	13506	819	14453
// OP_STORE_V	14453	10	0
// OP_CALL3	1453	0	0
// OP_STOREP_F	1	14449	0
// OP_GOTO	7	0	0
// OP_ADDRESS	28	683	14454
// OP_LOAD_F	28	683	14455
// OP_LOAD_F	28	683	14456
// OP_BITAND	14456	710	14457
// OP_SUB_F	14455	14457	14458
// OP_STOREP_F	14458	14454	0
// OP_GOTO	2	0	0
// OP_CALL0	13568	0	0
// OP_LOAD_V	28	105	14459
// OP_LOAD_ENT	28	194	14462
// OP_LOAD_V	14462	105	14463
// OP_SUB_V	14459	14463	14466
// OP_STORE_V	14466	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	13866	0
// OP_LT	13866	11267	14469
// OP_LT	13866	13865	14470
// OP_AND	14469	14470	14471
// OP_IFNOT	14471	9	0
// OP_ADDRESS	28	191	14472
// OP_LOAD_ENT	28	194	14473
// OP_LOAD_F	14473	119	14474
// OP_STOREP_F	14474	14472	0
// OP_ADDRESS	28	194	14475
// OP_STORE_V	28	4	0
// OP_CALL1	537	0	0
// OP_STOREP_ENT	1	14475	0
// OP_LOAD_V	28	105	14476
// OP_STORE_V	14476	4	0
// OP_LOAD_ENT	28	194	14479
// OP_LOAD_V	14479	105	14480
// OP_STORE_V	14480	7	0
// OP_STORE_V	218	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_EQ_E	78	30	14483
// OP_IFNOT	14483	7	0
// OP_ADDRESS	28	683	14484
// OP_LOAD_F	28	683	14485
// OP_LOAD_F	28	683	14486
// OP_BITAND	14486	711	14487
// OP_SUB_F	14485	14487	14488
// OP_STOREP_F	14488	14484	0
// OP_CALL0	85	0	0
// OP_IFNOT	719	17	0
// OP_ADDRESS	28	113	14489
// OP_LOAD_V	28	113	14492
// OP_STORE_V	14492	4	0
// OP_CALL1	468	0	0
// OP_STOREP_V	1	14489	0
// OP_LOAD_ENT	28	194	14495
// OP_LOAD_V	14495	105	14496
// OP_LOAD_V	28	105	14499
// OP_SUB_V	14496	14499	14502
// OP_STORE_V	14502	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	13837	0
// OP_ADDRESS	28	117	14505
// OP_STORE_V	13837	4	0
// OP_CALL1	506	0	0
// OP_STOREP_V	1	14505	0
// OP_ADDRESS	28	13517	14508
// OP_STOREP_F	31	14508	0
// OP_ADDRESS	28	150	14509
// OP_ADD_F	31	1988	14510
// OP_STOREP_F	14510	14509	0
// OP_DONE	0	0	0
void () bot_think = 
{
    local vector heading;
    local vector old_vel;
    local vector org;
    local float vel_speed;
    local float ftemp;
    local float vel_z;
    local vector left;
    local vector right;
    local vector vtemp;
    local vector leftend;
    local vector rightend;
    local float leftlen;
    local float rightlen;
    local float newheading;
    local float can_move;
    local vector tail_angle;
    local vector slide_angle;
    local vector right_end;
    local vector left_end;
    local float accel;
    local float max_speed;
    local float winning_slowdown;
    local float olddist;
    local float newdist;
    local string str;
    self.lastpostorg = self.oldorigin;
    self.oldorigin = self.origin;
    if((!(self.flags & FL_ONGROUND)) && checkbottom(self))
    {
        self.flags = self.flags | FL_ONGROUND;
    }
    else
    {
        
        if((self.flags & FL_ONGROUND) && CheckInAir())
        {
            BotInAir();
        }
        
    }
    
    
    if(self.last_changemaxspeed_time < (time - 2.000))
    {
        ftemp = 10.000;
        if(self.maxspeed < BOT_MAXSPEED)
        {
            if(self.maxspeed > (BOT_MAXSPEED - 50.000))
            {
                if(self.speeding_up)
                {
                    ftemp = 7.000;
                }
                else
                {
                    ftemp = 13.000;
                }
                
            }
            else
            {
                self.speeding_up = TRUE;
            }
            
        }
        else
        {
            if(self.maxspeed < (BOT_MAXSPEED + 50.000))
            {
                if(self.speeding_up)
                {
                    ftemp = 7.000;
                }
                else
                {
                    ftemp = 13.000;
                }
                
            }
            else
            {
                self.speeding_up = FALSE;
            }
            
        }
        
        self.maxspeed = (self.maxspeed + (random() * 20.000)) - ftemp;
        if(self.maxspeed < (BOT_MAXSPEED - 100.000))
        {
            self.maxspeed = BOT_MAXSPEED - 100.000;
        }
        else
        {
            
            if(self.maxspeed > (BOT_MAXSPEED + 100.000))
            {
                self.maxspeed = BOT_MAXSPEED + 100.000;
            }
            
        }
        
    }
    
    if(!(self.flags & FL_ONGROUND))
    {
        self.roll_velocity = '0.000 0.000 0.000';
        self.velocity_z = self.velocity_z - (cvar("sv_gravity") * (time - self.last_think_time));
        
        if(self.velocity_z < -250.000)
        {
            self.velocity_z = -250.000;
        }
        
    }
    else
    {
        self.velocity_z = 0.000;
    }
    
    vel_z = self.velocity_z;
    
    if(self.flags & FL_ONGROUND)
    {
        tail_angle = vectoangles(self.veh_tail.veh_dir);
        
        if(fabs(angle_diff(0.000, self.veh_body.angles_y)) > 15.000)
        {
            self.velocity = self.velocity * (0.900 - (random() * 0.050));
        }
        
        heading = self.goalentity.origin - self.origin;
        heading = vectoangles(heading);
        accel = (BOT_ACCEL * (time - self.last_think_time)) * (1.000 + ((random() - 0.500) * 0.200));
        if(vlen(self.velocity) == 0.000)
        {
            self.velocity = (normalize(self.goalentity.origin - self.origin)) * 10.000;
        }
        else
        {
            
            if((teamplay < 3.000) && (self.position == 1.000))
            {
                accel = (BOT_ACCEL * (time - self.last_think_time)) * 0.800;
            }
            
            self.velocity = self.velocity + (normalize(self.velocity) * accel);
        }
        
        winning_slowdown = 1.000;
        
        if((teamplay < 3.000) && (self.position == 1.000))
        {
            winning_slowdown = 0.800;
        }
        
        
        if(vlen(self.velocity) > (self.maxspeed * winning_slowdown))
        {
            self.velocity = normalize(self.velocity) * (self.maxspeed * winning_slowdown);
        }
        
    }
    
    vel_speed = vlen(self.velocity);
    
    if(self.flags & FL_ONGROUND)
    {
        
        if((!(self.bot_flags & BF_STUCK)) && (!(self.flags & BF_AVOID)))
        {
            traceline(self.origin, self.goalentity.origin, TRUE, self);
            if(trace_fraction == 1.000)
            {
                ftemp = 0.000;
            }
            else
            {
                ftemp = self.ideal_yaw;
            }
            
            self.angles_y = MoveToAngle(self.angles_y, ftemp, BOT_TURNSPEED);
            
            if(fabs(angle_diff(self.angles_y, ftemp)) > 35.000)
            {
                self.velocity = self.velocity - ((normalize(self.velocity) * accel) * 2.000);
            }
            
        }
        
        
        if((self.angles_y == 0.000) && (!(self.bot_flags & BF_STUCK)))
        {
            makevectors(self.angles);
            org = self.origin;
            traceline(org, org + (v_forward * 512.000), FALSE, self);
            
            if(trace_ent == world)
            {
                org = self.origin - (v_right * 16.000);
                traceline(org, org + (v_forward * 512.000), FALSE, self);
            }
            
            
            if(trace_ent == world)
            {
                org = self.origin + (v_right * 16.000);
                traceline(org, org + (v_forward * 512.000), FALSE, self);
            }
            
            
            if(trace_ent == world)
            {
                org = self.origin - (v_right * 32.000);
                traceline(org, org + (v_forward * 512.000), FALSE, self);
            }
            
            
            if(trace_ent == world)
            {
                org = self.origin + (v_right * 32.000);
                traceline(org, org + (v_forward * 512.000), FALSE, self);
            }
            
            
            if(trace_ent == world)
            {
                org = self.origin - (v_right * 48.000);
                traceline(org, org + (v_forward * 512.000), FALSE, self);
            }
            
            
            if(trace_ent == world)
            {
                org = self.origin + (v_right * 48.000);
                traceline(org, org + (v_forward * 512.000), FALSE, self);
            }
            
            if(((trace_ent != world) && (trace_ent.solid == SOLID_BBOX)) && (vlen(trace_ent.velocity) < vel_speed))
            {
                self.e_avoid = trace_ent;
                self.bot_flags = self.bot_flags | BF_AVOID;
            }
            else
            {
                self.bot_flags = self.bot_flags - (self.bot_flags & BF_AVOID);
            }
            
        }
        
    }
    
    setorigin(self.movetarget, self.origin + (self.velocity * (time - self.last_think_time)));
    olddist = vlen(self.origin - self.goalentity.origin);
    PlayerPreThink();
    can_move = TRUE;
    
    if(self.flags & FL_ONGROUND)
    {
        org = self.movetarget.origin;
        self = self.movetarget;
        makevectors(self.veh_body.angles);
        self.origin = (self.origin + '0.000 0.000 8.000') + (('0.000 0.000 1.000' * (0.000 + 0.500)) * (vlen(self.origin - self.owner.origin)));
        if(droptofloor())
        {
            
            if((0.000 - self.origin_z) > 24.000)
            {
                self.origin = org;
            }
            
        }
        else
        {
            self.origin = org;
        }
        
        self = self.owner;
    }
    
    if(self.flags & FL_ONGROUND)
    {
        
        if(can_move)
        {
            if(!movetotarget() || (self.bot_flags & BF_AVOID))
            {
                
                if(self.origin == self.oldorigin)
                {
                    self.bot_flags = self.bot_flags | BF_STUCK;
                }
                
                vel_speed = (vlen(self.origin - self.oldorigin)) / (time - self.last_think_time);
                vtemp = normalize(self.velocity) * vel_speed;
                if((vel_speed - vlen(vtemp)) > BOT_MAX_SLOWDOWN)
                {
                    self.velocity = self.velocity - (normalize(vtemp) * BOT_MAX_SLOWDOWN);
                }
                else
                {
                    self.velocity = vtemp;
                }
                
                if(!(self.bot_flags & BF_STUCK))
                {
                    
                    if(self.bot_flags & BF_AVOID)
                    {
                        vtemp = normalize(self.goalentity.origin - self.e_avoid.origin);
                        makevectors(vtemp);
                        org = self.e_avoid.origin;
                        traceline(org, org + (v_right * 512.000), FALSE, self.e_avoid);
                        right = trace_endpos - org;
                        rightend = trace_endpos;
                        traceline(org, org - (v_right * 512.000), FALSE, self.e_avoid);
                        left = trace_endpos - org;
                        leftend = trace_endpos;
                        leftlen = vlen(left);
                        rightlen = vlen(right);
                        if(leftlen > rightlen)
                        {
                            vtemp = normalize(leftend - self.origin);
                            vtemp = vectoangles(vtemp);
                            self.angles_y = MoveToAngle(anglemod(self.angles_y), 0.000, BOT_TURNSPEED);
                        }
                        else
                        {
                            vtemp = normalize(rightend - self.origin);
                            vtemp = vectoangles(vtemp);
                            self.angles_y = MoveToAngle(anglemod(self.angles_y), 0.000, BOT_TURNSPEED * 2.000);
                        }
                        
                    }
                    
                }
                else
                {
                    vtemp = normalize(self.goalentity.origin - self.origin);
                    vtemp = vectoangles(vtemp);
                    makevectors(vtemp);
                    org = self.origin;
                    traceline(org, org + (v_forward * 64.000), FALSE, self);
                    
                    if((trace_fraction < 1.000) && (trace_ent == world))
                    {
                        vtemp = vectoangles(trace_plane_normal);
                        self.angles_y = MoveToAngle(anglemod(self.angles_y), 0.000, BOT_TURNSPEED * 2.000);
                    }
                    
                    traceline(org, org + (v_right * 512.000), FALSE, self);
                    right = trace_endpos - org;
                    traceline(org, org - (v_right * 512.000), FALSE, self);
                    left = trace_endpos - org;
                    leftlen = vlen(left);
                    rightlen = vlen(right);
                    if(leftlen > rightlen)
                    {
                        self.angles_y = MoveToAngle(anglemod(self.angles_y), self.angles_y + BOT_TURNSPEED, BOT_TURNSPEED / 1.000);
                    }
                    else
                    {
                        
                        if(rightlen > leftlen)
                        {
                            self.angles_y = MoveToAngle(anglemod(self.angles_y), self.angles_y - BOT_TURNSPEED, BOT_TURNSPEED / 1.000);
                        }
                        
                    }
                    
                }
                
            }
            else
            {
                self.bot_flags = self.bot_flags - (self.bot_flags & BF_STUCK);
            }
            
        }
        
    }
    else
    {
        movetotarget();
    }
    
    newdist = vlen(self.origin - self.goalentity.origin);
    
    if((newdist < 160.000) && (newdist < olddist))
    {
        self.ideal_yaw = self.goalentity.angles_y;
        self.goalentity = FindGoalMarker(self);
    }
    
    traceline(self.origin, self.goalentity.origin, FALSE, self);
    
    if(trace_ent == world)
    {
        self.bot_flags = self.bot_flags - (self.bot_flags & BF_AVOID);
    }
    
    PlayerPostThink();
    
    if(hold_flag)
    {
        self.velocity = normalize(self.velocity);
        vtemp = normalize(self.goalentity.origin - self.origin);
        self.angles = vectoangles(vtemp);
    }
    
    self.last_think_time = time;
    self.nextthink = time + 0.050;
};

// SetBotNetName
// function begins at statement 20105, parm_start=14512
// OP_EQ_F	734	819	14512
// OP_IFNOT	14512	4	0
// OP_ADDRESS	28	180	14513
// OP_STOREP_S	14514	14513	0
// OP_GOTO	23	0	0
// OP_EQ_F	734	821	14515
// OP_IFNOT	14515	4	0
// OP_ADDRESS	28	180	14516
// OP_STOREP_S	14517	14516	0
// OP_GOTO	18	0	0
// OP_EQ_F	734	823	14518
// OP_IFNOT	14518	4	0
// OP_ADDRESS	28	180	14519
// OP_STOREP_S	14520	14519	0
// OP_GOTO	13	0	0
// OP_EQ_F	734	825	14521
// OP_IFNOT	14521	4	0
// OP_ADDRESS	28	180	14522
// OP_STOREP_S	14523	14522	0
// OP_GOTO	8	0	0
// OP_EQ_F	734	827	14524
// OP_IFNOT	14524	4	0
// OP_ADDRESS	28	180	14525
// OP_STOREP_S	14526	14525	0
// OP_GOTO	3	0	0
// OP_ADDRESS	28	180	14527
// OP_STOREP_S	14528	14527	0
// OP_DONE	0	0	0
void () SetBotNetName = 
{
    if(num_bots == 1.000)
    {
        self.netname = "RidahBot";
    }
    else
    {
        if(num_bots == 2.000)
        {
            self.netname = "DaKillerBot";
        }
        else
        {
            if(num_bots == 3.000)
            {
                self.netname = "B-MonEy Bot";
            }
            else
            {
                if(num_bots == 4.000)
                {
                    self.netname = "SumalethBot";
                }
                else
                {
                    if(num_bots == 5.000)
                    {
                        self.netname = "[jD] Bot";
                    }
                    else
                    {
                        self.netname = "DruBot";
                    }
                    
                }
                
            }
            
        }
        
    }
    
};

// SpawnBot
// function begins at statement 20133, parm_start=14529
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	14529	0
// OP_ADDRESS	14529	432	14532
// OP_CALL0	473	0	0
// OP_STOREP_ENT	1	14532	0
// OP_LOAD_ENT	14529	432	14533
// OP_STORE_ENT	14533	14530	0
// OP_ADDRESS	14530	166	14534
// OP_STOREP_V	6029	14534	0
// OP_LOAD_ENT	14529	432	14537
// OP_ADDRESS	14537	201	14538
// OP_STOREP_ENT	14529	14538	0
// OP_LOAD_ENT	14529	432	14539
// OP_ADDRESS	14539	104	14540
// OP_STOREP_F	243	14540	0
// OP_STORE_V	14530	4	0
// OP_STORE_V	754	7	0
// OP_STORE_V	757	10	0
// OP_CALL3	464	0	0
// OP_LOAD_ENT	14529	432	14541
// OP_ADDRESS	14541	201	14542
// OP_STOREP_ENT	14529	14542	0
// OP_STORE_ENT	28	14530	0
// OP_STORE_ENT	14529	28	0
// OP_ADD_F	734	819	14543
// OP_STORE_F	14543	734	0
// OP_ADDRESS	14529	129	14544
// OP_STOREP_S	1187	14544	0
// OP_ADDRESS	14529	627	14545
// OP_STOREP_S	1185	14545	0
// OP_CALL0	14511	0	0
// OP_ADDRESS	14529	104	14546
// OP_STOREP_F	246	14546	0
// OP_ADDRESS	14529	103	14547
// OP_STOREP_F	235	14547	0
// OP_ADDRESS	14529	166	14548
// OP_STOREP_V	6029	14548	0
// OP_ADDRESS	14529	163	14551
// OP_STOREP_F	256	14551	0
// OP_ADDRESS	14529	191	14552
// OP_LOAD_V	14529	117	14553
// OP_MUL_V	14553	1224	14556
// OP_STOREP_F	14556	14552	0
// OP_STORE_V	14529	4	0
// OP_STORE_V	754	7	0
// OP_STORE_V	757	10	0
// OP_CALL3	464	0	0
// OP_ADDRESS	14529	152	14557
// OP_STOREP_F	1957	14557	0
// OP_CALL0	12531	0	0
// OP_STORE_ENT	1	14531	0
// OP_STORE_V	14529	4	0
// OP_LOAD_V	14531	105	14558
// OP_ADD_V	14558	1215	14561
// OP_STORE_V	14561	7	0
// OP_CALL2	462	0	0
// OP_CALL0	492	0	0
// OP_ADDRESS	28	182	14564
// OP_LOAD_F	28	182	14565
// OP_BITOR	14565	228	14566
// OP_BITOR	14566	224	14567
// OP_BITOR	14567	220	14568
// OP_STOREP_F	14568	14564	0
// OP_ADDRESS	14529	117	14569
// OP_LOAD_V	14531	117	14572
// OP_STOREP_V	14572	14569	0
// OP_ADDRESS	14529	589	14575
// OP_STOREP_F	219	14575	0
// OP_ADDRESS	14529	654	14576
// OP_STOREP_F	1228	14576	0
// OP_CALL0	87	0	0
// OP_CALL0	1156	0	0
// OP_ADDRESS	28	637	14577
// OP_STOREP_F	817	14577	0
// OP_ADDRESS	28	638	14578
// OP_STOREP_ENT	30	14578	0
// OP_ADDRESS	28	13518	14579
// OP_STOREP_F	13507	14579	0
// OP_ADDRESS	28	194	14580
// OP_STORE_V	28	4	0
// OP_CALL1	537	0	0
// OP_STOREP_ENT	1	14580	0
// OP_ADDRESS	28	117	14581
// OP_LOAD_ENT	28	194	14584
// OP_LOAD_V	14584	105	14585
// OP_LOAD_V	28	105	14588
// OP_SUB_V	14585	14588	14591
// OP_STORE_V	14591	4	0
// OP_CALL1	506	0	0
// OP_STOREP_V	1	14581	0
// OP_LOAD_F	28	644	14594
// OP_BITAND	14594	693	14595
// OP_NOT_F	14595	0	14596
// OP_IFNOT	14596	17	0
// OP_ADDRESS	28	640	14597
// OP_STOREP_F	817	14597	0
// OP_ADDRESS	28	642	14598
// OP_STOREP_F	12762	14598	0
// OP_ADDRESS	28	641	14599
// OP_STOREP_F	817	14599	0
// OP_ADDRESS	28	637	14600
// OP_STOREP_F	817	14600	0
// OP_ADDRESS	28	644	14601
// OP_LOAD_F	28	644	14602
// OP_BITOR	14602	693	14603
// OP_STOREP_F	14603	14601	0
// OP_ADDRESS	28	644	14604
// OP_LOAD_F	28	644	14605
// OP_BITOR	14605	692	14606
// OP_STOREP_F	14606	14604	0
// OP_OR	35	36	14607
// OP_IFNOT	14607	9	0
// OP_LOAD_V	28	117	14608
// OP_STORE_V	14608	4	0
// OP_CALL1	461	0	0
// OP_LOAD_V	28	105	14611
// OP_MUL_VF	59	1112	14614
// OP_ADD_V	14611	14614	14617
// OP_STORE_V	14617	4	0
// OP_CALL1	858	0	0
// OP_LOAD_V	28	105	14620
// OP_STORE_V	14620	4	0
// OP_STORE_V	28	7	0
// OP_CALL2	12318	0	0
// OP_ADDRESS	28	13517	14623
// OP_STOREP_F	31	14623	0
// OP_ADDRESS	14529	148	14624
// OP_STOREP_FNC	13818	14624	0
// OP_ADDRESS	14529	150	14625
// OP_ADD_F	31	2869	14626
// OP_STOREP_F	14626	14625	0
// OP_ADDRESS	14529	683	14627
// OP_STOREP_F	817	14627	0
// OP_STORE_ENT	14530	28	0
// OP_DONE	0	0	0
void () SpawnBot = 
{
    local entity bot;
    local entity temp;
    local entity espawn;
    bot = spawn();
    bot.movetarget = spawn();
    temp = bot.movetarget;
    temp.view_ofs = '0.000 0.000 7.000';
    bot.movetarget.owner = bot;
    bot.movetarget.solid = SOLID_NOT;
    setsize(temp, VEH_MIN, VEH_MAX);
    bot.movetarget.owner = bot;
    temp = self;
    self = bot;
    num_bots = num_bots + 1.000;
    bot.classname = "rally_bot";
    bot.is_racer = "yes";
    SetBotNetName();
    bot.solid = SOLID_SLIDEBOX;
    bot.movetype = MOVETYPE_STEP;
    bot.view_ofs = '0.000 0.000 7.000';
    bot.takedamage = DAMAGE_NO;
    bot.ideal_yaw = bot.angles * '0.000 1.000 0.000';
    setsize(bot, VEH_MIN, VEH_MAX);
    bot.health = 100.000;
    espawn = SelectSpawnPoint();
    setorigin(bot, espawn.origin + '0.000 0.000 1.000');
    droptofloor();
    self.flags = ((self.flags | FL_ONGROUND) | FL_MONSTER) | FL_FLY;
    bot.angles = espawn.angles;
    bot.use_surface_angle = TRUE;
    bot.last_engine_ratio = -1.000;
    ClientConnect();
    CreateVehicleEntities();
    self.last_marker_num = 0.000;
    self.last_marker = world;
    self.maxspeed = BOT_MAXSPEED;
    self.goalentity = FindGoalMarker(self);
    self.angles = vectoangles(self.goalentity.origin - self.origin);
    
    if(!(self.racing_flags & QR_RACING))
    {
        self.last_lap = 0.000;
        self.fastest_lap = 999999.000;
        self.last_lap_time = 0.000;
        self.last_marker_num = 0.000;
        self.racing_flags = self.racing_flags | QR_RACING;
        self.racing_flags = self.racing_flags | QR_START_READY;
    }
    
    
    if(deathmatch || coop)
    {
        makevectors(self.angles);
        spawn_tfog(self.origin + (v_forward * 20.000));
    }
    
    spawn_tdeath(self.origin, self);
    self.last_think_time = time;
    bot.think = bot_think;
    bot.nextthink = time + 0.100;
    bot.bot_flags = 0.000;
    self = temp;
};

void () bubble_bob;
// player_stand1
// function begins at statement 20268, parm_start=14629
// OP_STATE	4041	12317	0
// OP_LOAD_F	28	114	14629
// OP_LOAD_F	28	115	14630
// OP_OR	14629	14630	14631
// OP_IFNOT	14631	5	0
// OP_ADDRESS	28	386	14632
// OP_STOREP_F	817	14632	0
// OP_CALL0	9169	0	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	386	14633
// OP_GE	14633	827	14634
// OP_IFNOT	14634	3	0
// OP_ADDRESS	28	386	14635
// OP_STOREP_F	817	14635	0
// OP_ADDRESS	28	131	14636
// OP_LOAD_F	28	386	14637
// OP_ADD_F	834	14637	14638
// OP_STOREP_F	14638	14636	0
// OP_ADDRESS	28	386	14639
// OP_LOAD_F	28	386	14640
// OP_ADD_F	14640	819	14641
// OP_STOREP_F	14641	14639	0
// OP_DONE	0	0	0
void () player_stand1 = [17.000, player_stand1]
{
    
    if(self.velocity_x || self.velocity_y)
    {
        self.walkframe = 0.000;
        player_run();
        return;
    }
    
    
    if(self.walkframe >= 5.000)
    {
        self.walkframe = 0.000;
    }
    
    self.frame = 12.000 + self.walkframe;
    self.walkframe = self.walkframe + 1.000;
};

// player_run
// function begins at statement 20291, parm_start=14642
// OP_STATE	829	9169	0
// OP_LOAD_F	28	114	14642
// OP_NOT_F	14642	0	14643
// OP_LOAD_F	28	115	14644
// OP_NOT_F	14644	0	14645
// OP_AND	14643	14645	14646
// OP_IFNOT	14646	5	0
// OP_ADDRESS	28	386	14647
// OP_STOREP_F	817	14647	0
// OP_CALL0	12317	0	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	386	14648
// OP_EQ_F	14648	829	14649
// OP_IFNOT	14649	3	0
// OP_ADDRESS	28	386	14650
// OP_STOREP_F	817	14650	0
// OP_ADDRESS	28	131	14651
// OP_LOAD_F	28	131	14652
// OP_LOAD_F	28	386	14653
// OP_ADD_F	14652	14653	14654
// OP_STOREP_F	14654	14651	0
// OP_ADDRESS	28	386	14655
// OP_LOAD_F	28	386	14656
// OP_ADD_F	14656	819	14657
// OP_STOREP_F	14657	14655	0
// OP_DONE	0	0	0
void () player_run = [6.000, player_run]
{
    
    if(!self.velocity_x && !self.velocity_y)
    {
        self.walkframe = 0.000;
        player_stand1();
        return;
    }
    
    
    if(self.walkframe == 6.000)
    {
        self.walkframe = 0.000;
    }
    
    self.frame = self.frame + self.walkframe;
    self.walkframe = self.walkframe + 1.000;
};

// player_shot1
// function begins at statement 20317, parm_start=14658
// OP_STATE	14658	14659	0
// OP_ADDRESS	28	133	14660
// OP_LOAD_F	28	133	14661
// OP_BITOR	14661	348	14662
// OP_STOREP_F	14662	14660	0
// OP_DONE	0	0	0
void () player_shot1 = [113.000, player_shot2]
{
    self.effects = self.effects | EF_MUZZLEFLASH;
};

// player_shot2
// function begins at statement 20323, parm_start=14663
// OP_STATE	14663	14664	0
// OP_DONE	0	0	0
void () player_shot2 = [114.000, player_shot3]
{
};

// player_shot3
// function begins at statement 20325, parm_start=14665
// OP_STATE	14665	14666	0
// OP_DONE	0	0	0
void () player_shot3 = [115.000, player_shot4]
{
};

// player_shot4
// function begins at statement 20327, parm_start=14667
// OP_STATE	14667	14668	0
// OP_DONE	0	0	0
void () player_shot4 = [116.000, player_shot5]
{
};

// player_shot5
// function begins at statement 20329, parm_start=14669
// OP_STATE	14669	14670	0
// OP_DONE	0	0	0
void () player_shot5 = [117.000, player_shot6]
{
};

// player_shot6
// function begins at statement 20331, parm_start=14671
// OP_STATE	14671	9169	0
// OP_DONE	0	0	0
void () player_shot6 = [118.000, player_run]
{
};

// player_axe1
// function begins at statement 20333, parm_start=14672
// OP_STATE	14672	14673	0
// OP_DONE	0	0	0
void () player_axe1 = [119.000, player_axe2]
{
};

// player_axe2
// function begins at statement 20335, parm_start=14674
// OP_STATE	5807	14674	0
// OP_DONE	0	0	0
void () player_axe2 = [120.000, player_axe3]
{
};

// player_axe3
// function begins at statement 20337, parm_start=14675
// OP_STATE	14675	14676	0
// OP_CALL0	9190	0	0
// OP_DONE	0	0	0
void () player_axe3 = [121.000, player_axe4]
{
    W_FireAxe();
};

// player_axe4
// function begins at statement 20340, parm_start=14677
// OP_STATE	14677	9169	0
// OP_DONE	0	0	0
void () player_axe4 = [122.000, player_run]
{
};

// player_axeb1
// function begins at statement 20342, parm_start=14678
// OP_STATE	14678	14679	0
// OP_DONE	0	0	0
void () player_axeb1 = [125.000, player_axeb2]
{
};

// player_axeb2
// function begins at statement 20344, parm_start=14680
// OP_STATE	14680	14681	0
// OP_DONE	0	0	0
void () player_axeb2 = [126.000, player_axeb3]
{
};

// player_axeb3
// function begins at statement 20346, parm_start=14682
// OP_STATE	14682	14683	0
// OP_CALL0	9190	0	0
// OP_DONE	0	0	0
void () player_axeb3 = [127.000, player_axeb4]
{
    W_FireAxe();
};

// player_axeb4
// function begins at statement 20349, parm_start=14684
// OP_STATE	6067	9169	0
// OP_DONE	0	0	0
void () player_axeb4 = [128.000, player_run]
{
};

// player_axec1
// function begins at statement 20351, parm_start=14684
// OP_STATE	14684	14685	0
// OP_DONE	0	0	0
void () player_axec1 = [131.000, player_axec2]
{
};

// player_axec2
// function begins at statement 20353, parm_start=14686
// OP_STATE	14686	14687	0
// OP_DONE	0	0	0
void () player_axec2 = [132.000, player_axec3]
{
};

// player_axec3
// function begins at statement 20355, parm_start=14688
// OP_STATE	14688	14689	0
// OP_CALL0	9190	0	0
// OP_DONE	0	0	0
void () player_axec3 = [133.000, player_axec4]
{
    W_FireAxe();
};

// player_axec4
// function begins at statement 20358, parm_start=14690
// OP_STATE	14690	9169	0
// OP_DONE	0	0	0
void () player_axec4 = [134.000, player_run]
{
};

// player_axed1
// function begins at statement 20360, parm_start=14691
// OP_STATE	14691	14692	0
// OP_DONE	0	0	0
void () player_axed1 = [137.000, player_axed2]
{
};

// player_axed2
// function begins at statement 20362, parm_start=14693
// OP_STATE	14693	14694	0
// OP_DONE	0	0	0
void () player_axed2 = [138.000, player_axed3]
{
};

// player_axed3
// function begins at statement 20364, parm_start=14695
// OP_STATE	14695	14696	0
// OP_CALL0	9190	0	0
// OP_DONE	0	0	0
void () player_axed3 = [139.000, player_axed4]
{
    W_FireAxe();
};

// player_axed4
// function begins at statement 20367, parm_start=14697
// OP_STATE	14697	9169	0
// OP_DONE	0	0	0
void () player_axed4 = [140.000, player_run]
{
};

// player_nail1
// function begins at statement 20369, parm_start=14698
// OP_STATE	14698	14699	0
// OP_ADDRESS	28	133	14700
// OP_LOAD_F	28	133	14701
// OP_BITOR	14701	348	14702
// OP_STOREP_F	14702	14700	0
// OP_LOAD_F	28	170	14703
// OP_NOT_F	14703	0	14704
// OP_LOAD_F	28	154	14705
// OP_NE_F	14705	263	14706
// OP_OR	14704	14706	14707
// OP_IFNOT	14707	3	0
// OP_CALL0	9169	0	0
// OP_RETURN	0	0	0
// OP_CALL0	9171	0	0
// OP_STORE_V	825	4	0
// OP_CALL1	10215	0	0
// OP_ADDRESS	28	387	14708
// OP_ADD_F	31	1152	14709
// OP_STOREP_F	14709	14708	0
// OP_DONE	0	0	0
void () player_nail1 = [103.000, player_nail2]
{
    self.effects = self.effects | EF_MUZZLEFLASH;
    
    if(!self.button0 || (self.weapon != IT_SUPER_NAILGUN))
    {
        player_run();
        return;
    }
    
    SuperDamageSound();
    W_FireSpikes(4.000);
    self.attack_finished = time + 0.200;
};

// player_nail2
// function begins at statement 20389, parm_start=14710
// OP_STATE	14710	10420	0
// OP_ADDRESS	28	133	14711
// OP_LOAD_F	28	133	14712
// OP_BITOR	14712	348	14713
// OP_STOREP_F	14713	14711	0
// OP_LOAD_F	28	170	14714
// OP_NOT_F	14714	0	14715
// OP_LOAD_F	28	154	14716
// OP_NE_F	14716	263	14717
// OP_OR	14715	14717	14718
// OP_IFNOT	14718	3	0
// OP_CALL0	9169	0	0
// OP_RETURN	0	0	0
// OP_CALL0	9171	0	0
// OP_STORE_V	9450	4	0
// OP_CALL1	10215	0	0
// OP_ADDRESS	28	387	14719
// OP_ADD_F	31	1152	14720
// OP_STOREP_F	14720	14719	0
// OP_DONE	0	0	0
void () player_nail2 = [104.000, player_nail1]
{
    self.effects = self.effects | EF_MUZZLEFLASH;
    
    if(!self.button0 || (self.weapon != IT_SUPER_NAILGUN))
    {
        player_run();
        return;
    }
    
    SuperDamageSound();
    W_FireSpikes(-4.000);
    self.attack_finished = time + 0.200;
};

// player_light1
// function begins at statement 20409, parm_start=14721
// OP_STATE	14721	14722	0
// OP_ADDRESS	28	133	14723
// OP_LOAD_F	28	133	14724
// OP_BITOR	14724	348	14725
// OP_STOREP_F	14725	14723	0
// OP_LOAD_F	28	170	14726
// OP_NOT_F	14726	0	14727
// OP_IFNOT	14727	3	0
// OP_CALL0	9169	0	0
// OP_RETURN	0	0	0
// OP_CALL0	9171	0	0
// OP_CALL0	9643	0	0
// OP_ADDRESS	28	387	14728
// OP_ADD_F	31	1152	14729
// OP_STOREP_F	14729	14728	0
// OP_DONE	0	0	0
void () player_light1 = [105.000, player_light2]
{
    self.effects = self.effects | EF_MUZZLEFLASH;
    
    if(!self.button0)
    {
        player_run();
        return;
    }
    
    SuperDamageSound();
    W_FireLightning();
    self.attack_finished = time + 0.200;
};

// player_light2
// function begins at statement 20425, parm_start=14730
// OP_STATE	14730	10421	0
// OP_ADDRESS	28	133	14731
// OP_LOAD_F	28	133	14732
// OP_BITOR	14732	348	14733
// OP_STOREP_F	14733	14731	0
// OP_LOAD_F	28	170	14734
// OP_NOT_F	14734	0	14735
// OP_IFNOT	14735	3	0
// OP_CALL0	9169	0	0
// OP_RETURN	0	0	0
// OP_CALL0	9171	0	0
// OP_CALL0	9643	0	0
// OP_ADDRESS	28	387	14736
// OP_ADD_F	31	1152	14737
// OP_STOREP_F	14737	14736	0
// OP_DONE	0	0	0
void () player_light2 = [106.000, player_light1]
{
    self.effects = self.effects | EF_MUZZLEFLASH;
    
    if(!self.button0)
    {
        player_run();
        return;
    }
    
    SuperDamageSound();
    W_FireLightning();
    self.attack_finished = time + 0.200;
};

// player_rocket1
// function begins at statement 20441, parm_start=14738
// OP_STATE	14738	14739	0
// OP_ADDRESS	28	133	14740
// OP_LOAD_F	28	133	14741
// OP_BITOR	14741	348	14742
// OP_STOREP_F	14742	14740	0
// OP_DONE	0	0	0
void () player_rocket1 = [107.000, player_rocket2]
{
    self.effects = self.effects | EF_MUZZLEFLASH;
};

// player_rocket2
// function begins at statement 20447, parm_start=14743
// OP_STATE	14743	14744	0
// OP_DONE	0	0	0
void () player_rocket2 = [108.000, player_rocket3]
{
};

// player_rocket3
// function begins at statement 20449, parm_start=14745
// OP_STATE	14745	14746	0
// OP_DONE	0	0	0
void () player_rocket3 = [109.000, player_rocket4]
{
};

// player_rocket4
// function begins at statement 20451, parm_start=14747
// OP_STATE	14747	14748	0
// OP_DONE	0	0	0
void () player_rocket4 = [110.000, player_rocket5]
{
};

// player_rocket5
// function begins at statement 20453, parm_start=14749
// OP_STATE	14749	14750	0
// OP_DONE	0	0	0
void () player_rocket5 = [111.000, player_rocket6]
{
};

// player_rocket6
// function begins at statement 20455, parm_start=14751
// OP_STATE	2646	9169	0
// OP_DONE	0	0	0
void () player_rocket6 = [112.000, player_run]
{
};

void (float num_bubbles) DeathBubbles;
// PainSound
// function begins at statement 20457, parm_start=14753
// OP_LOAD_F	28	152	14754
// OP_LT	14754	817	14755
// OP_IFNOT	14755	2	0
// OP_RETURN	0	0	0
// OP_LOAD_S	361	129	14756
// OP_EQ_S	14756	13360	14757
// OP_IFNOT	14757	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	12077	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	339	16	0
// OP_CALL5	467	0	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	190	14758
// OP_EQ_F	14758	292	14759
// OP_LOAD_F	28	189	14760
// OP_EQ_F	14760	823	14761
// OP_AND	14759	14761	14762
// OP_IFNOT	14762	24	0
// OP_STORE_V	819	4	0
// OP_CALL1	14751	0	0
// OP_CALL0	466	0	0
// OP_GT	1	1182	14763
// OP_IFNOT	14763	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	12072	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	7	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	12073	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	152	14764
// OP_LOAD_F	28	152	14765
// OP_SUB_F	14765	1112	14766
// OP_STOREP_F	14766	14764	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	190	14767
// OP_EQ_F	14767	293	14768
// OP_IFNOT	14768	22	0
// OP_CALL0	466	0	0
// OP_GT	1	1182	14769
// OP_IFNOT	14769	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	1814	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	7	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	1815	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	152	14770
// OP_LOAD_F	28	152	14771
// OP_SUB_F	14771	1632	14772
// OP_STOREP_F	14772	14770	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	190	14773
// OP_EQ_F	14773	294	14774
// OP_IFNOT	14774	18	0
// OP_CALL0	466	0	0
// OP_GT	1	1182	14775
// OP_IFNOT	14775	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	1814	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	7	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	1815	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	388	14776
// OP_GT	14776	31	14777
// OP_IFNOT	14777	4	0
// OP_ADDRESS	28	401	14778
// OP_STOREP_F	817	14778	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	388	14779
// OP_ADD_F	31	1182	14780
// OP_STOREP_F	14780	14779	0
// OP_LOAD_F	28	401	14781
// OP_EQ_F	14781	819	14782
// OP_IFNOT	14782	10	0
// OP_ADDRESS	28	401	14783
// OP_STOREP_F	817	14783	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	12101	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_RETURN	0	0	0
// OP_CALL0	466	0	0
// OP_MUL_F	1	827	14784
// OP_ADD_F	14784	819	14785
// OP_STORE_V	14785	4	0
// OP_CALL1	494	0	0
// OP_STORE_F	1	14753	0
// OP_ADDRESS	28	208	14786
// OP_STOREP_S	4128	14786	0
// OP_EQ_F	14753	819	14787
// OP_IFNOT	14787	4	0
// OP_ADDRESS	28	208	14788
// OP_STOREP_S	12089	14788	0
// OP_GOTO	23	0	0
// OP_EQ_F	14753	821	14789
// OP_IFNOT	14789	4	0
// OP_ADDRESS	28	208	14790
// OP_STOREP_S	12090	14790	0
// OP_GOTO	18	0	0
// OP_EQ_F	14753	823	14791
// OP_IFNOT	14791	4	0
// OP_ADDRESS	28	208	14792
// OP_STOREP_S	12091	14792	0
// OP_GOTO	13	0	0
// OP_EQ_F	14753	825	14793
// OP_IFNOT	14793	4	0
// OP_ADDRESS	28	208	14794
// OP_STOREP_S	12092	14794	0
// OP_GOTO	8	0	0
// OP_EQ_F	14753	827	14795
// OP_IFNOT	14795	4	0
// OP_ADDRESS	28	208	14796
// OP_STOREP_S	12093	14796	0
// OP_GOTO	3	0	0
// OP_ADDRESS	28	208	14797
// OP_STOREP_S	12094	14797	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	208	14798
// OP_STORE_V	14798	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_RETURN	0	0	0
// OP_DONE	0	0	0
void () PainSound = 
{
    local float rs;
    
    if(self.health < 0.000)
    {
        return;
    }
    
    
    if(damage_attacker.classname == "teledeath")
    {
        sound(self, CHAN_VOICE, "player/teledth1.wav", 1.000, ATTN_NONE);
        return;
    }
    
    
    if((self.watertype == CONTENT_WATER) && (self.waterlevel == 3.000))
    {
        DeathBubbles(1.000);
        if(random() > 0.500)
        {
            sound(self, CHAN_VOICE, "player/drown1.wav", 1.000, ATTN_NORM);
        }
        else
        {
            sound(self, CHAN_VOICE, "player/drown2.wav", 1.000, ATTN_NORM);
        }
        
        self.health = self.health - 20.000;
        return;
    }
    
    
    if(self.watertype == CONTENT_SLIME)
    {
        if(random() > 0.500)
        {
            sound(self, CHAN_VOICE, "player/lburn1.wav", 1.000, ATTN_NORM);
        }
        else
        {
            sound(self, CHAN_VOICE, "player/lburn2.wav", 1.000, ATTN_NORM);
        }
        
        self.health = self.health - 40.000;
        return;
    }
    
    
    if(self.watertype == CONTENT_LAVA)
    {
        if(random() > 0.500)
        {
            sound(self, CHAN_VOICE, "player/lburn1.wav", 1.000, ATTN_NORM);
        }
        else
        {
            sound(self, CHAN_VOICE, "player/lburn2.wav", 1.000, ATTN_NORM);
        }
        
        return;
    }
    
    
    if(self.pain_finished > time)
    {
        self.axhitme = 0.000;
        return;
    }
    
    self.pain_finished = time + 0.500;
    
    if(self.axhitme == 1.000)
    {
        self.axhitme = 0.000;
        sound(self, CHAN_VOICE, "player/axhit1.wav", 1.000, ATTN_NORM);
        return;
    }
    
    rs = rint((random() * 5.000) + 1.000);
    self.noise = "";
    if(rs == 1.000)
    {
        self.noise = "player/pain1.wav";
    }
    else
    {
        if(rs == 2.000)
        {
            self.noise = "player/pain2.wav";
        }
        else
        {
            if(rs == 3.000)
            {
                self.noise = "player/pain3.wav";
            }
            else
            {
                if(rs == 4.000)
                {
                    self.noise = "player/pain4.wav";
                }
                else
                {
                    if(rs == 5.000)
                    {
                        self.noise = "player/pain5.wav";
                    }
                    else
                    {
                        self.noise = "player/pain6.wav";
                    }
                    
                }
                
            }
            
        }
        
    }
    
    sound(self, CHAN_VOICE, self.noise, 1.000, ATTN_NORM);
    return;
};

// player_pain1
// function begins at statement 20609, parm_start=14800
// OP_STATE	5499	14800	0
// OP_CALL0	14752	0	0
// OP_DONE	0	0	0
void () player_pain1 = [35.000, player_pain2]
{
    PainSound();
};

// player_pain2
// function begins at statement 20612, parm_start=14801
// OP_STATE	5405	14801	0
// OP_DONE	0	0	0
void () player_pain2 = [36.000, player_pain3]
{
};

// player_pain3
// function begins at statement 20614, parm_start=14802
// OP_STATE	5376	14802	0
// OP_DONE	0	0	0
void () player_pain3 = [37.000, player_pain4]
{
};

// player_pain4
// function begins at statement 20616, parm_start=14803
// OP_STATE	14803	14804	0
// OP_DONE	0	0	0
void () player_pain4 = [38.000, player_pain5]
{
};

// player_pain5
// function begins at statement 20618, parm_start=14805
// OP_STATE	14805	14806	0
// OP_DONE	0	0	0
void () player_pain5 = [39.000, player_pain6]
{
};

// player_pain6
// function begins at statement 20620, parm_start=14807
// OP_STATE	1632	9169	0
// OP_DONE	0	0	0
void () player_pain6 = [40.000, player_run]
{
};

// player_axpain1
// function begins at statement 20622, parm_start=14808
// OP_STATE	14808	14809	0
// OP_CALL0	14752	0	0
// OP_DONE	0	0	0
void () player_axpain1 = [29.000, player_axpain2]
{
    PainSound();
};

// player_axpain2
// function begins at statement 20625, parm_start=14810
// OP_STATE	2522	14810	0
// OP_DONE	0	0	0
void () player_axpain2 = [30.000, player_axpain3]
{
};

// player_axpain3
// function begins at statement 20627, parm_start=14811
// OP_STATE	10956	14811	0
// OP_DONE	0	0	0
void () player_axpain3 = [31.000, player_axpain4]
{
};

// player_axpain4
// function begins at statement 20629, parm_start=14812
// OP_STATE	2657	14812	0
// OP_DONE	0	0	0
void () player_axpain4 = [32.000, player_axpain5]
{
};

// player_axpain5
// function begins at statement 20631, parm_start=14813
// OP_STATE	14813	14814	0
// OP_DONE	0	0	0
void () player_axpain5 = [33.000, player_axpain6]
{
};

// player_axpain6
// function begins at statement 20633, parm_start=14815
// OP_STATE	14815	9169	0
// OP_DONE	0	0	0
void () player_axpain6 = [34.000, player_run]
{
};

// player_pain
// function begins at statement 20635, parm_start=14816
// OP_LOAD_F	28	390	14816
// OP_GT	14816	31	14817
// OP_IFNOT	14817	2	0
// OP_RETURN	0	0	0
// OP_CALL0	14799	0	0
// OP_DONE	0	0	0
void () player_pain = 
{
    
    if(self.invisible_finished > time)
    {
        return;
    }
    
    player_pain1();
};

void () player_diea1;
void () player_dieb1;
void () player_diec1;
void () player_died1;
void () player_diee1;
void () player_die_ax1;
// DeathBubblesSpawn
// function begins at statement 20641, parm_start=14825
// OP_LOAD_ENT	28	201	14826
// OP_LOAD_F	14826	189	14827
// OP_NE_F	14827	823	14828
// OP_IFNOT	14828	2	0
// OP_RETURN	0	0	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	14825	0
// OP_STORE_V	14825	4	0
// OP_STORE_V	10803	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	14825	4	0
// OP_LOAD_ENT	28	201	14829
// OP_LOAD_V	14829	105	14830
// OP_ADD_V	14830	9137	14833
// OP_STORE_V	14833	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	14825	103	14836
// OP_STOREP_F	239	14836	0
// OP_ADDRESS	14825	104	14837
// OP_STOREP_F	243	14837	0
// OP_ADDRESS	14825	113	14838
// OP_STOREP_V	14841	14838	0
// OP_ADDRESS	14825	150	14844
// OP_ADD_F	31	1182	14845
// OP_STOREP_F	14845	14844	0
// OP_ADDRESS	14825	148	14846
// OP_STOREP_FNC	14628	14846	0
// OP_ADDRESS	14825	129	14847
// OP_STOREP_S	14848	14847	0
// OP_ADDRESS	14825	131	14849
// OP_STOREP_F	817	14849	0
// OP_ADDRESS	14825	435	14850
// OP_STOREP_F	817	14850	0
// OP_STORE_V	14825	4	0
// OP_STORE_V	7771	7	0
// OP_STORE_V	7774	10	0
// OP_CALL3	464	0	0
// OP_ADDRESS	28	150	14851
// OP_ADD_F	31	2869	14852
// OP_STOREP_F	14852	14851	0
// OP_ADDRESS	28	148	14853
// OP_STOREP_FNC	14824	14853	0
// OP_ADDRESS	28	405	14854
// OP_LOAD_F	28	405	14855
// OP_ADD_F	14855	819	14856
// OP_STOREP_F	14856	14854	0
// OP_LOAD_F	28	405	14857
// OP_LOAD_F	28	406	14858
// OP_GE	14857	14858	14859
// OP_IFNOT	14859	3	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_DONE	0	0	0
void () DeathBubblesSpawn = 
{
    local entity bubble;
    
    if(self.owner.waterlevel != 3.000)
    {
        return;
    }
    
    bubble = spawn();
    setmodel(bubble, "progs/s_bubble.spr");
    setorigin(bubble, self.owner.origin + '0.000 0.000 24.000');
    bubble.movetype = MOVETYPE_NOCLIP;
    bubble.solid = SOLID_NOT;
    bubble.velocity = '0.000 0.000 15.000';
    bubble.nextthink = time + 0.500;
    bubble.think = bubble_bob;
    bubble.classname = "bubble";
    bubble.frame = 0.000;
    bubble.cnt = 0.000;
    setsize(bubble, '-8.000 -8.000 -8.000', '8.000 8.000 8.000');
    self.nextthink = time + 0.100;
    self.think = DeathBubblesSpawn;
    self.air_finished = self.air_finished + 1.000;
    
    if(self.air_finished >= self.bubble_count)
    {
        remove(self);
    }
    
};

// DeathBubbles
// function begins at statement 20694, parm_start=14860
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	14861	0
// OP_STORE_V	14861	4	0
// OP_LOAD_V	28	105	14862
// OP_STORE_V	14862	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	14861	103	14865
// OP_STOREP_F	233	14865	0
// OP_ADDRESS	14861	104	14866
// OP_STOREP_F	243	14866	0
// OP_ADDRESS	14861	150	14867
// OP_ADD_F	31	2869	14868
// OP_STOREP_F	14868	14867	0
// OP_ADDRESS	14861	148	14869
// OP_STOREP_FNC	14824	14869	0
// OP_ADDRESS	14861	405	14870
// OP_STOREP_F	817	14870	0
// OP_ADDRESS	14861	201	14871
// OP_STOREP_ENT	28	14871	0
// OP_ADDRESS	14861	406	14872
// OP_STOREP_F	14860	14872	0
// OP_RETURN	0	0	0
// OP_DONE	0	0	0
void (float num_bubbles) DeathBubbles = 
{
    local entity bubble_spawner;
    bubble_spawner = spawn();
    setorigin(bubble_spawner, self.origin);
    bubble_spawner.movetype = MOVETYPE_NONE;
    bubble_spawner.solid = SOLID_NOT;
    bubble_spawner.nextthink = time + 0.100;
    bubble_spawner.think = DeathBubblesSpawn;
    bubble_spawner.air_finished = 0.000;
    bubble_spawner.owner = self;
    bubble_spawner.bubble_count = num_bubbles;
    return;
};

// DeathSound
// function begins at statement 20717, parm_start=14874
// OP_LOAD_F	28	189	14875
// OP_EQ_F	14875	823	14876
// OP_IFNOT	14876	10	0
// OP_STORE_V	1112	4	0
// OP_CALL1	14751	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	12076	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	339	16	0
// OP_CALL5	467	0	0
// OP_RETURN	0	0	0
// OP_CALL0	466	0	0
// OP_MUL_F	1	825	14877
// OP_ADD_F	14877	819	14878
// OP_STORE_V	14878	4	0
// OP_CALL1	494	0	0
// OP_STORE_F	1	14874	0
// OP_EQ_F	14874	819	14879
// OP_IFNOT	14879	3	0
// OP_ADDRESS	28	208	14880
// OP_STOREP_S	12095	14880	0
// OP_EQ_F	14874	821	14881
// OP_IFNOT	14881	3	0
// OP_ADDRESS	28	208	14882
// OP_STOREP_S	12096	14882	0
// OP_EQ_F	14874	823	14883
// OP_IFNOT	14883	3	0
// OP_ADDRESS	28	208	14884
// OP_STOREP_S	12097	14884	0
// OP_EQ_F	14874	825	14885
// OP_IFNOT	14885	3	0
// OP_ADDRESS	28	208	14886
// OP_STOREP_S	12098	14886	0
// OP_EQ_F	14874	827	14887
// OP_IFNOT	14887	3	0
// OP_ADDRESS	28	208	14888
// OP_STOREP_S	12099	14888	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	208	14889
// OP_STORE_V	14889	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	339	16	0
// OP_CALL5	467	0	0
// OP_RETURN	0	0	0
// OP_DONE	0	0	0
void () DeathSound = 
{
    local float rs;
    
    if(self.waterlevel == 3.000)
    {
        DeathBubbles(20.000);
        sound(self, CHAN_VOICE, "player/h2odeath.wav", 1.000, ATTN_NONE);
        return;
    }
    
    rs = rint((random() * 4.000) + 1.000);
    
    if(rs == 1.000)
    {
        self.noise = "player/death1.wav";
    }
    
    
    if(rs == 2.000)
    {
        self.noise = "player/death2.wav";
    }
    
    
    if(rs == 3.000)
    {
        self.noise = "player/death3.wav";
    }
    
    
    if(rs == 4.000)
    {
        self.noise = "player/death4.wav";
    }
    
    
    if(rs == 5.000)
    {
        self.noise = "player/death5.wav";
    }
    
    sound(self, CHAN_VOICE, self.noise, 1.000, ATTN_NONE);
    return;
};

// PlayerDead
// function begins at statement 20764, parm_start=14891
// OP_ADDRESS	28	150	14891
// OP_STOREP_F	1228	14891	0
// OP_ADDRESS	28	165	14892
// OP_STOREP_F	254	14892	0
// OP_DONE	0	0	0
void () PlayerDead = 
{
    self.nextthink = -1.000;
    self.deadflag = DEAD_DEAD;
};

// VelocityForDamage
// function begins at statement 20769, parm_start=14893
// OP_CALL0	9187	0	0
// OP_MUL_F	1957	1	14897
// OP_STORE_F	14897	14894	0
// OP_CALL0	9187	0	0
// OP_MUL_F	1957	1	14898
// OP_STORE_F	14898	14895	0
// OP_CALL0	466	0	0
// OP_MUL_F	1957	1	14899
// OP_ADD_F	4760	14899	14900
// OP_STORE_F	14900	14896	0
// OP_GT	14893	13035	14901
// OP_IFNOT	14901	4	0
// OP_MUL_VF	14894	2619	14902
// OP_STORE_V	14902	14894	0
// OP_GOTO	8	0	0
// OP_GT	14893	14905	14906
// OP_IFNOT	14906	4	0
// OP_MUL_VF	14894	821	14907
// OP_STORE_V	14907	14894	0
// OP_GOTO	3	0	0
// OP_MUL_VF	14894	855	14910
// OP_STORE_V	14910	14894	0
// OP_RETURN	14894	0	0
// OP_DONE	0	0	0
vector (float dm) VelocityForDamage = 
{
    local vector v;
    v_x = 100.000 * crandom();
    v_y = 100.000 * crandom();
    v_z = 200.000 + (100.000 * random());
    if(dm > -50.000)
    {
        v = v * 0.700;
    }
    else
    {
        if(dm > -200.000)
        {
            v = v * 2.000;
        }
        else
        {
            v = v * 10.000;
        }
        
    }
    
    return v;
};

// ThrowGib
// function begins at statement 20793, parm_start=14914
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	14916	0
// OP_ADDRESS	14916	105	14917
// OP_LOAD_V	28	105	14920
// OP_STOREP_V	14920	14917	0
// OP_STORE_V	14916	4	0
// OP_STORE_V	14914	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	14916	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	926	10	0
// OP_CALL3	464	0	0
// OP_ADDRESS	14916	113	14923
// OP_STORE_V	14915	4	0
// OP_CALL1	1495	0	0
// OP_STOREP_V	1	14923	0
// OP_ADDRESS	14916	103	14926
// OP_STOREP_F	241	14926	0
// OP_ADDRESS	14916	104	14927
// OP_STOREP_F	243	14927	0
// OP_ADDRESS	14916	122	14928
// OP_CALL0	466	0	0
// OP_MUL_F	1	2127	14929
// OP_STOREP_F	14929	14928	0
// OP_ADDRESS	14916	123	14930
// OP_CALL0	466	0	0
// OP_MUL_F	1	2127	14931
// OP_STOREP_F	14931	14930	0
// OP_ADDRESS	14916	124	14932
// OP_CALL0	466	0	0
// OP_MUL_F	1	2127	14933
// OP_STOREP_F	14933	14932	0
// OP_ADDRESS	14916	148	14934
// OP_STOREP_FNC	533	14934	0
// OP_ADDRESS	14916	102	14935
// OP_STOREP_F	31	14935	0
// OP_ADDRESS	14916	150	14936
// OP_ADD_F	31	855	14937
// OP_CALL0	466	0	0
// OP_MUL_F	1	855	14938
// OP_ADD_F	14937	14938	14939
// OP_STOREP_F	14939	14936	0
// OP_ADDRESS	14916	131	14940
// OP_STOREP_F	817	14940	0
// OP_ADDRESS	14916	182	14941
// OP_STOREP_F	817	14941	0
// OP_DONE	0	0	0
void (string gibname, float dm) ThrowGib = 
{
    local entity new;
    new = spawn();
    new.origin = self.origin;
    setmodel(new, gibname);
    setsize(new, '0.000 0.000 0.000', '0.000 0.000 0.000');
    new.velocity = VelocityForDamage(dm);
    new.movetype = MOVETYPE_BOUNCE;
    new.solid = SOLID_NOT;
    new.avelocity_x = random() * 600.000;
    new.avelocity_y = random() * 600.000;
    new.avelocity_z = random() * 600.000;
    new.think = SUB_Remove;
    new.ltime = time;
    new.nextthink = (time + 10.000) + (random() * 10.000);
    new.frame = 0.000;
    new.flags = 0.000;
};

// HeadTouch
// function begins at statement 20840, parm_start=14943
// OP_LOAD_S	29	129	14943
// OP_NE_S	14943	880	14944
// OP_LOAD_F	29	152	14945
// OP_LE	14945	817	14946
// OP_OR	14944	14946	14947
// OP_IFNOT	14947	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	12115	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	12088	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_LOAD_V	28	105	14948
// OP_STORE_V	14948	4	0
// OP_LOAD_V	29	113	14951
// OP_MUL_VF	14951	821	14954
// OP_STORE_V	14954	7	0
// OP_STORE_V	1957	10	0
// OP_CALL3	9170	0	0
// OP_GT	738	819	14957
// OP_IFNOT	14957	3	0
// OP_CALL0	9067	0	0
// OP_GOTO	3	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_DONE	0	0	0
void () HeadTouch = 
{
    
    if((other.classname != "player") || (other.health <= 0.000))
    {
        return;
    }
    
    sound(other, CHAN_AUTO, "rally/crash4.wav", 1.000, ATTN_NORM);
    sound(other, CHAN_AUTO, "player/tornoff2.wav", 1.000, ATTN_NORM);
    SpawnBlood(self.origin, other.velocity * 2.000, 100.000);
    if(rally_type_index > 1.000)
    {
        BackpackTouch();
    }
    else
    {
        remove(self);
    }
    
};

// ThrowHead
// function begins at statement 20873, parm_start=14959
// OP_STORE_V	28	4	0
// OP_STORE_V	12129	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	131	14962
// OP_STOREP_F	817	14962	0
// OP_ADDRESS	28	150	14963
// OP_STOREP_F	1228	14963	0
// OP_ADDRESS	28	103	14964
// OP_STOREP_F	241	14964	0
// OP_ADDRESS	28	163	14965
// OP_STOREP_F	257	14965	0
// OP_ADDRESS	28	152	14966
// OP_STOREP_F	817	14966	0
// OP_ADDRESS	28	104	14967
// OP_STOREP_F	243	14967	0
// OP_ADDRESS	28	166	14968
// OP_STOREP_V	1666	14968	0
// OP_STORE_V	28	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	926	10	0
// OP_CALL3	464	0	0
// OP_ADDRESS	28	108	14971
// OP_LOAD_F	28	108	14972
// OP_SUB_F	14972	13015	14973
// OP_STOREP_F	14973	14971	0
// OP_ADDRESS	28	182	14974
// OP_LOAD_F	28	182	14975
// OP_LOAD_F	28	182	14976
// OP_BITAND	14976	228	14977
// OP_SUB_F	14975	14977	14978
// OP_STOREP_F	14978	14974	0
// OP_ADDRESS	28	121	14979
// OP_CALL0	9187	0	0
// OP_MUL_FV	1	14982	14985
// OP_STOREP_V	14985	14979	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	14961	0
// OP_ADDRESS	14961	105	14988
// OP_LOAD_V	28	105	14991
// OP_STOREP_V	14991	14988	0
// OP_ADDRESS	14961	129	14994
// OP_STOREP_S	14995	14994	0
// OP_ADDRESS	14961	104	14996
// OP_STOREP_F	244	14996	0
// OP_ADDRESS	14961	103	14997
// OP_STOREP_F	241	14997	0
// OP_STORE_V	14961	4	0
// OP_STORE_V	12128	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	14961	108	14998
// OP_LOAD_F	28	108	14999
// OP_SUB_F	14999	13015	15000
// OP_STOREP_F	15000	14998	0
// OP_STORE_V	14961	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	926	10	0
// OP_CALL3	464	0	0
// OP_ADDRESS	14961	113	15001
// OP_LOAD_F	28	152	15004
// OP_STORE_V	15004	4	0
// OP_CALL1	1495	0	0
// OP_STOREP_V	1	15001	0
// OP_ADDRESS	28	113	15005
// OP_LOAD_V	14961	113	15008
// OP_STOREP_V	15008	15005	0
// OP_ADDRESS	14961	121	15011
// OP_CALL0	9187	0	0
// OP_MUL_FV	1	14982	15014
// OP_STOREP_V	15014	15011	0
// OP_ADDRESS	14961	163	15017
// OP_STOREP_F	256	15017	0
// OP_ADDRESS	14961	131	15018
// OP_STOREP_F	817	15018	0
// OP_ADDRESS	14961	148	15019
// OP_STOREP_FNC	533	15019	0
// OP_ADDRESS	14961	150	15020
// OP_ADD_F	31	1112	15021
// OP_STOREP_F	15021	15020	0
// OP_ADDRESS	14961	201	15022
// OP_STOREP_ENT	28	15022	0
// OP_ADDRESS	14961	182	15023
// OP_STOREP_F	227	15023	0
// OP_ADDRESS	14961	146	15024
// OP_STOREP_FNC	14942	15024	0
// OP_LOAD_S	28	129	15025
// OP_EQ_S	15025	3609	15026
// OP_IFNOT	15026	3	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_GT	738	819	15027
// OP_IFNOT	15027	21	0
// OP_ADDRESS	14961	162	15028
// OP_LOAD_F	28	154	15029
// OP_STOREP_F	15029	15028	0
// OP_ADDRESS	14961	158	15030
// OP_LOAD_F	28	158	15031
// OP_STOREP_F	15031	15030	0
// OP_ADDRESS	14961	159	15032
// OP_LOAD_F	28	159	15033
// OP_STOREP_F	15033	15032	0
// OP_ADDRESS	14961	160	15034
// OP_LOAD_F	28	160	15035
// OP_STOREP_F	15035	15034	0
// OP_ADDRESS	14961	161	15036
// OP_LOAD_F	28	161	15037
// OP_STOREP_F	15037	15036	0
// OP_LOAD_F	14961	160	15038
// OP_GT	15038	845	15039
// OP_IFNOT	15039	3	0
// OP_ADDRESS	14961	160	15040
// OP_STOREP_F	845	15040	0
// OP_DONE	0	0	0
void (string gibname, float dm) ThrowHead = 
{
    local entity h;
    setmodel(self, "progs/gib1.mdl");
    self.frame = 0.000;
    self.nextthink = -1.000;
    self.movetype = MOVETYPE_BOUNCE;
    self.takedamage = DAMAGE_YES;
    self.health = 0.000;
    self.solid = SOLID_NOT;
    self.view_ofs = '0.000 0.000 8.000';
    setsize(self, '0.000 0.000 0.000', '0.000 0.000 0.000');
    self.origin_z = self.origin_z - 24.000;
    self.flags = self.flags - (self.flags & FL_ONGROUND);
    self.avelocity = crandom() * '0.000 600.000 0.000';
    h = spawn();
    h.origin = self.origin;
    h.classname = "item_head";
    h.solid = SOLID_TRIGGER;
    h.movetype = MOVETYPE_BOUNCE;
    setmodel(h, "progs/h_player.mdl");
    h.origin_z = self.origin_z - 24.000;
    setsize(h, '0.000 0.000 0.000', '0.000 0.000 0.000');
    h.velocity = VelocityForDamage(self.health);
    self.velocity = h.velocity;
    h.avelocity = crandom() * '0.000 600.000 0.000';
    h.takedamage = DAMAGE_NO;
    h.frame = 0.000;
    h.think = SUB_Remove;
    h.nextthink = time + 20.000;
    h.owner = self;
    h.flags = FL_ITEM;
    h.touch = HeadTouch;
    
    if(self.classname == "rally_dude")
    {
        remove(self);
    }
    
    
    if(rally_type_index > 1.000)
    {
        h.items = self.weapon;
        h.ammo_shells = self.ammo_shells;
        h.ammo_nails = self.ammo_nails;
        h.ammo_rockets = self.ammo_rockets;
        h.ammo_cells = self.ammo_cells;
        
        if(h.ammo_rockets > 15.000)
        {
            h.ammo_rockets = 15.000;
        }
        
    }
    
};

// GibPlayer
// function begins at statement 20985, parm_start=15042
// OP_STORE_V	949	4	0
// OP_CALL1	501	0	0
// OP_NE_F	1	855	15042
// OP_IFNOT	15042	13	0
// OP_STORE_V	12129	4	0
// OP_LOAD_F	28	152	15043
// OP_STORE_V	15043	7	0
// OP_CALL2	14913	0	0
// OP_STORE_V	12130	4	0
// OP_LOAD_F	28	152	15044
// OP_STORE_V	15044	7	0
// OP_CALL2	14913	0	0
// OP_STORE_V	12131	4	0
// OP_LOAD_F	28	152	15045
// OP_STORE_V	15045	7	0
// OP_CALL2	14913	0	0
// OP_STORE_V	12128	4	0
// OP_LOAD_F	28	152	15046
// OP_STORE_V	15046	7	0
// OP_CALL2	14958	0	0
// OP_ADDRESS	28	165	15047
// OP_STOREP_F	254	15047	0
// OP_LOAD_S	361	129	15048
// OP_EQ_S	15048	13360	15049
// OP_IFNOT	15049	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	12077	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	339	16	0
// OP_CALL5	467	0	0
// OP_RETURN	0	0	0
// OP_LOAD_S	361	129	15050
// OP_EQ_S	15050	13372	15051
// OP_IFNOT	15051	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	12077	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	339	16	0
// OP_CALL5	467	0	0
// OP_RETURN	0	0	0
// OP_CALL0	466	0	0
// OP_LT	1	1182	15052
// OP_IFNOT	15052	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	12086	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	339	16	0
// OP_CALL5	467	0	0
// OP_GOTO	7	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	12087	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	339	16	0
// OP_CALL5	467	0	0
// OP_DONE	0	0	0
void () GibPlayer = 
{
    
    if(cvar("deathmatch") != 10.000)
    {
        ThrowGib("progs/gib1.mdl", self.health);
        ThrowGib("progs/gib2.mdl", self.health);
        ThrowGib("progs/gib3.mdl", self.health);
    }
    
    ThrowHead("progs/h_player.mdl", self.health);
    self.deadflag = DEAD_DEAD;
    
    if(damage_attacker.classname == "teledeath")
    {
        sound(self, CHAN_VOICE, "player/teledth1.wav", 1.000, ATTN_NONE);
        return;
    }
    
    
    if(damage_attacker.classname == "teledeath2")
    {
        sound(self, CHAN_VOICE, "player/teledth1.wav", 1.000, ATTN_NONE);
        return;
    }
    
    if(random() < 0.500)
    {
        sound(self, CHAN_VOICE, "player/gib.wav", 1.000, ATTN_NONE);
    }
    else
    {
        sound(self, CHAN_VOICE, "player/udeath.wav", 1.000, ATTN_NONE);
    }
    
};

// PlayerDie
// function begins at statement 21044, parm_start=15053
// OP_LOAD_F	28	165	15054
// OP_IFNOT	15054	2	0
// OP_RETURN	0	0	0
// OP_EQ_F	738	825	15055
// OP_AND	689	15055	15056
// OP_IFNOT	15056	6	0
// OP_ADDRESS	28	682	15057
// OP_LOAD_F	28	682	15058
// OP_SUB_F	15058	819	15059
// OP_STOREP_F	15059	15057	0
// OP_CALL0	1497	0	0
// OP_LOAD_ENT	28	673	15060
// OP_NE_E	15060	30	15061
// OP_IFNOT	15061	6	0
// OP_LOAD_ENT	28	673	15062
// OP_STORE_V	15062	4	0
// OP_CALL1	474	0	0
// OP_ADDRESS	28	673	15063
// OP_STOREP_ENT	30	15063	0
// OP_LOAD_ENT	28	674	15064
// OP_ADDRESS	15064	148	15065
// OP_STOREP_FNC	1624	15065	0
// OP_LOAD_ENT	28	674	15066
// OP_ADDRESS	15066	150	15067
// OP_ADD_F	31	2869	15068
// OP_STOREP_F	15068	15067	0
// OP_LOAD_ENT	28	674	15069
// OP_ADDRESS	15069	647	15070
// OP_STOREP_F	31	15070	0
// OP_LOAD_ENT	28	674	15071
// OP_ADDRESS	15071	548	15072
// OP_LOAD_ENT	28	548	15073
// OP_STOREP_ENT	15073	15072	0
// OP_LOAD_ENT	28	674	15074
// OP_ADDRESS	15074	378	15075
// OP_STOREP_F	817	15075	0
// OP_ADDRESS	28	162	15076
// OP_LOAD_F	28	162	15077
// OP_LOAD_F	28	162	15078
// OP_BITAND	15078	286	15079
// OP_SUB_F	15077	15079	15080
// OP_STOREP_F	15080	15076	0
// OP_ADDRESS	28	390	15081
// OP_STOREP_F	817	15081	0
// OP_ADDRESS	28	389	15082
// OP_STOREP_F	817	15082	0
// OP_ADDRESS	28	391	15083
// OP_STOREP_F	817	15083	0
// OP_ADDRESS	28	392	15084
// OP_STOREP_F	817	15084	0
// OP_ADDRESS	28	652	15085
// OP_STOREP_F	817	15085	0
// OP_ADDRESS	28	653	15086
// OP_STOREP_F	817	15086	0
// OP_ADDRESS	28	166	15087
// OP_STOREP_V	15090	15087	0
// OP_ADDRESS	28	165	15093
// OP_STOREP_F	253	15093	0
// OP_ADDRESS	28	104	15094
// OP_STOREP_F	243	15094	0
// OP_ADDRESS	28	182	15095
// OP_LOAD_F	28	182	15096
// OP_LOAD_F	28	182	15097
// OP_BITAND	15097	228	15098
// OP_SUB_F	15096	15098	15099
// OP_STOREP_F	15099	15095	0
// OP_ADDRESS	28	103	15100
// OP_STOREP_F	233	15100	0
// OP_LOAD_F	28	116	15101
// OP_LT	15101	855	15102
// OP_IFNOT	15102	7	0
// OP_ADDRESS	28	116	15103
// OP_LOAD_F	28	116	15104
// OP_CALL0	466	0	0
// OP_MUL_F	1	2299	15105
// OP_ADD_F	15104	15105	15106
// OP_STOREP_F	15106	15103	0
// OP_LOAD_F	28	152	15107
// OP_LT	15107	4504	15108
// OP_GT	738	819	15109
// OP_OR	15108	15109	15110
// OP_IFNOT	15110	3	0
// OP_CALL0	15041	0	0
// OP_RETURN	0	0	0
// OP_CALL0	14873	0	0
// OP_ADDRESS	28	118	15111
// OP_STOREP_F	817	15111	0
// OP_ADDRESS	28	120	15112
// OP_STOREP_F	817	15112	0
// OP_CALL0	14823	0	0
// OP_RETURN	0	0	0
// OP_CALL0	14890	0	0
// OP_DONE	0	0	0
void () PlayerDie = 
{
    local float i;
    
    if(self.deadflag)
    {
        return;
    }
    
    
    if(challenge && (rally_type_index == 4.000))
    {
        self.cult_cars = self.cult_cars - 1.000;
        CheckCultCars();
    }
    
    
    if(self.mine_attached != world)
    {
        remove(self.mine_attached);
        self.mine_attached = world;
    }
    
    self.death_thinker.think = DeathThink;
    self.death_thinker.nextthink = time + 0.100;
    self.death_thinker.last_idle = time;
    self.death_thinker.veh_body = self.veh_body;
    self.death_thinker.speed = 0.000;
    self.items = self.items - (self.items & IT_INVISIBILITY);
    self.invisible_finished = 0.000;
    self.invincible_finished = 0.000;
    self.super_damage_finished = 0.000;
    self.radsuit_finished = 0.000;
    self.last_engine1 = 0.000;
    self.last_engine2 = 0.000;
    self.view_ofs = '0.000 0.000 -8.000';
    self.deadflag = DEAD_DYING;
    self.solid = SOLID_NOT;
    self.flags = self.flags - (self.flags & FL_ONGROUND);
    self.movetype = MOVETYPE_NONE;
    
    if(self.velocity_z < 10.000)
    {
        self.velocity_z = self.velocity_z + (random() * 300.000);
    }
    
    
    if((self.health < -40.000) || (rally_type_index > 1.000))
    {
        GibPlayer();
        return;
    }
    
    DeathSound();
    self.angles_x = 0.000;
    self.angles_z = 0.000;
    player_die_ax1();
    return;
    PlayerDead();
};

// set_suicide_frame
// function begins at statement 21137, parm_start=15113
// OP_ADDRESS	28	104	15113
// OP_STOREP_F	243	15113	0
// OP_ADDRESS	28	103	15114
// OP_STOREP_F	237	15114	0
// OP_ADDRESS	28	165	15115
// OP_STOREP_F	254	15115	0
// OP_ADDRESS	28	150	15116
// OP_STOREP_F	1228	15116	0
// OP_DONE	0	0	0
void () set_suicide_frame = 
{
    self.solid = SOLID_NOT;
    self.movetype = MOVETYPE_TOSS;
    self.deadflag = DEAD_DEAD;
    self.nextthink = -1.000;
};

// player_diea1
// function begins at statement 21146, parm_start=15117
// OP_STATE	2611	15117	0
// OP_DONE	0	0	0
void () player_diea1 = [50.000, player_diea2]
{
};

// player_diea2
// function begins at statement 21148, parm_start=15118
// OP_STATE	15118	15119	0
// OP_DONE	0	0	0
void () player_diea2 = [51.000, player_diea3]
{
};

// player_diea3
// function begins at statement 21150, parm_start=15120
// OP_STATE	15120	15121	0
// OP_DONE	0	0	0
void () player_diea3 = [52.000, player_diea4]
{
};

// player_diea4
// function begins at statement 21152, parm_start=15122
// OP_STATE	2779	15122	0
// OP_DONE	0	0	0
void () player_diea4 = [53.000, player_diea5]
{
};

// player_diea5
// function begins at statement 21154, parm_start=15123
// OP_STATE	15123	15124	0
// OP_DONE	0	0	0
void () player_diea5 = [54.000, player_diea6]
{
};

// player_diea6
// function begins at statement 21156, parm_start=15125
// OP_STATE	11012	15125	0
// OP_DONE	0	0	0
void () player_diea6 = [55.000, player_diea7]
{
};

// player_diea7
// function begins at statement 21158, parm_start=15126
// OP_STATE	11018	15126	0
// OP_DONE	0	0	0
void () player_diea7 = [56.000, player_diea8]
{
};

// player_diea8
// function begins at statement 21160, parm_start=15127
// OP_STATE	15127	15128	0
// OP_DONE	0	0	0
void () player_diea8 = [57.000, player_diea9]
{
};

// player_diea9
// function begins at statement 21162, parm_start=15129
// OP_STATE	15129	15130	0
// OP_DONE	0	0	0
void () player_diea9 = [58.000, player_diea10]
{
};

// player_diea10
// function begins at statement 21164, parm_start=15131
// OP_STATE	15131	15132	0
// OP_DONE	0	0	0
void () player_diea10 = [59.000, player_diea11]
{
};

// player_diea11
// function begins at statement 21166, parm_start=15133
// OP_STATE	2228	15132	0
// OP_CALL0	14890	0	0
// OP_DONE	0	0	0
void () player_diea11 = [60.000, player_diea11]
{
    PlayerDead();
};

// player_dieb1
// function begins at statement 21169, parm_start=15133
// OP_STATE	15133	15134	0
// OP_DONE	0	0	0
void () player_dieb1 = [61.000, player_dieb2]
{
};

// player_dieb2
// function begins at statement 21171, parm_start=15135
// OP_STATE	15135	15136	0
// OP_DONE	0	0	0
void () player_dieb2 = [62.000, player_dieb3]
{
};

// player_dieb3
// function begins at statement 21173, parm_start=15137
// OP_STATE	12183	15137	0
// OP_DONE	0	0	0
void () player_dieb3 = [63.000, player_dieb4]
{
};

// player_dieb4
// function begins at statement 21175, parm_start=15138
// OP_STATE	2223	15138	0
// OP_DONE	0	0	0
void () player_dieb4 = [64.000, player_dieb5]
{
};

// player_dieb5
// function begins at statement 21177, parm_start=15139
// OP_STATE	15139	15140	0
// OP_DONE	0	0	0
void () player_dieb5 = [65.000, player_dieb6]
{
};

// player_dieb6
// function begins at statement 21179, parm_start=15141
// OP_STATE	15141	15142	0
// OP_DONE	0	0	0
void () player_dieb6 = [66.000, player_dieb7]
{
};

// player_dieb7
// function begins at statement 21181, parm_start=15143
// OP_STATE	15143	15144	0
// OP_DONE	0	0	0
void () player_dieb7 = [67.000, player_dieb8]
{
};

// player_dieb8
// function begins at statement 21183, parm_start=15145
// OP_STATE	15145	15146	0
// OP_DONE	0	0	0
void () player_dieb8 = [68.000, player_dieb9]
{
};

// player_dieb9
// function begins at statement 21185, parm_start=15147
// OP_STATE	15147	15146	0
// OP_CALL0	14890	0	0
// OP_DONE	0	0	0
void () player_dieb9 = [69.000, player_dieb9]
{
    PlayerDead();
};

// player_diec1
// function begins at statement 21188, parm_start=15148
// OP_STATE	15148	15149	0
// OP_DONE	0	0	0
void () player_diec1 = [70.000, player_diec2]
{
};

// player_diec2
// function begins at statement 21190, parm_start=15150
// OP_STATE	15150	15151	0
// OP_DONE	0	0	0
void () player_diec2 = [71.000, player_diec3]
{
};

// player_diec3
// function begins at statement 21192, parm_start=15152
// OP_STATE	15152	15153	0
// OP_DONE	0	0	0
void () player_diec3 = [72.000, player_diec4]
{
};

// player_diec4
// function begins at statement 21194, parm_start=15154
// OP_STATE	9292	15154	0
// OP_DONE	0	0	0
void () player_diec4 = [73.000, player_diec5]
{
};

// player_diec5
// function begins at statement 21196, parm_start=15155
// OP_STATE	15155	15156	0
// OP_DONE	0	0	0
void () player_diec5 = [74.000, player_diec6]
{
};

// player_diec6
// function begins at statement 21198, parm_start=15157
// OP_STATE	15157	15158	0
// OP_DONE	0	0	0
void () player_diec6 = [75.000, player_diec7]
{
};

// player_diec7
// function begins at statement 21200, parm_start=15159
// OP_STATE	15159	15160	0
// OP_DONE	0	0	0
void () player_diec7 = [76.000, player_diec8]
{
};

// player_diec8
// function begins at statement 21202, parm_start=15161
// OP_STATE	15161	15162	0
// OP_DONE	0	0	0
void () player_diec8 = [77.000, player_diec9]
{
};

// player_diec9
// function begins at statement 21204, parm_start=15163
// OP_STATE	15163	15164	0
// OP_DONE	0	0	0
void () player_diec9 = [78.000, player_diec10]
{
};

// player_diec10
// function begins at statement 21206, parm_start=15165
// OP_STATE	15165	15166	0
// OP_DONE	0	0	0
void () player_diec10 = [79.000, player_diec11]
{
};

// player_diec11
// function begins at statement 21208, parm_start=15167
// OP_STATE	2677	15167	0
// OP_DONE	0	0	0
void () player_diec11 = [80.000, player_diec12]
{
};

// player_diec12
// function begins at statement 21210, parm_start=15168
// OP_STATE	11033	15168	0
// OP_DONE	0	0	0
void () player_diec12 = [81.000, player_diec13]
{
};

// player_diec13
// function begins at statement 21212, parm_start=15169
// OP_STATE	15169	15170	0
// OP_DONE	0	0	0
void () player_diec13 = [82.000, player_diec14]
{
};

// player_diec14
// function begins at statement 21214, parm_start=15171
// OP_STATE	15171	15172	0
// OP_DONE	0	0	0
void () player_diec14 = [83.000, player_diec15]
{
};

// player_diec15
// function begins at statement 21216, parm_start=15173
// OP_STATE	15173	15172	0
// OP_CALL0	14890	0	0
// OP_DONE	0	0	0
void () player_diec15 = [84.000, player_diec15]
{
    PlayerDead();
};

// player_died1
// function begins at statement 21219, parm_start=15174
// OP_STATE	11037	15174	0
// OP_DONE	0	0	0
void () player_died1 = [85.000, player_died2]
{
};

// player_died2
// function begins at statement 21221, parm_start=15175
// OP_STATE	11043	15175	0
// OP_DONE	0	0	0
void () player_died2 = [86.000, player_died3]
{
};

// player_died3
// function begins at statement 21223, parm_start=15176
// OP_STATE	15176	15177	0
// OP_DONE	0	0	0
void () player_died3 = [87.000, player_died4]
{
};

// player_died4
// function begins at statement 21225, parm_start=15178
// OP_STATE	15178	15179	0
// OP_DONE	0	0	0
void () player_died4 = [88.000, player_died5]
{
};

// player_died5
// function begins at statement 21227, parm_start=15180
// OP_STATE	15180	15181	0
// OP_DONE	0	0	0
void () player_died5 = [89.000, player_died6]
{
};

// player_died6
// function begins at statement 21229, parm_start=15182
// OP_STATE	7023	15182	0
// OP_DONE	0	0	0
void () player_died6 = [90.000, player_died7]
{
};

// player_died7
// function begins at statement 21231, parm_start=15183
// OP_STATE	11051	15183	0
// OP_DONE	0	0	0
void () player_died7 = [91.000, player_died8]
{
};

// player_died8
// function begins at statement 21233, parm_start=15184
// OP_STATE	11055	15184	0
// OP_DONE	0	0	0
void () player_died8 = [92.000, player_died9]
{
};

// player_died9
// function begins at statement 21235, parm_start=15185
// OP_STATE	11060	15184	0
// OP_CALL0	14890	0	0
// OP_DONE	0	0	0
void () player_died9 = [93.000, player_died9]
{
    PlayerDead();
};

// player_diee1
// function begins at statement 21238, parm_start=15185
// OP_STATE	15185	15186	0
// OP_DONE	0	0	0
void () player_diee1 = [94.000, player_diee2]
{
};

// player_diee2
// function begins at statement 21240, parm_start=15187
// OP_STATE	15187	15188	0
// OP_DONE	0	0	0
void () player_diee2 = [95.000, player_diee3]
{
};

// player_diee3
// function begins at statement 21242, parm_start=15189
// OP_STATE	15189	15190	0
// OP_DONE	0	0	0
void () player_diee3 = [96.000, player_diee4]
{
};

// player_diee4
// function begins at statement 21244, parm_start=15191
// OP_STATE	15191	15192	0
// OP_DONE	0	0	0
void () player_diee4 = [97.000, player_diee5]
{
};

// player_diee5
// function begins at statement 21246, parm_start=15193
// OP_STATE	15193	15194	0
// OP_DONE	0	0	0
void () player_diee5 = [98.000, player_diee6]
{
};

// player_diee6
// function begins at statement 21248, parm_start=15195
// OP_STATE	15195	15196	0
// OP_DONE	0	0	0
void () player_diee6 = [99.000, player_diee7]
{
};

// player_diee7
// function begins at statement 21250, parm_start=15197
// OP_STATE	1957	15197	0
// OP_DONE	0	0	0
void () player_diee7 = [100.000, player_diee8]
{
};

// player_diee8
// function begins at statement 21252, parm_start=15198
// OP_STATE	11067	15198	0
// OP_DONE	0	0	0
void () player_diee8 = [101.000, player_diee9]
{
};

// player_diee9
// function begins at statement 21254, parm_start=15199
// OP_STATE	15199	15198	0
// OP_CALL0	14890	0	0
// OP_DONE	0	0	0
void () player_diee9 = [102.000, player_diee9]
{
    PlayerDead();
};

// player_die_ax1
// function begins at statement 21257, parm_start=15200
// OP_STATE	10987	15200	0
// OP_DONE	0	0	0
void () player_die_ax1 = [41.000, player_die_ax2]
{
};

// player_die_ax2
// function begins at statement 21259, parm_start=15201
// OP_STATE	10994	15201	0
// OP_DONE	0	0	0
void () player_die_ax2 = [42.000, player_die_ax3]
{
};

// player_die_ax3
// function begins at statement 21261, parm_start=15202
// OP_STATE	11000	15202	0
// OP_DONE	0	0	0
void () player_die_ax3 = [43.000, player_die_ax4]
{
};

// player_die_ax4
// function begins at statement 21263, parm_start=15203
// OP_STATE	15203	15204	0
// OP_DONE	0	0	0
void () player_die_ax4 = [44.000, player_die_ax5]
{
};

// player_die_ax5
// function begins at statement 21265, parm_start=15205
// OP_STATE	2558	15205	0
// OP_DONE	0	0	0
void () player_die_ax5 = [45.000, player_die_ax6]
{
};

// player_die_ax6
// function begins at statement 21267, parm_start=15206
// OP_STATE	15206	15207	0
// OP_DONE	0	0	0
void () player_die_ax6 = [46.000, player_die_ax7]
{
};

// player_die_ax7
// function begins at statement 21269, parm_start=15208
// OP_STATE	15208	15209	0
// OP_DONE	0	0	0
void () player_die_ax7 = [47.000, player_die_ax8]
{
};

// player_die_ax8
// function begins at statement 21271, parm_start=15210
// OP_STATE	3330	15210	0
// OP_DONE	0	0	0
void () player_die_ax8 = [48.000, player_die_ax9]
{
};

// player_die_ax9
// function begins at statement 21273, parm_start=15211
// OP_STATE	15211	15210	0
// OP_CALL0	14890	0	0
// OP_DONE	0	0	0
void () player_die_ax9 = [49.000, player_die_ax9]
{
    PlayerDead();
};

// monster_use
// function begins at statement 21276, parm_start=15213
// OP_DONE	0	0	0
void () monster_use = 
{
};

// monster_death_use
// function begins at statement 21277, parm_start=15213
// OP_LOAD_F	28	182	15216
// OP_BITAND	15216	220	15217
// OP_IFNOT	15217	5	0
// OP_ADDRESS	28	182	15218
// OP_LOAD_F	28	182	15219
// OP_SUB_F	15219	220	15220
// OP_STOREP_F	15220	15218	0
// OP_LOAD_F	28	182	15221
// OP_BITAND	15221	221	15222
// OP_IFNOT	15222	5	0
// OP_ADDRESS	28	182	15223
// OP_LOAD_F	28	182	15224
// OP_SUB_F	15224	221	15225
// OP_STOREP_F	15225	15223	0
// OP_LOAD_S	28	196	15226
// OP_NOT_S	15226	0	15227
// OP_IFNOT	15227	2	0
// OP_RETURN	0	0	0
// OP_LOAD_ENT	28	181	15228
// OP_STORE_ENT	15228	360	0
// OP_CALL0	532	0	0
// OP_DONE	0	0	0
void () monster_death_use = 
{
    local entity ent;
    local entity otemp;
    local entity stemp;
    
    if(self.flags & FL_FLY)
    {
        self.flags = self.flags - FL_FLY;
    }
    
    
    if(self.flags & FL_SWIM)
    {
        self.flags = self.flags - FL_SWIM;
    }
    
    
    if(!self.target)
    {
        return;
    }
    
    activator = self.enemy;
    SUB_UseTargets();
};

// walkmonster_start_go
// function begins at statement 21299, parm_start=15230
// OP_ADDRESS	28	108	15232
// OP_LOAD_F	28	108	15233
// OP_ADD_F	15233	819	15234
// OP_STOREP_F	15234	15232	0
// OP_CALL0	492	0	0
// OP_STORE_V	817	4	0
// OP_STORE_V	817	7	0
// OP_CALL2	491	0	0
// OP_NOT_F	1	0	15235
// OP_IFNOT	15235	10	0
// OP_STORE_V	15236	4	0
// OP_CALL1	484	0	0
// OP_LOAD_V	28	105	15237
// OP_STORE_V	15237	4	0
// OP_CALL1	486	0	0
// OP_STORE_V	1	4	0
// OP_CALL1	484	0	0
// OP_STORE_V	888	4	0
// OP_CALL1	484	0	0
// OP_ADDRESS	28	163	15240
// OP_STOREP_F	258	15240	0
// OP_ADDRESS	28	191	15241
// OP_LOAD_V	28	117	15242
// OP_MUL_V	15242	1224	15245
// OP_STOREP_F	15245	15241	0
// OP_LOAD_F	28	192	15246
// OP_NOT_F	15246	0	15247
// OP_IFNOT	15247	3	0
// OP_ADDRESS	28	192	15248
// OP_STOREP_F	1112	15248	0
// OP_ADDRESS	28	166	15249
// OP_STOREP_V	15252	15249	0
// OP_ADDRESS	28	147	15255
// OP_STOREP_FNC	15212	15255	0
// OP_ADDRESS	28	182	15256
// OP_LOAD_F	28	182	15257
// OP_BITOR	15257	224	15258
// OP_STOREP_F	15258	15256	0
// OP_LOAD_S	28	196	15259
// OP_IFNOT	15259	42	0
// OP_ADDRESS	28	194	15260
// OP_ADDRESS	28	432	15261
// OP_STORE_V	30	4	0
// OP_STORE_V	197	7	0
// OP_LOAD_S	28	196	15262
// OP_STORE_V	15262	10	0
// OP_CALL3	477	0	0
// OP_STOREP_ENT	1	15261	0
// OP_STOREP_ENT	1	15260	0
// OP_ADDRESS	28	191	15263
// OP_LOAD_ENT	28	194	15264
// OP_LOAD_V	15264	105	15265
// OP_LOAD_V	28	105	15268
// OP_SUB_V	15265	15268	15271
// OP_STORE_V	15271	4	0
// OP_CALL1	472	0	0
// OP_STOREP_F	1	15263	0
// OP_LOAD_ENT	28	432	15274
// OP_NOT_ENT	15274	0	15275
// OP_IFNOT	15275	10	0
// OP_STORE_V	15276	4	0
// OP_CALL1	484	0	0
// OP_LOAD_V	28	105	15277
// OP_STORE_V	15277	4	0
// OP_CALL1	486	0	0
// OP_STORE_V	1	4	0
// OP_CALL1	484	0	0
// OP_STORE_V	888	4	0
// OP_CALL1	484	0	0
// OP_LOAD_ENT	28	432	15280
// OP_LOAD_S	15280	129	15281
// OP_EQ_S	15281	15282	15283
// OP_IFNOT	15283	4	0
// OP_LOAD_FNC	28	371	15284
// OP_CALL0	15284	0	0
// OP_GOTO	3	0	0
// OP_ADDRESS	28	431	15285
// OP_STOREP_F	15286	15285	0
// OP_LOAD_FNC	28	370	15287
// OP_CALL0	15287	0	0
// OP_GOTO	5	0	0
// OP_ADDRESS	28	431	15288
// OP_STOREP_F	15286	15288	0
// OP_LOAD_FNC	28	370	15289
// OP_CALL0	15289	0	0
// OP_ADDRESS	28	150	15290
// OP_LOAD_F	28	150	15291
// OP_CALL0	466	0	0
// OP_MUL_F	1	1182	15292
// OP_ADD_F	15291	15292	15293
// OP_STOREP_F	15293	15290	0
// OP_DONE	0	0	0
void () walkmonster_start_go = 
{
    local string stemp;
    local entity etemp;
    self.origin_z = self.origin_z + 1.000;
    droptofloor();
    
    if(!walkmove(0.000, 0.000))
    {
        dprint("walkmonster in wall at: ");
        dprint(vtos(self.origin));
        dprint("\n");
    }
    
    self.takedamage = DAMAGE_AIM;
    self.ideal_yaw = self.angles * '0.000 1.000 0.000';
    
    if(!self.yaw_speed)
    {
        self.yaw_speed = 20.000;
    }
    
    self.view_ofs = '0.000 0.000 25.000';
    self.use = monster_use;
    self.flags = self.flags | FL_MONSTER;
    if(self.target)
    {
        self.goalentity = self.movetarget = find(world, targetname, self.target);
        self.ideal_yaw = vectoyaw(self.goalentity.origin - self.origin);
        
        if(!self.movetarget)
        {
            dprint("Monster can't find target at ");
            dprint(vtos(self.origin));
            dprint("\n");
        }
        
        if(self.movetarget.classname == "path_corner")
        {
            self.th_walk();
        }
        else
        {
            self.pausetime = 100000000.000;
        }
        
        self.th_stand();
    }
    else
    {
        self.pausetime = 100000000.000;
        self.th_stand();
    }
    
    self.nextthink = self.nextthink + (random() * 0.500);
};

// walkmonster_start
// function begins at statement 21391, parm_start=15295
// OP_ADDRESS	28	150	15295
// OP_LOAD_F	28	150	15296
// OP_CALL0	466	0	0
// OP_MUL_F	1	1182	15297
// OP_ADD_F	15296	15297	15298
// OP_STOREP_F	15298	15295	0
// OP_ADDRESS	28	148	15299
// OP_STOREP_FNC	15229	15299	0
// OP_EQ_F	738	825	15300
// OP_IFNOT	15300	3	0
// OP_STORE_F	792	40	0
// OP_GOTO	3	0	0
// OP_ADD_F	40	819	15301
// OP_STORE_F	15301	40	0
// OP_DONE	0	0	0
void () walkmonster_start = 
{
    self.nextthink = self.nextthink + (random() * 0.500);
    self.think = walkmonster_start_go;
    if(rally_type_index == 4.000)
    {
        total_monsters = NUM_DUKES;
    }
    else
    {
        total_monsters = total_monsters + 1.000;
    }
    
};

// flymonster_start_go
// function begins at statement 21406, parm_start=15303
// OP_ADDRESS	28	163	15303
// OP_STOREP_F	258	15303	0
// OP_DONE	0	0	0
void () flymonster_start_go = 
{
    self.takedamage = DAMAGE_AIM;
};

// flymonster_start
// function begins at statement 21409, parm_start=15305
// OP_ADDRESS	28	150	15305
// OP_LOAD_F	28	150	15306
// OP_CALL0	466	0	0
// OP_MUL_F	1	1182	15307
// OP_ADD_F	15306	15307	15308
// OP_STOREP_F	15308	15305	0
// OP_ADDRESS	28	148	15309
// OP_STOREP_FNC	15302	15309	0
// OP_ADD_F	40	819	15310
// OP_STORE_F	15310	40	0
// OP_DONE	0	0	0
void () flymonster_start = 
{
    self.nextthink = self.nextthink + (random() * 0.500);
    self.think = flymonster_start_go;
    total_monsters = total_monsters + 1.000;
};

// swimmonster_start_go
// function begins at statement 21420, parm_start=15312
// OP_IFNOT	35	4	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_RETURN	0	0	0
// OP_DONE	0	0	0
void () swimmonster_start_go = 
{
    
    if(deathmatch)
    {
        remove(self);
        return;
    }
    
};

// swimmonster_start
// function begins at statement 21425, parm_start=15313
// OP_ADDRESS	28	150	15313
// OP_LOAD_F	28	150	15314
// OP_CALL0	466	0	0
// OP_MUL_F	1	1182	15315
// OP_ADD_F	15314	15315	15316
// OP_STOREP_F	15316	15313	0
// OP_ADDRESS	28	148	15317
// OP_STOREP_FNC	15311	15317	0
// OP_ADD_F	40	819	15318
// OP_STORE_F	15318	40	0
// OP_DONE	0	0	0
void () swimmonster_start = 
{
    self.nextthink = self.nextthink + (random() * 0.500);
    self.think = swimmonster_start_go;
    total_monsters = total_monsters + 1.000;
};

float DOOR_START_OPEN = 1.000;
float DOOR_DONT_LINK = 4.000;
float DOOR_GOLD_KEY = 8.000;
float DOOR_SILVER_KEY = 16.000;
float DOOR_TOGGLE = 32.000;
void () door_go_down;
void () door_go_up;
// door_blocked
// function begins at statement 21436, parm_start=15327
// OP_STORE_V	29	4	0
// OP_STORE_V	28	7	0
// OP_STORE_V	28	10	0
// OP_LOAD_F	28	434	15327
// OP_STORE_V	15327	13	0
// OP_CALL4	534	0	0
// OP_LOAD_F	28	427	15328
// OP_GE	15328	817	15329
// OP_IFNOT	15329	7	0
// OP_LOAD_F	28	447	15330
// OP_EQ_F	15330	299	15331
// OP_IFNOT	15331	3	0
// OP_CALL0	15325	0	0
// OP_GOTO	2	0	0
// OP_CALL0	15324	0	0
// OP_DONE	0	0	0
void () door_blocked = 
{
    T_Damage(other, self, self, self.dmg);
    
    if(self.wait >= 0.000)
    {
        if(self.state == STATE_DOWN)
        {
            door_go_up();
        }
        else
        {
            door_go_down();
        }
        
    }
    
};

// door_hit_top
// function begins at statement 21452, parm_start=15333
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	209	15333
// OP_STORE_V	15333	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	447	15334
// OP_STOREP_F	296	15334	0
// OP_LOAD_F	28	195	15335
// OP_BITAND	15335	15323	15336
// OP_IFNOT	15336	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	148	15337
// OP_STOREP_FNC	15324	15337	0
// OP_ADDRESS	28	150	15338
// OP_LOAD_F	28	102	15339
// OP_LOAD_F	28	427	15340
// OP_ADD_F	15339	15340	15341
// OP_STOREP_F	15341	15338	0
// OP_DONE	0	0	0
void () door_hit_top = 
{
    sound(self, CHAN_VOICE, self.noise1, 1.000, ATTN_NORM);
    self.state = STATE_TOP;
    
    if(self.spawnflags & DOOR_TOGGLE)
    {
        return;
    }
    
    self.think = door_go_down;
    self.nextthink = self.ltime + self.wait;
};

// door_hit_bottom
// function begins at statement 21473, parm_start=15343
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	209	15343
// OP_STORE_V	15343	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	447	15344
// OP_STOREP_F	297	15344	0
// OP_DONE	0	0	0
void () door_hit_bottom = 
{
    sound(self, CHAN_VOICE, self.noise1, 1.000, ATTN_NORM);
    self.state = STATE_BOTTOM;
};

// door_go_down
// function begins at statement 21483, parm_start=15345
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	210	15345
// OP_STORE_V	15345	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_LOAD_F	28	185	15346
// OP_IFNOT	15346	6	0
// OP_ADDRESS	28	163	15347
// OP_STOREP_F	257	15347	0
// OP_ADDRESS	28	152	15348
// OP_LOAD_F	28	185	15349
// OP_STOREP_F	15349	15348	0
// OP_ADDRESS	28	447	15350
// OP_STOREP_F	299	15350	0
// OP_LOAD_V	28	448	15351
// OP_STORE_V	15351	4	0
// OP_LOAD_F	28	378	15354
// OP_STORE_V	15354	7	0
// OP_STORE_V	15342	10	0
// OP_CALL3	526	0	0
// OP_DONE	0	0	0
void () door_go_down = 
{
    sound(self, CHAN_VOICE, self.noise2, 1.000, ATTN_NORM);
    
    if(self.max_health)
    {
        self.takedamage = DAMAGE_YES;
        self.health = self.max_health;
    }
    
    self.state = STATE_DOWN;
    SUB_CalcMove(self.pos1, self.speed, door_hit_bottom);
};

// door_go_up
// function begins at statement 21506, parm_start=15355
// OP_LOAD_F	28	447	15355
// OP_EQ_F	15355	298	15356
// OP_IFNOT	15356	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	447	15357
// OP_EQ_F	15357	296	15358
// OP_IFNOT	15358	7	0
// OP_ADDRESS	28	150	15359
// OP_LOAD_F	28	102	15360
// OP_LOAD_F	28	427	15361
// OP_ADD_F	15360	15361	15362
// OP_STOREP_F	15362	15359	0
// OP_RETURN	0	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	210	15363
// OP_STORE_V	15363	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	447	15364
// OP_STOREP_F	298	15364	0
// OP_LOAD_V	28	452	15365
// OP_STORE_V	15365	4	0
// OP_LOAD_F	28	378	15368
// OP_STORE_V	15368	7	0
// OP_STORE_V	15332	10	0
// OP_CALL3	526	0	0
// OP_CALL0	532	0	0
// OP_DONE	0	0	0
void () door_go_up = 
{
    
    if(self.state == STATE_UP)
    {
        return;
    }
    
    
    if(self.state == STATE_TOP)
    {
        self.nextthink = self.ltime + self.wait;
        return;
    }
    
    sound(self, CHAN_VOICE, self.noise2, 1.000, ATTN_NORM);
    self.state = STATE_UP;
    SUB_CalcMove(self.pos2, self.speed, door_hit_top);
    SUB_UseTargets();
};

// door_fire
// function begins at statement 21536, parm_start=15370
// OP_LOAD_ENT	28	201	15372
// OP_NE_E	15372	28	15373
// OP_IFNOT	15373	3	0
// OP_STORE_V	15374	4	0
// OP_CALL1	470	0	0
// OP_LOAD_F	28	162	15375
// OP_IFNOT	15375	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	430	15376
// OP_STORE_V	15376	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	206	15377
// OP_STOREP_S	357	15377	0
// OP_STORE_ENT	28	15370	0
// OP_LOAD_F	28	195	15378
// OP_BITAND	15378	15323	15379
// OP_IFNOT	15379	17	0
// OP_LOAD_F	28	447	15380
// OP_EQ_F	15380	298	15381
// OP_LOAD_F	28	447	15382
// OP_EQ_F	15382	296	15383
// OP_OR	15381	15383	15384
// OP_IFNOT	15384	11	0
// OP_STORE_ENT	28	15371	0
// OP_CALL0	15324	0	0
// OP_LOAD_ENT	28	181	15385
// OP_STORE_ENT	15385	28	0
// OP_NE_E	28	15371	15386
// OP_NE_E	28	30	15387
// OP_AND	15386	15387	15388
// OP_IF	15388	-6	0
// OP_STORE_ENT	15370	28	0
// OP_RETURN	0	0	0
// OP_STORE_ENT	28	15371	0
// OP_CALL0	15325	0	0
// OP_LOAD_ENT	28	181	15389
// OP_STORE_ENT	15389	28	0
// OP_NE_E	28	15371	15390
// OP_NE_E	28	30	15391
// OP_AND	15390	15391	15392
// OP_IF	15392	-6	0
// OP_STORE_ENT	15370	28	0
// OP_DONE	0	0	0
void () door_fire = 
{
    local entity oself;
    local entity starte;
    
    if(self.owner != self)
    {
        objerror("door_fire: self.owner != self");
    }
    
    
    if(self.items)
    {
        sound(self, CHAN_VOICE, self.noise4, 1.000, ATTN_NORM);
    }
    
    self.message = string_null;
    oself = self;
    
    if(self.spawnflags & DOOR_TOGGLE)
    {
        
        if((self.state == STATE_UP) || (self.state == STATE_TOP))
        {
            starte = self;
            do
            {
                door_go_down();
                self = self.enemy;
            } while ((self != starte) && (self != world));
            self = oself;
            return;
        }
        
    }
    
    starte = self;
    do
    {
        door_go_up();
        self = self.enemy;
    } while ((self != starte) && (self != world));
    self = oself;
};

// door_use
// function begins at statement 21582, parm_start=15394
// OP_ADDRESS	28	206	15395
// OP_STOREP_S	4128	15395	0
// OP_LOAD_ENT	28	201	15396
// OP_ADDRESS	15396	206	15397
// OP_STOREP_S	4128	15397	0
// OP_LOAD_ENT	28	181	15398
// OP_ADDRESS	15398	206	15399
// OP_STOREP_S	4128	15399	0
// OP_STORE_ENT	28	15394	0
// OP_LOAD_ENT	28	201	15400
// OP_STORE_ENT	15400	28	0
// OP_CALL0	15369	0	0
// OP_STORE_ENT	15394	28	0
// OP_DONE	0	0	0
void () door_use = 
{
    local entity oself;
    self.message = "";
    self.owner.message = "";
    self.enemy.message = "";
    oself = self;
    self = self.owner;
    door_fire();
    self = oself;
};

// door_trigger_touch
// function begins at statement 21596, parm_start=15402
// OP_LOAD_F	29	152	15402
// OP_LE	15402	817	15403
// OP_IFNOT	15403	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	387	15404
// OP_LT	31	15404	15405
// OP_IFNOT	15405	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	387	15406
// OP_ADD_F	31	819	15407
// OP_STOREP_F	15407	15406	0
// OP_STORE_ENT	29	360	0
// OP_LOAD_ENT	28	201	15408
// OP_STORE_ENT	15408	28	0
// OP_CALL0	15393	0	0
// OP_DONE	0	0	0
void () door_trigger_touch = 
{
    
    if(other.health <= 0.000)
    {
        return;
    }
    
    
    if(time < self.attack_finished)
    {
        return;
    }
    
    self.attack_finished = time + 1.000;
    activator = other;
    self = self.owner;
    door_use();
};

// door_killed
// function begins at statement 21612, parm_start=15410
// OP_STORE_ENT	28	15410	0
// OP_LOAD_ENT	28	201	15411
// OP_STORE_ENT	15411	28	0
// OP_ADDRESS	28	152	15412
// OP_LOAD_F	28	185	15413
// OP_STOREP_F	15413	15412	0
// OP_ADDRESS	28	163	15414
// OP_STOREP_F	256	15414	0
// OP_CALL0	15393	0	0
// OP_STORE_ENT	15410	28	0
// OP_DONE	0	0	0
void () door_killed = 
{
    local entity oself;
    oself = self;
    self = self.owner;
    self.health = self.max_health;
    self.takedamage = DAMAGE_NO;
    door_use();
    self = oself;
};

// door_touch
// function begins at statement 21623, parm_start=15416
// OP_LOAD_S	29	129	15416
// OP_NE_S	15416	880	15417
// OP_IFNOT	15417	2	0
// OP_RETURN	0	0	0
// OP_LOAD_ENT	28	201	15418
// OP_LOAD_F	15418	387	15419
// OP_GT	15419	31	15420
// OP_IFNOT	15420	2	0
// OP_RETURN	0	0	0
// OP_LOAD_ENT	28	201	15421
// OP_ADDRESS	15421	387	15422
// OP_ADD_F	31	821	15423
// OP_STOREP_F	15423	15422	0
// OP_LOAD_ENT	28	201	15424
// OP_LOAD_S	15424	206	15425
// OP_NE_S	15425	4128	15426
// OP_IFNOT	15426	12	0
// OP_STORE_V	29	4	0
// OP_LOAD_ENT	28	201	15427
// OP_LOAD_S	15427	206	15428
// OP_STORE_V	15428	7	0
// OP_CALL2	520	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	7562	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_LOAD_F	28	162	15429
// OP_NOT_F	15429	0	15430
// OP_IFNOT	15430	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	162	15431
// OP_LOAD_F	29	162	15432
// OP_BITAND	15431	15432	15433
// OP_LOAD_F	28	162	15434
// OP_NE_F	15433	15434	15435
// OP_IFNOT	15435	89	0
// OP_LOAD_ENT	28	201	15436
// OP_LOAD_F	15436	162	15437
// OP_EQ_F	15437	284	15438
// OP_IFNOT	15438	43	0
// OP_LOAD_F	30	366	15439
// OP_EQ_F	15439	821	15440
// OP_IFNOT	15440	12	0
// OP_STORE_V	29	4	0
// OP_STORE_V	15441	7	0
// OP_CALL2	520	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	211	15442
// OP_STORE_V	15442	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	28	0	0
// OP_LOAD_F	30	366	15443
// OP_EQ_F	15443	819	15444
// OP_IFNOT	15444	12	0
// OP_STORE_V	29	4	0
// OP_STORE_V	15445	7	0
// OP_CALL2	520	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	211	15446
// OP_STORE_V	15446	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	14	0	0
// OP_LOAD_F	30	366	15447
// OP_EQ_F	15447	817	15448
// OP_IFNOT	15448	11	0
// OP_STORE_V	29	4	0
// OP_STORE_V	15449	7	0
// OP_CALL2	520	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	211	15450
// OP_STORE_V	15450	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	42	0	0
// OP_LOAD_F	30	366	15451
// OP_EQ_F	15451	821	15452
// OP_IFNOT	15452	12	0
// OP_STORE_V	29	4	0
// OP_STORE_V	15453	7	0
// OP_CALL2	520	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	211	15454
// OP_STORE_V	15454	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	28	0	0
// OP_LOAD_F	30	366	15455
// OP_EQ_F	15455	819	15456
// OP_IFNOT	15456	12	0
// OP_STORE_V	29	4	0
// OP_STORE_V	15457	7	0
// OP_CALL2	520	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	211	15458
// OP_STORE_V	15458	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	14	0	0
// OP_LOAD_F	30	366	15459
// OP_EQ_F	15459	817	15460
// OP_IFNOT	15460	11	0
// OP_STORE_V	29	4	0
// OP_STORE_V	15461	7	0
// OP_CALL2	520	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	211	15462
// OP_STORE_V	15462	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_RETURN	0	0	0
// OP_ADDRESS	29	162	15463
// OP_LOAD_F	29	162	15464
// OP_LOAD_F	28	162	15465
// OP_SUB_F	15464	15465	15466
// OP_STOREP_F	15466	15463	0
// OP_ADDRESS	28	146	15467
// OP_STOREP_FNC	531	15467	0
// OP_LOAD_ENT	28	181	15468
// OP_IFNOT	15468	4	0
// OP_LOAD_ENT	28	181	15469
// OP_ADDRESS	15469	146	15470
// OP_STOREP_FNC	531	15470	0
// OP_CALL0	15393	0	0
// OP_DONE	0	0	0
void () door_touch = 
{
    
    if(other.classname != "player")
    {
        return;
    }
    
    
    if(self.owner.attack_finished > time)
    {
        return;
    }
    
    self.owner.attack_finished = time + 2.000;
    
    if(self.owner.message != "")
    {
        centerprint(other, self.owner.message);
        sound(other, CHAN_VOICE, "misc/talk.wav", 1.000, ATTN_NORM);
    }
    
    
    if(!self.items)
    {
        return;
    }
    
    
    if((self.items & other.items) != self.items)
    {
        if(self.owner.items == IT_KEY1)
        {
            if(world.worldtype == 2.000)
            {
                centerprint(other, "You need the silver keycard");
                sound(self, CHAN_VOICE, self.noise3, 1.000, ATTN_NORM);
            }
            else
            {
                if(world.worldtype == 1.000)
                {
                    centerprint(other, "You need the silver runekey");
                    sound(self, CHAN_VOICE, self.noise3, 1.000, ATTN_NORM);
                }
                else
                {
                    
                    if(world.worldtype == 0.000)
                    {
                        centerprint(other, "You need the silver key");
                        sound(self, CHAN_VOICE, self.noise3, 1.000, ATTN_NORM);
                    }
                    
                }
                
            }
            
        }
        else
        {
            if(world.worldtype == 2.000)
            {
                centerprint(other, "You need the gold keycard");
                sound(self, CHAN_VOICE, self.noise3, 1.000, ATTN_NORM);
            }
            else
            {
                if(world.worldtype == 1.000)
                {
                    centerprint(other, "You need the gold runekey");
                    sound(self, CHAN_VOICE, self.noise3, 1.000, ATTN_NORM);
                }
                else
                {
                    
                    if(world.worldtype == 0.000)
                    {
                        centerprint(other, "You need the gold key");
                        sound(self, CHAN_VOICE, self.noise3, 1.000, ATTN_NORM);
                    }
                    
                }
                
            }
            
        }
        
        return;
    }
    
    other.items = other.items - self.items;
    self.touch = SUB_Null;
    
    if(self.enemy)
    {
        self.enemy.touch = SUB_Null;
    }
    
    door_use();
};

// spawn_field
// function begins at statement 21763, parm_start=15472
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	15478	0
// OP_ADDRESS	15478	103	15485
// OP_STOREP_F	233	15485	0
// OP_ADDRESS	15478	104	15486
// OP_STOREP_F	244	15486	0
// OP_ADDRESS	15478	201	15487
// OP_STOREP_ENT	28	15487	0
// OP_ADDRESS	15478	146	15488
// OP_STOREP_FNC	15401	15488	0
// OP_STORE_V	15472	15479	0
// OP_STORE_V	15475	15482	0
// OP_STORE_V	15478	4	0
// OP_SUB_V	15479	15489	15492
// OP_STORE_V	15492	7	0
// OP_ADD_V	15482	15489	15495
// OP_STORE_V	15495	10	0
// OP_CALL3	464	0	0
// OP_RETURN	15478	0	0
// OP_DONE	0	0	0
entity (vector fmins, vector fmaxs) spawn_field = 
{
    local entity trigger;
    local vector t1;
    local vector t2;
    trigger = spawn();
    trigger.movetype = MOVETYPE_NONE;
    trigger.solid = SOLID_TRIGGER;
    trigger.owner = self;
    trigger.touch = door_trigger_touch;
    t1 = fmins;
    t2 = fmaxs;
    setsize(trigger, t1 - '60.000 60.000 8.000', t2 + '60.000 60.000 8.000');
    return trigger;
};

// EntitiesTouching
// function begins at statement 21783, parm_start=15499
// OP_LOAD_F	15499	135	15501
// OP_LOAD_F	15500	139	15502
// OP_GT	15501	15502	15503
// OP_IFNOT	15503	2	0
// OP_RETURN	218	0	0
// OP_LOAD_F	15499	136	15504
// OP_LOAD_F	15500	140	15505
// OP_GT	15504	15505	15506
// OP_IFNOT	15506	2	0
// OP_RETURN	218	0	0
// OP_LOAD_F	15499	137	15507
// OP_LOAD_F	15500	141	15508
// OP_GT	15507	15508	15509
// OP_IFNOT	15509	2	0
// OP_RETURN	218	0	0
// OP_LOAD_F	15499	139	15510
// OP_LOAD_F	15500	135	15511
// OP_LT	15510	15511	15512
// OP_IFNOT	15512	2	0
// OP_RETURN	218	0	0
// OP_LOAD_F	15499	140	15513
// OP_LOAD_F	15500	136	15514
// OP_LT	15513	15514	15515
// OP_IFNOT	15515	2	0
// OP_RETURN	218	0	0
// OP_LOAD_F	15499	141	15516
// OP_LOAD_F	15500	137	15517
// OP_LT	15516	15517	15518
// OP_IFNOT	15518	2	0
// OP_RETURN	218	0	0
// OP_RETURN	219	0	0
// OP_DONE	0	0	0
float (entity e1, entity e2) EntitiesTouching = 
{
    
    if(e1.mins_x > e2.maxs_x)
    {
        return FALSE;
    }
    
    
    if(e1.mins_y > e2.maxs_y)
    {
        return FALSE;
    }
    
    
    if(e1.mins_z > e2.maxs_z)
    {
        return FALSE;
    }
    
    
    if(e1.maxs_x < e2.mins_x)
    {
        return FALSE;
    }
    
    
    if(e1.maxs_y < e2.mins_y)
    {
        return FALSE;
    }
    
    
    if(e1.maxs_z < e2.mins_z)
    {
        return FALSE;
    }
    
    return TRUE;
};

// LinkDoors
// function begins at statement 21815, parm_start=15520
// OP_LOAD_ENT	28	181	15528
// OP_IFNOT	15528	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	195	15529
// OP_BITAND	15529	825	15530
// OP_IFNOT	15530	6	0
// OP_ADDRESS	28	201	15531
// OP_ADDRESS	28	181	15532
// OP_STOREP_ENT	28	15532	0
// OP_STOREP_ENT	28	15531	0
// OP_RETURN	0	0	0
// OP_LOAD_V	28	134	15533
// OP_STORE_V	15533	15522	0
// OP_LOAD_V	28	138	15536
// OP_STORE_V	15536	15525	0
// OP_STORE_ENT	28	15521	0
// OP_STORE_ENT	28	15520	0
// OP_ADDRESS	28	201	15539
// OP_STOREP_ENT	15521	15539	0
// OP_LOAD_F	28	152	15540
// OP_IFNOT	15540	4	0
// OP_ADDRESS	15521	152	15541
// OP_LOAD_F	28	152	15542
// OP_STOREP_F	15542	15541	0
// OP_LOAD_S	28	197	15543
// OP_IFNOT	15543	4	0
// OP_ADDRESS	15521	197	15544
// OP_LOAD_S	28	197	15545
// OP_STOREP_S	15545	15544	0
// OP_LOAD_S	28	206	15546
// OP_NE_S	15546	4128	15547
// OP_IFNOT	15547	4	0
// OP_ADDRESS	15521	206	15548
// OP_LOAD_S	28	206	15549
// OP_STOREP_S	15549	15548	0
// OP_STORE_V	15520	4	0
// OP_STORE_V	129	7	0
// OP_LOAD_S	28	129	15550
// OP_STORE_V	15550	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	15520	0
// OP_NOT_ENT	15520	0	15551
// OP_IFNOT	15551	21	0
// OP_ADDRESS	28	181	15552
// OP_STOREP_ENT	15521	15552	0
// OP_LOAD_ENT	28	201	15553
// OP_STORE_ENT	15553	28	0
// OP_LOAD_F	28	152	15554
// OP_IFNOT	15554	2	0
// OP_RETURN	0	0	0
// OP_LOAD_S	28	197	15555
// OP_IFNOT	15555	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	162	15556
// OP_IFNOT	15556	2	0
// OP_RETURN	0	0	0
// OP_LOAD_ENT	28	201	15557
// OP_ADDRESS	15557	429	15558
// OP_STORE_V	15522	4	0
// OP_STORE_V	15525	7	0
// OP_CALL2	15471	0	0
// OP_STOREP_ENT	1	15558	0
// OP_RETURN	0	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	15520	7	0
// OP_CALL2	15498	0	0
// OP_IFNOT	1	38	0
// OP_LOAD_ENT	15520	181	15559
// OP_IFNOT	15559	3	0
// OP_STORE_V	15560	4	0
// OP_CALL1	470	0	0
// OP_ADDRESS	28	181	15561
// OP_STOREP_ENT	15520	15561	0
// OP_STORE_ENT	15520	28	0
// OP_LOAD_F	15520	135	15562
// OP_LT	15562	15522	15563
// OP_IFNOT	15563	3	0
// OP_LOAD_F	15520	135	15564
// OP_STORE_F	15564	15522	0
// OP_LOAD_F	15520	136	15565
// OP_LT	15565	15523	15566
// OP_IFNOT	15566	3	0
// OP_LOAD_F	15520	136	15567
// OP_STORE_F	15567	15523	0
// OP_LOAD_F	15520	137	15568
// OP_LT	15568	15524	15569
// OP_IFNOT	15569	3	0
// OP_LOAD_F	15520	137	15570
// OP_STORE_F	15570	15524	0
// OP_LOAD_F	15520	139	15571
// OP_GT	15571	15525	15572
// OP_IFNOT	15572	3	0
// OP_LOAD_F	15520	139	15573
// OP_STORE_F	15573	15525	0
// OP_LOAD_F	15520	140	15574
// OP_GT	15574	15526	15575
// OP_IFNOT	15575	3	0
// OP_LOAD_F	15520	140	15576
// OP_STORE_F	15576	15526	0
// OP_LOAD_F	15520	141	15577
// OP_GT	15577	15527	15578
// OP_IFNOT	15578	3	0
// OP_LOAD_F	15520	141	15579
// OP_STORE_F	15579	15527	0
// OP_IF	819	-87	0
// OP_DONE	0	0	0
void () LinkDoors = 
{
    local entity t;
    local entity starte;
    local vector cmins;
    local vector cmaxs;
    
    if(self.enemy)
    {
        return;
    }
    
    
    if(self.spawnflags & 4.000)
    {
        self.owner = self.enemy = self;
        return;
    }
    
    cmins = self.mins;
    cmaxs = self.maxs;
    t = starte = self;
    do
    {
        self.owner = starte;
        
        if(self.health)
        {
            starte.health = self.health;
        }
        
        
        if(self.targetname)
        {
            starte.targetname = self.targetname;
        }
        
        
        if(self.message != "")
        {
            starte.message = self.message;
        }
        
        t = find(t, classname, self.classname);
        
        if(!t)
        {
            self.enemy = starte;
            self = self.owner;
            
            if(self.health)
            {
                return;
            }
            
            
            if(self.targetname)
            {
                return;
            }
            
            
            if(self.items)
            {
                return;
            }
            
            self.owner.trigger_field = spawn_field(cmins, cmaxs);
            return;
        }
        
        
        if(EntitiesTouching(self, t))
        {
            
            if(t.enemy)
            {
                objerror("cross connected doors");
            }
            
            self = self.enemy = t;
            
            if(t.mins_x < cmins_x)
            {
                cmins_x = t.mins_x;
            }
            
            
            if(t.mins_y < 0.000)
            {
                cmins_y = t.mins_y;
            }
            
            
            if(t.mins_z < 0.000)
            {
                cmins_z = t.mins_z;
            }
            
            
            if(t.maxs_x > cmaxs_x)
            {
                cmaxs_x = t.maxs_x;
            }
            
            
            if(t.maxs_y > 0.000)
            {
                cmaxs_y = t.maxs_y;
            }
            
            
            if(t.maxs_z > 0.000)
            {
                cmaxs_z = t.maxs_z;
            }
            
        }
        
    } while (1.000);
};

// func_door
// function begins at statement 21921, parm_start=15581
// OP_LOAD_F	30	366	15581
// OP_EQ_F	15581	817	15582
// OP_IFNOT	15582	10	0
// OP_STORE_V	15583	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	15584	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	211	15585
// OP_STOREP_S	15583	15585	0
// OP_ADDRESS	28	430	15586
// OP_STOREP_S	15584	15586	0
// OP_GOTO	27	0	0
// OP_LOAD_F	30	366	15587
// OP_EQ_F	15587	819	15588
// OP_IFNOT	15588	10	0
// OP_STORE_V	15589	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	15590	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	211	15591
// OP_STOREP_S	15589	15591	0
// OP_ADDRESS	28	430	15592
// OP_STOREP_S	15590	15592	0
// OP_GOTO	15	0	0
// OP_LOAD_F	30	366	15593
// OP_EQ_F	15593	821	15594
// OP_IFNOT	15594	10	0
// OP_STORE_V	15595	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	15596	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	211	15597
// OP_STOREP_S	15595	15597	0
// OP_ADDRESS	28	430	15598
// OP_STOREP_S	15596	15598	0
// OP_GOTO	3	0	0
// OP_STORE_V	15599	4	0
// OP_CALL1	484	0	0
// OP_LOAD_F	28	207	15600
// OP_EQ_F	15600	817	15601
// OP_IFNOT	15601	9	0
// OP_STORE_V	15602	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	15602	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	209	15603
// OP_STOREP_S	15602	15603	0
// OP_ADDRESS	28	210	15604
// OP_STOREP_S	15602	15604	0
// OP_LOAD_F	28	207	15605
// OP_EQ_F	15605	819	15606
// OP_IFNOT	15606	9	0
// OP_STORE_V	15607	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	15608	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	209	15609
// OP_STOREP_S	15607	15609	0
// OP_ADDRESS	28	210	15610
// OP_STOREP_S	15608	15610	0
// OP_LOAD_F	28	207	15611
// OP_EQ_F	15611	821	15612
// OP_IFNOT	15612	9	0
// OP_STORE_V	15613	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	15614	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	210	15615
// OP_STOREP_S	15613	15615	0
// OP_ADDRESS	28	209	15616
// OP_STOREP_S	15614	15616	0
// OP_LOAD_F	28	207	15617
// OP_EQ_F	15617	823	15618
// OP_IFNOT	15618	9	0
// OP_STORE_V	15619	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	15620	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	210	15621
// OP_STOREP_S	15619	15621	0
// OP_ADDRESS	28	209	15622
// OP_STOREP_S	15620	15622	0
// OP_LOAD_F	28	207	15623
// OP_EQ_F	15623	825	15624
// OP_IFNOT	15624	9	0
// OP_STORE_V	15625	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	15626	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	209	15627
// OP_STOREP_S	15626	15627	0
// OP_ADDRESS	28	210	15628
// OP_STOREP_S	15625	15628	0
// OP_CALL0	7371	0	0
// OP_ADDRESS	28	185	15629
// OP_LOAD_F	28	152	15630
// OP_STOREP_F	15630	15629	0
// OP_ADDRESS	28	104	15631
// OP_STOREP_F	247	15631	0
// OP_ADDRESS	28	103	15632
// OP_STOREP_F	238	15632	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	15633
// OP_STORE_V	15633	7	0
// OP_CALL2	462	0	0
// OP_STORE_V	28	4	0
// OP_LOAD_S	28	130	15636
// OP_STORE_V	15636	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	129	15637
// OP_STOREP_S	15638	15637	0
// OP_ADDRESS	28	149	15639
// OP_STOREP_FNC	15326	15639	0
// OP_ADDRESS	28	147	15640
// OP_STOREP_FNC	15393	15640	0
// OP_LOAD_F	28	195	15641
// OP_BITAND	15641	15322	15642
// OP_IFNOT	15642	3	0
// OP_ADDRESS	28	162	15643
// OP_STOREP_F	284	15643	0
// OP_LOAD_F	28	195	15644
// OP_BITAND	15644	15321	15645
// OP_IFNOT	15645	3	0
// OP_ADDRESS	28	162	15646
// OP_STOREP_F	285	15646	0
// OP_LOAD_F	28	378	15647
// OP_NOT_F	15647	0	15648
// OP_IFNOT	15648	3	0
// OP_ADDRESS	28	378	15649
// OP_STOREP_F	1957	15649	0
// OP_LOAD_F	28	427	15650
// OP_NOT_F	15650	0	15651
// OP_IFNOT	15651	3	0
// OP_ADDRESS	28	427	15652
// OP_STOREP_F	823	15652	0
// OP_LOAD_F	28	446	15653
// OP_NOT_F	15653	0	15654
// OP_IFNOT	15654	3	0
// OP_ADDRESS	28	446	15655
// OP_STOREP_F	843	15655	0
// OP_LOAD_F	28	434	15656
// OP_NOT_F	15656	0	15657
// OP_IFNOT	15657	3	0
// OP_ADDRESS	28	434	15658
// OP_STOREP_F	821	15658	0
// OP_ADDRESS	28	448	15659
// OP_LOAD_V	28	105	15662
// OP_STOREP_V	15662	15659	0
// OP_ADDRESS	28	452	15665
// OP_LOAD_V	28	448	15668
// OP_LOAD_V	28	202	15671
// OP_LOAD_V	28	202	15674
// OP_LOAD_V	28	142	15677
// OP_MUL_V	15674	15677	15680
// OP_STORE_V	15680	4	0
// OP_CALL1	499	0	0
// OP_LOAD_F	28	446	15681
// OP_SUB_F	1	15681	15682
// OP_MUL_VF	15671	15682	15683
// OP_ADD_V	15668	15683	15686
// OP_STOREP_V	15686	15665	0
// OP_LOAD_F	28	195	15689
// OP_BITAND	15689	15319	15690
// OP_IFNOT	15690	11	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	452	15691
// OP_STORE_V	15691	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	28	452	15694
// OP_LOAD_V	28	448	15697
// OP_STOREP_V	15697	15694	0
// OP_ADDRESS	28	448	15700
// OP_LOAD_V	28	105	15703
// OP_STOREP_V	15703	15700	0
// OP_ADDRESS	28	447	15706
// OP_STOREP_F	297	15706	0
// OP_LOAD_F	28	152	15707
// OP_IFNOT	15707	5	0
// OP_ADDRESS	28	163	15708
// OP_STOREP_F	257	15708	0
// OP_ADDRESS	28	376	15709
// OP_STOREP_FNC	15409	15709	0
// OP_LOAD_F	28	162	15710
// OP_IFNOT	15710	3	0
// OP_ADDRESS	28	427	15711
// OP_STOREP_F	1228	15711	0
// OP_ADDRESS	28	146	15712
// OP_STOREP_FNC	15415	15712	0
// OP_ADDRESS	28	148	15713
// OP_STOREP_FNC	15519	15713	0
// OP_ADDRESS	28	150	15714
// OP_LOAD_F	28	102	15715
// OP_ADD_F	15715	2869	15716
// OP_STOREP_F	15716	15714	0
// OP_DONE	0	0	0
void () func_door = 
{
    if(world.worldtype == 0.000)
    {
        precache_sound("doors/medtry.wav");
        precache_sound("doors/meduse.wav");
        self.noise3 = "doors/medtry.wav";
        self.noise4 = "doors/meduse.wav";
    }
    else
    {
        if(world.worldtype == 1.000)
        {
            precache_sound("doors/runetry.wav");
            precache_sound("doors/runeuse.wav");
            self.noise3 = "doors/runetry.wav";
            self.noise4 = "doors/runeuse.wav";
        }
        else
        {
            if(world.worldtype == 2.000)
            {
                precache_sound("doors/basetry.wav");
                precache_sound("doors/baseuse.wav");
                self.noise3 = "doors/basetry.wav";
                self.noise4 = "doors/baseuse.wav";
            }
            else
            {
                dprint("no worldtype set!\n");
            }
            
        }
        
    }
    
    
    if(self.sounds == 0.000)
    {
        precache_sound("misc/null.wav");
        precache_sound("misc/null.wav");
        self.noise1 = "misc/null.wav";
        self.noise2 = "misc/null.wav";
    }
    
    
    if(self.sounds == 1.000)
    {
        precache_sound("doors/drclos4.wav");
        precache_sound("doors/doormv1.wav");
        self.noise1 = "doors/drclos4.wav";
        self.noise2 = "doors/doormv1.wav";
    }
    
    
    if(self.sounds == 2.000)
    {
        precache_sound("doors/hydro1.wav");
        precache_sound("doors/hydro2.wav");
        self.noise2 = "doors/hydro1.wav";
        self.noise1 = "doors/hydro2.wav";
    }
    
    
    if(self.sounds == 3.000)
    {
        precache_sound("doors/stndr1.wav");
        precache_sound("doors/stndr2.wav");
        self.noise2 = "doors/stndr1.wav";
        self.noise1 = "doors/stndr2.wav";
    }
    
    
    if(self.sounds == 4.000)
    {
        precache_sound("doors/ddoor1.wav");
        precache_sound("doors/ddoor2.wav");
        self.noise1 = "doors/ddoor2.wav";
        self.noise2 = "doors/ddoor1.wav";
    }
    
    SetMovedir();
    self.max_health = self.health;
    self.solid = SOLID_BSP;
    self.movetype = MOVETYPE_PUSH;
    setorigin(self, self.origin);
    setmodel(self, self.model);
    self.classname = "door";
    self.blocked = door_blocked;
    self.use = door_use;
    
    if(self.spawnflags & DOOR_SILVER_KEY)
    {
        self.items = IT_KEY1;
    }
    
    
    if(self.spawnflags & DOOR_GOLD_KEY)
    {
        self.items = IT_KEY2;
    }
    
    
    if(!self.speed)
    {
        self.speed = 100.000;
    }
    
    
    if(!self.wait)
    {
        self.wait = 3.000;
    }
    
    
    if(!self.lip)
    {
        self.lip = 8.000;
    }
    
    
    if(!self.dmg)
    {
        self.dmg = 2.000;
    }
    
    self.pos1 = self.origin;
    self.pos2 = self.pos1 + (self.movedir * ((fabs(self.movedir * self.size)) - self.lip));
    
    if(self.spawnflags & DOOR_START_OPEN)
    {
        setorigin(self, self.pos2);
        self.pos2 = self.pos1;
        self.pos1 = self.origin;
    }
    
    self.state = STATE_BOTTOM;
    
    if(self.health)
    {
        self.takedamage = DAMAGE_YES;
        self.th_die = door_killed;
    }
    
    
    if(self.items)
    {
        self.wait = -1.000;
    }
    
    self.touch = door_touch;
    self.think = LinkDoors;
    self.nextthink = self.ltime + 0.100;
};

void () fd_secret_move1;
void () fd_secret_move2;
void () fd_secret_move3;
void () fd_secret_move4;
void () fd_secret_move5;
void () fd_secret_move6;
void () fd_secret_done;
float SECRET_OPEN_ONCE = 1.000;
float SECRET_1ST_LEFT = 2.000;
float SECRET_1ST_DOWN = 4.000;
float SECRET_NO_SHOOT = 8.000;
float SECRET_YES_SHOOT = 16.000;
// fd_secret_use
// function begins at statement 22116, parm_start=15730
// OP_ADDRESS	28	152	15731
// OP_STOREP_F	15732	15731	0
// OP_LOAD_V	28	105	15733
// OP_LOAD_V	28	109	15736
// OP_NE_V	15733	15736	15739
// OP_IFNOT	15739	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	206	15740
// OP_STOREP_S	357	15740	0
// OP_CALL0	532	0	0
// OP_LOAD_F	28	195	15741
// OP_BITAND	15741	15727	15742
// OP_NOT_F	15742	0	15743
// OP_IFNOT	15743	5	0
// OP_ADDRESS	28	375	15744
// OP_STOREP_FNC	531	15744	0
// OP_ADDRESS	28	163	15745
// OP_STOREP_F	256	15745	0
// OP_ADDRESS	28	113	15746
// OP_STOREP_V	926	15746	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	209	15749
// OP_STORE_V	15749	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	150	15750
// OP_LOAD_F	28	102	15751
// OP_ADD_F	15751	2869	15752
// OP_STOREP_F	15752	15750	0
// OP_LOAD_F	28	195	15753
// OP_BITAND	15753	15725	15754
// OP_SUB_F	819	15754	15755
// OP_STORE_F	15755	15730	0
// OP_LOAD_V	28	409	15756
// OP_STORE_V	15756	4	0
// OP_CALL1	461	0	0
// OP_LOAD_F	28	414	15759
// OP_NOT_F	15759	0	15760
// OP_IFNOT	15760	17	0
// OP_LOAD_F	28	195	15761
// OP_BITAND	15761	15726	15762
// OP_IFNOT	15762	8	0
// OP_ADDRESS	28	414	15763
// OP_LOAD_V	28	142	15764
// OP_MUL_V	62	15764	15767
// OP_STORE_V	15767	4	0
// OP_CALL1	499	0	0
// OP_STOREP_F	1	15763	0
// OP_GOTO	7	0	0
// OP_ADDRESS	28	414	15768
// OP_LOAD_V	28	142	15769
// OP_MUL_V	65	15769	15772
// OP_STORE_V	15772	4	0
// OP_CALL1	499	0	0
// OP_STOREP_F	1	15768	0
// OP_LOAD_F	28	413	15773
// OP_NOT_F	15773	0	15774
// OP_IFNOT	15774	7	0
// OP_ADDRESS	28	413	15775
// OP_LOAD_V	28	142	15776
// OP_MUL_V	59	15776	15779
// OP_STORE_V	15779	4	0
// OP_CALL1	499	0	0
// OP_STOREP_F	1	15775	0
// OP_LOAD_F	28	195	15780
// OP_BITAND	15780	15726	15781
// OP_IFNOT	15781	8	0
// OP_ADDRESS	28	419	15782
// OP_LOAD_V	28	105	15785
// OP_LOAD_F	28	414	15788
// OP_MUL_VF	62	15788	15789
// OP_SUB_V	15785	15789	15792
// OP_STOREP_V	15792	15782	0
// OP_GOTO	8	0	0
// OP_ADDRESS	28	419	15795
// OP_LOAD_V	28	105	15798
// OP_LOAD_F	28	414	15801
// OP_MUL_F	15801	15730	15802
// OP_MUL_VF	65	15802	15803
// OP_ADD_V	15798	15803	15806
// OP_STOREP_V	15806	15795	0
// OP_ADDRESS	28	423	15809
// OP_LOAD_V	28	419	15812
// OP_LOAD_F	28	413	15815
// OP_MUL_VF	59	15815	15816
// OP_ADD_V	15812	15816	15819
// OP_STOREP_V	15819	15809	0
// OP_LOAD_V	28	419	15822
// OP_STORE_V	15822	4	0
// OP_LOAD_F	28	378	15825
// OP_STORE_V	15825	7	0
// OP_STORE_V	15717	10	0
// OP_CALL3	526	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	210	15826
// OP_STORE_V	15826	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_DONE	0	0	0
void () fd_secret_use = 
{
    local float temp;
    self.health = 10000.000;
    
    if(self.origin != self.oldorigin)
    {
        return;
    }
    
    self.message = string_null;
    SUB_UseTargets();
    
    if(!(self.spawnflags & SECRET_NO_SHOOT))
    {
        self.th_pain = SUB_Null;
        self.takedamage = DAMAGE_NO;
    }
    
    self.velocity = '0.000 0.000 0.000';
    sound(self, CHAN_VOICE, self.noise1, 1.000, ATTN_NORM);
    self.nextthink = self.ltime + 0.100;
    temp = 1.000 - (self.spawnflags & SECRET_1ST_LEFT);
    makevectors(self.mangle);
    
    if(!self.t_width)
    {
        if(self.spawnflags & SECRET_1ST_DOWN)
        {
            self.t_width = fabs(v_up * self.size);
        }
        else
        {
            self.t_width = fabs(v_right * self.size);
        }
        
    }
    
    
    if(!self.t_length)
    {
        self.t_length = fabs(v_forward * self.size);
    }
    
    if(self.spawnflags & SECRET_1ST_DOWN)
    {
        self.dest1 = self.origin - (v_up * self.t_width);
    }
    else
    {
        self.dest1 = self.origin + (v_right * (self.t_width * temp));
    }
    
    self.dest2 = self.dest1 + (v_forward * self.t_length);
    SUB_CalcMove(self.dest1, self.speed, fd_secret_move1);
    sound(self, CHAN_VOICE, self.noise2, 1.000, ATTN_NORM);
};

// fd_secret_move1
// function begins at statement 22219, parm_start=15827
// OP_ADDRESS	28	150	15827
// OP_LOAD_F	28	102	15828
// OP_ADD_F	15828	819	15829
// OP_STOREP_F	15829	15827	0
// OP_ADDRESS	28	148	15830
// OP_STOREP_FNC	15718	15830	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	211	15831
// OP_STORE_V	15831	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_DONE	0	0	0
void () fd_secret_move1 = 
{
    self.nextthink = self.ltime + 1.000;
    self.think = fd_secret_move2;
    sound(self, CHAN_VOICE, self.noise3, 1.000, ATTN_NORM);
};

// fd_secret_move2
// function begins at statement 22233, parm_start=15832
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	210	15832
// OP_STORE_V	15832	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_LOAD_V	28	423	15833
// OP_STORE_V	15833	4	0
// OP_LOAD_F	28	378	15836
// OP_STORE_V	15836	7	0
// OP_STORE_V	15719	10	0
// OP_CALL3	526	0	0
// OP_DONE	0	0	0
void () fd_secret_move2 = 
{
    sound(self, CHAN_VOICE, self.noise2, 1.000, ATTN_NORM);
    SUB_CalcMove(self.dest2, self.speed, fd_secret_move3);
};

// fd_secret_move3
// function begins at statement 22247, parm_start=15837
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	211	15837
// OP_STORE_V	15837	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_LOAD_F	28	195	15838
// OP_BITAND	15838	15724	15839
// OP_NOT_F	15839	0	15840
// OP_IFNOT	15840	8	0
// OP_ADDRESS	28	150	15841
// OP_LOAD_F	28	102	15842
// OP_LOAD_F	28	427	15843
// OP_ADD_F	15842	15843	15844
// OP_STOREP_F	15844	15841	0
// OP_ADDRESS	28	148	15845
// OP_STOREP_FNC	15720	15845	0
// OP_DONE	0	0	0
void () fd_secret_move3 = 
{
    sound(self, CHAN_VOICE, self.noise3, 1.000, ATTN_NORM);
    
    if(!(self.spawnflags & SECRET_OPEN_ONCE))
    {
        self.nextthink = self.ltime + self.wait;
        self.think = fd_secret_move4;
    }
    
};

// fd_secret_move4
// function begins at statement 22266, parm_start=15846
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	210	15846
// OP_STORE_V	15846	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_LOAD_V	28	419	15847
// OP_STORE_V	15847	4	0
// OP_LOAD_F	28	378	15850
// OP_STORE_V	15850	7	0
// OP_STORE_V	15721	10	0
// OP_CALL3	526	0	0
// OP_DONE	0	0	0
void () fd_secret_move4 = 
{
    sound(self, CHAN_VOICE, self.noise2, 1.000, ATTN_NORM);
    SUB_CalcMove(self.dest1, self.speed, fd_secret_move5);
};

// fd_secret_move5
// function begins at statement 22280, parm_start=15851
// OP_ADDRESS	28	150	15851
// OP_LOAD_F	28	102	15852
// OP_ADD_F	15852	819	15853
// OP_STOREP_F	15853	15851	0
// OP_ADDRESS	28	148	15854
// OP_STOREP_FNC	15722	15854	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	211	15855
// OP_STORE_V	15855	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_DONE	0	0	0
void () fd_secret_move5 = 
{
    self.nextthink = self.ltime + 1.000;
    self.think = fd_secret_move6;
    sound(self, CHAN_VOICE, self.noise3, 1.000, ATTN_NORM);
};

// fd_secret_move6
// function begins at statement 22294, parm_start=15856
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	210	15856
// OP_STORE_V	15856	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_LOAD_V	28	109	15857
// OP_STORE_V	15857	4	0
// OP_LOAD_F	28	378	15860
// OP_STORE_V	15860	7	0
// OP_STORE_V	15723	10	0
// OP_CALL3	526	0	0
// OP_DONE	0	0	0
void () fd_secret_move6 = 
{
    sound(self, CHAN_VOICE, self.noise2, 1.000, ATTN_NORM);
    SUB_CalcMove(self.oldorigin, self.speed, fd_secret_done);
};

// fd_secret_done
// function begins at statement 22308, parm_start=15861
// OP_LOAD_S	28	197	15861
// OP_NOT_S	15861	0	15862
// OP_LOAD_F	28	195	15863
// OP_BITAND	15863	15728	15864
// OP_OR	15862	15864	15865
// OP_IFNOT	15865	7	0
// OP_ADDRESS	28	152	15866
// OP_STOREP_F	15732	15866	0
// OP_ADDRESS	28	163	15867
// OP_STOREP_F	257	15867	0
// OP_ADDRESS	28	375	15868
// OP_STOREP_FNC	15729	15868	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	211	15869
// OP_STORE_V	15869	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_DONE	0	0	0
void () fd_secret_done = 
{
    
    if(!self.targetname || (self.spawnflags & SECRET_YES_SHOOT))
    {
        self.health = 10000.000;
        self.takedamage = DAMAGE_YES;
        self.th_pain = fd_secret_use;
    }
    
    sound(self, CHAN_VOICE, self.noise3, 1.000, ATTN_NORM);
};

// secret_blocked
// function begins at statement 22328, parm_start=15871
// OP_LOAD_F	28	387	15871
// OP_LT	31	15871	15872
// OP_IFNOT	15872	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	387	15873
// OP_ADD_F	31	1182	15874
// OP_STOREP_F	15874	15873	0
// OP_STORE_V	29	4	0
// OP_STORE_V	28	7	0
// OP_STORE_V	28	10	0
// OP_LOAD_F	28	434	15875
// OP_STORE_V	15875	13	0
// OP_CALL4	534	0	0
// OP_DONE	0	0	0
void () secret_blocked = 
{
    
    if(time < self.attack_finished)
    {
        return;
    }
    
    self.attack_finished = time + 0.500;
    T_Damage(other, self, self, self.dmg);
};

// secret_touch
// function begins at statement 22342, parm_start=15877
// OP_LOAD_S	29	129	15877
// OP_NE_S	15877	880	15878
// OP_IFNOT	15878	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	387	15879
// OP_GT	15879	31	15880
// OP_IFNOT	15880	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	387	15881
// OP_ADD_F	31	821	15882
// OP_STOREP_F	15882	15881	0
// OP_LOAD_S	28	206	15883
// OP_IFNOT	15883	11	0
// OP_STORE_V	29	4	0
// OP_LOAD_S	28	206	15884
// OP_STORE_V	15884	7	0
// OP_CALL2	520	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	338	7	0
// OP_STORE_V	7562	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_DONE	0	0	0
void () secret_touch = 
{
    
    if(other.classname != "player")
    {
        return;
    }
    
    
    if(self.attack_finished > time)
    {
        return;
    }
    
    self.attack_finished = time + 2.000;
    
    if(self.message)
    {
        centerprint(other, self.message);
        sound(other, CHAN_BODY, "misc/talk.wav", 1.000, ATTN_NORM);
    }
    
};

// func_door_secret
// function begins at statement 22366, parm_start=15886
// OP_LOAD_F	28	207	15886
// OP_EQ_F	15886	817	15887
// OP_IFNOT	15887	3	0
// OP_ADDRESS	28	207	15888
// OP_STOREP_F	823	15888	0
// OP_LOAD_F	28	207	15889
// OP_EQ_F	15889	819	15890
// OP_IFNOT	15890	13	0
// OP_STORE_V	15891	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	15892	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	15607	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	209	15893
// OP_STOREP_S	15891	15893	0
// OP_ADDRESS	28	210	15894
// OP_STOREP_S	15892	15894	0
// OP_ADDRESS	28	211	15895
// OP_STOREP_S	15607	15895	0
// OP_LOAD_F	28	207	15896
// OP_EQ_F	15896	821	15897
// OP_IFNOT	15897	11	0
// OP_STORE_V	15898	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	15899	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	210	15900
// OP_STOREP_S	15898	15900	0
// OP_ADDRESS	28	209	15901
// OP_STOREP_S	15899	15901	0
// OP_ADDRESS	28	211	15902
// OP_STOREP_S	15899	15902	0
// OP_LOAD_F	28	207	15903
// OP_EQ_F	15903	823	15904
// OP_IFNOT	15904	11	0
// OP_STORE_V	15905	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	15906	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	210	15907
// OP_STOREP_S	15905	15907	0
// OP_ADDRESS	28	209	15908
// OP_STOREP_S	15906	15908	0
// OP_ADDRESS	28	211	15909
// OP_STOREP_S	15906	15909	0
// OP_LOAD_F	28	434	15910
// OP_NOT_F	15910	0	15911
// OP_IFNOT	15911	3	0
// OP_ADDRESS	28	434	15912
// OP_STOREP_F	821	15912	0
// OP_ADDRESS	28	409	15913
// OP_LOAD_V	28	117	15916
// OP_STOREP_V	15916	15913	0
// OP_ADDRESS	28	117	15919
// OP_STOREP_V	926	15919	0
// OP_ADDRESS	28	104	15922
// OP_STOREP_F	247	15922	0
// OP_ADDRESS	28	103	15923
// OP_STOREP_F	238	15923	0
// OP_ADDRESS	28	129	15924
// OP_STOREP_S	15638	15924	0
// OP_STORE_V	28	4	0
// OP_LOAD_S	28	130	15925
// OP_STORE_V	15925	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	15926
// OP_STORE_V	15926	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	28	146	15929
// OP_STOREP_FNC	15876	15929	0
// OP_ADDRESS	28	149	15930
// OP_STOREP_FNC	15870	15930	0
// OP_ADDRESS	28	378	15931
// OP_STOREP_F	2611	15931	0
// OP_ADDRESS	28	147	15932
// OP_STOREP_FNC	15729	15932	0
// OP_LOAD_S	28	197	15933
// OP_NOT_S	15933	0	15934
// OP_LOAD_F	28	195	15935
// OP_BITAND	15935	15728	15936
// OP_OR	15934	15936	15937
// OP_IFNOT	15937	9	0
// OP_ADDRESS	28	152	15938
// OP_STOREP_F	15732	15938	0
// OP_ADDRESS	28	163	15939
// OP_STOREP_F	257	15939	0
// OP_ADDRESS	28	375	15940
// OP_STOREP_FNC	15729	15940	0
// OP_ADDRESS	28	376	15941
// OP_STOREP_FNC	15729	15941	0
// OP_ADDRESS	28	109	15942
// OP_LOAD_V	28	105	15945
// OP_STOREP_V	15945	15942	0
// OP_LOAD_F	28	427	15948
// OP_NOT_F	15948	0	15949
// OP_IFNOT	15949	3	0
// OP_ADDRESS	28	427	15950
// OP_STOREP_F	827	15950	0
// OP_DONE	0	0	0
void () func_door_secret = 
{
    
    if(self.sounds == 0.000)
    {
        self.sounds = 3.000;
    }
    
    
    if(self.sounds == 1.000)
    {
        precache_sound("doors/latch2.wav");
        precache_sound("doors/winch2.wav");
        precache_sound("doors/drclos4.wav");
        self.noise1 = "doors/latch2.wav";
        self.noise2 = "doors/winch2.wav";
        self.noise3 = "doors/drclos4.wav";
    }
    
    
    if(self.sounds == 2.000)
    {
        precache_sound("doors/airdoor1.wav");
        precache_sound("doors/airdoor2.wav");
        self.noise2 = "doors/airdoor1.wav";
        self.noise1 = "doors/airdoor2.wav";
        self.noise3 = "doors/airdoor2.wav";
    }
    
    
    if(self.sounds == 3.000)
    {
        precache_sound("doors/basesec1.wav");
        precache_sound("doors/basesec2.wav");
        self.noise2 = "doors/basesec1.wav";
        self.noise1 = "doors/basesec2.wav";
        self.noise3 = "doors/basesec2.wav";
    }
    
    
    if(!self.dmg)
    {
        self.dmg = 2.000;
    }
    
    self.mangle = self.angles;
    self.angles = '0.000 0.000 0.000';
    self.solid = SOLID_BSP;
    self.movetype = MOVETYPE_PUSH;
    self.classname = "door";
    setmodel(self, self.model);
    setorigin(self, self.origin);
    self.touch = secret_touch;
    self.blocked = secret_blocked;
    self.speed = 50.000;
    self.use = fd_secret_use;
    
    if(!self.targetname || (self.spawnflags & SECRET_YES_SHOOT))
    {
        self.health = 10000.000;
        self.takedamage = DAMAGE_YES;
        self.th_pain = fd_secret_use;
        self.th_die = fd_secret_use;
    }
    
    self.oldorigin = self.origin;
    
    if(!self.wait)
    {
        self.wait = 5.000;
    }
    
};

void () button_return;
// button_wait
// function begins at statement 22467, parm_start=15953
// OP_ADDRESS	28	447	15953
// OP_STOREP_F	296	15953	0
// OP_ADDRESS	28	150	15954
// OP_LOAD_F	28	102	15955
// OP_LOAD_F	28	427	15956
// OP_ADD_F	15955	15956	15957
// OP_STOREP_F	15957	15954	0
// OP_ADDRESS	28	148	15958
// OP_STOREP_FNC	15952	15958	0
// OP_LOAD_ENT	28	181	15959
// OP_STORE_ENT	15959	360	0
// OP_CALL0	532	0	0
// OP_ADDRESS	28	131	15960
// OP_STOREP_F	819	15960	0
// OP_DONE	0	0	0
void () button_wait = 
{
    self.state = STATE_TOP;
    self.nextthink = self.ltime + self.wait;
    self.think = button_return;
    activator = self.enemy;
    SUB_UseTargets();
    self.frame = 1.000;
};

// button_done
// function begins at statement 22482, parm_start=15962
// OP_ADDRESS	28	447	15962
// OP_STOREP_F	297	15962	0
// OP_DONE	0	0	0
void () button_done = 
{
    self.state = STATE_BOTTOM;
};

// button_return
// function begins at statement 22485, parm_start=15963
// OP_ADDRESS	28	447	15963
// OP_STOREP_F	299	15963	0
// OP_LOAD_V	28	448	15964
// OP_STORE_V	15964	4	0
// OP_LOAD_F	28	378	15967
// OP_STORE_V	15967	7	0
// OP_STORE_V	15961	10	0
// OP_CALL3	526	0	0
// OP_ADDRESS	28	131	15968
// OP_STOREP_F	817	15968	0
// OP_LOAD_F	28	152	15969
// OP_IFNOT	15969	3	0
// OP_ADDRESS	28	163	15970
// OP_STOREP_F	257	15970	0
// OP_DONE	0	0	0
void () button_return = 
{
    self.state = STATE_DOWN;
    SUB_CalcMove(self.pos1, self.speed, button_done);
    self.frame = 0.000;
    
    if(self.health)
    {
        self.takedamage = DAMAGE_YES;
    }
    
};

// button_blocked
// function begins at statement 22500, parm_start=15972
// OP_DONE	0	0	0
void () button_blocked = 
{
};

// button_fire
// function begins at statement 22501, parm_start=15973
// OP_LOAD_F	28	447	15973
// OP_EQ_F	15973	298	15974
// OP_LOAD_F	28	447	15975
// OP_EQ_F	15975	296	15976
// OP_OR	15974	15976	15977
// OP_IFNOT	15977	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	208	15978
// OP_STORE_V	15978	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	447	15979
// OP_STOREP_F	298	15979	0
// OP_LOAD_V	28	452	15980
// OP_STORE_V	15980	4	0
// OP_LOAD_F	28	378	15983
// OP_STORE_V	15983	7	0
// OP_STORE_V	15951	10	0
// OP_CALL3	526	0	0
// OP_DONE	0	0	0
void () button_fire = 
{
    
    if((self.state == STATE_UP) || (self.state == STATE_TOP))
    {
        return;
    }
    
    sound(self, CHAN_VOICE, self.noise, 1.000, ATTN_NORM);
    self.state = STATE_UP;
    SUB_CalcMove(self.pos2, self.speed, button_wait);
};

// button_use
// function begins at statement 22524, parm_start=15985
// OP_ADDRESS	28	181	15985
// OP_STOREP_ENT	360	15985	0
// OP_CALL0	15972	0	0
// OP_DONE	0	0	0
void () button_use = 
{
    self.enemy = activator;
    button_fire();
};

// button_touch
// function begins at statement 22528, parm_start=15987
// OP_LOAD_S	29	129	15987
// OP_NE_S	15987	880	15988
// OP_IFNOT	15988	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	181	15989
// OP_STOREP_ENT	29	15989	0
// OP_CALL0	15972	0	0
// OP_DONE	0	0	0
void () button_touch = 
{
    
    if(other.classname != "player")
    {
        return;
    }
    
    self.enemy = other;
    button_fire();
};

// button_killed
// function begins at statement 22536, parm_start=15991
// OP_ADDRESS	28	181	15991
// OP_STOREP_ENT	361	15991	0
// OP_ADDRESS	28	152	15992
// OP_LOAD_F	28	185	15993
// OP_STOREP_F	15993	15992	0
// OP_ADDRESS	28	163	15994
// OP_STOREP_F	256	15994	0
// OP_CALL0	15972	0	0
// OP_DONE	0	0	0
void () button_killed = 
{
    self.enemy = damage_attacker;
    self.health = self.max_health;
    self.takedamage = DAMAGE_NO;
    button_fire();
};

// func_button
// function begins at statement 22545, parm_start=15996
// OP_LOAD_F	28	207	15998
// OP_EQ_F	15998	817	15999
// OP_IFNOT	15999	5	0
// OP_STORE_V	16000	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	208	16001
// OP_STOREP_S	16000	16001	0
// OP_LOAD_F	28	207	16002
// OP_EQ_F	16002	819	16003
// OP_IFNOT	16003	5	0
// OP_STORE_V	16004	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	208	16005
// OP_STOREP_S	16004	16005	0
// OP_LOAD_F	28	207	16006
// OP_EQ_F	16006	821	16007
// OP_IFNOT	16007	5	0
// OP_STORE_V	16008	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	208	16009
// OP_STOREP_S	16008	16009	0
// OP_LOAD_F	28	207	16010
// OP_EQ_F	16010	823	16011
// OP_IFNOT	16011	5	0
// OP_STORE_V	16012	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	208	16013
// OP_STOREP_S	16012	16013	0
// OP_CALL0	7371	0	0
// OP_ADDRESS	28	103	16014
// OP_STOREP_F	238	16014	0
// OP_ADDRESS	28	104	16015
// OP_STOREP_F	247	16015	0
// OP_STORE_V	28	4	0
// OP_LOAD_S	28	130	16016
// OP_STORE_V	16016	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	149	16017
// OP_STOREP_FNC	15971	16017	0
// OP_ADDRESS	28	147	16018
// OP_STOREP_FNC	15984	16018	0
// OP_LOAD_F	28	152	16019
// OP_IFNOT	16019	9	0
// OP_ADDRESS	28	185	16020
// OP_LOAD_F	28	152	16021
// OP_STOREP_F	16021	16020	0
// OP_ADDRESS	28	376	16022
// OP_STOREP_FNC	15990	16022	0
// OP_ADDRESS	28	163	16023
// OP_STOREP_F	257	16023	0
// OP_GOTO	3	0	0
// OP_ADDRESS	28	146	16024
// OP_STOREP_FNC	15986	16024	0
// OP_LOAD_F	28	378	16025
// OP_NOT_F	16025	0	16026
// OP_IFNOT	16026	3	0
// OP_ADDRESS	28	378	16027
// OP_STOREP_F	1632	16027	0
// OP_LOAD_F	28	427	16028
// OP_NOT_F	16028	0	16029
// OP_IFNOT	16029	3	0
// OP_ADDRESS	28	427	16030
// OP_STOREP_F	819	16030	0
// OP_LOAD_F	28	446	16031
// OP_NOT_F	16031	0	16032
// OP_IFNOT	16032	3	0
// OP_ADDRESS	28	446	16033
// OP_STOREP_F	825	16033	0
// OP_ADDRESS	28	447	16034
// OP_STOREP_F	297	16034	0
// OP_ADDRESS	28	448	16035
// OP_LOAD_V	28	105	16038
// OP_STOREP_V	16038	16035	0
// OP_ADDRESS	28	452	16041
// OP_LOAD_V	28	448	16044
// OP_LOAD_V	28	202	16047
// OP_LOAD_V	28	202	16050
// OP_LOAD_V	28	142	16053
// OP_MUL_V	16050	16053	16056
// OP_STORE_V	16056	4	0
// OP_CALL1	499	0	0
// OP_LOAD_F	28	446	16057
// OP_SUB_F	1	16057	16058
// OP_MUL_VF	16047	16058	16059
// OP_ADD_V	16044	16059	16062
// OP_STOREP_V	16062	16041	0
// OP_DONE	0	0	0
void () func_button = 
{
    local float gtemp;
    local float ftemp;
    
    if(self.sounds == 0.000)
    {
        precache_sound("buttons/airbut1.wav");
        self.noise = "buttons/airbut1.wav";
    }
    
    
    if(self.sounds == 1.000)
    {
        precache_sound("buttons/switch21.wav");
        self.noise = "buttons/switch21.wav";
    }
    
    
    if(self.sounds == 2.000)
    {
        precache_sound("buttons/switch02.wav");
        self.noise = "buttons/switch02.wav";
    }
    
    
    if(self.sounds == 3.000)
    {
        precache_sound("buttons/switch04.wav");
        self.noise = "buttons/switch04.wav";
    }
    
    SetMovedir();
    self.movetype = MOVETYPE_PUSH;
    self.solid = SOLID_BSP;
    setmodel(self, self.model);
    self.blocked = button_blocked;
    self.use = button_use;
    if(self.health)
    {
        self.max_health = self.health;
        self.th_die = button_killed;
        self.takedamage = DAMAGE_YES;
    }
    else
    {
        self.touch = button_touch;
    }
    
    
    if(!self.speed)
    {
        self.speed = 40.000;
    }
    
    
    if(!self.wait)
    {
        self.wait = 1.000;
    }
    
    
    if(!self.lip)
    {
        self.lip = 4.000;
    }
    
    self.state = STATE_BOTTOM;
    self.pos1 = self.origin;
    self.pos2 = self.pos1 + (self.movedir * ((fabs(self.movedir * self.size)) - self.lip));
};

entity stemp;
entity otemp;
entity s;
entity old;
// trigger_reactivate
// function begins at statement 22632, parm_start=16070
// OP_ADDRESS	28	104	16070
// OP_STOREP_F	244	16070	0
// OP_DONE	0	0	0
void () trigger_reactivate = 
{
    self.solid = SOLID_TRIGGER;
};

float SPAWNFLAG_NOMESSAGE = 1.000;
float SPAWNFLAG_NOTOUCH = 1.000;
// multi_wait
// function begins at statement 22635, parm_start=16074
// OP_LOAD_F	28	185	16074
// OP_IFNOT	16074	8	0
// OP_ADDRESS	28	152	16075
// OP_LOAD_F	28	185	16076
// OP_STOREP_F	16076	16075	0
// OP_ADDRESS	28	163	16077
// OP_STOREP_F	257	16077	0
// OP_ADDRESS	28	104	16078
// OP_STOREP_F	245	16078	0
// OP_DONE	0	0	0
void () multi_wait = 
{
    
    if(self.max_health)
    {
        self.health = self.max_health;
        self.takedamage = DAMAGE_YES;
        self.solid = SOLID_BBOX;
    }
    
};

// multi_trigger
// function begins at statement 22645, parm_start=16080
// OP_LOAD_F	28	150	16080
// OP_GT	16080	31	16081
// OP_IFNOT	16081	2	0
// OP_RETURN	0	0	0
// OP_LOAD_S	28	129	16082
// OP_EQ_S	16082	16083	16084
// OP_IFNOT	16084	11	0
// OP_LOAD_ENT	28	181	16085
// OP_LOAD_S	16085	129	16086
// OP_NE_S	16086	880	16087
// OP_IFNOT	16087	2	0
// OP_RETURN	0	0	0
// OP_ADD_F	41	819	16088
// OP_STORE_F	16088	41	0
// OP_STORE_V	353	4	0
// OP_STORE_V	317	7	0
// OP_CALL2	507	0	0
// OP_LOAD_S	28	208	16089
// OP_IFNOT	16089	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	208	16090
// OP_STORE_V	16090	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	163	16091
// OP_STOREP_F	256	16091	0
// OP_LOAD_ENT	28	181	16092
// OP_STORE_ENT	16092	360	0
// OP_CALL0	532	0	0
// OP_LOAD_F	28	427	16093
// OP_GT	16093	817	16094
// OP_IFNOT	16094	8	0
// OP_ADDRESS	28	148	16095
// OP_STOREP_FNC	16073	16095	0
// OP_ADDRESS	28	150	16096
// OP_LOAD_F	28	427	16097
// OP_ADD_F	31	16097	16098
// OP_STOREP_F	16098	16096	0
// OP_GOTO	8	0	0
// OP_ADDRESS	28	146	16099
// OP_STOREP_FNC	531	16099	0
// OP_ADDRESS	28	150	16100
// OP_ADD_F	31	2869	16101
// OP_STOREP_F	16101	16100	0
// OP_ADDRESS	28	148	16102
// OP_STOREP_FNC	533	16102	0
// OP_DONE	0	0	0
void () multi_trigger = 
{
    
    if(self.nextthink > time)
    {
        return;
    }
    
    
    if(self.classname == "trigger_secret")
    {
        
        if(self.enemy.classname != "player")
        {
            return;
        }
        
        found_secrets = found_secrets + 1.000;
        WriteByte(MSG_ALL, SVC_FOUNDSECRET);
    }
    
    
    if(self.noise)
    {
        sound(self, CHAN_VOICE, self.noise, 1.000, ATTN_NORM);
    }
    
    self.takedamage = DAMAGE_NO;
    activator = self.enemy;
    SUB_UseTargets();
    if(self.wait > 0.000)
    {
        self.think = multi_wait;
        self.nextthink = time + self.wait;
    }
    else
    {
        self.touch = SUB_Null;
        self.nextthink = time + 0.100;
        self.think = SUB_Remove;
    }
    
};

// multi_killed
// function begins at statement 22694, parm_start=16104
// OP_ADDRESS	28	181	16104
// OP_STOREP_ENT	361	16104	0
// OP_CALL0	16079	0	0
// OP_DONE	0	0	0
void () multi_killed = 
{
    self.enemy = damage_attacker;
    multi_trigger();
};

// multi_use
// function begins at statement 22698, parm_start=16106
// OP_ADDRESS	28	181	16106
// OP_STOREP_ENT	360	16106	0
// OP_CALL0	16079	0	0
// OP_DONE	0	0	0
void () multi_use = 
{
    self.enemy = activator;
    multi_trigger();
};

// multi_touch
// function begins at statement 22702, parm_start=16108
// OP_LOAD_S	29	129	16108
// OP_NE_S	16108	880	16109
// OP_IFNOT	16109	2	0
// OP_RETURN	0	0	0
// OP_LOAD_V	28	202	16110
// OP_NE_V	16110	926	16113
// OP_IFNOT	16113	9	0
// OP_LOAD_V	29	117	16114
// OP_STORE_V	16114	4	0
// OP_CALL1	461	0	0
// OP_LOAD_V	28	202	16117
// OP_MUL_V	59	16117	16120
// OP_LT	16120	817	16121
// OP_IFNOT	16121	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	181	16122
// OP_STOREP_ENT	29	16122	0
// OP_CALL0	16079	0	0
// OP_DONE	0	0	0
void () multi_touch = 
{
    
    if(other.classname != "player")
    {
        return;
    }
    
    
    if(self.movedir != '0.000 0.000 0.000')
    {
        makevectors(other.angles);
        
        if((v_forward * self.movedir) < 0.000)
        {
            return;
        }
        
    }
    
    self.enemy = other;
    multi_trigger();
};

// trigger_multiple
// function begins at statement 22721, parm_start=16124
// OP_LOAD_F	28	207	16124
// OP_EQ_F	16124	819	16125
// OP_IFNOT	16125	6	0
// OP_STORE_V	16126	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	208	16127
// OP_STOREP_S	16126	16127	0
// OP_GOTO	16	0	0
// OP_LOAD_F	28	207	16128
// OP_EQ_F	16128	821	16129
// OP_IFNOT	16129	6	0
// OP_STORE_V	7562	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	208	16130
// OP_STOREP_S	7562	16130	0
// OP_GOTO	8	0	0
// OP_LOAD_F	28	207	16131
// OP_EQ_F	16131	823	16132
// OP_IFNOT	16132	5	0
// OP_STORE_V	16133	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	208	16134
// OP_STOREP_S	16133	16134	0
// OP_LOAD_F	28	427	16135
// OP_NOT_F	16135	0	16136
// OP_IFNOT	16136	3	0
// OP_ADDRESS	28	427	16137
// OP_STOREP_F	1152	16137	0
// OP_ADDRESS	28	147	16138
// OP_STOREP_FNC	16105	16138	0
// OP_CALL0	7404	0	0
// OP_LOAD_F	28	152	16139
// OP_IFNOT	16139	20	0
// OP_LOAD_F	28	195	16140
// OP_BITAND	16140	16072	16141
// OP_IFNOT	16141	3	0
// OP_STORE_V	16142	4	0
// OP_CALL1	470	0	0
// OP_ADDRESS	28	185	16143
// OP_LOAD_F	28	152	16144
// OP_STOREP_F	16144	16143	0
// OP_ADDRESS	28	376	16145
// OP_STOREP_FNC	16103	16145	0
// OP_ADDRESS	28	163	16146
// OP_STOREP_F	257	16146	0
// OP_ADDRESS	28	104	16147
// OP_STOREP_F	245	16147	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	16148
// OP_STORE_V	16148	7	0
// OP_CALL2	462	0	0
// OP_GOTO	7	0	0
// OP_LOAD_F	28	195	16151
// OP_BITAND	16151	16072	16152
// OP_NOT_F	16152	0	16153
// OP_IFNOT	16153	3	0
// OP_ADDRESS	28	146	16154
// OP_STOREP_FNC	16107	16154	0
// OP_DONE	0	0	0
void () trigger_multiple = 
{
    if(self.sounds == 1.000)
    {
        precache_sound("misc/secret.wav");
        self.noise = "misc/secret.wav";
    }
    else
    {
        if(self.sounds == 2.000)
        {
            precache_sound("misc/talk.wav");
            self.noise = "misc/talk.wav";
        }
        else
        {
            
            if(self.sounds == 3.000)
            {
                precache_sound("misc/trigger1.wav");
                self.noise = "misc/trigger1.wav";
            }
            
        }
        
    }
    
    
    if(!self.wait)
    {
        self.wait = 0.200;
    }
    
    self.use = multi_use;
    InitTrigger();
    if(self.health)
    {
        
        if(self.spawnflags & SPAWNFLAG_NOTOUCH)
        {
            objerror("health and notouch don't make sense\n");
        }
        
        self.max_health = self.health;
        self.th_die = multi_killed;
        self.takedamage = DAMAGE_YES;
        self.solid = SOLID_BBOX;
        setorigin(self, self.origin);
    }
    else
    {
        
        if(!(self.spawnflags & SPAWNFLAG_NOTOUCH))
        {
            self.touch = multi_touch;
        }
        
    }
    
};

// trigger_once
// function begins at statement 22780, parm_start=16156
// OP_ADDRESS	28	427	16156
// OP_STOREP_F	1228	16156	0
// OP_CALL0	16123	0	0
// OP_DONE	0	0	0
void () trigger_once = 
{
    self.wait = -1.000;
    trigger_multiple();
};

// trigger_relay
// function begins at statement 22784, parm_start=16158
// OP_ADDRESS	28	147	16158
// OP_STOREP_FNC	532	16158	0
// OP_DONE	0	0	0
void () trigger_relay = 
{
    self.use = SUB_UseTargets;
};

// trigger_secret
// function begins at statement 22787, parm_start=16160
// OP_ADD_F	39	819	16160
// OP_STORE_F	16160	39	0
// OP_ADDRESS	28	427	16161
// OP_STOREP_F	1228	16161	0
// OP_LOAD_S	28	206	16162
// OP_NOT_S	16162	0	16163
// OP_IFNOT	16163	3	0
// OP_ADDRESS	28	206	16164
// OP_STOREP_S	16165	16164	0
// OP_LOAD_F	28	207	16166
// OP_NOT_F	16166	0	16167
// OP_IFNOT	16167	3	0
// OP_ADDRESS	28	207	16168
// OP_STOREP_F	819	16168	0
// OP_LOAD_F	28	207	16169
// OP_EQ_F	16169	819	16170
// OP_IFNOT	16170	6	0
// OP_STORE_V	16126	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	208	16171
// OP_STOREP_S	16126	16171	0
// OP_GOTO	8	0	0
// OP_LOAD_F	28	207	16172
// OP_EQ_F	16172	821	16173
// OP_IFNOT	16173	5	0
// OP_STORE_V	7562	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	208	16174
// OP_STOREP_S	7562	16174	0
// OP_CALL0	16123	0	0
// OP_DONE	0	0	0
void () trigger_secret = 
{
    total_secrets = total_secrets + 1.000;
    self.wait = -1.000;
    
    if(!self.message)
    {
        self.message = "You found a secret area!";
    }
    
    
    if(!self.sounds)
    {
        self.sounds = 1.000;
    }
    
    if(self.sounds == 1.000)
    {
        precache_sound("misc/secret.wav");
        self.noise = "misc/secret.wav";
    }
    else
    {
        
        if(self.sounds == 2.000)
        {
            precache_sound("misc/talk.wav");
            self.noise = "misc/talk.wav";
        }
        
    }
    
    trigger_multiple();
};

// counter_use
// function begins at statement 22818, parm_start=16176
// OP_ADDRESS	28	445	16177
// OP_LOAD_F	28	445	16178
// OP_SUB_F	16178	819	16179
// OP_STOREP_F	16179	16177	0
// OP_LOAD_F	28	445	16180
// OP_LT	16180	817	16181
// OP_IFNOT	16181	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	445	16182
// OP_NE_F	16182	817	16183
// OP_IFNOT	16183	33	0
// OP_LOAD_S	360	129	16184
// OP_EQ_S	16184	880	16185
// OP_LOAD_F	28	195	16186
// OP_BITAND	16186	16071	16187
// OP_EQ_F	16187	817	16188
// OP_AND	16185	16188	16189
// OP_IFNOT	16189	25	0
// OP_LOAD_F	28	445	16190
// OP_GE	16190	825	16191
// OP_IFNOT	16191	5	0
// OP_STORE_V	360	4	0
// OP_STORE_V	16192	7	0
// OP_CALL2	520	0	0
// OP_GOTO	18	0	0
// OP_LOAD_F	28	445	16193
// OP_EQ_F	16193	823	16194
// OP_IFNOT	16194	5	0
// OP_STORE_V	360	4	0
// OP_STORE_V	16195	7	0
// OP_CALL2	520	0	0
// OP_GOTO	11	0	0
// OP_LOAD_F	28	445	16196
// OP_EQ_F	16196	821	16197
// OP_IFNOT	16197	5	0
// OP_STORE_V	360	4	0
// OP_STORE_V	16198	7	0
// OP_CALL2	520	0	0
// OP_GOTO	4	0	0
// OP_STORE_V	360	4	0
// OP_STORE_V	16199	7	0
// OP_CALL2	520	0	0
// OP_RETURN	0	0	0
// OP_LOAD_S	360	129	16200
// OP_EQ_S	16200	880	16201
// OP_LOAD_F	28	195	16202
// OP_BITAND	16202	16071	16203
// OP_EQ_F	16203	817	16204
// OP_AND	16201	16204	16205
// OP_IFNOT	16205	4	0
// OP_STORE_V	360	4	0
// OP_STORE_V	16206	7	0
// OP_CALL2	520	0	0
// OP_ADDRESS	28	181	16207
// OP_STOREP_ENT	360	16207	0
// OP_CALL0	16079	0	0
// OP_DONE	0	0	0
void () counter_use = 
{
    local string junk;
    self.count = self.count - 1.000;
    
    if(self.count < 0.000)
    {
        return;
    }
    
    
    if(self.count != 0.000)
    {
        
        if((activator.classname == "player") && ((self.spawnflags & SPAWNFLAG_NOMESSAGE) == 0.000))
        {
            if(self.count >= 4.000)
            {
                centerprint(activator, "There are more to go...");
            }
            else
            {
                if(self.count == 3.000)
                {
                    centerprint(activator, "Only 3 more to go...");
                }
                else
                {
                    if(self.count == 2.000)
                    {
                        centerprint(activator, "Only 2 more to go...");
                    }
                    else
                    {
                        centerprint(activator, "Only 1 more to go...");
                    }
                    
                }
                
            }
            
        }
        
        return;
    }
    
    
    if((activator.classname == "player") && ((self.spawnflags & SPAWNFLAG_NOMESSAGE) == 0.000))
    {
        centerprint(activator, "Sequence completed!");
    }
    
    self.enemy = activator;
    multi_trigger();
};

// trigger_counter
// function begins at statement 22875, parm_start=16209
// OP_ADDRESS	28	427	16209
// OP_STOREP_F	1228	16209	0
// OP_LOAD_F	28	445	16210
// OP_NOT_F	16210	0	16211
// OP_IFNOT	16211	3	0
// OP_ADDRESS	28	445	16212
// OP_STOREP_F	821	16212	0
// OP_ADDRESS	28	147	16213
// OP_STOREP_FNC	16175	16213	0
// OP_DONE	0	0	0
void () trigger_counter = 
{
    self.wait = -1.000;
    
    if(!self.count)
    {
        self.count = 2.000;
    }
    
    self.use = counter_use;
};

float PLAYER_ONLY = 1.000;
float SILENT = 2.000;
// play_teleport
// function begins at statement 22885, parm_start=16217
// OP_CALL0	466	0	0
// OP_MUL_F	1	827	16219
// OP_STORE_F	16219	16217	0
// OP_LT	16217	819	16220
// OP_IFNOT	16220	3	0
// OP_STORE_S	12078	16218	0
// OP_GOTO	14	0	0
// OP_LT	16217	821	16221
// OP_IFNOT	16221	3	0
// OP_STORE_S	12079	16218	0
// OP_GOTO	10	0	0
// OP_LT	16217	823	16222
// OP_IFNOT	16222	3	0
// OP_STORE_S	12080	16218	0
// OP_GOTO	6	0	0
// OP_LT	16217	825	16223
// OP_IFNOT	16223	3	0
// OP_STORE_S	12081	16218	0
// OP_GOTO	2	0	0
// OP_STORE_S	12082	16218	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	16218	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_DONE	0	0	0
void () play_teleport = 
{
    local float v;
    local string tmpstr;
    v = random() * 5.000;
    if(v < 1.000)
    {
        tmpstr = "misc/r_tele1.wav";
    }
    else
    {
        if(v < 2.000)
        {
            tmpstr = "misc/r_tele2.wav";
        }
        else
        {
            if(v < 3.000)
            {
                tmpstr = "misc/r_tele3.wav";
            }
            else
            {
                if(v < 4.000)
                {
                    tmpstr = "misc/r_tele4.wav";
                }
                else
                {
                    tmpstr = "misc/r_tele5.wav";
                }
                
            }
            
        }
        
    }
    
    sound(self, CHAN_VOICE, tmpstr, 1.000, ATTN_NORM);
    remove(self);
};

// spawn_tfog
// function begins at statement 22914, parm_start=16224
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	16067	0
// OP_ADDRESS	16067	105	16227
// OP_STOREP_V	16224	16227	0
// OP_ADDRESS	16067	150	16230
// OP_ADD_F	31	1152	16231
// OP_STOREP_F	16231	16230	0
// OP_ADDRESS	16067	148	16232
// OP_STOREP_FNC	16216	16232	0
// OP_STORE_V	351	4	0
// OP_STORE_V	315	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	333	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	16224	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	16225	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	16226	7	0
// OP_CALL2	511	0	0
// OP_DONE	0	0	0
void (vector org) spawn_tfog = 
{
    s = spawn();
    s.origin = org;
    s.nextthink = time + 0.200;
    s.think = play_teleport;
    WriteByte(MSG_BROADCAST, SVC_TEMPENTITY);
    WriteByte(MSG_BROADCAST, TE_TELEPORT);
    WriteCoord(MSG_BROADCAST, org_x);
    WriteCoord(MSG_BROADCAST, 0.000);
    WriteCoord(MSG_BROADCAST, 0.000);
};

// tdeath_touch
// function begins at statement 22939, parm_start=16234
// OP_LOAD_ENT	28	201	16234
// OP_EQ_E	29	16234	16235
// OP_IFNOT	16235	2	0
// OP_RETURN	0	0	0
// OP_LOAD_S	29	129	16236
// OP_EQ_S	16236	880	16237
// OP_IFNOT	16237	17	0
// OP_LOAD_F	29	389	16238
// OP_GT	16238	31	16239
// OP_IFNOT	16239	3	0
// OP_ADDRESS	28	129	16240
// OP_STOREP_S	13372	16240	0
// OP_LOAD_ENT	28	201	16241
// OP_LOAD_S	16241	129	16242
// OP_NE_S	16242	880	16243
// OP_IFNOT	16243	8	0
// OP_LOAD_ENT	28	201	16244
// OP_STORE_V	16244	4	0
// OP_STORE_V	28	7	0
// OP_STORE_V	28	10	0
// OP_STORE_V	12486	13	0
// OP_CALL4	534	0	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	152	16245
// OP_IFNOT	16245	6	0
// OP_STORE_V	29	4	0
// OP_STORE_V	28	7	0
// OP_STORE_V	28	10	0
// OP_STORE_V	12486	13	0
// OP_CALL4	534	0	0
// OP_DONE	0	0	0
void () tdeath_touch = 
{
    
    if(other == self.owner)
    {
        return;
    }
    
    
    if(other.classname == "player")
    {
        
        if(other.invincible_finished > time)
        {
            self.classname = "teledeath2";
        }
        
        
        if(self.owner.classname != "player")
        {
            T_Damage(self.owner, self, self, 50000.000);
            return;
        }
        
    }
    
    
    if(other.health)
    {
        T_Damage(other, self, self, 50000.000);
    }
    
};

// spawn_tdeath
// function begins at statement 22970, parm_start=16246
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	16250	0
// OP_ADDRESS	16250	129	16251
// OP_STOREP_S	13360	16251	0
// OP_ADDRESS	16250	103	16252
// OP_STOREP_F	233	16252	0
// OP_ADDRESS	16250	104	16253
// OP_STOREP_F	244	16253	0
// OP_ADDRESS	16250	117	16254
// OP_STOREP_V	926	16254	0
// OP_STORE_V	16250	4	0
// OP_LOAD_V	16249	134	16257
// OP_SUB_V	16257	16260	16263
// OP_STORE_V	16263	7	0
// OP_LOAD_V	16249	138	16266
// OP_ADD_V	16266	16260	16269
// OP_STORE_V	16269	10	0
// OP_CALL3	464	0	0
// OP_STORE_V	16250	4	0
// OP_STORE_V	16246	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	16250	146	16272
// OP_STOREP_FNC	16233	16272	0
// OP_ADDRESS	16250	150	16273
// OP_ADD_F	31	1152	16274
// OP_STOREP_F	16274	16273	0
// OP_ADDRESS	16250	148	16275
// OP_STOREP_FNC	533	16275	0
// OP_ADDRESS	16250	201	16276
// OP_STOREP_ENT	16249	16276	0
// OP_STORE_F	821	33	0
// OP_DONE	0	0	0
void (vector org, entity death_owner) spawn_tdeath = 
{
    local entity death;
    death = spawn();
    death.classname = "teledeath";
    death.movetype = MOVETYPE_NONE;
    death.solid = SOLID_TRIGGER;
    death.angles = '0.000 0.000 0.000';
    setsize(death, death_owner.mins - '1.000 1.000 1.000', death_owner.maxs + '1.000 1.000 1.000');
    setorigin(death, org);
    death.touch = tdeath_touch;
    death.nextthink = time + 0.200;
    death.think = SUB_Remove;
    death.owner = death_owner;
    force_retouch = 2.000;
};

// teleport_touch
// function begins at statement 23002, parm_start=16278
// OP_LOAD_S	28	197	16282
// OP_IFNOT	16282	5	0
// OP_LOAD_F	28	150	16283
// OP_LT	16283	31	16284
// OP_IFNOT	16284	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	195	16285
// OP_BITAND	16285	16214	16286
// OP_IFNOT	16286	5	0
// OP_LOAD_S	29	129	16287
// OP_NE_S	16287	880	16288
// OP_IFNOT	16288	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	152	16289
// OP_LE	16289	817	16290
// OP_LOAD_F	29	104	16291
// OP_NE_F	16291	246	16292
// OP_OR	16290	16292	16293
// OP_IFNOT	16293	2	0
// OP_RETURN	0	0	0
// OP_CALL0	532	0	0
// OP_LOAD_V	29	105	16294
// OP_STORE_V	16294	4	0
// OP_CALL1	858	0	0
// OP_STORE_V	30	4	0
// OP_STORE_V	197	7	0
// OP_LOAD_S	28	196	16297
// OP_STORE_V	16297	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	16278	0
// OP_NOT_ENT	16278	0	16298
// OP_IFNOT	16298	3	0
// OP_STORE_V	16299	4	0
// OP_CALL1	470	0	0
// OP_LOAD_V	16278	409	16300
// OP_STORE_V	16300	4	0
// OP_CALL1	461	0	0
// OP_LOAD_V	16278	105	16303
// OP_MUL_FV	2657	59	16306
// OP_ADD_V	16303	16306	16309
// OP_STORE_V	16309	16279	0
// OP_STORE_V	16279	4	0
// OP_CALL1	858	0	0
// OP_LOAD_V	16278	105	16312
// OP_STORE_V	16312	4	0
// OP_STORE_V	29	7	0
// OP_CALL2	12318	0	0
// OP_LOAD_F	29	152	16315
// OP_NOT_F	16315	0	16316
// OP_IFNOT	16316	12	0
// OP_ADDRESS	29	105	16317
// OP_LOAD_V	16278	105	16320
// OP_STOREP_V	16320	16317	0
// OP_ADDRESS	29	113	16323
// OP_LOAD_F	29	114	16326
// OP_MUL_VF	59	16326	16327
// OP_LOAD_F	29	115	16330
// OP_MUL_VF	59	16330	16331
// OP_ADD_V	16327	16331	16334
// OP_STOREP_V	16334	16323	0
// OP_RETURN	0	0	0
// OP_STORE_V	29	4	0
// OP_LOAD_V	16278	105	16337
// OP_STORE_V	16337	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	29	117	16340
// OP_LOAD_V	16278	409	16343
// OP_STOREP_V	16343	16340	0
// OP_LOAD_S	29	129	16346
// OP_EQ_S	16346	880	16347
// OP_IFNOT	16347	16	0
// OP_ADDRESS	29	174	16348
// OP_STOREP_F	819	16348	0
// OP_ADDRESS	29	186	16349
// OP_ADD_F	31	2619	16350
// OP_STOREP_F	16350	16349	0
// OP_LOAD_F	29	182	16351
// OP_BITAND	16351	228	16352
// OP_IFNOT	16352	5	0
// OP_ADDRESS	29	182	16353
// OP_LOAD_F	29	182	16354
// OP_SUB_F	16354	228	16355
// OP_STOREP_F	16355	16353	0
// OP_ADDRESS	29	113	16356
// OP_MUL_VF	59	2299	16359
// OP_STOREP_V	16359	16356	0
// OP_ADDRESS	29	182	16362
// OP_LOAD_F	29	182	16363
// OP_LOAD_F	29	182	16364
// OP_BITAND	16364	228	16365
// OP_SUB_F	16363	16365	16366
// OP_STOREP_F	16366	16362	0
// OP_DONE	0	0	0
void () teleport_touch = 
{
    local entity t;
    local vector org;
    
    if(self.targetname)
    {
        
        if(self.nextthink < time)
        {
            return;
        }
        
    }
    
    
    if(self.spawnflags & PLAYER_ONLY)
    {
        
        if(other.classname != "player")
        {
            return;
        }
        
    }
    
    
    if((other.health <= 0.000) || (other.solid != SOLID_SLIDEBOX))
    {
        return;
    }
    
    SUB_UseTargets();
    spawn_tfog(other.origin);
    t = find(world, targetname, self.target);
    
    if(!t)
    {
        objerror("couldn't find target");
    }
    
    makevectors(t.mangle);
    org = t.origin + (32.000 * v_forward);
    spawn_tfog(org);
    spawn_tdeath(t.origin, other);
    
    if(!other.health)
    {
        other.origin = t.origin;
        other.velocity = (v_forward * other.velocity_x) + (v_forward * other.velocity_y);
        return;
    }
    
    setorigin(other, t.origin);
    other.angles = t.mangle;
    
    if(other.classname == "player")
    {
        other.fixangle = 1.000;
        other.teleport_time = time + 0.700;
        
        if(other.flags & FL_ONGROUND)
        {
            other.flags = other.flags - FL_ONGROUND;
        }
        
        other.velocity = v_forward * 300.000;
    }
    
    other.flags = other.flags - (other.flags & FL_ONGROUND);
};

// info_teleport_destination
// function begins at statement 23095, parm_start=16368
// OP_ADDRESS	28	409	16368
// OP_LOAD_V	28	117	16371
// OP_STOREP_V	16371	16368	0
// OP_ADDRESS	28	117	16374
// OP_STOREP_V	926	16374	0
// OP_ADDRESS	28	130	16377
// OP_STOREP_S	4128	16377	0
// OP_ADDRESS	28	105	16378
// OP_LOAD_V	28	105	16381
// OP_ADD_V	16381	16384	16387
// OP_STOREP_V	16387	16378	0
// OP_LOAD_S	28	197	16390
// OP_NOT_S	16390	0	16391
// OP_IFNOT	16391	3	0
// OP_STORE_V	16392	4	0
// OP_CALL1	470	0	0
// OP_DONE	0	0	0
void () info_teleport_destination = 
{
    self.mangle = self.angles;
    self.angles = '0.000 0.000 0.000';
    self.model = "";
    self.origin = self.origin + '0.000 0.000 27.000';
    
    if(!self.targetname)
    {
        objerror("no targetname");
    }
    
};

// teleport_use
// function begins at statement 23112, parm_start=16394
// OP_ADDRESS	28	150	16394
// OP_ADD_F	31	1152	16395
// OP_STOREP_F	16395	16394	0
// OP_STORE_F	821	33	0
// OP_ADDRESS	28	148	16396
// OP_STOREP_FNC	531	16396	0
// OP_DONE	0	0	0
void () teleport_use = 
{
    self.nextthink = time + 0.200;
    force_retouch = 2.000;
    self.think = SUB_Null;
};

// trigger_teleport
// function begins at statement 23119, parm_start=16398
// OP_CALL0	7404	0	0
// OP_ADDRESS	28	146	16401
// OP_STOREP_FNC	16277	16401	0
// OP_LOAD_S	28	196	16402
// OP_NOT_S	16402	0	16403
// OP_IFNOT	16403	3	0
// OP_STORE_V	16404	4	0
// OP_CALL1	470	0	0
// OP_ADDRESS	28	147	16405
// OP_STOREP_FNC	16393	16405	0
// OP_LOAD_F	28	195	16406
// OP_BITAND	16406	16215	16407
// OP_NOT_F	16407	0	16408
// OP_IFNOT	16408	8	0
// OP_STORE_V	16409	4	0
// OP_CALL1	478	0	0
// OP_LOAD_V	28	134	16410
// OP_LOAD_V	28	138	16413
// OP_ADD_V	16410	16413	16416
// OP_MUL_VF	16416	1182	16419
// OP_STORE_V	16419	16398	0
// OP_DONE	0	0	0
void () trigger_teleport = 
{
    local vector o;
    InitTrigger();
    self.touch = teleport_touch;
    
    if(!self.target)
    {
        objerror("no target");
    }
    
    self.use = teleport_use;
    
    if(!(self.spawnflags & SILENT))
    {
        precache_sound("ambience/hum1.wav");
        o = (self.mins + self.maxs) * 0.500;
    }
    
};

// trigger_skill_touch
// function begins at statement 23141, parm_start=16423
// OP_LOAD_S	29	129	16423
// OP_NE_S	16423	880	16424
// OP_IFNOT	16424	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	4339	4	0
// OP_LOAD_S	28	206	16425
// OP_STORE_V	16425	7	0
// OP_CALL2	519	0	0
// OP_DONE	0	0	0
void () trigger_skill_touch = 
{
    
    if(other.classname != "player")
    {
        return;
    }
    
    cvar_set("skill", self.message);
};

// trigger_setskill
// function begins at statement 23150, parm_start=16427
// OP_CALL0	7404	0	0
// OP_ADDRESS	28	146	16427
// OP_STOREP_FNC	16422	16427	0
// OP_DONE	0	0	0
void () trigger_setskill = 
{
    InitTrigger();
    self.touch = trigger_skill_touch;
};

// trigger_onlyregistered_touch
// function begins at statement 23154, parm_start=16429
// OP_LOAD_S	29	129	16429
// OP_NE_S	16429	880	16430
// OP_IFNOT	16430	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	387	16431
// OP_GT	16431	31	16432
// OP_IFNOT	16432	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	387	16433
// OP_ADD_F	31	821	16434
// OP_STOREP_F	16434	16433	0
// OP_STORE_V	12437	4	0
// OP_CALL1	501	0	0
// OP_IFNOT	1	7	0
// OP_ADDRESS	28	206	16435
// OP_STOREP_S	4128	16435	0
// OP_CALL0	532	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_GOTO	14	0	0
// OP_LOAD_S	28	206	16436
// OP_NE_S	16436	4128	16437
// OP_IFNOT	16437	11	0
// OP_STORE_V	29	4	0
// OP_LOAD_S	28	206	16438
// OP_STORE_V	16438	7	0
// OP_CALL2	520	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	338	7	0
// OP_STORE_V	7562	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_DONE	0	0	0
void () trigger_onlyregistered_touch = 
{
    
    if(other.classname != "player")
    {
        return;
    }
    
    
    if(self.attack_finished > time)
    {
        return;
    }
    
    self.attack_finished = time + 2.000;
    if(cvar("registered"))
    {
        self.message = "";
        SUB_UseTargets();
        remove(self);
    }
    else
    {
        
        if(self.message != "")
        {
            centerprint(other, self.message);
            sound(other, CHAN_BODY, "misc/talk.wav", 1.000, ATTN_NORM);
        }
        
    }
    
};

// trigger_onlyregistered
// function begins at statement 23188, parm_start=16440
// OP_STORE_V	7562	4	0
// OP_CALL1	478	0	0
// OP_CALL0	7404	0	0
// OP_ADDRESS	28	146	16440
// OP_STOREP_FNC	16428	16440	0
// OP_DONE	0	0	0
void () trigger_onlyregistered = 
{
    precache_sound("misc/talk.wav");
    InitTrigger();
    self.touch = trigger_onlyregistered_touch;
};

// hurt_on
// function begins at statement 23194, parm_start=16442
// OP_ADDRESS	28	104	16442
// OP_STOREP_F	244	16442	0
// OP_ADDRESS	28	150	16443
// OP_STOREP_F	1228	16443	0
// OP_DONE	0	0	0
void () hurt_on = 
{
    self.solid = SOLID_TRIGGER;
    self.nextthink = -1.000;
};

// hurt_touch
// function begins at statement 23199, parm_start=16445
// OP_LOAD_F	29	163	16445
// OP_IFNOT	16445	14	0
// OP_ADDRESS	28	104	16446
// OP_STOREP_F	243	16446	0
// OP_STORE_V	29	4	0
// OP_STORE_V	28	7	0
// OP_STORE_V	28	10	0
// OP_LOAD_F	28	434	16447
// OP_STORE_V	16447	13	0
// OP_CALL4	534	0	0
// OP_ADDRESS	28	148	16448
// OP_STOREP_FNC	16441	16448	0
// OP_ADDRESS	28	150	16449
// OP_ADD_F	31	819	16450
// OP_STOREP_F	16450	16449	0
// OP_RETURN	0	0	0
// OP_DONE	0	0	0
void () hurt_touch = 
{
    
    if(other.takedamage)
    {
        self.solid = SOLID_NOT;
        T_Damage(other, self, self, self.dmg);
        self.think = hurt_on;
        self.nextthink = time + 1.000;
    }
    
    return;
};

// trigger_hurt
// function begins at statement 23216, parm_start=16452
// OP_CALL0	7404	0	0
// OP_ADDRESS	28	146	16452
// OP_STOREP_FNC	16444	16452	0
// OP_LOAD_F	28	434	16453
// OP_NOT_F	16453	0	16454
// OP_IFNOT	16454	3	0
// OP_ADDRESS	28	434	16455
// OP_STOREP_F	827	16455	0
// OP_DONE	0	0	0
void () trigger_hurt = 
{
    InitTrigger();
    self.touch = hurt_touch;
    
    if(!self.dmg)
    {
        self.dmg = 5.000;
    }
    
};

float PUSH_ONCE = 1.000;
// trigger_push_touch
// function begins at statement 23225, parm_start=16458
// OP_LOAD_S	29	129	16458
// OP_EQ_S	16458	9795	16459
// OP_IFNOT	16459	8	0
// OP_ADDRESS	29	113	16460
// OP_LOAD_F	28	378	16463
// OP_LOAD_V	28	202	16464
// OP_MUL_FV	16463	16464	16467
// OP_MUL_VF	16467	855	16470
// OP_STOREP_V	16470	16460	0
// OP_GOTO	25	0	0
// OP_LOAD_F	29	152	16473
// OP_GT	16473	817	16474
// OP_IFNOT	16474	22	0
// OP_ADDRESS	29	113	16475
// OP_LOAD_F	28	378	16478
// OP_LOAD_V	28	202	16479
// OP_MUL_FV	16478	16479	16482
// OP_MUL_VF	16482	855	16485
// OP_STOREP_V	16485	16475	0
// OP_LOAD_S	29	129	16488
// OP_EQ_S	16488	880	16489
// OP_IFNOT	16489	13	0
// OP_LOAD_F	29	400	16490
// OP_LT	16490	31	16491
// OP_IFNOT	16491	10	0
// OP_ADDRESS	29	400	16492
// OP_ADD_F	31	883	16493
// OP_STOREP_F	16493	16492	0
// OP_STORE_V	29	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	16494	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_LOAD_F	28	195	16495
// OP_BITAND	16495	16456	16496
// OP_IFNOT	16496	3	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_DONE	0	0	0
void () trigger_push_touch = 
{
    if(other.classname == "grenade")
    {
        other.velocity = (self.speed * self.movedir) * 10.000;
    }
    else
    {
        
        if(other.health > 0.000)
        {
            other.velocity = (self.speed * self.movedir) * 10.000;
            
            if(other.classname == "player")
            {
                
                if(other.fly_sound < time)
                {
                    other.fly_sound = time + 1.500;
                    sound(other, CHAN_AUTO, "ambience/windfly.wav", 1.000, ATTN_NORM);
                }
                
            }
            
        }
        
    }
    
    
    if(self.spawnflags & PUSH_ONCE)
    {
        remove(self);
    }
    
};

// trigger_push
// function begins at statement 23265, parm_start=16498
// OP_CALL0	7404	0	0
// OP_STORE_V	16494	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	146	16498
// OP_STOREP_FNC	16457	16498	0
// OP_LOAD_F	28	378	16499
// OP_NOT_F	16499	0	16500
// OP_IFNOT	16500	3	0
// OP_ADDRESS	28	378	16501
// OP_STOREP_F	3337	16501	0
// OP_DONE	0	0	0
void () trigger_push = 
{
    InitTrigger();
    precache_sound("ambience/windfly.wav");
    self.touch = trigger_push_touch;
    
    if(!self.speed)
    {
        self.speed = 1000.000;
    }
    
};

// trigger_monsterjump_touch
// function begins at statement 23276, parm_start=16503
// OP_LOAD_F	29	182	16503
// OP_BITOR	224	220	16504
// OP_BITOR	16504	221	16505
// OP_BITAND	16503	16505	16506
// OP_NE_F	16506	224	16507
// OP_IFNOT	16507	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	29	114	16508
// OP_LOAD_F	28	203	16509
// OP_LOAD_F	28	378	16510
// OP_MUL_F	16509	16510	16511
// OP_STOREP_F	16511	16508	0
// OP_ADDRESS	29	115	16512
// OP_LOAD_F	28	204	16513
// OP_LOAD_F	28	378	16514
// OP_MUL_F	16513	16514	16515
// OP_STOREP_F	16515	16512	0
// OP_LOAD_F	29	182	16516
// OP_BITAND	16516	228	16517
// OP_NOT_F	16517	0	16518
// OP_IFNOT	16518	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	29	182	16519
// OP_LOAD_F	29	182	16520
// OP_SUB_F	16520	228	16521
// OP_STOREP_F	16521	16519	0
// OP_ADDRESS	29	116	16522
// OP_LOAD_F	28	456	16523
// OP_STOREP_F	16523	16522	0
// OP_DONE	0	0	0
void () trigger_monsterjump_touch = 
{
    
    if((other.flags & ((FL_MONSTER | FL_FLY) | FL_SWIM)) != FL_MONSTER)
    {
        return;
    }
    
    other.velocity_x = self.movedir_x * self.speed;
    other.velocity_y = self.movedir_y * self.speed;
    
    if(!(other.flags & FL_ONGROUND))
    {
        return;
    }
    
    other.flags = other.flags - FL_ONGROUND;
    other.velocity_z = self.height;
};

// trigger_monsterjump
// function begins at statement 23306, parm_start=16525
// OP_LOAD_F	28	378	16525
// OP_NOT_F	16525	0	16526
// OP_IFNOT	16526	3	0
// OP_ADDRESS	28	378	16527
// OP_STOREP_F	4760	16527	0
// OP_LOAD_F	28	456	16528
// OP_NOT_F	16528	0	16529
// OP_IFNOT	16529	3	0
// OP_ADDRESS	28	456	16530
// OP_STOREP_F	4760	16530	0
// OP_LOAD_V	28	117	16531
// OP_EQ_V	16531	926	16534
// OP_IFNOT	16534	3	0
// OP_ADDRESS	28	117	16535
// OP_STOREP_V	16538	16535	0
// OP_CALL0	7404	0	0
// OP_ADDRESS	28	146	16541
// OP_STOREP_FNC	16502	16541	0
// OP_DONE	0	0	0
void () trigger_monsterjump = 
{
    
    if(!self.speed)
    {
        self.speed = 200.000;
    }
    
    
    if(!self.height)
    {
        self.height = 200.000;
    }
    
    
    if(self.angles == '0.000 0.000 0.000')
    {
        self.angles = '0.000 360.000 0.000';
    }
    
    InitTrigger();
    self.touch = trigger_monsterjump_touch;
};

void () plat_center_touch;
void () plat_outside_touch;
void () plat_trigger_use;
void () plat_go_up;
void () plat_go_down;
void () plat_crush;
float PLAT_LOW_TRIGGER = 1.000;
// plat_spawn_inside_trigger
// function begins at statement 23325, parm_start=16550
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	16550	0
// OP_ADDRESS	16550	146	16557
// OP_STOREP_FNC	16542	16557	0
// OP_ADDRESS	16550	103	16558
// OP_STOREP_F	233	16558	0
// OP_ADDRESS	16550	104	16559
// OP_STOREP_F	244	16559	0
// OP_ADDRESS	16550	181	16560
// OP_STOREP_ENT	28	16560	0
// OP_LOAD_V	28	134	16561
// OP_ADD_V	16561	16564	16567
// OP_STORE_V	16567	16551	0
// OP_LOAD_V	28	138	16570
// OP_SUB_V	16570	16573	16576
// OP_STORE_V	16576	16554	0
// OP_LOAD_F	28	451	16579
// OP_LOAD_F	28	455	16580
// OP_SUB_F	16579	16580	16581
// OP_ADD_F	16581	843	16582
// OP_SUB_F	16556	16582	16583
// OP_STORE_F	16583	16553	0
// OP_LOAD_F	28	195	16584
// OP_BITAND	16584	16548	16585
// OP_IFNOT	16585	3	0
// OP_ADD_F	16553	843	16586
// OP_STORE_F	16586	16556	0
// OP_LOAD_F	28	143	16587
// OP_LE	16587	2611	16588
// OP_IFNOT	16588	8	0
// OP_LOAD_F	28	135	16589
// OP_LOAD_F	28	139	16590
// OP_ADD_F	16589	16590	16591
// OP_DIV_F	16591	821	16592
// OP_STORE_F	16592	16551	0
// OP_ADD_F	16551	819	16593
// OP_STORE_F	16593	16554	0
// OP_LOAD_F	28	144	16594
// OP_LE	16594	2611	16595
// OP_IFNOT	16595	8	0
// OP_LOAD_F	28	136	16596
// OP_LOAD_F	28	140	16597
// OP_ADD_F	16596	16597	16598
// OP_DIV_F	16598	821	16599
// OP_STORE_F	16599	16552	0
// OP_ADD_F	16552	819	16600
// OP_STORE_F	16600	16555	0
// OP_STORE_V	16550	4	0
// OP_STORE_V	16551	7	0
// OP_STORE_V	16554	10	0
// OP_CALL3	464	0	0
// OP_DONE	0	0	0
void () plat_spawn_inside_trigger = 
{
    local entity trigger;
    local vector tmin;
    local vector tmax;
    trigger = spawn();
    trigger.touch = plat_center_touch;
    trigger.movetype = MOVETYPE_NONE;
    trigger.solid = SOLID_TRIGGER;
    trigger.enemy = self;
    tmin = self.mins + '25.000 25.000 0.000';
    tmax = self.maxs - '25.000 25.000 -8.000';
    tmin_z = 0.000 - ((self.pos1_z - self.pos2_z) + 8.000);
    
    if(self.spawnflags & PLAT_LOW_TRIGGER)
    {
        tmax_z = 0.000 + 8.000;
    }
    
    
    if(self.size_x <= 50.000)
    {
        tmin_x = (self.mins_x + self.maxs_x) / 2.000;
        tmax_x = tmin_x + 1.000;
    }
    
    
    if(self.size_y <= 50.000)
    {
        tmin_y = (self.mins_y + self.maxs_y) / 2.000;
        tmax_y = 0.000 + 1.000;
    }
    
    setsize(trigger, tmin, tmax);
};

// plat_hit_top
// function begins at statement 23377, parm_start=16602
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	209	16602
// OP_STORE_V	16602	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	447	16603
// OP_STOREP_F	296	16603	0
// OP_ADDRESS	28	148	16604
// OP_STOREP_FNC	16546	16604	0
// OP_ADDRESS	28	150	16605
// OP_LOAD_F	28	102	16606
// OP_ADD_F	16606	823	16607
// OP_STOREP_F	16607	16605	0
// OP_DONE	0	0	0
void () plat_hit_top = 
{
    sound(self, CHAN_VOICE, self.noise1, 1.000, ATTN_NORM);
    self.state = STATE_TOP;
    self.think = plat_go_down;
    self.nextthink = self.ltime + 3.000;
};

// plat_hit_bottom
// function begins at statement 23393, parm_start=16609
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	209	16609
// OP_STORE_V	16609	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	447	16610
// OP_STOREP_F	297	16610	0
// OP_DONE	0	0	0
void () plat_hit_bottom = 
{
    sound(self, CHAN_VOICE, self.noise1, 1.000, ATTN_NORM);
    self.state = STATE_BOTTOM;
};

// plat_go_down
// function begins at statement 23403, parm_start=16611
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	208	16611
// OP_STORE_V	16611	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	447	16612
// OP_STOREP_F	299	16612	0
// OP_LOAD_V	28	452	16613
// OP_STORE_V	16613	4	0
// OP_LOAD_F	28	378	16616
// OP_STORE_V	16616	7	0
// OP_STORE_V	16608	10	0
// OP_CALL3	526	0	0
// OP_DONE	0	0	0
void () plat_go_down = 
{
    sound(self, CHAN_VOICE, self.noise, 1.000, ATTN_NORM);
    self.state = STATE_DOWN;
    SUB_CalcMove(self.pos2, self.speed, plat_hit_bottom);
};

// plat_go_up
// function begins at statement 23419, parm_start=16617
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	208	16617
// OP_STORE_V	16617	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	447	16618
// OP_STOREP_F	298	16618	0
// OP_LOAD_V	28	448	16619
// OP_STORE_V	16619	4	0
// OP_LOAD_F	28	378	16622
// OP_STORE_V	16622	7	0
// OP_STORE_V	16601	10	0
// OP_CALL3	526	0	0
// OP_DONE	0	0	0
void () plat_go_up = 
{
    sound(self, CHAN_VOICE, self.noise, 1.000, ATTN_NORM);
    self.state = STATE_UP;
    SUB_CalcMove(self.pos1, self.speed, plat_hit_top);
};

// plat_center_touch
// function begins at statement 23435, parm_start=16623
// OP_LOAD_S	29	129	16623
// OP_NE_S	16623	880	16624
// OP_IFNOT	16624	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	152	16625
// OP_LE	16625	817	16626
// OP_IFNOT	16626	2	0
// OP_RETURN	0	0	0
// OP_LOAD_ENT	28	181	16627
// OP_STORE_ENT	16627	28	0
// OP_LOAD_F	28	447	16628
// OP_EQ_F	16628	297	16629
// OP_IFNOT	16629	3	0
// OP_CALL0	16545	0	0
// OP_GOTO	8	0	0
// OP_LOAD_F	28	447	16630
// OP_EQ_F	16630	296	16631
// OP_IFNOT	16631	5	0
// OP_ADDRESS	28	150	16632
// OP_LOAD_F	28	102	16633
// OP_ADD_F	16633	819	16634
// OP_STOREP_F	16634	16632	0
// OP_DONE	0	0	0
void () plat_center_touch = 
{
    
    if(other.classname != "player")
    {
        return;
    }
    
    
    if(other.health <= 0.000)
    {
        return;
    }
    
    self = self.enemy;
    if(self.state == STATE_BOTTOM)
    {
        plat_go_up();
    }
    else
    {
        
        if(self.state == STATE_TOP)
        {
            self.nextthink = self.ltime + 1.000;
        }
        
    }
    
};

// plat_outside_touch
// function begins at statement 23458, parm_start=16635
// OP_LOAD_S	29	129	16635
// OP_NE_S	16635	880	16636
// OP_IFNOT	16636	2	0
// OP_RETURN	0	0	0
// OP_LOAD_F	29	152	16637
// OP_LE	16637	817	16638
// OP_IFNOT	16638	2	0
// OP_RETURN	0	0	0
// OP_LOAD_ENT	28	181	16639
// OP_STORE_ENT	16639	28	0
// OP_LOAD_F	28	447	16640
// OP_EQ_F	16640	296	16641
// OP_IFNOT	16641	2	0
// OP_CALL0	16546	0	0
// OP_DONE	0	0	0
void () plat_outside_touch = 
{
    
    if(other.classname != "player")
    {
        return;
    }
    
    
    if(other.health <= 0.000)
    {
        return;
    }
    
    self = self.enemy;
    
    if(self.state == STATE_TOP)
    {
        plat_go_down();
    }
    
};

// plat_trigger_use
// function begins at statement 23473, parm_start=16642
// OP_LOAD_FNC	28	148	16642
// OP_IFNOT	16642	2	0
// OP_RETURN	0	0	0
// OP_CALL0	16546	0	0
// OP_DONE	0	0	0
void () plat_trigger_use = 
{
    
    if(self.think)
    {
        return;
    }
    
    plat_go_down();
};

// plat_crush
// function begins at statement 23478, parm_start=16643
// OP_STORE_V	29	4	0
// OP_STORE_V	28	7	0
// OP_STORE_V	28	10	0
// OP_STORE_V	819	13	0
// OP_CALL4	534	0	0
// OP_LOAD_F	28	447	16643
// OP_EQ_F	16643	298	16644
// OP_IFNOT	16644	3	0
// OP_CALL0	16546	0	0
// OP_GOTO	8	0	0
// OP_LOAD_F	28	447	16645
// OP_EQ_F	16645	299	16646
// OP_IFNOT	16646	3	0
// OP_CALL0	16545	0	0
// OP_GOTO	3	0	0
// OP_STORE_V	16647	4	0
// OP_CALL1	470	0	0
// OP_DONE	0	0	0
void () plat_crush = 
{
    T_Damage(other, self, self, 1.000);
    if(self.state == STATE_UP)
    {
        plat_go_down();
    }
    else
    {
        if(self.state == STATE_DOWN)
        {
            plat_go_up();
        }
        else
        {
            objerror("plat_crush: bad self.state\n");
        }
        
    }
    
};

// plat_use
// function begins at statement 23496, parm_start=16649
// OP_ADDRESS	28	147	16649
// OP_STOREP_FNC	531	16649	0
// OP_LOAD_F	28	447	16650
// OP_NE_F	16650	298	16651
// OP_IFNOT	16651	3	0
// OP_STORE_V	16652	4	0
// OP_CALL1	470	0	0
// OP_CALL0	16546	0	0
// OP_DONE	0	0	0
void () plat_use = 
{
    self.use = SUB_Null;
    
    if(self.state != STATE_UP)
    {
        objerror("plat_use: not in up state");
    }
    
    plat_go_down();
};

// func_plat
// function begins at statement 23505, parm_start=16654
// OP_LOAD_F	28	413	16655
// OP_NOT_F	16655	0	16656
// OP_IFNOT	16656	3	0
// OP_ADDRESS	28	413	16657
// OP_STOREP_F	2677	16657	0
// OP_LOAD_F	28	414	16658
// OP_NOT_F	16658	0	16659
// OP_IFNOT	16659	3	0
// OP_ADDRESS	28	414	16660
// OP_STOREP_F	855	16660	0
// OP_LOAD_F	28	207	16661
// OP_EQ_F	16661	817	16662
// OP_IFNOT	16662	3	0
// OP_ADDRESS	28	207	16663
// OP_STOREP_F	821	16663	0
// OP_LOAD_F	28	207	16664
// OP_EQ_F	16664	819	16665
// OP_IFNOT	16665	9	0
// OP_STORE_V	16666	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	16667	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	208	16668
// OP_STOREP_S	16666	16668	0
// OP_ADDRESS	28	209	16669
// OP_STOREP_S	16667	16669	0
// OP_LOAD_F	28	207	16670
// OP_EQ_F	16670	821	16671
// OP_IFNOT	16671	9	0
// OP_STORE_V	16672	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	16673	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	208	16674
// OP_STOREP_S	16672	16674	0
// OP_ADDRESS	28	209	16675
// OP_STOREP_S	16673	16675	0
// OP_ADDRESS	28	409	16676
// OP_LOAD_V	28	117	16679
// OP_STOREP_V	16679	16676	0
// OP_ADDRESS	28	117	16682
// OP_STOREP_V	926	16682	0
// OP_ADDRESS	28	129	16685
// OP_STOREP_S	16686	16685	0
// OP_ADDRESS	28	104	16687
// OP_STOREP_F	247	16687	0
// OP_ADDRESS	28	103	16688
// OP_STOREP_F	238	16688	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	16689
// OP_STORE_V	16689	7	0
// OP_CALL2	462	0	0
// OP_STORE_V	28	4	0
// OP_LOAD_S	28	130	16692
// OP_STORE_V	16692	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	134	16693
// OP_STORE_V	16693	7	0
// OP_LOAD_V	28	138	16696
// OP_STORE_V	16696	10	0
// OP_CALL3	464	0	0
// OP_ADDRESS	28	149	16699
// OP_STOREP_FNC	16547	16699	0
// OP_LOAD_F	28	378	16700
// OP_NOT_F	16700	0	16701
// OP_IFNOT	16701	3	0
// OP_ADDRESS	28	378	16702
// OP_STOREP_F	1885	16702	0
// OP_ADDRESS	28	448	16703
// OP_LOAD_V	28	105	16706
// OP_STOREP_V	16706	16703	0
// OP_ADDRESS	28	452	16709
// OP_LOAD_V	28	105	16712
// OP_STOREP_V	16712	16709	0
// OP_LOAD_F	28	456	16715
// OP_IFNOT	16715	7	0
// OP_ADDRESS	28	455	16716
// OP_LOAD_F	28	108	16717
// OP_LOAD_F	28	456	16718
// OP_SUB_F	16717	16718	16719
// OP_STOREP_F	16719	16716	0
// OP_GOTO	7	0	0
// OP_ADDRESS	28	455	16720
// OP_LOAD_F	28	108	16721
// OP_LOAD_F	28	145	16722
// OP_SUB_F	16721	16722	16723
// OP_ADD_F	16723	843	16724
// OP_STOREP_F	16724	16720	0
// OP_ADDRESS	28	147	16725
// OP_STOREP_FNC	16544	16725	0
// OP_CALL0	16549	0	0
// OP_LOAD_S	28	197	16726
// OP_IFNOT	16726	6	0
// OP_ADDRESS	28	447	16727
// OP_STOREP_F	298	16727	0
// OP_ADDRESS	28	147	16728
// OP_STOREP_FNC	16648	16728	0
// OP_GOTO	7	0	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	452	16729
// OP_STORE_V	16729	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	28	447	16732
// OP_STOREP_F	297	16732	0
// OP_DONE	0	0	0
void () func_plat = 
{
    local entity t;
    
    if(!self.t_length)
    {
        self.t_length = 80.000;
    }
    
    
    if(!self.t_width)
    {
        self.t_width = 10.000;
    }
    
    
    if(self.sounds == 0.000)
    {
        self.sounds = 2.000;
    }
    
    
    if(self.sounds == 1.000)
    {
        precache_sound("plats/plat1.wav");
        precache_sound("plats/plat2.wav");
        self.noise = "plats/plat1.wav";
        self.noise1 = "plats/plat2.wav";
    }
    
    
    if(self.sounds == 2.000)
    {
        precache_sound("plats/medplat1.wav");
        precache_sound("plats/medplat2.wav");
        self.noise = "plats/medplat1.wav";
        self.noise1 = "plats/medplat2.wav";
    }
    
    self.mangle = self.angles;
    self.angles = '0.000 0.000 0.000';
    self.classname = "plat";
    self.solid = SOLID_BSP;
    self.movetype = MOVETYPE_PUSH;
    setorigin(self, self.origin);
    setmodel(self, self.model);
    setsize(self, self.mins, self.maxs);
    self.blocked = plat_crush;
    
    if(!self.speed)
    {
        self.speed = 150.000;
    }
    
    self.pos1 = self.origin;
    self.pos2 = self.origin;
    if(self.height)
    {
        self.pos2_z = self.origin_z - self.height;
    }
    else
    {
        self.pos2_z = (self.origin_z - self.size_z) + 8.000;
    }
    
    self.use = plat_trigger_use;
    plat_spawn_inside_trigger();
    if(self.targetname)
    {
        self.state = STATE_UP;
        self.use = plat_use;
    }
    else
    {
        setorigin(self, self.pos2);
        self.state = STATE_BOTTOM;
    }
    
};

void () train_next;
void () func_train_find;
// train_blocked
// function begins at statement 23611, parm_start=16736
// OP_LOAD_F	28	387	16736
// OP_LT	31	16736	16737
// OP_IFNOT	16737	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	387	16738
// OP_ADD_F	31	1182	16739
// OP_STOREP_F	16739	16738	0
// OP_STORE_V	29	4	0
// OP_STORE_V	28	7	0
// OP_STORE_V	28	10	0
// OP_LOAD_F	28	434	16740
// OP_STORE_V	16740	13	0
// OP_CALL4	534	0	0
// OP_DONE	0	0	0
void () train_blocked = 
{
    
    if(time < self.attack_finished)
    {
        return;
    }
    
    self.attack_finished = time + 0.500;
    T_Damage(other, self, self, self.dmg);
};

// train_use
// function begins at statement 23625, parm_start=16742
// OP_LOAD_FNC	28	148	16742
// OP_NE_FNC	16742	16734	16743
// OP_IFNOT	16743	2	0
// OP_RETURN	0	0	0
// OP_CALL0	16733	0	0
// OP_DONE	0	0	0
void () train_use = 
{
    
    if(self.think != func_train_find)
    {
        return;
    }
    
    train_next();
};

// train_wait
// function begins at statement 23631, parm_start=16745
// OP_LOAD_F	28	427	16745
// OP_IFNOT	16745	14	0
// OP_ADDRESS	28	150	16746
// OP_LOAD_F	28	102	16747
// OP_LOAD_F	28	427	16748
// OP_ADD_F	16747	16748	16749
// OP_STOREP_F	16749	16746	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	208	16750
// OP_STORE_V	16750	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	5	0	0
// OP_ADDRESS	28	150	16751
// OP_LOAD_F	28	102	16752
// OP_ADD_F	16752	2869	16753
// OP_STOREP_F	16753	16751	0
// OP_ADDRESS	28	148	16754
// OP_STOREP_FNC	16733	16754	0
// OP_DONE	0	0	0
void () train_wait = 
{
    if(self.wait)
    {
        self.nextthink = self.ltime + self.wait;
        sound(self, CHAN_VOICE, self.noise, 1.000, ATTN_NORM);
    }
    else
    {
        self.nextthink = self.ltime + 0.100;
    }
    
    self.think = train_next;
};

// train_next
// function begins at statement 23653, parm_start=16755
// OP_STORE_V	30	4	0
// OP_STORE_V	197	7	0
// OP_LOAD_S	28	196	16756
// OP_STORE_V	16756	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	16755	0
// OP_ADDRESS	28	196	16757
// OP_LOAD_S	16755	196	16758
// OP_STOREP_S	16758	16757	0
// OP_LOAD_S	28	196	16759
// OP_NOT_S	16759	0	16760
// OP_IFNOT	16760	3	0
// OP_STORE_V	16761	4	0
// OP_CALL1	470	0	0
// OP_LOAD_F	16755	427	16762
// OP_IFNOT	16762	5	0
// OP_ADDRESS	28	427	16763
// OP_LOAD_F	16755	427	16764
// OP_STOREP_F	16764	16763	0
// OP_GOTO	3	0	0
// OP_ADDRESS	28	427	16765
// OP_STOREP_F	817	16765	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_LOAD_S	28	209	16766
// OP_STORE_V	16766	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_LOAD_V	16755	105	16767
// OP_LOAD_V	28	134	16770
// OP_SUB_V	16767	16770	16773
// OP_STORE_V	16773	4	0
// OP_LOAD_F	28	378	16776
// OP_STORE_V	16776	7	0
// OP_STORE_V	16744	10	0
// OP_CALL3	526	0	0
// OP_DONE	0	0	0
void () train_next = 
{
    local entity targ;
    targ = find(world, targetname, self.target);
    self.target = targ.target;
    
    if(!self.target)
    {
        objerror("train_next: no next target");
    }
    
    if(targ.wait)
    {
        self.wait = targ.wait;
    }
    else
    {
        self.wait = 0.000;
    }
    
    sound(self, CHAN_VOICE, self.noise1, 1.000, ATTN_NORM);
    SUB_CalcMove(targ.origin - self.mins, self.speed, train_wait);
};

// func_train_find
// function begins at statement 23691, parm_start=16777
// OP_STORE_V	30	4	0
// OP_STORE_V	197	7	0
// OP_LOAD_S	28	196	16778
// OP_STORE_V	16778	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	16777	0
// OP_ADDRESS	28	196	16779
// OP_LOAD_S	16777	196	16780
// OP_STOREP_S	16780	16779	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	16777	105	16781
// OP_LOAD_V	28	134	16784
// OP_SUB_V	16781	16784	16787
// OP_STORE_V	16787	7	0
// OP_CALL2	462	0	0
// OP_LOAD_S	28	197	16790
// OP_NOT_S	16790	0	16791
// OP_IFNOT	16791	7	0
// OP_ADDRESS	28	150	16792
// OP_LOAD_F	28	102	16793
// OP_ADD_F	16793	2869	16794
// OP_STOREP_F	16794	16792	0
// OP_ADDRESS	28	148	16795
// OP_STOREP_FNC	16733	16795	0
// OP_DONE	0	0	0
void () func_train_find = 
{
    local entity targ;
    targ = find(world, targetname, self.target);
    self.target = targ.target;
    setorigin(self, targ.origin - self.mins);
    
    if(!self.targetname)
    {
        self.nextthink = self.ltime + 0.100;
        self.think = train_next;
    }
    
};

// func_train
// function begins at statement 23716, parm_start=16797
// OP_LOAD_F	28	378	16797
// OP_NOT_F	16797	0	16798
// OP_IFNOT	16798	3	0
// OP_ADDRESS	28	378	16799
// OP_STOREP_F	1957	16799	0
// OP_LOAD_S	28	196	16800
// OP_NOT_S	16800	0	16801
// OP_IFNOT	16801	3	0
// OP_STORE_V	16802	4	0
// OP_CALL1	470	0	0
// OP_LOAD_F	28	434	16803
// OP_NOT_F	16803	0	16804
// OP_IFNOT	16804	3	0
// OP_ADDRESS	28	434	16805
// OP_STOREP_F	821	16805	0
// OP_LOAD_F	28	207	16806
// OP_EQ_F	16806	817	16807
// OP_IFNOT	16807	9	0
// OP_ADDRESS	28	208	16808
// OP_STOREP_S	15602	16808	0
// OP_STORE_V	15602	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	209	16809
// OP_STOREP_S	15602	16809	0
// OP_STORE_V	15602	4	0
// OP_CALL1	478	0	0
// OP_LOAD_F	28	207	16810
// OP_EQ_F	16810	819	16811
// OP_IFNOT	16811	9	0
// OP_ADDRESS	28	208	16812
// OP_STOREP_S	16813	16812	0
// OP_STORE_V	16813	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	209	16814
// OP_STOREP_S	16815	16814	0
// OP_STORE_V	16815	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	435	16816
// OP_STOREP_F	819	16816	0
// OP_ADDRESS	28	104	16817
// OP_STOREP_F	247	16817	0
// OP_ADDRESS	28	103	16818
// OP_STOREP_F	238	16818	0
// OP_ADDRESS	28	149	16819
// OP_STOREP_FNC	16735	16819	0
// OP_ADDRESS	28	147	16820
// OP_STOREP_FNC	16741	16820	0
// OP_ADDRESS	28	129	16821
// OP_STOREP_S	16822	16821	0
// OP_STORE_V	28	4	0
// OP_LOAD_S	28	130	16823
// OP_STORE_V	16823	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	134	16824
// OP_STORE_V	16824	7	0
// OP_LOAD_V	28	138	16827
// OP_STORE_V	16827	10	0
// OP_CALL3	464	0	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	16830
// OP_STORE_V	16830	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	28	150	16833
// OP_LOAD_F	28	102	16834
// OP_ADD_F	16834	2869	16835
// OP_STOREP_F	16835	16833	0
// OP_ADDRESS	28	148	16836
// OP_STOREP_FNC	16734	16836	0
// OP_DONE	0	0	0
void () func_train = 
{
    
    if(!self.speed)
    {
        self.speed = 100.000;
    }
    
    
    if(!self.target)
    {
        objerror("func_train without a target");
    }
    
    
    if(!self.dmg)
    {
        self.dmg = 2.000;
    }
    
    
    if(self.sounds == 0.000)
    {
        self.noise = "misc/null.wav";
        precache_sound("misc/null.wav");
        self.noise1 = "misc/null.wav";
        precache_sound("misc/null.wav");
    }
    
    
    if(self.sounds == 1.000)
    {
        self.noise = "plats/train2.wav";
        precache_sound("plats/train2.wav");
        self.noise1 = "plats/train1.wav";
        precache_sound("plats/train1.wav");
    }
    
    self.cnt = 1.000;
    self.solid = SOLID_BSP;
    self.movetype = MOVETYPE_PUSH;
    self.blocked = train_blocked;
    self.use = train_use;
    self.classname = "train";
    setmodel(self, self.model);
    setsize(self, self.mins, self.maxs);
    setorigin(self, self.origin);
    self.nextthink = self.ltime + 0.100;
    self.think = func_train_find;
};

// misc_teleporttrain
// function begins at statement 23786, parm_start=16838
// OP_LOAD_F	28	378	16838
// OP_NOT_F	16838	0	16839
// OP_IFNOT	16839	3	0
// OP_ADDRESS	28	378	16840
// OP_STOREP_F	1957	16840	0
// OP_LOAD_S	28	196	16841
// OP_NOT_S	16841	0	16842
// OP_IFNOT	16842	3	0
// OP_STORE_V	16802	4	0
// OP_CALL1	470	0	0
// OP_ADDRESS	28	435	16843
// OP_STOREP_F	819	16843	0
// OP_ADDRESS	28	104	16844
// OP_STOREP_F	243	16844	0
// OP_ADDRESS	28	103	16845
// OP_STOREP_F	238	16845	0
// OP_ADDRESS	28	149	16846
// OP_STOREP_FNC	16735	16846	0
// OP_ADDRESS	28	147	16847
// OP_STOREP_FNC	16741	16847	0
// OP_ADDRESS	28	121	16848
// OP_STOREP_V	16851	16848	0
// OP_ADDRESS	28	208	16854
// OP_STOREP_S	15602	16854	0
// OP_STORE_V	15602	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	209	16855
// OP_STOREP_S	15602	16855	0
// OP_STORE_V	15602	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	16856	4	0
// OP_CALL1	522	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	16856	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	134	16857
// OP_STORE_V	16857	7	0
// OP_LOAD_V	28	138	16860
// OP_STORE_V	16860	10	0
// OP_CALL3	464	0	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	16863
// OP_STORE_V	16863	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	28	150	16866
// OP_LOAD_F	28	102	16867
// OP_ADD_F	16867	2869	16868
// OP_STOREP_F	16868	16866	0
// OP_ADDRESS	28	148	16869
// OP_STOREP_FNC	16734	16869	0
// OP_DONE	0	0	0
void () misc_teleporttrain = 
{
    
    if(!self.speed)
    {
        self.speed = 100.000;
    }
    
    
    if(!self.target)
    {
        objerror("func_train without a target");
    }
    
    self.cnt = 1.000;
    self.solid = SOLID_NOT;
    self.movetype = MOVETYPE_PUSH;
    self.blocked = train_blocked;
    self.use = train_use;
    self.avelocity = '100.000 200.000 300.000';
    self.noise = "misc/null.wav";
    precache_sound("misc/null.wav");
    self.noise1 = "misc/null.wav";
    precache_sound("misc/null.wav");
    precache_model2("progs/teleport.mdl");
    setmodel(self, "progs/teleport.mdl");
    setsize(self, self.mins, self.maxs);
    setorigin(self, self.origin);
    self.nextthink = self.ltime + 0.100;
    self.think = func_train_find;
};

float LIGHTNING_ON = 1.000;
// lightning_think
// function begins at statement 23838, parm_start=16872
// OP_LOAD_F	28	182	16876
// OP_BITAND	16876	16870	16877
// OP_NOT_F	16877	0	16878
// OP_IFNOT	16878	64	0
// OP_LOAD_V	28	117	16879
// OP_STORE_V	16879	4	0
// OP_CALL1	461	0	0
// OP_LOAD_V	28	105	16882
// OP_STORE_V	16882	4	0
// OP_LOAD_V	28	105	16885
// OP_MUL_VF	59	2127	16888
// OP_ADD_V	16885	16888	16891
// OP_STORE_V	16891	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_LOAD_V	28	105	16894
// OP_STORE_V	16894	16872	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	12083	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	315	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	328	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	28	7	0
// OP_CALL2	514	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	16872	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	16873	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	16874	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	71	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	72	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	73	7	0
// OP_CALL2	511	0	0
// OP_STORE_ENT	28	16875	0
// OP_LOAD_ENT	28	201	16897
// OP_STORE_ENT	16897	28	0
// OP_LOAD_F	28	369	16898
// OP_STORE_V	16898	4	0
// OP_STORE_V	16899	7	0
// OP_CALL2	493	0	0
// OP_STORE_ENT	16875	28	0
// OP_ADDRESS	28	182	16900
// OP_LOAD_F	28	182	16901
// OP_BITOR	16901	16870	16902
// OP_STOREP_F	16902	16900	0
// OP_ADDRESS	28	150	16903
// OP_ADD_F	31	2575	16904
// OP_STOREP_F	16904	16903	0
// OP_GOTO	19	0	0
// OP_STORE_ENT	28	16875	0
// OP_LOAD_ENT	28	201	16905
// OP_STORE_ENT	16905	28	0
// OP_LOAD_F	28	369	16906
// OP_STORE_V	16906	4	0
// OP_STORE_V	4054	7	0
// OP_CALL2	493	0	0
// OP_STORE_ENT	16875	28	0
// OP_ADDRESS	28	182	16907
// OP_LOAD_F	28	182	16908
// OP_SUB_F	16908	16870	16909
// OP_STOREP_F	16909	16907	0
// OP_ADDRESS	28	150	16910
// OP_ADD_F	31	1182	16911
// OP_CALL0	466	0	0
// OP_MUL_F	1	819	16912
// OP_ADD_F	16911	16912	16913
// OP_STOREP_F	16913	16910	0
// OP_DONE	0	0	0
void () lightning_think = 
{
    local vector org;
    local entity oself;
    if(!(self.flags & LIGHTNING_ON))
    {
        makevectors(self.angles);
        traceline(self.origin, self.origin + (v_forward * 600.000), TRUE, self);
        org = self.origin;
        sound(self, CHAN_AUTO, "weapons/lhit.wav", 1.000, ATTN_NORM);
        WriteByte(MSG_BROADCAST, SVC_TEMPENTITY);
        WriteByte(MSG_BROADCAST, TE_LIGHTNING2);
        WriteEntity(MSG_BROADCAST, self);
        WriteCoord(MSG_BROADCAST, org_x);
        WriteCoord(MSG_BROADCAST, 0.000);
        WriteCoord(MSG_BROADCAST, 0.000);
        WriteCoord(MSG_BROADCAST, trace_endpos_x);
        WriteCoord(MSG_BROADCAST, 0.000);
        WriteCoord(MSG_BROADCAST, 0.000);
        oself = self;
        self = self.owner;
        lightstyle(self.style, "z");
        self = oself;
        self.flags = self.flags | LIGHTNING_ON;
        self.nextthink = time + 0.300;
    }
    else
    {
        oself = self;
        self = self.owner;
        lightstyle(self.style, "a");
        self = oself;
        self.flags = self.flags - LIGHTNING_ON;
        self.nextthink = (time + 0.500) + (random() * 1.000);
    }
    
};

// rally_lightning
// function begins at statement 23924, parm_start=16915
// OP_ADDRESS	28	148	16915
// OP_STOREP_FNC	16871	16915	0
// OP_ADDRESS	28	150	16916
// OP_ADD_F	31	819	16917
// OP_CALL0	466	0	0
// OP_MUL_F	1	821	16918
// OP_ADD_F	16917	16918	16919
// OP_STOREP_F	16919	16916	0
// OP_DONE	0	0	0
void () rally_lightning = 
{
    self.think = lightning_think;
    self.nextthink = (time + 1.000) + (random() * 2.000);
};

// info_null
// function begins at statement 23933, parm_start=16921
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_DONE	0	0	0
void () info_null = 
{
    remove(self);
};

// info_notnull
// function begins at statement 23936, parm_start=16922
// OP_DONE	0	0	0
void () info_notnull = 
{
};

float START_OFF = 1.000;
// light_use
// function begins at statement 23937, parm_start=16924
// OP_LOAD_F	28	195	16924
// OP_BITAND	16924	16922	16925
// OP_IFNOT	16925	10	0
// OP_LOAD_F	28	369	16926
// OP_STORE_V	16926	4	0
// OP_STORE_V	3958	7	0
// OP_CALL2	493	0	0
// OP_ADDRESS	28	195	16927
// OP_LOAD_F	28	195	16928
// OP_SUB_F	16928	16922	16929
// OP_STOREP_F	16929	16927	0
// OP_GOTO	9	0	0
// OP_LOAD_F	28	369	16930
// OP_STORE_V	16930	4	0
// OP_STORE_V	4054	7	0
// OP_CALL2	493	0	0
// OP_ADDRESS	28	195	16931
// OP_LOAD_F	28	195	16932
// OP_ADD_F	16932	16922	16933
// OP_STOREP_F	16933	16931	0
// OP_DONE	0	0	0
void () light_use = 
{
    if(self.spawnflags & START_OFF)
    {
        lightstyle(self.style, "m");
        self.spawnflags = self.spawnflags - START_OFF;
    }
    else
    {
        lightstyle(self.style, "a");
        self.spawnflags = self.spawnflags + START_OFF;
    }
    
};

// light
// function begins at statement 23958, parm_start=16935
// OP_LOAD_S	28	197	16935
// OP_NOT_S	16935	0	16936
// OP_IFNOT	16936	4	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	369	16937
// OP_GE	16937	2657	16938
// OP_IFNOT	16938	15	0
// OP_ADDRESS	28	147	16939
// OP_STOREP_FNC	16923	16939	0
// OP_LOAD_F	28	195	16940
// OP_BITAND	16940	16922	16941
// OP_IFNOT	16941	6	0
// OP_LOAD_F	28	369	16942
// OP_STORE_V	16942	4	0
// OP_STORE_V	4054	7	0
// OP_CALL2	493	0	0
// OP_GOTO	5	0	0
// OP_LOAD_F	28	369	16943
// OP_STORE_V	16943	4	0
// OP_STORE_V	3958	7	0
// OP_CALL2	493	0	0
// OP_DONE	0	0	0
void () light = 
{
    
    if(!self.targetname)
    {
        remove(self);
        return;
    }
    
    
    if(self.style >= 32.000)
    {
        self.use = light_use;
        if(self.spawnflags & START_OFF)
        {
            lightstyle(self.style, "a");
        }
        else
        {
            lightstyle(self.style, "m");
        }
        
    }
    
};

// light_fluoro
// function begins at statement 23982, parm_start=16945
// OP_LOAD_F	28	369	16945
// OP_GE	16945	2657	16946
// OP_IFNOT	16946	15	0
// OP_ADDRESS	28	147	16947
// OP_STOREP_FNC	16923	16947	0
// OP_LOAD_F	28	195	16948
// OP_BITAND	16948	16922	16949
// OP_IFNOT	16949	6	0
// OP_LOAD_F	28	369	16950
// OP_STORE_V	16950	4	0
// OP_STORE_V	4054	7	0
// OP_CALL2	493	0	0
// OP_GOTO	5	0	0
// OP_LOAD_F	28	369	16951
// OP_STORE_V	16951	4	0
// OP_STORE_V	3958	7	0
// OP_CALL2	493	0	0
// OP_DONE	0	0	0
void () light_fluoro = 
{
    
    if(self.style >= 32.000)
    {
        self.use = light_use;
        if(self.spawnflags & START_OFF)
        {
            lightstyle(self.style, "a");
        }
        else
        {
            lightstyle(self.style, "m");
        }
        
    }
    
};

// light_fluorospark
// function begins at statement 24000, parm_start=16953
// OP_LOAD_S	28	197	16954
// OP_EQ_S	16954	16955	16956
// OP_IFNOT	16956	22	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	16953	0
// OP_ADDRESS	16953	129	16957
// OP_STOREP_S	16958	16957	0
// OP_ADDRESS	16953	105	16959
// OP_LOAD_V	28	105	16962
// OP_STOREP_V	16962	16959	0
// OP_ADDRESS	16953	117	16965
// OP_LOAD_V	28	117	16968
// OP_STOREP_V	16968	16965	0
// OP_ADDRESS	16953	201	16971
// OP_STOREP_ENT	28	16971	0
// OP_STORE_ENT	16953	28	0
// OP_CALL0	16914	0	0
// OP_LOAD_ENT	28	201	16972
// OP_STORE_ENT	16972	28	0
// OP_LOAD_F	28	369	16973
// OP_STORE_V	16973	4	0
// OP_STORE_V	4054	7	0
// OP_CALL2	493	0	0
// OP_RETURN	0	0	0
// OP_LOAD_F	28	369	16974
// OP_NOT_F	16974	0	16975
// OP_IFNOT	16975	3	0
// OP_ADDRESS	28	369	16976
// OP_STOREP_F	855	16976	0
// OP_DONE	0	0	0
void () light_fluorospark = 
{
    local entity bolt;
    
    if(self.targetname == "lightning")
    {
        bolt = spawn();
        bolt.classname = "rally_lightning";
        bolt.origin = self.origin;
        bolt.angles = self.angles;
        bolt.owner = self;
        self = bolt;
        rally_lightning();
        self = self.owner;
        lightstyle(self.style, "a");
        return;
    }
    
    
    if(!self.style)
    {
        self.style = 10.000;
    }
    
};

// light_globe
// function begins at statement 24030, parm_start=16978
// OP_STORE_V	16978	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	16978	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	517	0	0
// OP_DONE	0	0	0
void () light_globe = 
{
    precache_model("progs/s_light.spr");
    setmodel(self, "progs/s_light.spr");
    makestatic(self);
};

// FireAmbient
// function begins at statement 24038, parm_start=16980
// OP_STORE_V	16980	4	0
// OP_CALL1	478	0	0
// OP_DONE	0	0	0
void () FireAmbient = 
{
    precache_sound("ambience/fire1.wav");
};

// light_torch_small_walltorch
// function begins at statement 24041, parm_start=16982
// OP_EQ_F	35	855	16982
// OP_IFNOT	16982	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	16983	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	16983	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	517	0	0
// OP_DONE	0	0	0
void () light_torch_small_walltorch = 
{
    
    if(deathmatch == 10.000)
    {
        return;
    }
    
    precache_model("progs/flame.mdl");
    setmodel(self, "progs/flame.mdl");
    makestatic(self);
};

// light_flame_large_yellow
// function begins at statement 24052, parm_start=16985
// OP_EQ_F	35	855	16985
// OP_IFNOT	16985	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	16986	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	16986	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	131	16987
// OP_STOREP_F	819	16987	0
// OP_STORE_V	28	4	0
// OP_CALL1	517	0	0
// OP_DONE	0	0	0
void () light_flame_large_yellow = 
{
    
    if(deathmatch == 10.000)
    {
        return;
    }
    
    precache_model("progs/flame2.mdl");
    setmodel(self, "progs/flame2.mdl");
    self.frame = 1.000;
    makestatic(self);
};

// light_flame_small_yellow
// function begins at statement 24065, parm_start=16989
// OP_EQ_F	35	855	16989
// OP_IFNOT	16989	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	16986	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	16986	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	517	0	0
// OP_DONE	0	0	0
void () light_flame_small_yellow = 
{
    
    if(deathmatch == 10.000)
    {
        return;
    }
    
    precache_model("progs/flame2.mdl");
    setmodel(self, "progs/flame2.mdl");
    makestatic(self);
};

// light_flame_small_white
// function begins at statement 24076, parm_start=16991
// OP_EQ_F	35	855	16991
// OP_IFNOT	16991	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	16986	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	16986	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	517	0	0
// OP_DONE	0	0	0
void () light_flame_small_white = 
{
    
    if(deathmatch == 10.000)
    {
        return;
    }
    
    precache_model("progs/flame2.mdl");
    setmodel(self, "progs/flame2.mdl");
    makestatic(self);
};

void () fire_fly;
void () fire_touch;
// misc_fireball
// function begins at statement 24087, parm_start=16995
// OP_STORE_V	12135	4	0
// OP_CALL1	479	0	0
// OP_ADDRESS	28	129	16995
// OP_STOREP_S	13460	16995	0
// OP_ADDRESS	28	150	16996
// OP_CALL0	466	0	0
// OP_MUL_F	1	827	16997
// OP_ADD_F	31	16997	16998
// OP_STOREP_F	16998	16996	0
// OP_ADDRESS	28	148	16999
// OP_STOREP_FNC	16992	16999	0
// OP_LOAD_F	28	378	17000
// OP_NOT_F	17000	0	17001
// OP_IFNOT	17001	3	0
// OP_LOAD_F	28	378	17002
// OP_EQ_F	17002	3337	17003
// OP_DONE	0	0	0
void () misc_fireball = 
{
    precache_model("progs/lavaball.mdl");
    self.classname = "fireball";
    self.nextthink = time + (random() * 5.000);
    self.think = fire_fly;
    
    if(!self.speed)
    {
        self.speed == 1000.000; // DECOMPILATION WARNING: unused anonymous variable, possible == instead of =?
    }
    
};

// fire_fly
// function begins at statement 24104, parm_start=17004
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	17004	0
// OP_ADDRESS	17004	104	17005
// OP_STOREP_F	244	17005	0
// OP_ADDRESS	17004	103	17006
// OP_STOREP_F	237	17006	0
// OP_ADDRESS	17004	113	17007
// OP_STOREP_V	9661	17007	0
// OP_ADDRESS	17004	114	17010
// OP_CALL0	466	0	0
// OP_MUL_F	1	1957	17011
// OP_SUB_F	17011	2611	17012
// OP_STOREP_F	17012	17010	0
// OP_ADDRESS	17004	115	17013
// OP_CALL0	466	0	0
// OP_MUL_F	1	1957	17014
// OP_SUB_F	17014	2611	17015
// OP_STOREP_F	17015	17013	0
// OP_ADDRESS	17004	116	17016
// OP_LOAD_F	28	378	17017
// OP_CALL0	466	0	0
// OP_MUL_F	1	4760	17018
// OP_ADD_F	17017	17018	17019
// OP_STOREP_F	17019	17016	0
// OP_ADDRESS	17004	129	17020
// OP_STOREP_S	13460	17020	0
// OP_STORE_V	17004	4	0
// OP_STORE_V	12135	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	17004	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	926	10	0
// OP_CALL3	464	0	0
// OP_STORE_V	17004	4	0
// OP_LOAD_V	28	105	17021
// OP_STORE_V	17021	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	17004	150	17024
// OP_ADD_F	31	827	17025
// OP_STOREP_F	17025	17024	0
// OP_ADDRESS	17004	148	17026
// OP_STOREP_FNC	533	17026	0
// OP_ADDRESS	17004	146	17027
// OP_STOREP_FNC	16993	17027	0
// OP_ADDRESS	28	150	17028
// OP_CALL0	466	0	0
// OP_MUL_F	1	827	17029
// OP_ADD_F	31	17029	17030
// OP_ADD_F	17030	823	17031
// OP_STOREP_F	17031	17028	0
// OP_ADDRESS	28	148	17032
// OP_STOREP_FNC	16992	17032	0
// OP_DONE	0	0	0
void () fire_fly = 
{
    local entity fireball;
    fireball = spawn();
    fireball.solid = SOLID_TRIGGER;
    fireball.movetype = MOVETYPE_TOSS;
    fireball.velocity = '0.000 0.000 1000.000';
    fireball.velocity_x = (random() * 100.000) - 50.000;
    fireball.velocity_y = (random() * 100.000) - 50.000;
    fireball.velocity_z = self.speed + (random() * 200.000);
    fireball.classname = "fireball";
    setmodel(fireball, "progs/lavaball.mdl");
    setsize(fireball, '0.000 0.000 0.000', '0.000 0.000 0.000');
    setorigin(fireball, self.origin);
    fireball.nextthink = time + 5.000;
    fireball.think = SUB_Remove;
    fireball.touch = fire_touch;
    self.nextthink = (time + (random() * 5.000)) + 3.000;
    self.think = fire_fly;
};

// fire_touch
// function begins at statement 24157, parm_start=17033
// OP_STORE_V	29	4	0
// OP_STORE_V	28	7	0
// OP_STORE_V	28	10	0
// OP_STORE_V	1112	13	0
// OP_CALL4	534	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_DONE	0	0	0
void () fire_touch = 
{
    T_Damage(other, self, self, 20.000);
    remove(self);
};

// barrel_explode
// function begins at statement 24165, parm_start=17034
// OP_ADDRESS	28	163	17034
// OP_STOREP_F	256	17034	0
// OP_ADDRESS	28	129	17035
// OP_STOREP_S	13443	17035	0
// OP_STORE_V	28	4	0
// OP_STORE_V	28	7	0
// OP_STORE_V	11267	10	0
// OP_STORE_V	30	13	0
// OP_CALL4	8274	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	9175	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_LOAD_V	28	105	17036
// OP_STORE_V	17036	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	15157	10	0
// OP_STORE_V	11200	13	0
// OP_CALL4	504	0	0
// OP_ADDRESS	28	108	17039
// OP_LOAD_F	28	108	17040
// OP_ADD_F	17040	2657	17041
// OP_STOREP_F	17041	17039	0
// OP_CALL0	538	0	0
// OP_DONE	0	0	0
void () barrel_explode = 
{
    self.takedamage = DAMAGE_NO;
    self.classname = "explo_box";
    T_RadiusDamage(self, self, 160.000, world);
    sound(self, CHAN_VOICE, "weapons/r_exp3.wav", 1.000, ATTN_NORM);
    particle(self.origin, '0.000 0.000 0.000', 75.000, 255.000);
    self.origin_z = self.origin_z + 32.000;
    BecomeExplosion();
};

// misc_explobox
// function begins at statement 24192, parm_start=17043
// OP_ADDRESS	28	104	17044
// OP_STOREP_F	245	17044	0
// OP_ADDRESS	28	103	17045
// OP_STOREP_F	233	17045	0
// OP_STORE_V	17046	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	17046	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	9175	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	152	17047
// OP_STOREP_F	1112	17047	0
// OP_ADDRESS	28	376	17048
// OP_STOREP_FNC	17033	17048	0
// OP_ADDRESS	28	163	17049
// OP_STOREP_F	258	17049	0
// OP_ADDRESS	28	108	17050
// OP_LOAD_F	28	108	17051
// OP_ADD_F	17051	821	17052
// OP_STOREP_F	17052	17050	0
// OP_LOAD_F	28	108	17053
// OP_STORE_F	17053	17043	0
// OP_CALL0	492	0	0
// OP_LOAD_F	28	108	17054
// OP_SUB_F	17043	17054	17055
// OP_GT	17055	1135	17056
// OP_IFNOT	17056	12	0
// OP_STORE_V	17057	4	0
// OP_CALL1	484	0	0
// OP_LOAD_V	28	105	17058
// OP_STORE_V	17058	4	0
// OP_CALL1	486	0	0
// OP_STORE_V	1	4	0
// OP_CALL1	484	0	0
// OP_STORE_V	888	4	0
// OP_CALL1	484	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_DONE	0	0	0
void () misc_explobox = 
{
    local float oldz;
    self.solid = SOLID_BBOX;
    self.movetype = MOVETYPE_NONE;
    precache_model("maps/b_explob.bsp");
    setmodel(self, "maps/b_explob.bsp");
    precache_sound("weapons/r_exp3.wav");
    self.health = 20.000;
    self.th_die = barrel_explode;
    self.takedamage = DAMAGE_AIM;
    self.origin_z = self.origin_z + 2.000;
    oldz = self.origin_z;
    droptofloor();
    
    if((oldz - self.origin_z) > 250.000)
    {
        dprint("item fell out of level at ");
        dprint(vtos(self.origin));
        dprint("\n");
        remove(self);
    }
    
};

// misc_explobox2
// function begins at statement 24232, parm_start=17062
// OP_ADDRESS	28	104	17063
// OP_STOREP_F	245	17063	0
// OP_ADDRESS	28	103	17064
// OP_STOREP_F	233	17064	0
// OP_STORE_V	17065	4	0
// OP_CALL1	522	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	17065	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	9175	4	0
// OP_CALL1	478	0	0
// OP_ADDRESS	28	152	17066
// OP_STOREP_F	1112	17066	0
// OP_ADDRESS	28	376	17067
// OP_STOREP_FNC	17033	17067	0
// OP_ADDRESS	28	163	17068
// OP_STOREP_F	258	17068	0
// OP_ADDRESS	28	108	17069
// OP_LOAD_F	28	108	17070
// OP_ADD_F	17070	821	17071
// OP_STOREP_F	17071	17069	0
// OP_LOAD_F	28	108	17072
// OP_STORE_F	17072	17062	0
// OP_CALL0	492	0	0
// OP_LOAD_F	28	108	17073
// OP_SUB_F	17062	17073	17074
// OP_GT	17074	1135	17075
// OP_IFNOT	17075	12	0
// OP_STORE_V	17057	4	0
// OP_CALL1	484	0	0
// OP_LOAD_V	28	105	17076
// OP_STORE_V	17076	4	0
// OP_CALL1	486	0	0
// OP_STORE_V	1	4	0
// OP_CALL1	484	0	0
// OP_STORE_V	888	4	0
// OP_CALL1	484	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_DONE	0	0	0
void () misc_explobox2 = 
{
    local float oldz;
    self.solid = SOLID_BBOX;
    self.movetype = MOVETYPE_NONE;
    precache_model2("maps/b_exbox2.bsp");
    setmodel(self, "maps/b_exbox2.bsp");
    precache_sound("weapons/r_exp3.wav");
    self.health = 20.000;
    self.th_die = barrel_explode;
    self.takedamage = DAMAGE_AIM;
    self.origin_z = self.origin_z + 2.000;
    oldz = self.origin_z;
    droptofloor();
    
    if((oldz - self.origin_z) > 250.000)
    {
        dprint("item fell out of level at ");
        dprint(vtos(self.origin));
        dprint("\n");
        remove(self);
    }
    
};

float SPAWNFLAG_SUPERSPIKE = 1.000;
float SPAWNFLAG_LASER = 2.000;
// spikeshooter_use
// function begins at statement 24272, parm_start=17082
// OP_LOAD_F	28	195	17082
// OP_BITAND	17082	17080	17083
// OP_IFNOT	17083	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	10108	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	21	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	9182	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_LOAD_V	28	105	17084
// OP_STORE_V	17084	4	0
// OP_LOAD_V	28	202	17087
// OP_STORE_V	17087	7	0
// OP_CALL2	10137	0	0
// OP_ADDRESS	359	113	17090
// OP_LOAD_V	28	202	17093
// OP_MUL_VF	17093	1820	17096
// OP_STOREP_V	17096	17090	0
// OP_LOAD_F	28	195	17099
// OP_BITAND	17099	17079	17100
// OP_IFNOT	17100	3	0
// OP_ADDRESS	359	146	17101
// OP_STOREP_FNC	10136	17101	0
// OP_DONE	0	0	0
void () spikeshooter_use = 
{
    if(self.spawnflags & SPAWNFLAG_LASER)
    {
        sound(self, CHAN_VOICE, "enforcer/enfire.wav", 1.000, ATTN_NORM);
    }
    else
    {
        sound(self, CHAN_VOICE, "weapons/spike2.wav", 1.000, ATTN_NORM);
        launch_spike(self.origin, self.movedir);
        newmis.velocity = self.movedir * 500.000;
        
        if(self.spawnflags & SPAWNFLAG_SUPERSPIKE)
        {
            newmis.touch = superspike_touch;
        }
        
    }
    
};

// shooter_think
// function begins at statement 24303, parm_start=17103
// OP_CALL0	17081	0	0
// OP_ADDRESS	28	150	17103
// OP_LOAD_F	28	427	17104
// OP_ADD_F	31	17104	17105
// OP_STOREP_F	17105	17103	0
// OP_ADDRESS	359	113	17106
// OP_LOAD_V	28	202	17109
// OP_MUL_VF	17109	1820	17112
// OP_STOREP_V	17112	17106	0
// OP_DONE	0	0	0
void () shooter_think = 
{
    spikeshooter_use();
    self.nextthink = time + self.wait;
    newmis.velocity = self.movedir * 500.000;
};

// trap_spikeshooter
// function begins at statement 24313, parm_start=17116
// OP_CALL0	7371	0	0
// OP_ADDRESS	28	147	17116
// OP_STOREP_FNC	17081	17116	0
// OP_LOAD_F	28	195	17117
// OP_BITAND	17117	17080	17118
// OP_IFNOT	17118	8	0
// OP_STORE_V	10089	4	0
// OP_CALL1	522	0	0
// OP_STORE_V	10108	4	0
// OP_CALL1	523	0	0
// OP_STORE_V	17119	4	0
// OP_CALL1	523	0	0
// OP_GOTO	3	0	0
// OP_STORE_V	9182	4	0
// OP_CALL1	478	0	0
// OP_DONE	0	0	0
void () trap_spikeshooter = 
{
    SetMovedir();
    self.use = spikeshooter_use;
    if(self.spawnflags & SPAWNFLAG_LASER)
    {
        precache_model2("progs/laser.mdl");
        precache_sound2("enforcer/enfire.wav");
        precache_sound2("enforcer/enfstop.wav");
    }
    else
    {
        precache_sound("weapons/spike2.wav");
    }
    
};

// trap_shooter
// function begins at statement 24329, parm_start=17121
// OP_CALL0	17115	0	0
// OP_LOAD_F	28	427	17121
// OP_EQ_F	17121	817	17122
// OP_IFNOT	17122	3	0
// OP_ADDRESS	28	427	17123
// OP_STOREP_F	819	17123	0
// OP_ADDRESS	28	150	17124
// OP_LOAD_F	28	150	17125
// OP_LOAD_F	28	427	17126
// OP_ADD_F	17125	17126	17127
// OP_LOAD_F	28	102	17128
// OP_ADD_F	17127	17128	17129
// OP_STOREP_F	17129	17124	0
// OP_ADDRESS	28	148	17130
// OP_STOREP_FNC	17102	17130	0
// OP_DONE	0	0	0
void () trap_shooter = 
{
    trap_spikeshooter();
    
    if(self.wait == 0.000)
    {
        self.wait = 1.000;
    }
    
    self.nextthink = (self.nextthink + self.wait) + self.ltime;
    self.think = shooter_think;
};

void () make_bubbles;
void () bubble_remove;
// air_bubbles
// function begins at statement 24345, parm_start=17134
// OP_IFNOT	35	4	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_RETURN	0	0	0
// OP_STORE_V	10803	4	0
// OP_CALL1	479	0	0
// OP_ADDRESS	28	150	17134
// OP_ADD_F	31	819	17135
// OP_STOREP_F	17135	17134	0
// OP_ADDRESS	28	148	17136
// OP_STOREP_FNC	17131	17136	0
// OP_DONE	0	0	0
void () air_bubbles = 
{
    
    if(deathmatch)
    {
        remove(self);
        return;
    }
    
    precache_model("progs/s_bubble.spr");
    self.nextthink = time + 1.000;
    self.think = make_bubbles;
};

// make_bubbles
// function begins at statement 24357, parm_start=17137
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	17137	0
// OP_STORE_V	17137	4	0
// OP_STORE_V	10803	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	17137	4	0
// OP_LOAD_V	28	105	17138
// OP_STORE_V	17138	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	17137	103	17141
// OP_STOREP_F	239	17141	0
// OP_ADDRESS	17137	104	17142
// OP_STOREP_F	243	17142	0
// OP_ADDRESS	17137	113	17143
// OP_STOREP_V	14841	17143	0
// OP_ADDRESS	17137	150	17146
// OP_ADD_F	31	1182	17147
// OP_STOREP_F	17147	17146	0
// OP_ADDRESS	17137	148	17148
// OP_STOREP_FNC	14628	17148	0
// OP_ADDRESS	17137	146	17149
// OP_STOREP_FNC	17132	17149	0
// OP_ADDRESS	17137	129	17150
// OP_STOREP_S	14848	17150	0
// OP_ADDRESS	17137	131	17151
// OP_STOREP_F	817	17151	0
// OP_ADDRESS	17137	435	17152
// OP_STOREP_F	817	17152	0
// OP_STORE_V	17137	4	0
// OP_STORE_V	7771	7	0
// OP_STORE_V	7774	10	0
// OP_CALL3	464	0	0
// OP_ADDRESS	28	150	17153
// OP_CALL0	466	0	0
// OP_ADD_F	31	1	17154
// OP_ADD_F	17154	1182	17155
// OP_STOREP_F	17155	17153	0
// OP_ADDRESS	28	148	17156
// OP_STOREP_FNC	17131	17156	0
// OP_DONE	0	0	0
void () make_bubbles = 
{
    local entity bubble;
    bubble = spawn();
    setmodel(bubble, "progs/s_bubble.spr");
    setorigin(bubble, self.origin);
    bubble.movetype = MOVETYPE_NOCLIP;
    bubble.solid = SOLID_NOT;
    bubble.velocity = '0.000 0.000 15.000';
    bubble.nextthink = time + 0.500;
    bubble.think = bubble_bob;
    bubble.touch = bubble_remove;
    bubble.classname = "bubble";
    bubble.frame = 0.000;
    bubble.cnt = 0.000;
    setsize(bubble, '-8.000 -8.000 -8.000', '8.000 8.000 8.000');
    self.nextthink = (time + random()) + 0.500;
    self.think = make_bubbles;
};

// bubble_split
// function begins at statement 24397, parm_start=17158
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	17158	0
// OP_STORE_V	17158	4	0
// OP_STORE_V	10803	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	17158	4	0
// OP_LOAD_V	28	105	17159
// OP_STORE_V	17159	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	17158	103	17162
// OP_STOREP_F	239	17162	0
// OP_ADDRESS	17158	104	17163
// OP_STOREP_F	243	17163	0
// OP_ADDRESS	17158	113	17164
// OP_LOAD_V	28	113	17167
// OP_STOREP_V	17167	17164	0
// OP_ADDRESS	17158	150	17170
// OP_ADD_F	31	1182	17171
// OP_STOREP_F	17171	17170	0
// OP_ADDRESS	17158	148	17172
// OP_STOREP_FNC	14628	17172	0
// OP_ADDRESS	17158	146	17173
// OP_STOREP_FNC	17132	17173	0
// OP_ADDRESS	17158	129	17174
// OP_STOREP_S	14848	17174	0
// OP_ADDRESS	17158	131	17175
// OP_STOREP_F	819	17175	0
// OP_ADDRESS	17158	435	17176
// OP_STOREP_F	855	17176	0
// OP_STORE_V	17158	4	0
// OP_STORE_V	7771	7	0
// OP_STORE_V	7774	10	0
// OP_CALL3	464	0	0
// OP_ADDRESS	28	131	17177
// OP_STOREP_F	819	17177	0
// OP_ADDRESS	28	435	17178
// OP_STOREP_F	855	17178	0
// OP_LOAD_F	28	189	17179
// OP_NE_F	17179	823	17180
// OP_IFNOT	17180	3	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_DONE	0	0	0
void () bubble_split = 
{
    local entity bubble;
    bubble = spawn();
    setmodel(bubble, "progs/s_bubble.spr");
    setorigin(bubble, self.origin);
    bubble.movetype = MOVETYPE_NOCLIP;
    bubble.solid = SOLID_NOT;
    bubble.velocity = self.velocity;
    bubble.nextthink = time + 0.500;
    bubble.think = bubble_bob;
    bubble.touch = bubble_remove;
    bubble.classname = "bubble";
    bubble.frame = 1.000;
    bubble.cnt = 10.000;
    setsize(bubble, '-8.000 -8.000 -8.000', '8.000 8.000 8.000');
    self.frame = 1.000;
    self.cnt = 10.000;
    
    if(self.waterlevel != 3.000)
    {
        remove(self);
    }
    
};

// bubble_remove
// function begins at statement 24440, parm_start=17181
// OP_LOAD_S	29	129	17181
// OP_LOAD_S	28	129	17182
// OP_EQ_S	17181	17182	17183
// OP_IFNOT	17183	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_DONE	0	0	0
void () bubble_remove = 
{
    
    if(other.classname == self.classname)
    {
        return;
    }
    
    remove(self);
};

// bubble_bob
// function begins at statement 24448, parm_start=17184
// OP_ADDRESS	28	435	17193
// OP_LOAD_F	28	435	17194
// OP_ADD_F	17194	819	17195
// OP_STOREP_F	17195	17193	0
// OP_LOAD_F	28	435	17196
// OP_EQ_F	17196	825	17197
// OP_IFNOT	17197	2	0
// OP_CALL0	17157	0	0
// OP_LOAD_F	28	435	17198
// OP_EQ_F	17198	1112	17199
// OP_IFNOT	17199	3	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_LOAD_F	28	114	17200
// OP_CALL0	466	0	0
// OP_MUL_F	1	1112	17201
// OP_ADD_F	1826	17201	17202
// OP_ADD_F	17200	17202	17203
// OP_STORE_F	17203	17184	0
// OP_LOAD_F	28	115	17204
// OP_CALL0	466	0	0
// OP_MUL_F	1	1112	17205
// OP_ADD_F	1826	17205	17206
// OP_ADD_F	17204	17206	17207
// OP_STORE_F	17207	17185	0
// OP_LOAD_F	28	116	17208
// OP_ADD_F	17208	855	17209
// OP_CALL0	466	0	0
// OP_MUL_F	1	855	17210
// OP_ADD_F	17209	17210	17211
// OP_STORE_F	17211	17186	0
// OP_GT	17184	855	17212
// OP_IFNOT	17212	2	0
// OP_STORE_F	827	17184	0
// OP_LT	17184	1826	17213
// OP_IFNOT	17213	2	0
// OP_STORE_F	1483	17184	0
// OP_GT	17185	855	17214
// OP_IFNOT	17214	2	0
// OP_STORE_F	827	17185	0
// OP_LT	17185	1826	17215
// OP_IFNOT	17215	2	0
// OP_STORE_F	1483	17185	0
// OP_LT	17186	855	17216
// OP_IFNOT	17216	2	0
// OP_STORE_F	845	17186	0
// OP_GT	17186	2522	17217
// OP_IFNOT	17217	2	0
// OP_STORE_F	1380	17186	0
// OP_ADDRESS	28	114	17218
// OP_STOREP_F	17184	17218	0
// OP_ADDRESS	28	115	17219
// OP_STOREP_F	17185	17219	0
// OP_ADDRESS	28	116	17220
// OP_STOREP_F	17186	17220	0
// OP_ADDRESS	28	150	17221
// OP_ADD_F	31	1182	17222
// OP_STOREP_F	17222	17221	0
// OP_ADDRESS	28	148	17223
// OP_STOREP_FNC	14628	17223	0
// OP_DONE	0	0	0
void () bubble_bob = 
{
    local float rnd1;
    local float rnd2;
    local float rnd3;
    local vector vtmp1;
    local vector modi;
    self.cnt = self.cnt + 1.000;
    
    if(self.cnt == 4.000)
    {
        bubble_split();
    }
    
    
    if(self.cnt == 20.000)
    {
        remove(self);
    }
    
    rnd1 = self.velocity_x + (-10.000 + (random() * 20.000));
    rnd2 = self.velocity_y + (-10.000 + (random() * 20.000));
    rnd3 = (self.velocity_z + 10.000) + (random() * 10.000);
    
    if(rnd1 > 10.000)
    {
        rnd1 = 5.000;
    }
    
    
    if(rnd1 < -10.000)
    {
        rnd1 = -5.000;
    }
    
    
    if(rnd2 > 10.000)
    {
        rnd2 = 5.000;
    }
    
    
    if(rnd2 < -10.000)
    {
        rnd2 = -5.000;
    }
    
    
    if(rnd3 < 10.000)
    {
        rnd3 = 15.000;
    }
    
    
    if(rnd3 > 30.000)
    {
        rnd3 = 25.000;
    }
    
    self.velocity_x = rnd1;
    self.velocity_y = rnd2;
    self.velocity_z = rnd3;
    self.nextthink = time + 0.500;
    self.think = bubble_bob;
};

// viewthing
// function begins at statement 24509, parm_start=17225
// OP_ADDRESS	28	103	17225
// OP_STOREP_F	233	17225	0
// OP_ADDRESS	28	104	17226
// OP_STOREP_F	243	17226	0
// OP_STORE_V	12126	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	12126	7	0
// OP_CALL2	463	0	0
// OP_DONE	0	0	0
void () viewthing = 
{
    self.movetype = MOVETYPE_NONE;
    self.solid = SOLID_NOT;
    precache_model("progs/player.mdl");
    setmodel(self, "progs/player.mdl");
};

// func_wall_use
// function begins at statement 24519, parm_start=17228
// OP_ADDRESS	28	131	17228
// OP_LOAD_F	28	131	17229
// OP_SUB_F	819	17229	17230
// OP_STOREP_F	17230	17228	0
// OP_DONE	0	0	0
void () func_wall_use = 
{
    self.frame = 1.000 - self.frame;
};

// func_wall
// function begins at statement 24524, parm_start=17232
// OP_ADDRESS	28	117	17232
// OP_STOREP_V	926	17232	0
// OP_ADDRESS	28	103	17235
// OP_STOREP_F	238	17235	0
// OP_ADDRESS	28	104	17236
// OP_STOREP_F	247	17236	0
// OP_ADDRESS	28	147	17237
// OP_STOREP_FNC	17227	17237	0
// OP_STORE_V	28	4	0
// OP_LOAD_S	28	130	17238
// OP_STORE_V	17238	7	0
// OP_CALL2	463	0	0
// OP_DONE	0	0	0
void () func_wall = 
{
    self.angles = '0.000 0.000 0.000';
    self.movetype = MOVETYPE_PUSH;
    self.solid = SOLID_BSP;
    self.use = func_wall_use;
    setmodel(self, self.model);
};

// func_illusionary
// function begins at statement 24537, parm_start=17240
// OP_ADDRESS	28	117	17240
// OP_STOREP_V	926	17240	0
// OP_ADDRESS	28	103	17243
// OP_STOREP_F	233	17243	0
// OP_ADDRESS	28	104	17244
// OP_STOREP_F	243	17244	0
// OP_STORE_V	28	4	0
// OP_LOAD_S	28	130	17245
// OP_STORE_V	17245	7	0
// OP_CALL2	463	0	0
// OP_CALL0	517	0	0
// OP_DONE	0	0	0
void () func_illusionary = 
{
    self.angles = '0.000 0.000 0.000';
    self.movetype = MOVETYPE_NONE;
    self.solid = SOLID_NOT;
    setmodel(self, self.model);
    makestatic();
};

// func_episodegate
// function begins at statement 24549, parm_start=17247
// OP_LOAD_F	28	195	17247
// OP_BITAND	38	17247	17248
// OP_NOT_F	17248	0	17249
// OP_IFNOT	17249	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	117	17250
// OP_STOREP_V	926	17250	0
// OP_ADDRESS	28	103	17253
// OP_STOREP_F	238	17253	0
// OP_ADDRESS	28	104	17254
// OP_STOREP_F	247	17254	0
// OP_ADDRESS	28	147	17255
// OP_STOREP_FNC	17227	17255	0
// OP_STORE_V	28	4	0
// OP_LOAD_S	28	130	17256
// OP_STORE_V	17256	7	0
// OP_CALL2	463	0	0
// OP_DONE	0	0	0
void () func_episodegate = 
{
    
    if(!(serverflags & self.spawnflags))
    {
        return;
    }
    
    self.angles = '0.000 0.000 0.000';
    self.movetype = MOVETYPE_PUSH;
    self.solid = SOLID_BSP;
    self.use = func_wall_use;
    setmodel(self, self.model);
};

// func_bossgate
// function begins at statement 24567, parm_start=17258
// OP_BITAND	38	845	17258
// OP_EQ_F	17258	845	17259
// OP_IFNOT	17259	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	117	17260
// OP_STOREP_V	926	17260	0
// OP_ADDRESS	28	103	17263
// OP_STOREP_F	238	17263	0
// OP_ADDRESS	28	104	17264
// OP_STOREP_F	247	17264	0
// OP_ADDRESS	28	147	17265
// OP_STOREP_FNC	17227	17265	0
// OP_STORE_V	28	4	0
// OP_LOAD_S	28	130	17266
// OP_STORE_V	17266	7	0
// OP_CALL2	463	0	0
// OP_DONE	0	0	0
void () func_bossgate = 
{
    
    if((serverflags & 15.000) == 15.000)
    {
        return;
    }
    
    self.angles = '0.000 0.000 0.000';
    self.movetype = MOVETYPE_PUSH;
    self.solid = SOLID_BSP;
    self.use = func_wall_use;
    setmodel(self, self.model);
};

// ambient_suck_wind
// function begins at statement 24584, parm_start=17268
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_RETURN	0	0	0
// OP_STORE_V	17268	4	0
// OP_CALL1	478	0	0
// OP_LOAD_V	28	105	17269
// OP_STORE_V	17269	4	0
// OP_STORE_V	17268	7	0
// OP_STORE_V	819	10	0
// OP_STORE_V	342	13	0
// OP_CALL4	521	0	0
// OP_DONE	0	0	0
void () ambient_suck_wind = 
{
    remove(self);
    return;
    precache_sound("ambience/suck1.wav");
    ambientsound(self.origin, "ambience/suck1.wav", 1.000, ATTN_STATIC);
};

// ambient_drone
// function begins at statement 24596, parm_start=17273
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_RETURN	0	0	0
// OP_STORE_V	17273	4	0
// OP_CALL1	478	0	0
// OP_LOAD_V	28	105	17274
// OP_STORE_V	17274	4	0
// OP_STORE_V	17273	7	0
// OP_STORE_V	1182	10	0
// OP_STORE_V	342	13	0
// OP_CALL4	521	0	0
// OP_DONE	0	0	0
void () ambient_drone = 
{
    remove(self);
    return;
    precache_sound("ambience/drone6.wav");
    ambientsound(self.origin, "ambience/drone6.wav", 0.500, ATTN_STATIC);
};

// ambient_flouro_buzz
// function begins at statement 24608, parm_start=17278
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_RETURN	0	0	0
// OP_STORE_V	17278	4	0
// OP_CALL1	478	0	0
// OP_LOAD_V	28	105	17279
// OP_STORE_V	17279	4	0
// OP_STORE_V	17278	7	0
// OP_STORE_V	819	10	0
// OP_STORE_V	342	13	0
// OP_CALL4	521	0	0
// OP_DONE	0	0	0
void () ambient_flouro_buzz = 
{
    remove(self);
    return;
    precache_sound("ambience/buzz1.wav");
    ambientsound(self.origin, "ambience/buzz1.wav", 1.000, ATTN_STATIC);
};

// ambient_drip
// function begins at statement 24620, parm_start=17283
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_RETURN	0	0	0
// OP_STORE_V	17283	4	0
// OP_CALL1	478	0	0
// OP_LOAD_V	28	105	17284
// OP_STORE_V	17284	4	0
// OP_STORE_V	17283	7	0
// OP_STORE_V	1182	10	0
// OP_STORE_V	342	13	0
// OP_CALL4	521	0	0
// OP_DONE	0	0	0
void () ambient_drip = 
{
    remove(self);
    return;
    precache_sound("ambience/drip1.wav");
    ambientsound(self.origin, "ambience/drip1.wav", 0.500, ATTN_STATIC);
};

// ambient_comp_hum
// function begins at statement 24632, parm_start=17288
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_RETURN	0	0	0
// OP_STORE_V	17288	4	0
// OP_CALL1	478	0	0
// OP_LOAD_V	28	105	17289
// OP_STORE_V	17289	4	0
// OP_STORE_V	17288	7	0
// OP_STORE_V	819	10	0
// OP_STORE_V	342	13	0
// OP_CALL4	521	0	0
// OP_DONE	0	0	0
void () ambient_comp_hum = 
{
    remove(self);
    return;
    precache_sound("ambience/comp1.wav");
    ambientsound(self.origin, "ambience/comp1.wav", 1.000, ATTN_STATIC);
};

// ambient_thunder
// function begins at statement 24644, parm_start=17293
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_RETURN	0	0	0
// OP_STORE_V	17293	4	0
// OP_CALL1	478	0	0
// OP_LOAD_V	28	105	17294
// OP_STORE_V	17294	4	0
// OP_STORE_V	17293	7	0
// OP_STORE_V	1182	10	0
// OP_STORE_V	342	13	0
// OP_CALL4	521	0	0
// OP_DONE	0	0	0
void () ambient_thunder = 
{
    remove(self);
    return;
    precache_sound("ambience/thunder1.wav");
    ambientsound(self.origin, "ambience/thunder1.wav", 0.500, ATTN_STATIC);
};

// ambient_light_buzz
// function begins at statement 24656, parm_start=17298
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_RETURN	0	0	0
// OP_STORE_V	17298	4	0
// OP_CALL1	478	0	0
// OP_LOAD_V	28	105	17299
// OP_STORE_V	17299	4	0
// OP_STORE_V	17298	7	0
// OP_STORE_V	1182	10	0
// OP_STORE_V	342	13	0
// OP_CALL4	521	0	0
// OP_DONE	0	0	0
void () ambient_light_buzz = 
{
    remove(self);
    return;
    precache_sound("ambience/fl_hum1.wav");
    ambientsound(self.origin, "ambience/fl_hum1.wav", 0.500, ATTN_STATIC);
};

// ambient_swamp1
// function begins at statement 24668, parm_start=17303
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_RETURN	0	0	0
// OP_STORE_V	17303	4	0
// OP_CALL1	478	0	0
// OP_LOAD_V	28	105	17304
// OP_STORE_V	17304	4	0
// OP_STORE_V	17303	7	0
// OP_STORE_V	1182	10	0
// OP_STORE_V	342	13	0
// OP_CALL4	521	0	0
// OP_DONE	0	0	0
void () ambient_swamp1 = 
{
    remove(self);
    return;
    precache_sound("ambience/swamp1.wav");
    ambientsound(self.origin, "ambience/swamp1.wav", 0.500, ATTN_STATIC);
};

// ambient_swamp2
// function begins at statement 24680, parm_start=17308
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_RETURN	0	0	0
// OP_STORE_V	17308	4	0
// OP_CALL1	478	0	0
// OP_LOAD_V	28	105	17309
// OP_STORE_V	17309	4	0
// OP_STORE_V	17308	7	0
// OP_STORE_V	1182	10	0
// OP_STORE_V	342	13	0
// OP_CALL4	521	0	0
// OP_DONE	0	0	0
void () ambient_swamp2 = 
{
    remove(self);
    return;
    precache_sound("ambience/swamp2.wav");
    ambientsound(self.origin, "ambience/swamp2.wav", 0.500, ATTN_STATIC);
};

// noise_think
// function begins at statement 24692, parm_start=17313
// OP_ADDRESS	28	150	17313
// OP_ADD_F	31	1182	17314
// OP_STOREP_F	17314	17313	0
// OP_STORE_V	28	4	0
// OP_STORE_V	819	7	0
// OP_STORE_V	10108	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	821	7	0
// OP_STORE_V	17119	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	823	7	0
// OP_STORE_V	7922	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	825	7	0
// OP_STORE_V	7924	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	827	7	0
// OP_STORE_V	7926	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	829	7	0
// OP_STORE_V	7927	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	839	7	0
// OP_STORE_V	17315	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_DONE	0	0	0
void () noise_think = 
{
    self.nextthink = time + 0.500;
    sound(self, 1.000, "enforcer/enfire.wav", 1.000, ATTN_NORM);
    sound(self, 2.000, "enforcer/enfstop.wav", 1.000, ATTN_NORM);
    sound(self, 3.000, "enforcer/sight1.wav", 1.000, ATTN_NORM);
    sound(self, 4.000, "enforcer/sight2.wav", 1.000, ATTN_NORM);
    sound(self, 5.000, "enforcer/sight3.wav", 1.000, ATTN_NORM);
    sound(self, 6.000, "enforcer/sight4.wav", 1.000, ATTN_NORM);
    sound(self, 7.000, "enforcer/pain1.wav", 1.000, ATTN_NORM);
};

// misc_noisemaker
// function begins at statement 24738, parm_start=17317
// OP_STORE_V	10108	4	0
// OP_CALL1	523	0	0
// OP_STORE_V	17119	4	0
// OP_CALL1	523	0	0
// OP_STORE_V	7922	4	0
// OP_CALL1	523	0	0
// OP_STORE_V	7924	4	0
// OP_CALL1	523	0	0
// OP_STORE_V	7926	4	0
// OP_CALL1	523	0	0
// OP_STORE_V	7927	4	0
// OP_CALL1	523	0	0
// OP_STORE_V	17315	4	0
// OP_CALL1	523	0	0
// OP_STORE_V	17317	4	0
// OP_CALL1	523	0	0
// OP_STORE_V	17318	4	0
// OP_CALL1	523	0	0
// OP_STORE_V	17319	4	0
// OP_CALL1	523	0	0
// OP_ADDRESS	28	150	17320
// OP_ADD_F	31	2869	17321
// OP_CALL0	466	0	0
// OP_ADD_F	17321	1	17322
// OP_STOREP_F	17322	17320	0
// OP_ADDRESS	28	148	17323
// OP_STOREP_FNC	17312	17323	0
// OP_DONE	0	0	0
void () misc_noisemaker = 
{
    precache_sound2("enforcer/enfire.wav");
    precache_sound2("enforcer/enfstop.wav");
    precache_sound2("enforcer/sight1.wav");
    precache_sound2("enforcer/sight2.wav");
    precache_sound2("enforcer/sight3.wav");
    precache_sound2("enforcer/sight4.wav");
    precache_sound2("enforcer/pain1.wav");
    precache_sound2("enforcer/pain2.wav");
    precache_sound2("enforcer/death1.wav");
    precache_sound2("enforcer/idle1.wav");
    self.nextthink = (time + 0.100) + random();
    self.think = noise_think;
};

void (vector p) boss_missile;
// boss_face
// function begins at statement 24766, parm_start=17326
// OP_LOAD_ENT	28	181	17326
// OP_LOAD_F	17326	152	17327
// OP_LE	17327	817	17328
// OP_CALL0	466	0	0
// OP_LT	1	9319	17329
// OP_OR	17328	17329	17330
// OP_IFNOT	17330	18	0
// OP_ADDRESS	28	181	17331
// OP_LOAD_ENT	28	181	17332
// OP_STORE_V	17332	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	880	10	0
// OP_CALL3	477	0	0
// OP_STOREP_ENT	1	17331	0
// OP_LOAD_ENT	28	181	17333
// OP_NOT_ENT	17333	0	17334
// OP_IFNOT	17334	8	0
// OP_ADDRESS	28	181	17335
// OP_LOAD_ENT	28	181	17336
// OP_STORE_V	17336	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	880	10	0
// OP_CALL3	477	0	0
// OP_STOREP_ENT	1	17335	0
// OP_CALL0	7590	0	0
// OP_DONE	0	0	0
void () boss_face = 
{
    
    if((self.enemy.health <= 0.000) || (random() < 0.020))
    {
        self.enemy = find(self.enemy, classname, "player");
        
        if(!self.enemy)
        {
            self.enemy = find(self.enemy, classname, "player");
        }
        
    }
    
    ai_face();
};

// boss_rise1
// function begins at statement 24792, parm_start=17338
// OP_STATE	817	17338	0
// OP_STORE_V	28	4	0
// OP_STORE_V	335	7	0
// OP_STORE_V	17339	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	339	16	0
// OP_CALL5	467	0	0
// OP_DONE	0	0	0
void () boss_rise1 = [0.000, boss_rise2]
{
    sound(self, CHAN_WEAPON, "boss1/out1.wav", 1.000, ATTN_NONE);
};

// boss_rise2
// function begins at statement 24800, parm_start=17340
// OP_STATE	819	17340	0
// OP_STORE_V	28	4	0
// OP_STORE_V	337	7	0
// OP_STORE_V	17341	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	339	16	0
// OP_CALL5	467	0	0
// OP_DONE	0	0	0
void () boss_rise2 = [1.000, boss_rise3]
{
    sound(self, CHAN_ITEM, "boss1/sight1.wav", 1.000, ATTN_NONE);
};

// boss_rise3
// function begins at statement 24808, parm_start=17342
// OP_STATE	821	17342	0
// OP_DONE	0	0	0
void () boss_rise3 = [2.000, boss_rise4]
{
};

// boss_rise4
// function begins at statement 24810, parm_start=17343
// OP_STATE	823	17343	0
// OP_DONE	0	0	0
void () boss_rise4 = [3.000, boss_rise5]
{
};

// boss_rise5
// function begins at statement 24812, parm_start=17344
// OP_STATE	825	17344	0
// OP_DONE	0	0	0
void () boss_rise5 = [4.000, boss_rise6]
{
};

// boss_rise6
// function begins at statement 24814, parm_start=17345
// OP_STATE	827	17345	0
// OP_DONE	0	0	0
void () boss_rise6 = [5.000, boss_rise7]
{
};

// boss_rise7
// function begins at statement 24816, parm_start=17346
// OP_STATE	829	17346	0
// OP_DONE	0	0	0
void () boss_rise7 = [6.000, boss_rise8]
{
};

// boss_rise8
// function begins at statement 24818, parm_start=17347
// OP_STATE	839	17347	0
// OP_DONE	0	0	0
void () boss_rise8 = [7.000, boss_rise9]
{
};

// boss_rise9
// function begins at statement 24820, parm_start=17348
// OP_STATE	843	17348	0
// OP_DONE	0	0	0
void () boss_rise9 = [8.000, boss_rise10]
{
};

// boss_rise10
// function begins at statement 24822, parm_start=17349
// OP_STATE	847	17349	0
// OP_DONE	0	0	0
void () boss_rise10 = [9.000, boss_rise11]
{
};

// boss_rise11
// function begins at statement 24824, parm_start=17350
// OP_STATE	855	17350	0
// OP_DONE	0	0	0
void () boss_rise11 = [10.000, boss_rise12]
{
};

// boss_rise12
// function begins at statement 24826, parm_start=17351
// OP_STATE	831	17351	0
// OP_DONE	0	0	0
void () boss_rise12 = [11.000, boss_rise13]
{
};

// boss_rise13
// function begins at statement 24828, parm_start=17352
// OP_STATE	834	17352	0
// OP_DONE	0	0	0
void () boss_rise13 = [12.000, boss_rise14]
{
};

// boss_rise14
// function begins at statement 24830, parm_start=17353
// OP_STATE	837	17353	0
// OP_DONE	0	0	0
void () boss_rise14 = [13.000, boss_rise15]
{
};

// boss_rise15
// function begins at statement 24832, parm_start=17354
// OP_STATE	841	17354	0
// OP_DONE	0	0	0
void () boss_rise15 = [14.000, boss_rise16]
{
};

// boss_rise16
// function begins at statement 24834, parm_start=17355
// OP_STATE	845	17355	0
// OP_DONE	0	0	0
void () boss_rise16 = [15.000, boss_rise17]
{
};

// boss_rise17
// function begins at statement 24836, parm_start=17356
// OP_STATE	2670	17356	0
// OP_DONE	0	0	0
void () boss_rise17 = [16.000, boss_missile1]
{
};

// boss_idle1
// function begins at statement 24838, parm_start=17358
// OP_STATE	4041	17358	0
// OP_DONE	0	0	0
void () boss_idle1 = [17.000, boss_idle2]
{
};

// boss_idle2
// function begins at statement 24840, parm_start=17359
// OP_STATE	3974	17359	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle2 = [18.000, boss_idle3]
{
    boss_face();
};

// boss_idle3
// function begins at statement 24843, parm_start=17360
// OP_STATE	3981	17360	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle3 = [19.000, boss_idle4]
{
    boss_face();
};

// boss_idle4
// function begins at statement 24846, parm_start=17361
// OP_STATE	1112	17361	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle4 = [20.000, boss_idle5]
{
    boss_face();
};

// boss_idle5
// function begins at statement 24849, parm_start=17362
// OP_STATE	10944	17362	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle5 = [21.000, boss_idle6]
{
    boss_face();
};

// boss_idle6
// function begins at statement 24852, parm_start=17363
// OP_STATE	17363	17364	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle6 = [22.000, boss_idle7]
{
    boss_face();
};

// boss_idle7
// function begins at statement 24855, parm_start=17365
// OP_STATE	17365	17366	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle7 = [23.000, boss_idle8]
{
    boss_face();
};

// boss_idle8
// function begins at statement 24858, parm_start=17367
// OP_STATE	13015	17367	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle8 = [24.000, boss_idle9]
{
    boss_face();
};

// boss_idle9
// function begins at statement 24861, parm_start=17368
// OP_STATE	1380	17368	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle9 = [25.000, boss_idle10]
{
    boss_face();
};

// boss_idle10
// function begins at statement 24864, parm_start=17369
// OP_STATE	17369	17370	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle10 = [26.000, boss_idle11]
{
    boss_face();
};

// boss_idle11
// function begins at statement 24867, parm_start=17371
// OP_STATE	17371	17372	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle11 = [27.000, boss_idle12]
{
    boss_face();
};

// boss_idle12
// function begins at statement 24870, parm_start=17373
// OP_STATE	17373	17374	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle12 = [28.000, boss_idle13]
{
    boss_face();
};

// boss_idle13
// function begins at statement 24873, parm_start=17375
// OP_STATE	14808	17375	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle13 = [29.000, boss_idle14]
{
    boss_face();
};

// boss_idle14
// function begins at statement 24876, parm_start=17376
// OP_STATE	2522	17376	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle14 = [30.000, boss_idle15]
{
    boss_face();
};

// boss_idle15
// function begins at statement 24879, parm_start=17377
// OP_STATE	10956	17377	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle15 = [31.000, boss_idle16]
{
    boss_face();
};

// boss_idle16
// function begins at statement 24882, parm_start=17378
// OP_STATE	2657	17378	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle16 = [32.000, boss_idle17]
{
    boss_face();
};

// boss_idle17
// function begins at statement 24885, parm_start=17379
// OP_STATE	14813	17379	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle17 = [33.000, boss_idle18]
{
    boss_face();
};

// boss_idle18
// function begins at statement 24888, parm_start=17380
// OP_STATE	14815	17380	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle18 = [34.000, boss_idle19]
{
    boss_face();
};

// boss_idle19
// function begins at statement 24891, parm_start=17381
// OP_STATE	5499	17381	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle19 = [35.000, boss_idle20]
{
    boss_face();
};

// boss_idle20
// function begins at statement 24894, parm_start=17382
// OP_STATE	5405	17382	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle20 = [36.000, boss_idle21]
{
    boss_face();
};

// boss_idle21
// function begins at statement 24897, parm_start=17383
// OP_STATE	5376	17383	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle21 = [37.000, boss_idle22]
{
    boss_face();
};

// boss_idle22
// function begins at statement 24900, parm_start=17384
// OP_STATE	14803	17384	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle22 = [38.000, boss_idle23]
{
    boss_face();
};

// boss_idle23
// function begins at statement 24903, parm_start=17385
// OP_STATE	14805	17385	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle23 = [39.000, boss_idle24]
{
    boss_face();
};

// boss_idle24
// function begins at statement 24906, parm_start=17386
// OP_STATE	1632	17386	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle24 = [40.000, boss_idle25]
{
    boss_face();
};

// boss_idle25
// function begins at statement 24909, parm_start=17387
// OP_STATE	10987	17387	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle25 = [41.000, boss_idle26]
{
    boss_face();
};

// boss_idle26
// function begins at statement 24912, parm_start=17388
// OP_STATE	10994	17388	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle26 = [42.000, boss_idle27]
{
    boss_face();
};

// boss_idle27
// function begins at statement 24915, parm_start=17389
// OP_STATE	11000	17389	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle27 = [43.000, boss_idle28]
{
    boss_face();
};

// boss_idle28
// function begins at statement 24918, parm_start=17390
// OP_STATE	15203	17390	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle28 = [44.000, boss_idle29]
{
    boss_face();
};

// boss_idle29
// function begins at statement 24921, parm_start=17391
// OP_STATE	2558	17391	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle29 = [45.000, boss_idle30]
{
    boss_face();
};

// boss_idle30
// function begins at statement 24924, parm_start=17392
// OP_STATE	15206	17392	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle30 = [46.000, boss_idle31]
{
    boss_face();
};

// boss_idle31
// function begins at statement 24927, parm_start=17393
// OP_STATE	15208	17357	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_idle31 = [47.000, boss_idle1]
{
    boss_face();
};

// boss_missile1
// function begins at statement 24930, parm_start=17393
// OP_STATE	15127	17393	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_missile1 = [57.000, boss_missile2]
{
    boss_face();
};

// boss_missile2
// function begins at statement 24933, parm_start=17394
// OP_STATE	15129	17394	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_missile2 = [58.000, boss_missile3]
{
    boss_face();
};

// boss_missile3
// function begins at statement 24936, parm_start=17395
// OP_STATE	15131	17395	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_missile3 = [59.000, boss_missile4]
{
    boss_face();
};

// boss_missile4
// function begins at statement 24939, parm_start=17396
// OP_STATE	2228	17396	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_missile4 = [60.000, boss_missile5]
{
    boss_face();
};

// boss_missile5
// function begins at statement 24942, parm_start=17397
// OP_STATE	15133	17397	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_missile5 = [61.000, boss_missile6]
{
    boss_face();
};

// boss_missile6
// function begins at statement 24945, parm_start=17398
// OP_STATE	15135	17398	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_missile6 = [62.000, boss_missile7]
{
    boss_face();
};

// boss_missile7
// function begins at statement 24948, parm_start=17399
// OP_STATE	12183	17399	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_missile7 = [63.000, boss_missile8]
{
    boss_face();
};

// boss_missile8
// function begins at statement 24951, parm_start=17400
// OP_STATE	2223	17400	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_missile8 = [64.000, boss_missile9]
{
    boss_face();
};

// boss_missile9
// function begins at statement 24954, parm_start=17401
// OP_STATE	15139	17401	0
// OP_STORE_V	17402	4	0
// OP_CALL1	17324	0	0
// OP_DONE	0	0	0
void () boss_missile9 = [65.000, boss_missile10]
{
    boss_missile('100.000 100.000 200.000');
};

// boss_missile10
// function begins at statement 24958, parm_start=17405
// OP_STATE	15141	17405	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_missile10 = [66.000, boss_missile11]
{
    boss_face();
};

// boss_missile11
// function begins at statement 24961, parm_start=17406
// OP_STATE	15143	17406	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_missile11 = [67.000, boss_missile12]
{
    boss_face();
};

// boss_missile12
// function begins at statement 24964, parm_start=17407
// OP_STATE	15145	17407	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_missile12 = [68.000, boss_missile13]
{
    boss_face();
};

// boss_missile13
// function begins at statement 24967, parm_start=17408
// OP_STATE	15147	17408	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_missile13 = [69.000, boss_missile14]
{
    boss_face();
};

// boss_missile14
// function begins at statement 24970, parm_start=17409
// OP_STATE	15148	17409	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_missile14 = [70.000, boss_missile15]
{
    boss_face();
};

// boss_missile15
// function begins at statement 24973, parm_start=17410
// OP_STATE	15150	17410	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_missile15 = [71.000, boss_missile16]
{
    boss_face();
};

// boss_missile16
// function begins at statement 24976, parm_start=17411
// OP_STATE	15152	17411	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_missile16 = [72.000, boss_missile17]
{
    boss_face();
};

// boss_missile17
// function begins at statement 24979, parm_start=17412
// OP_STATE	9292	17412	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_missile17 = [73.000, boss_missile18]
{
    boss_face();
};

// boss_missile18
// function begins at statement 24982, parm_start=17413
// OP_STATE	15155	17413	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_missile18 = [74.000, boss_missile19]
{
    boss_face();
};

// boss_missile19
// function begins at statement 24985, parm_start=17414
// OP_STATE	15157	17414	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_missile19 = [75.000, boss_missile20]
{
    boss_face();
};

// boss_missile20
// function begins at statement 24988, parm_start=17415
// OP_STATE	15159	17415	0
// OP_STORE_V	17416	4	0
// OP_CALL1	17324	0	0
// OP_DONE	0	0	0
void () boss_missile20 = [76.000, boss_missile21]
{
    boss_missile('100.000 -100.000 200.000');
};

// boss_missile21
// function begins at statement 24992, parm_start=17419
// OP_STATE	15161	17419	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_missile21 = [77.000, boss_missile22]
{
    boss_face();
};

// boss_missile22
// function begins at statement 24995, parm_start=17420
// OP_STATE	15163	17420	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_missile22 = [78.000, boss_missile23]
{
    boss_face();
};

// boss_missile23
// function begins at statement 24998, parm_start=17421
// OP_STATE	15165	17356	0
// OP_CALL0	17325	0	0
// OP_DONE	0	0	0
void () boss_missile23 = [79.000, boss_missile1]
{
    boss_face();
};

// boss_shocka1
// function begins at statement 25001, parm_start=17422
// OP_STATE	2677	17422	0
// OP_DONE	0	0	0
void () boss_shocka1 = [80.000, boss_shocka2]
{
};

// boss_shocka2
// function begins at statement 25003, parm_start=17423
// OP_STATE	11033	17423	0
// OP_DONE	0	0	0
void () boss_shocka2 = [81.000, boss_shocka3]
{
};

// boss_shocka3
// function begins at statement 25005, parm_start=17424
// OP_STATE	15169	17424	0
// OP_DONE	0	0	0
void () boss_shocka3 = [82.000, boss_shocka4]
{
};

// boss_shocka4
// function begins at statement 25007, parm_start=17425
// OP_STATE	15171	17425	0
// OP_DONE	0	0	0
void () boss_shocka4 = [83.000, boss_shocka5]
{
};

// boss_shocka5
// function begins at statement 25009, parm_start=17426
// OP_STATE	15173	17426	0
// OP_DONE	0	0	0
void () boss_shocka5 = [84.000, boss_shocka6]
{
};

// boss_shocka6
// function begins at statement 25011, parm_start=17427
// OP_STATE	11037	17427	0
// OP_DONE	0	0	0
void () boss_shocka6 = [85.000, boss_shocka7]
{
};

// boss_shocka7
// function begins at statement 25013, parm_start=17428
// OP_STATE	11043	17428	0
// OP_DONE	0	0	0
void () boss_shocka7 = [86.000, boss_shocka8]
{
};

// boss_shocka8
// function begins at statement 25015, parm_start=17429
// OP_STATE	15176	17429	0
// OP_DONE	0	0	0
void () boss_shocka8 = [87.000, boss_shocka9]
{
};

// boss_shocka9
// function begins at statement 25017, parm_start=17430
// OP_STATE	15178	17430	0
// OP_DONE	0	0	0
void () boss_shocka9 = [88.000, boss_shocka10]
{
};

// boss_shocka10
// function begins at statement 25019, parm_start=17431
// OP_STATE	15180	17356	0
// OP_DONE	0	0	0
void () boss_shocka10 = [89.000, boss_missile1]
{
};

// boss_shockb1
// function begins at statement 25021, parm_start=17432
// OP_STATE	7023	17432	0
// OP_DONE	0	0	0
void () boss_shockb1 = [90.000, boss_shockb2]
{
};

// boss_shockb2
// function begins at statement 25023, parm_start=17433
// OP_STATE	11051	17433	0
// OP_DONE	0	0	0
void () boss_shockb2 = [91.000, boss_shockb3]
{
};

// boss_shockb3
// function begins at statement 25025, parm_start=17434
// OP_STATE	11055	17434	0
// OP_DONE	0	0	0
void () boss_shockb3 = [92.000, boss_shockb4]
{
};

// boss_shockb4
// function begins at statement 25027, parm_start=17435
// OP_STATE	11060	17435	0
// OP_DONE	0	0	0
void () boss_shockb4 = [93.000, boss_shockb5]
{
};

// boss_shockb5
// function begins at statement 25029, parm_start=17436
// OP_STATE	15185	17436	0
// OP_DONE	0	0	0
void () boss_shockb5 = [94.000, boss_shockb6]
{
};

// boss_shockb6
// function begins at statement 25031, parm_start=17437
// OP_STATE	15187	17437	0
// OP_DONE	0	0	0
void () boss_shockb6 = [95.000, boss_shockb7]
{
};

// boss_shockb7
// function begins at statement 25033, parm_start=17438
// OP_STATE	7023	17438	0
// OP_DONE	0	0	0
void () boss_shockb7 = [90.000, boss_shockb8]
{
};

// boss_shockb8
// function begins at statement 25035, parm_start=17439
// OP_STATE	11051	17439	0
// OP_DONE	0	0	0
void () boss_shockb8 = [91.000, boss_shockb9]
{
};

// boss_shockb9
// function begins at statement 25037, parm_start=17440
// OP_STATE	11055	17440	0
// OP_DONE	0	0	0
void () boss_shockb9 = [92.000, boss_shockb10]
{
};

// boss_shockb10
// function begins at statement 25039, parm_start=17441
// OP_STATE	11060	17356	0
// OP_DONE	0	0	0
void () boss_shockb10 = [93.000, boss_missile1]
{
};

// boss_shockc1
// function begins at statement 25041, parm_start=17442
// OP_STATE	15189	17442	0
// OP_DONE	0	0	0
void () boss_shockc1 = [96.000, boss_shockc2]
{
};

// boss_shockc2
// function begins at statement 25043, parm_start=17443
// OP_STATE	15191	17443	0
// OP_DONE	0	0	0
void () boss_shockc2 = [97.000, boss_shockc3]
{
};

// boss_shockc3
// function begins at statement 25045, parm_start=17444
// OP_STATE	15193	17444	0
// OP_DONE	0	0	0
void () boss_shockc3 = [98.000, boss_shockc4]
{
};

// boss_shockc4
// function begins at statement 25047, parm_start=17445
// OP_STATE	15195	17445	0
// OP_DONE	0	0	0
void () boss_shockc4 = [99.000, boss_shockc5]
{
};

// boss_shockc5
// function begins at statement 25049, parm_start=17446
// OP_STATE	1957	17446	0
// OP_DONE	0	0	0
void () boss_shockc5 = [100.000, boss_shockc6]
{
};

// boss_shockc6
// function begins at statement 25051, parm_start=17447
// OP_STATE	11067	17447	0
// OP_DONE	0	0	0
void () boss_shockc6 = [101.000, boss_shockc7]
{
};

// boss_shockc7
// function begins at statement 25053, parm_start=17448
// OP_STATE	15199	17448	0
// OP_DONE	0	0	0
void () boss_shockc7 = [102.000, boss_shockc8]
{
};

// boss_shockc8
// function begins at statement 25055, parm_start=17449
// OP_STATE	14698	17449	0
// OP_DONE	0	0	0
void () boss_shockc8 = [103.000, boss_shockc9]
{
};

// boss_shockc9
// function begins at statement 25057, parm_start=17450
// OP_STATE	14710	17450	0
// OP_DONE	0	0	0
void () boss_shockc9 = [104.000, boss_shockc10]
{
};

// boss_shockc10
// function begins at statement 25059, parm_start=17451
// OP_STATE	14721	17451	0
// OP_DONE	0	0	0
void () boss_shockc10 = [105.000, boss_death1]
{
};

// boss_death1
// function begins at statement 25061, parm_start=17452
// OP_STATE	3330	17452	0
// OP_STORE_V	28	4	0
// OP_STORE_V	337	7	0
// OP_STORE_V	17453	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	339	16	0
// OP_CALL5	467	0	0
// OP_DONE	0	0	0
void () boss_death1 = [48.000, boss_death2]
{
    sound(self, CHAN_ITEM, "boss1/death.wav", 1.000, ATTN_NONE);
};

// boss_death2
// function begins at statement 25069, parm_start=17454
// OP_STATE	15211	17454	0
// OP_DONE	0	0	0
void () boss_death2 = [49.000, boss_death3]
{
};

// boss_death3
// function begins at statement 25071, parm_start=17455
// OP_STATE	2611	17455	0
// OP_DONE	0	0	0
void () boss_death3 = [50.000, boss_death4]
{
};

// boss_death4
// function begins at statement 25073, parm_start=17456
// OP_STATE	15118	17456	0
// OP_DONE	0	0	0
void () boss_death4 = [51.000, boss_death5]
{
};

// boss_death5
// function begins at statement 25075, parm_start=17457
// OP_STATE	15120	17457	0
// OP_DONE	0	0	0
void () boss_death5 = [52.000, boss_death6]
{
};

// boss_death6
// function begins at statement 25077, parm_start=17458
// OP_STATE	2779	17458	0
// OP_DONE	0	0	0
void () boss_death6 = [53.000, boss_death7]
{
};

// boss_death7
// function begins at statement 25079, parm_start=17459
// OP_STATE	15123	17459	0
// OP_DONE	0	0	0
void () boss_death7 = [54.000, boss_death8]
{
};

// boss_death8
// function begins at statement 25081, parm_start=17460
// OP_STATE	11012	17460	0
// OP_DONE	0	0	0
void () boss_death8 = [55.000, boss_death9]
{
};

// boss_death9
// function begins at statement 25083, parm_start=17461
// OP_STATE	11018	17461	0
// OP_STORE_V	28	4	0
// OP_STORE_V	337	7	0
// OP_STORE_V	17339	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	339	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	315	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	332	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	351	4	0
// OP_LOAD_F	28	106	17462
// OP_STORE_V	17462	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	351	4	0
// OP_LOAD_F	28	107	17463
// OP_STORE_V	17463	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	351	4	0
// OP_LOAD_F	28	108	17464
// OP_STORE_V	17464	7	0
// OP_CALL2	511	0	0
// OP_DONE	0	0	0
void () boss_death9 = [56.000, boss_death10]
{
    sound(self, CHAN_ITEM, "boss1/out1.wav", 1.000, ATTN_NONE);
    WriteByte(MSG_BROADCAST, SVC_TEMPENTITY);
    WriteByte(MSG_BROADCAST, TE_LAVASPLASH);
    WriteCoord(MSG_BROADCAST, self.origin_x);
    WriteCoord(MSG_BROADCAST, self.origin_y);
    WriteCoord(MSG_BROADCAST, self.origin_z);
};

// boss_death10
// function begins at statement 25109, parm_start=17465
// OP_STATE	11018	17461	0
// OP_ADD_F	42	819	17465
// OP_STORE_F	17465	42	0
// OP_STORE_V	353	4	0
// OP_STORE_V	316	7	0
// OP_CALL2	507	0	0
// OP_STORE_F	819	12321	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	880	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	29	0
// OP_NE_E	29	30	17466
// OP_IFNOT	17466	20	0
// OP_ADDRESS	29	166	17467
// OP_STOREP_V	926	17467	0
// OP_ADDRESS	29	150	17470
// OP_ADD_F	31	1182	17471
// OP_STOREP_F	17471	17470	0
// OP_ADDRESS	29	163	17472
// OP_STOREP_F	256	17472	0
// OP_ADDRESS	29	104	17473
// OP_STOREP_F	243	17473	0
// OP_ADDRESS	29	103	17474
// OP_STOREP_F	233	17474	0
// OP_ADDRESS	29	93	17475
// OP_STOREP_F	817	17475	0
// OP_STORE_V	29	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	880	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	29	0
// OP_GOTO	-20	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	318	7	0
// OP_CALL2	507	0	0
// OP_CALL0	532	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_DONE	0	0	0
void () boss_death10 = [56.000, boss_death10]
{
    killed_monsters = killed_monsters + 1.000;
    WriteByte(MSG_ALL, SVC_KILLEDMONSTER);
    intermission_running = 1.000;
    other = find(world, classname, "player");
    
    while(other != world)
    {
        other.view_ofs = '0.000 0.000 0.000';
        other.nextthink = time + 0.500;
        other.takedamage = DAMAGE_NO;
        other.solid = SOLID_NOT;
        other.movetype = MOVETYPE_NONE;
        other.modelindex = 0.000;
        other = find(other, classname, "player");
    }
    
    WriteByte(MSG_ALL, SVC_INTERMISSION);
    SUB_UseTargets();
    remove(self);
};

// boss_missile
// function begins at statement 25149, parm_start=17476
// OP_LOAD_ENT	28	181	17492
// OP_LOAD_V	17492	105	17493
// OP_LOAD_V	28	105	17496
// OP_SUB_V	17493	17496	17499
// OP_STORE_V	17499	4	0
// OP_CALL1	506	0	0
// OP_STORE_V	1	17479	0
// OP_STORE_V	17479	4	0
// OP_CALL1	461	0	0
// OP_LOAD_V	28	105	17502
// OP_MUL_FV	17476	59	17505
// OP_ADD_V	17502	17505	17508
// OP_MUL_FV	17477	65	17511
// OP_ADD_V	17508	17511	17514
// OP_MUL_FV	17478	1215	17517
// OP_ADD_V	17514	17517	17520
// OP_STORE_V	17520	17482	0
// OP_GT	363	819	17523
// OP_IFNOT	17523	18	0
// OP_LOAD_ENT	28	181	17524
// OP_LOAD_V	17524	105	17525
// OP_SUB_V	17525	17482	17528
// OP_STORE_V	17528	4	0
// OP_CALL1	471	0	0
// OP_DIV_F	1	2299	17531
// OP_STORE_F	17531	17491	0
// OP_LOAD_ENT	28	181	17532
// OP_LOAD_V	17532	113	17533
// OP_STORE_V	17533	17485	0
// OP_STORE_F	817	17487	0
// OP_LOAD_ENT	28	181	17536
// OP_LOAD_V	17536	105	17537
// OP_MUL_FV	17491	17485	17540
// OP_ADD_V	17537	17540	17543
// OP_STORE_V	17543	17488	0
// OP_GOTO	4	0	0
// OP_LOAD_ENT	28	181	17546
// OP_LOAD_V	17546	105	17547
// OP_STORE_V	17547	17488	0
// OP_SUB_V	17488	17482	17550
// OP_STORE_V	17550	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	17485	0
// OP_STORE_V	17482	4	0
// OP_STORE_V	17485	7	0
// OP_CALL2	10137	0	0
// OP_STORE_V	359	4	0
// OP_STORE_V	17553	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	359	133	17554
// OP_STOREP_F	817	17554	0
// OP_ADDRESS	359	121	17555
// OP_STOREP_V	17558	17555	0
// OP_STORE_V	359	4	0
// OP_STORE_V	300	7	0
// OP_STORE_V	300	10	0
// OP_CALL3	464	0	0
// OP_ADDRESS	359	113	17561
// OP_MUL_VF	17485	1820	17564
// OP_STOREP_V	17564	17561	0
// OP_ADDRESS	359	146	17567
// OP_STOREP_FNC	7268	17567	0
// OP_STORE_V	28	4	0
// OP_STORE_V	335	7	0
// OP_STORE_V	17568	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	339	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	359	647	17569
// OP_STOREP_F	31	17569	0
// OP_ADDRESS	359	181	17570
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	880	10	0
// OP_CALL3	477	0	0
// OP_STOREP_ENT	1	17570	0
// OP_ADDRESS	359	148	17571
// OP_STOREP_FNC	7269	17571	0
// OP_ADDRESS	359	150	17572
// OP_ADD_F	31	1988	17573
// OP_STOREP_F	17573	17572	0
// OP_ADDRESS	359	201	17574
// OP_STOREP_ENT	28	17574	0
// OP_LOAD_ENT	28	181	17575
// OP_LOAD_F	17575	152	17576
// OP_LE	17576	817	17577
// OP_LOAD_ENT	28	181	17578
// OP_LOAD_F	17578	682	17579
// OP_EQ_F	17579	817	17580
// OP_AND	17577	17580	17581
// OP_IFNOT	17581	2	0
// OP_CALL0	17357	0	0
// OP_DONE	0	0	0
void (vector p) boss_missile = 
{
    local vector offang;
    local vector org;
    local vector vec;
    local vector d;
    local float t;
    offang = vectoangles(self.enemy.origin - self.origin);
    makevectors(offang);
    org = ((self.origin + (p_x * v_forward)) + (0.000 * v_right)) + (0.000 * '0.000 0.000 1.000');
    if(skill > 1.000)
    {
        t = (vlen(self.enemy.origin - org)) / 300.000;
        vec = self.enemy.velocity;
        vec_z = 0.000;
        d = self.enemy.origin + (t * vec);
    }
    else
    {
        d = self.enemy.origin;
    }
    
    vec = normalize(d - org);
    launch_spike(org, vec);
    setmodel(newmis, "models/lavaball.mdl");
    newmis.effects = 0.000;
    newmis.avelocity = '200.000 100.000 300.000';
    setsize(newmis, VEC_ORIGIN, VEC_ORIGIN);
    newmis.velocity = vec * 500.000;
    newmis.touch = T_MissileTouch;
    sound(self, CHAN_WEAPON, "boss1/throw.wav", 1.000, ATTN_NONE);
    newmis.last_idle = time;
    newmis.enemy = find(world, classname, "player");
    newmis.think = RocketSeek;
    newmis.nextthink = time + 0.050;
    newmis.owner = self;
    
    if((self.enemy.health <= 0.000) && (self.enemy.cult_cars == 0.000))
    {
        boss_idle1();
    }
    
};

// boss_awake
// function begins at statement 25242, parm_start=17583
// OP_ADDRESS	28	104	17583
// OP_STOREP_F	246	17583	0
// OP_ADDRESS	28	103	17584
// OP_STOREP_F	235	17584	0
// OP_ADDRESS	28	163	17585
// OP_STOREP_F	258	17585	0
// OP_STORE_V	28	4	0
// OP_STORE_V	17586	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	17587	7	0
// OP_STORE_V	17590	10	0
// OP_CALL3	464	0	0
// OP_ADDRESS	28	152	17593
// OP_STOREP_F	3337	17593	0
// OP_ADDRESS	28	181	17594
// OP_STOREP_ENT	360	17594	0
// OP_STORE_V	351	4	0
// OP_STORE_V	315	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	351	4	0
// OP_STORE_V	332	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	351	4	0
// OP_LOAD_F	28	106	17595
// OP_STORE_V	17595	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	351	4	0
// OP_LOAD_F	28	107	17596
// OP_STORE_V	17596	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	351	4	0
// OP_LOAD_F	28	108	17597
// OP_STORE_V	17597	7	0
// OP_CALL2	511	0	0
// OP_ADDRESS	28	192	17598
// OP_STOREP_F	1112	17598	0
// OP_CALL0	17337	0	0
// OP_DONE	0	0	0
void () boss_awake = 
{
    self.solid = SOLID_SLIDEBOX;
    self.movetype = MOVETYPE_STEP;
    self.takedamage = DAMAGE_AIM;
    setmodel(self, "progs/boss.mdl");
    setsize(self, '-128.000 -128.000 -24.000', '128.000 128.000 256.000');
    self.health = 1000.000;
    self.enemy = activator;
    WriteByte(MSG_BROADCAST, SVC_TEMPENTITY);
    WriteByte(MSG_BROADCAST, TE_LAVASPLASH);
    WriteCoord(MSG_BROADCAST, self.origin_x);
    WriteCoord(MSG_BROADCAST, self.origin_y);
    WriteCoord(MSG_BROADCAST, self.origin_z);
    self.yaw_speed = 20.000;
    boss_rise1();
};

// monster_boss
// function begins at statement 25281, parm_start=17600
// OP_STORE_V	17586	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	17553	4	0
// OP_CALL1	479	0	0
// OP_STORE_V	9176	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	17339	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	17341	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	12085	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	17568	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	17600	4	0
// OP_CALL1	478	0	0
// OP_STORE_V	17453	4	0
// OP_CALL1	478	0	0
// OP_ADD_F	40	819	17601
// OP_STORE_F	17601	40	0
// OP_ADDRESS	28	376	17602
// OP_STOREP_FNC	17451	17602	0
// OP_ADDRESS	28	147	17603
// OP_STOREP_FNC	17582	17603	0
// OP_DONE	0	0	0
void () monster_boss = 
{
    precache_model("progs/boss.mdl");
    precache_model("models/lavaball.mdl");
    precache_sound("weapons/rocket1i.wav");
    precache_sound("boss1/out1.wav");
    precache_sound("boss1/sight1.wav");
    precache_sound("misc/power.wav");
    precache_sound("boss1/throw.wav");
    precache_sound("boss1/pain.wav");
    precache_sound("boss1/death.wav");
    total_monsters = total_monsters + 1.000;
    self.th_die = boss_death1;
    self.use = boss_awake;
};

entity le1;
entity le2;
float lightning_end;
// lightning_fire
// function begins at statement 25306, parm_start=17608
// OP_GE	31	17606	17614
// OP_IFNOT	17614	6	0
// OP_STORE_ENT	17604	28	0
// OP_CALL0	15324	0	0
// OP_STORE_ENT	17605	28	0
// OP_CALL0	15324	0	0
// OP_RETURN	0	0	0
// OP_LOAD_V	17604	134	17615
// OP_LOAD_V	17604	138	17618
// OP_ADD_V	17615	17618	17621
// OP_MUL_VF	17621	1182	17624
// OP_STORE_V	17624	17608	0
// OP_LOAD_F	17604	97	17627
// OP_SUB_F	17627	2670	17628
// OP_STORE_F	17628	17610	0
// OP_LOAD_V	17605	134	17629
// OP_LOAD_V	17605	138	17632
// OP_ADD_V	17629	17632	17635
// OP_MUL_VF	17635	1182	17638
// OP_STORE_V	17638	17611	0
// OP_LOAD_F	17605	97	17641
// OP_SUB_F	17641	2670	17642
// OP_STORE_F	17642	17613	0
// OP_SUB_V	17611	17608	17643
// OP_STORE_V	17643	4	0
// OP_CALL1	468	0	0
// OP_MUL_VF	1	1957	17646
// OP_SUB_V	17611	17646	17649
// OP_STORE_V	17649	17611	0
// OP_ADDRESS	28	150	17652
// OP_ADD_F	31	2869	17653
// OP_STOREP_F	17653	17652	0
// OP_ADDRESS	28	148	17654
// OP_STOREP_FNC	17607	17654	0
// OP_STORE_V	353	4	0
// OP_STORE_V	315	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	331	7	0
// OP_CALL2	507	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	30	7	0
// OP_CALL2	514	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	17608	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	17609	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	17610	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	17611	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	17612	7	0
// OP_CALL2	511	0	0
// OP_STORE_V	353	4	0
// OP_STORE_V	17613	7	0
// OP_CALL2	511	0	0
// OP_DONE	0	0	0
void () lightning_fire = 
{
    local vector p1;
    local vector p2;
    
    if(time >= lightning_end)
    {
        self = le1;
        door_go_down();
        self = le2;
        door_go_down();
        return;
    }
    
    p1 = (le1.mins + le1.maxs) * 0.500;
    p1_z = le1.absmin_z - 16.000;
    p2 = (le2.mins + le2.maxs) * 0.500;
    p2_z = le2.absmin_z - 16.000;
    p2 = p2 - ((normalize(p2 - p1)) * 100.000);
    self.nextthink = time + 0.100;
    self.think = lightning_fire;
    WriteByte(MSG_ALL, SVC_TEMPENTITY);
    WriteByte(MSG_ALL, TE_LIGHTNING3);
    WriteEntity(MSG_ALL, world);
    WriteCoord(MSG_ALL, p1_x);
    WriteCoord(MSG_ALL, 0.000);
    WriteCoord(MSG_ALL, 0.000);
    WriteCoord(MSG_ALL, p2_x);
    WriteCoord(MSG_ALL, 0.000);
    WriteCoord(MSG_ALL, 0.000);
};

// lightning_use
// function begins at statement 25368, parm_start=17656
// OP_ADD_F	31	819	17656
// OP_GE	17606	17656	17657
// OP_IFNOT	17657	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	30	4	0
// OP_STORE_V	196	7	0
// OP_STORE_V	16955	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	17604	0
// OP_STORE_V	17604	4	0
// OP_STORE_V	196	7	0
// OP_STORE_V	16955	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	17605	0
// OP_NOT_ENT	17604	0	17658
// OP_NOT_ENT	17605	0	17659
// OP_OR	17658	17659	17660
// OP_IFNOT	17660	4	0
// OP_STORE_V	17661	4	0
// OP_CALL1	484	0	0
// OP_RETURN	0	0	0
// OP_LOAD_F	17604	447	17662
// OP_NE_F	17662	296	17663
// OP_LOAD_F	17604	447	17664
// OP_NE_F	17664	297	17665
// OP_AND	17663	17665	17666
// OP_LOAD_F	17605	447	17667
// OP_NE_F	17667	296	17668
// OP_LOAD_F	17605	447	17669
// OP_NE_F	17669	297	17670
// OP_AND	17668	17670	17671
// OP_OR	17666	17671	17672
// OP_LOAD_F	17604	447	17673
// OP_LOAD_F	17605	447	17674
// OP_NE_F	17673	17674	17675
// OP_OR	17672	17675	17676
// OP_IFNOT	17676	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	17604	150	17677
// OP_STOREP_F	1228	17677	0
// OP_ADDRESS	17605	150	17678
// OP_STOREP_F	1228	17678	0
// OP_ADD_F	31	819	17679
// OP_STORE_F	17679	17606	0
// OP_STORE_V	28	4	0
// OP_STORE_V	337	7	0
// OP_STORE_V	12085	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	339	16	0
// OP_CALL5	467	0	0
// OP_CALL0	17607	0	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	7228	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	28	0
// OP_NOT_ENT	28	0	17680
// OP_IFNOT	17680	2	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	181	17681
// OP_STOREP_ENT	360	17681	0
// OP_LOAD_F	17604	447	17682
// OP_EQ_F	17682	296	17683
// OP_LOAD_F	28	152	17684
// OP_GT	17684	817	17685
// OP_AND	17683	17685	17686
// OP_IFNOT	17686	25	0
// OP_STORE_V	28	4	0
// OP_STORE_V	337	7	0
// OP_STORE_V	17600	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	339	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	152	17687
// OP_LOAD_F	28	152	17688
// OP_SUB_F	17688	819	17689
// OP_STOREP_F	17689	17687	0
// OP_LOAD_F	28	152	17690
// OP_GE	17690	821	17691
// OP_IFNOT	17691	3	0
// OP_CALL0	17421	0	0
// OP_GOTO	10	0	0
// OP_LOAD_F	28	152	17692
// OP_EQ_F	17692	819	17693
// OP_IFNOT	17693	3	0
// OP_CALL0	17431	0	0
// OP_GOTO	5	0	0
// OP_LOAD_F	28	152	17694
// OP_EQ_F	17694	817	17695
// OP_IFNOT	17695	2	0
// OP_CALL0	17441	0	0
// OP_DONE	0	0	0
void () lightning_use = 
{
    
    if(lightning_end >= (time + 1.000))
    {
        return;
    }
    
    le1 = find(world, target, "lightning");
    le2 = find(le1, target, "lightning");
    
    if(!le1 || !le2)
    {
        dprint("missing lightning targets\n");
        return;
    }
    
    
    if((((le1.state != STATE_TOP) && (le1.state != STATE_BOTTOM)) || ((le2.state != STATE_TOP) && (le2.state != STATE_BOTTOM))) || (le1.state != le2.state))
    {
        return;
    }
    
    le1.nextthink = -1.000;
    le2.nextthink = -1.000;
    lightning_end = time + 1.000;
    sound(self, CHAN_ITEM, "misc/power.wav", 1.000, ATTN_NONE);
    lightning_fire();
    self = find(world, classname, "monster_boss");
    
    if(!self)
    {
        return;
    }
    
    self.enemy = activator;
    
    if((le1.state == STATE_TOP) && (self.health > 0.000))
    {
        sound(self, CHAN_ITEM, "boss1/pain.wav", 1.000, ATTN_NONE);
        self.health = self.health - 1.000;
        if(self.health >= 2.000)
        {
            boss_shocka1();
        }
        else
        {
            if(self.health == 1.000)
            {
                boss_shockb1();
            }
            else
            {
                
                if(self.health == 0.000)
                {
                    boss_shockc1();
                }
                
            }
            
        }
        
    }
    
};

// event_lightning
// function begins at statement 25460, parm_start=17697
// OP_ADDRESS	28	147	17697
// OP_STOREP_FNC	17655	17697	0
// OP_DONE	0	0	0
void () event_lightning = 
{
    self.use = lightning_use;
};

.float last_guide_touch;
.float last_cant_walk;
float unspawned_dudes;
// dude_move
// function begins at statement 25463, parm_start=17702
// OP_LOAD_F	28	177	17702
// OP_STORE_V	17702	4	0
// OP_LOAD_F	28	647	17703
// OP_SUB_F	31	17703	17704
// OP_MUL_F	4664	17704	17705
// OP_STORE_V	17705	7	0
// OP_CALL2	491	0	0
// OP_NOT_F	1	0	17706
// OP_IFNOT	17706	17	0
// OP_ADDRESS	28	177	17707
// OP_LOAD_F	28	177	17708
// OP_CALL0	466	0	0
// OP_GT	1	1182	17709
// OP_MUL_F	17709	821	17710
// OP_SUB_F	17710	819	17711
// OP_MUL_F	17711	17712	17713
// OP_ADD_F	17708	17713	17714
// OP_STOREP_F	17714	17707	0
// OP_ADDRESS	28	177	17715
// OP_LOAD_F	28	177	17716
// OP_STORE_V	17716	4	0
// OP_CALL1	859	0	0
// OP_STOREP_F	1	17715	0
// OP_ADDRESS	28	17699	17717
// OP_STOREP_F	31	17717	0
// OP_ADDRESS	28	647	17718
// OP_STOREP_F	31	17718	0
// OP_DONE	0	0	0
void () dude_move = 
{
    
    if(!(walkmove(self.v_angle_y, 320.000 * (time - self.last_idle))))
    {
        self.v_angle_y = self.v_angle_y + ((((random() > 0.500) * 2.000) - 1.000) * 135.000);
        self.v_angle_y = anglemod(self.v_angle_y);
        self.last_cant_walk = time;
    }
    
    self.last_idle = time;
};

// DudeSpawnIsClose
// function begins at statement 25491, parm_start=17720
// OP_LOAD_V	17720	105	17722
// OP_STORE_V	17722	4	0
// OP_STORE_V	2223	7	0
// OP_CALL2	481	0	0
// OP_STORE_ENT	1	17721	0
// OP_NE_E	17721	30	17725
// OP_IFNOT	17725	8	0
// OP_LOAD_S	17721	129	17726
// OP_EQ_S	17726	11177	17727
// OP_IFNOT	17727	2	0
// OP_RETURN	219	0	0
// OP_LOAD_ENT	17721	164	17728
// OP_STORE_ENT	17728	17721	0
// OP_GOTO	-8	0	0
// OP_RETURN	218	0	0
// OP_DONE	0	0	0
float (entity dude) DudeSpawnIsClose = 
{
    local entity trav;
    trav = findradius(dude.origin, 64.000);
    
    while(trav != world)
    {
        
        if(trav.classname == "rally_spawn_dude")
        {
            return TRUE;
        }
        
        trav = trav.chain;
    }
    
    return FALSE;
};

void (entity targ) dude_fire_rocket;
void () dude_fire_grenade;
// dude_run
// function begins at statement 25507, parm_start=17732
// OP_ADDRESS	28	148	17749
// OP_STOREP_FNC	17731	17749	0
// OP_ADDRESS	28	150	17750
// OP_ADD_F	31	1988	17751
// OP_STOREP_F	17751	17750	0
// OP_CALL0	17701	0	0
// OP_LOAD_F	28	131	17752
// OP_EQ_F	17752	817	17753
// OP_LOAD_F	28	131	17754
// OP_EQ_F	17754	823	17755
// OP_OR	17753	17755	17756
// OP_IFNOT	17756	243	0
// OP_STORE_F	218	17747	0
// OP_STORE_V	28	4	0
// OP_CALL1	17719	0	0
// OP_IFNOT	1	3	0
// OP_CALL0	492	0	0
// OP_STORE_F	219	17747	0
// OP_STORE_F	218	17745	0
// OP_LOAD_F	28	160	17757
// OP_EQ_F	17757	817	17758
// OP_IFNOT	17758	89	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	8590	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	17748	0
// OP_NOT_F	17745	0	17759
// OP_NE_E	17748	30	17760
// OP_AND	17759	17760	17761
// OP_IFNOT	17761	29	0
// OP_LOAD_V	28	105	17762
// OP_ADD_V	17762	1666	17765
// OP_STORE_V	17765	4	0
// OP_LOAD_V	17748	105	17768
// OP_STORE_V	17768	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	30	13	0
// OP_CALL4	475	0	0
// OP_EQ_F	70	819	17771
// OP_IFNOT	17771	13	0
// OP_LOAD_V	17748	105	17772
// OP_LOAD_V	28	105	17775
// OP_SUB_V	17772	17775	17778
// OP_STORE_V	17778	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	17738	0
// OP_ADDRESS	28	191	17781
// OP_STORE_V	17738	4	0
// OP_CALL1	472	0	0
// OP_STOREP_F	1	17781	0
// OP_STORE_F	219	17745	0
// OP_GOTO	6	0	0
// OP_STORE_V	17748	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	8590	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	17748	0
// OP_GOTO	-31	0	0
// OP_NOT_F	17745	0	17782
// OP_LOAD_F	28	17698	17783
// OP_SUB_F	31	1112	17784
// OP_LT	17783	17784	17785
// OP_AND	17782	17785	17786
// OP_LOAD_F	28	17699	17787
// OP_SUB_F	31	827	17788
// OP_LT	17787	17788	17789
// OP_AND	17786	17789	17790
// OP_IFNOT	17790	42	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	17791	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	17748	0
// OP_NOT_F	17745	0	17792
// OP_NE_E	17748	30	17793
// OP_AND	17792	17793	17794
// OP_IFNOT	17794	33	0
// OP_LOAD_V	28	105	17795
// OP_ADD_V	17795	1666	17798
// OP_STORE_V	17798	4	0
// OP_LOAD_V	17748	105	17801
// OP_STORE_V	17801	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	30	13	0
// OP_CALL4	475	0	0
// OP_EQ_F	70	819	17804
// OP_IFNOT	17804	13	0
// OP_LOAD_V	17748	105	17805
// OP_LOAD_V	28	105	17808
// OP_SUB_V	17805	17808	17811
// OP_STORE_V	17811	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	17738	0
// OP_ADDRESS	28	191	17814
// OP_STORE_V	17738	4	0
// OP_CALL1	472	0	0
// OP_STOREP_F	1	17814	0
// OP_STORE_F	219	17745	0
// OP_GOTO	6	0	0
// OP_STORE_V	17748	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	17791	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	17748	0
// OP_EQ_E	17748	30	17815
// OP_IFNOT	17815	3	0
// OP_ADDRESS	28	17699	17816
// OP_STOREP_F	31	17816	0
// OP_GOTO	-35	0	0
// OP_NOT_F	17745	0	17817
// OP_IFNOT	17817	45	0
// OP_LOAD_V	28	175	17818
// OP_STORE_V	17818	17732	0
// OP_STORE_F	817	17741	0
// OP_STORE_F	817	17743	0
// OP_LOAD_F	28	177	17821
// OP_STORE_F	17821	17742	0
// OP_LOAD_V	28	105	17822
// OP_ADD_V	17822	1535	17825
// OP_STORE_V	17825	17735	0
// OP_LT	17741	7023	17828
// OP_IFNOT	17828	32	0
// OP_LOAD_F	28	177	17829
// OP_ADD_F	17829	17741	17830
// OP_STORE_V	17830	4	0
// OP_CALL1	859	0	0
// OP_STORE_F	1	17733	0
// OP_STORE_V	17732	4	0
// OP_CALL1	461	0	0
// OP_STORE_V	17735	4	0
// OP_MUL_VF	59	14094	17831
// OP_ADD_V	17735	17831	17834
// OP_STORE_V	17834	7	0
// OP_STORE_V	219	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	475	0	0
// OP_SUB_V	17735	71	17837
// OP_STORE_V	17837	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	17744	0
// OP_GT	17744	17743	17840
// OP_IFNOT	17840	3	0
// OP_STORE_F	17744	17743	0
// OP_STORE_F	17733	17742	0
// OP_LE	17741	817	17841
// OP_IFNOT	17841	5	0
// OP_MUL_F	1228	17741	17842
// OP_ADD_F	17842	2522	17843
// OP_STORE_F	17843	17741	0
// OP_GOTO	3	0	0
// OP_MUL_F	1228	17741	17844
// OP_STORE_F	17844	17741	0
// OP_GOTO	-32	0	0
// OP_ADDRESS	28	191	17845
// OP_STOREP_F	17742	17845	0
// OP_NOT_F	17747	0	17846
// OP_IFNOT	17846	97	0
// OP_LOAD_F	28	648	17847
// OP_SUB_F	31	1182	17848
// OP_LT	17847	17848	17849
// OP_IFNOT	17849	29	0
// OP_LOAD_V	28	105	17850
// OP_STORE_V	17850	4	0
// OP_STORE_V	4345	7	0
// OP_CALL2	481	0	0
// OP_STORE_ENT	1	17748	0
// OP_LOAD_S	17748	129	17853
// OP_EQ_S	17853	880	17854
// OP_IFNOT	17854	2	0
// OP_CALL0	17730	0	0
// OP_NE_E	17748	30	17855
// OP_LOAD_S	17748	129	17856
// OP_NE_S	17856	880	17857
// OP_AND	17855	17857	17858
// OP_IFNOT	17858	8	0
// OP_LOAD_ENT	17748	164	17859
// OP_STORE_ENT	17859	17748	0
// OP_LOAD_S	17748	129	17860
// OP_EQ_S	17860	880	17861
// OP_IFNOT	17861	2	0
// OP_CALL0	17730	0	0
// OP_GOTO	-11	0	0
// OP_LOAD_S	17748	129	17862
// OP_NE_S	17862	880	17863
// OP_IFNOT	17863	5	0
// OP_CALL0	466	0	0
// OP_LT	1	1988	17864
// OP_IFNOT	17864	2	0
// OP_CALL0	17730	0	0
// OP_LOAD_F	28	160	17865
// OP_GT	17865	817	17866
// OP_IFNOT	17866	21	0
// OP_LOAD_F	28	648	17867
// OP_SUB_F	31	819	17868
// OP_LT	17867	17868	17869
// OP_IFNOT	17869	17	0
// OP_LOAD_V	28	117	17870
// OP_STORE_V	17870	4	0
// OP_CALL1	461	0	0
// OP_LOAD_V	28	105	17873
// OP_STORE_V	17873	4	0
// OP_STORE_V	59	7	0
// OP_STORE_V	5033	10	0
// OP_STORE_V	7023	13	0
// OP_STORE_V	880	16	0
// OP_STORE_V	28	19	0
// OP_CALL6	7210	0	0
// OP_STORE_ENT	1	17748	0
// OP_NE_E	17748	30	17876
// OP_IFNOT	17876	3	0
// OP_STORE_V	17748	4	0
// OP_CALL1	17729	0	0
// OP_LOAD_ENT	28	181	17877
// OP_NE_E	17877	30	17878
// OP_IFNOT	17878	19	0
// OP_LOAD_ENT	28	181	17879
// OP_LOAD_F	17879	152	17880
// OP_LE	17880	817	17881
// OP_LOAD_V	28	105	17882
// OP_LOAD_ENT	28	181	17885
// OP_LOAD_V	17885	105	17886
// OP_SUB_V	17882	17886	17889
// OP_STORE_V	17889	4	0
// OP_CALL1	471	0	0
// OP_GT	1	14094	17892
// OP_OR	17881	17892	17893
// OP_LOAD_F	28	160	17894
// OP_EQ_F	17894	817	17895
// OP_OR	17893	17895	17896
// OP_IFNOT	17896	3	0
// OP_ADDRESS	28	181	17897
// OP_STOREP_ENT	30	17897	0
// OP_GOTO	21	0	0
// OP_LOAD_F	28	160	17898
// OP_GT	17898	817	17899
// OP_IFNOT	17899	18	0
// OP_LOAD_V	28	105	17900
// OP_STORE_V	17900	4	0
// OP_STORE_V	5033	7	0
// OP_CALL2	481	0	0
// OP_STORE_ENT	1	17748	0
// OP_NE_E	17748	30	17903
// OP_IFNOT	17903	11	0
// OP_LOAD_S	17748	129	17904
// OP_EQ_S	17904	880	17905
// OP_IFNOT	17905	5	0
// OP_ADDRESS	28	181	17906
// OP_STOREP_ENT	17748	17906	0
// OP_STORE_ENT	30	17748	0
// OP_GOTO	3	0	0
// OP_LOAD_ENT	17748	164	17907
// OP_STORE_ENT	17907	17748	0
// OP_GOTO	-11	0	0
// OP_ADDRESS	28	177	17908
// OP_LOAD_F	28	177	17909
// OP_STORE_V	17909	4	0
// OP_LOAD_F	28	191	17910
// OP_STORE_V	17910	7	0
// OP_STORE_V	5807	10	0
// OP_CALL3	1453	0	0
// OP_STOREP_F	1	17908	0
// OP_LOAD_ENT	28	181	17911
// OP_NE_E	17911	30	17912
// OP_IFNOT	17912	30	0
// OP_LOAD_ENT	28	181	17913
// OP_LOAD_V	17913	105	17914
// OP_LOAD_ENT	28	181	17917
// OP_LOAD_V	17917	113	17918
// OP_LOAD_ENT	28	181	17921
// OP_LOAD_V	17921	105	17922
// OP_LOAD_V	28	105	17925
// OP_SUB_V	17922	17925	17928
// OP_STORE_V	17928	4	0
// OP_CALL1	471	0	0
// OP_DIV_F	1	17931	17932
// OP_MUL_VF	17918	17932	17933
// OP_ADD_V	17914	17933	17936
// OP_LOAD_V	28	105	17939
// OP_SUB_V	17936	17939	17942
// OP_STORE_V	17942	4	0
// OP_CALL1	468	0	0
// OP_STORE_V	1	17738	0
// OP_STORE_V	17738	4	0
// OP_CALL1	472	0	0
// OP_STORE_F	1	17746	0
// OP_ADDRESS	28	119	17945
// OP_LOAD_F	28	119	17946
// OP_STORE_V	17946	4	0
// OP_STORE_V	17746	7	0
// OP_STORE_V	17947	10	0
// OP_CALL3	1453	0	0
// OP_STOREP_F	1	17945	0
// OP_GOTO	9	0	0
// OP_ADDRESS	28	119	17948
// OP_LOAD_F	28	119	17949
// OP_STORE_V	17949	4	0
// OP_LOAD_F	28	191	17950
// OP_STORE_V	17950	7	0
// OP_STORE_V	5807	10	0
// OP_CALL3	1453	0	0
// OP_STOREP_F	1	17948	0
// OP_ADDRESS	28	131	17951
// OP_LOAD_F	28	131	17952
// OP_ADD_F	17952	819	17953
// OP_STOREP_F	17953	17951	0
// OP_LOAD_F	28	131	17954
// OP_GE	17954	829	17955
// OP_IFNOT	17955	3	0
// OP_ADDRESS	28	131	17956
// OP_STOREP_F	817	17956	0
// OP_DONE	0	0	0
void () dude_run = 
{
    local vector look_angle;
    local vector org;
    local vector vec;
    local float look_heading_change;
    local float ideal_heading;
    local float ideal_dist;
    local float this_dist;
    local float found;
    local float enemy_ideal_yaw;
    local float cant_fire;
    local entity trav;
    self.think = dude_run;
    self.nextthink = time + 0.050;
    dude_move();
    
    if((self.frame == 0.000) || (self.frame == 3.000))
    {
        cant_fire = FALSE;
        
        if(DudeSpawnIsClose(self))
        {
            droptofloor();
            cant_fire = TRUE;
        }
        
        found = FALSE;
        
        if(self.ammo_rockets == 0.000)
        {
            trav = find(world, classname, "weapon_rocketlauncher");
            
            while(!found && (trav != world))
            {
                traceline(self.origin + '0.000 0.000 8.000', trav.origin, TRUE, world);
                if(trace_fraction == 1.000)
                {
                    vec = normalize(trav.origin - self.origin);
                    self.ideal_yaw = vectoyaw(vec);
                    found = TRUE;
                }
                else
                {
                    trav = find(trav, classname, "weapon_rocketlauncher");
                }
                
            }
            
            
            if((!found && (self.last_guide_touch < (time - 20.000))) && (self.last_cant_walk < (time - 5.000)))
            {
                trav = find(world, classname, "rally_dude_guide");
                
                while(!found && (trav != world))
                {
                    traceline(self.origin + '0.000 0.000 8.000', trav.origin, TRUE, world);
                    if(trace_fraction == 1.000)
                    {
                        vec = normalize(trav.origin - self.origin);
                        self.ideal_yaw = vectoyaw(vec);
                        found = TRUE;
                    }
                    else
                    {
                        trav = find(trav, classname, "rally_dude_guide");
                    }
                    
                    
                    if(trav == world)
                    {
                        self.last_cant_walk = time;
                    }
                    
                }
                
            }
            
        }
        
        
        if(!found)
        {
            look_angle = self.v_angle;
            look_heading_change = 0.000;
            ideal_dist = 0.000;
            ideal_heading = self.v_angle_y;
            org = self.origin + '0.000 0.000 16.000';
            
            while(look_heading_change < 90.000)
            {
                look_angle_y = anglemod(self.v_angle_y + look_heading_change);
                makevectors(look_angle);
                traceline(org, org + (v_forward * 512.000), TRUE, self);
                this_dist = vlen(org - trace_endpos);
                
                if(this_dist > ideal_dist)
                {
                    ideal_dist = this_dist;
                    ideal_heading = 0.000;
                }
                
                if(look_heading_change <= 0.000)
                {
                    look_heading_change = (-1.000 * look_heading_change) + 30.000;
                }
                else
                {
                    look_heading_change = -1.000 * look_heading_change;
                }
                
            }
            
            self.ideal_yaw = ideal_heading;
        }
        
        
        if(!cant_fire)
        {
            
            if(self.last_rev < (time - 0.500))
            {
                trav = findradius(self.origin, 384.000);
                
                if(trav.classname == "player")
                {
                    dude_fire_grenade();
                }
                
                
                while((trav != world) && (trav.classname != "player"))
                {
                    trav = trav.chain;
                    
                    if(trav.classname == "player")
                    {
                        dude_fire_grenade();
                    }
                    
                }
                
                
                if(trav.classname != "player")
                {
                    
                    if(random() < 0.050)
                    {
                        dude_fire_grenade();
                    }
                    
                }
                
            }
            
            
            if(self.ammo_rockets > 0.000)
            {
                
                if(self.last_rev < (time - 1.000))
                {
                    makevectors(self.angles);
                    trav = FindSightEnemy(self.origin, v_forward, 900.000, 90.000, "player", self);
                    
                    if(trav != world)
                    {
                        dude_fire_rocket(trav);
                    }
                    
                }
                
            }
            
            if(self.enemy != world)
            {
                
                if(((self.enemy.health <= 0.000) || ((vlen(self.origin - self.enemy.origin)) > 512.000)) || (self.ammo_rockets == 0.000))
                {
                    self.enemy = world;
                }
                
            }
            else
            {
                
                if(self.ammo_rockets > 0.000)
                {
                    trav = findradius(self.origin, 900.000);
                    
                    while(trav != world)
                    {
                        if(trav.classname == "player")
                        {
                            self.enemy = trav;
                            trav = world;
                        }
                        else
                        {
                            trav = trav.chain;
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
    }
    
    self.v_angle_y = MoveToAngle(self.v_angle_y, self.ideal_yaw, 120.000);
    if(self.enemy != world)
    {
        vec = normalize((self.enemy.origin + (self.enemy.velocity * ((vlen(self.enemy.origin - self.origin)) / 720.000))) - self.origin);
        enemy_ideal_yaw = vectoyaw(vec);
        self.angles_y = MoveToAngle(self.angles_y, enemy_ideal_yaw, 999.000);
    }
    else
    {
        self.angles_y = MoveToAngle(self.angles_y, self.ideal_yaw, 120.000);
    }
    
    self.frame = self.frame + 1.000;
    
    if(self.frame >= 6.000)
    {
        self.frame = 0.000;
    }
    
};

// dude_axpain1
// function begins at statement 25819, parm_start=17958
// OP_STATE	3974	17958	0
// OP_CALL0	14752	0	0
// OP_CALL0	17701	0	0
// OP_DONE	0	0	0
void () dude_axpain1 = [18.000, dude_axpain2]
{
    PainSound();
    dude_move();
};

// dude_axpain2
// function begins at statement 25823, parm_start=17959
// OP_STATE	3981	17959	0
// OP_CALL0	17701	0	0
// OP_DONE	0	0	0
void () dude_axpain2 = [19.000, dude_axpain3]
{
    dude_move();
};

// dude_axpain3
// function begins at statement 25826, parm_start=17960
// OP_STATE	1112	17960	0
// OP_CALL0	17701	0	0
// OP_DONE	0	0	0
void () dude_axpain3 = [20.000, dude_axpain4]
{
    dude_move();
};

// dude_axpain4
// function begins at statement 25829, parm_start=17961
// OP_STATE	10944	17961	0
// OP_CALL0	17701	0	0
// OP_DONE	0	0	0
void () dude_axpain4 = [21.000, dude_axpain5]
{
    dude_move();
};

// dude_axpain5
// function begins at statement 25832, parm_start=17962
// OP_STATE	17363	17962	0
// OP_CALL0	17701	0	0
// OP_DONE	0	0	0
void () dude_axpain5 = [22.000, dude_axpain6]
{
    dude_move();
};

// dude_axpain6
// function begins at statement 25835, parm_start=17963
// OP_STATE	17365	17731	0
// OP_CALL0	17701	0	0
// OP_DONE	0	0	0
void () dude_axpain6 = [23.000, dude_run]
{
    dude_move();
};

// dude_pain
// function begins at statement 25838, parm_start=17964
// OP_LOAD_F	28	390	17964
// OP_GT	17964	31	17965
// OP_IFNOT	17965	2	0
// OP_RETURN	0	0	0
// OP_CALL0	17957	0	0
// OP_DONE	0	0	0
void () dude_pain = 
{
    
    if(self.invisible_finished > time)
    {
        return;
    }
    
    dude_axpain1();
};

void () dude_diea1;
void () dude_dieb1;
void () dude_diec1;
void () dude_died1;
void () dude_diee1;
void () dude_die_ax1;
float () spawn_dude;
// DudeDead
// function begins at statement 25844, parm_start=17974
// OP_ADDRESS	28	150	17974
// OP_ADD_F	31	855	17975
// OP_STOREP_F	17975	17974	0
// OP_ADDRESS	28	148	17976
// OP_STOREP_FNC	533	17976	0
// OP_DONE	0	0	0
void () DudeDead = 
{
    self.nextthink = time + 10.000;
    self.think = SUB_Remove;
};

// Awake_Boss
// function begins at statement 25850, parm_start=17977
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	7228	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	17977	0
// OP_NE_E	17977	30	17980
// OP_IFNOT	17980	17	0
// OP_STORE_ENT	28	17978	0
// OP_STORE_ENT	17977	28	0
// OP_CALL0	17582	0	0
// OP_STORE_ENT	17978	28	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	15638	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	17979	0
// OP_NE_E	1	30	17981
// OP_IFNOT	17981	6	0
// OP_STORE_V	17979	4	0
// OP_LOAD_V	17979	105	17982
// OP_SUB_V	17982	17985	17988
// OP_STORE_V	17988	7	0
// OP_CALL2	462	0	0
// OP_DONE	0	0	0
void () Awake_Boss = 
{
    local entity boss;
    local entity oself;
    local entity trav;
    boss = find(world, classname, "monster_boss");
    
    if(boss != world)
    {
        oself = self;
        self = boss;
        boss_awake();
        self = oself;
        trav = find(world, classname, "door");
        
        if(find(world, classname, "door") != world)
        {
            setorigin(trav, trav.origin - '0.000 0.000 1024.000');
        }
        
    }
    
};

// CheckCultKills
// function begins at statement 25874, parm_start=17992
// OP_GT	743	792	17997
// OP_NOT_F	689	0	17998
// OP_OR	17997	17998	17999
// OP_IFNOT	17999	15	0
// OP_STORE_F	817	743	0
// OP_CALL0	466	0	0
// OP_MUL_F	1	827	18000
// OP_STORE_F	18000	17996	0
// OP_LT	17996	819	18001
// OP_IFNOT	18001	4	0
// OP_STORE_V	18002	4	0
// OP_CALL1	482	0	0
// OP_GOTO	5	0	0
// OP_LT	17996	821	18003
// OP_IFNOT	18003	3	0
// OP_STORE_V	18004	4	0
// OP_CALL1	482	0	0
// OP_RETURN	0	0	0
// OP_EQ_F	743	792	18005
// OP_IFNOT	18005	5	0
// OP_STORE_V	18006	4	0
// OP_CALL1	482	0	0
// OP_CALL0	10515	0	0
// OP_RETURN	0	0	0
// OP_SUB_F	792	743	18007
// OP_STORE_V	18007	4	0
// OP_CALL1	485	0	0
// OP_STORE_S	1	17992	0
// OP_STORE_V	18008	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	17992	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	888	4	0
// OP_CALL1	482	0	0
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	880	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	17995	0
// OP_NE_E	17995	30	18009
// OP_IFNOT	18009	9	0
// OP_ADDRESS	17995	153	18010
// OP_STOREP_F	743	18010	0
// OP_STORE_V	17995	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	880	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	17995	0
// OP_GOTO	-9	0	0
// OP_DONE	0	0	0
void () CheckCultKills = 
{
    local string kills_str;
    local entity boss;
    local entity oself;
    local entity trav;
    local float rnd;
    
    if((cult_kills > NUM_DUKES) || !challenge)
    {
        cult_kills = 0.000;
        rnd = random() * 5.000;
        if(rnd < 1.000)
        {
            bprint("Come get some of THIS!\n");
        }
        else
        {
            
            if(rnd < 2.000)
            {
                bprint("Time to kick ass and Gib Dukes!\n");
            }
            
        }
        
        return;
    }
    
    
    if(cult_kills == NUM_DUKES)
    {
        bprint("All Cult members have been TERMINATED!\n");
        Awake_Boss();
        return;
    }
    
    kills_str = ftos(NUM_DUKES - cult_kills);
    bprint("Cult members remaining: ");
    bprint(kills_str);
    bprint("\n");
    trav = find(world, classname, "player");
    
    while(trav != world)
    {
        trav.frags = cult_kills;
        trav = find(trav, classname, "player");
    }
    
};

// replenish_dudes
// function begins at statement 25924, parm_start=18012
// OP_ADD_F	17700	819	18013
// OP_STORE_F	18013	17700	0
// OP_STORE_F	817	18012	0
// OP_GT	17700	817	18014
// OP_NOT_F	18012	0	18015
// OP_AND	18014	18015	18016
// OP_IFNOT	18016	8	0
// OP_CALL0	17972	0	0
// OP_IFNOT	1	4	0
// OP_SUB_F	17700	819	18017
// OP_STORE_F	18017	17700	0
// OP_GOTO	2	0	0
// OP_STORE_F	819	18012	0
// OP_GOTO	-10	0	0
// OP_DONE	0	0	0
void () replenish_dudes = 
{
    local float done;
    unspawned_dudes = unspawned_dudes + 1.000;
    done = 0.000;
    
    while((unspawned_dudes > 0.000) && !done)
    {
        if(spawn_dude())
        {
            unspawned_dudes = unspawned_dudes - 1.000;
        }
        else
        {
            done = 1.000;
        }
        
    }
    
};

// DudeDie
// function begins at statement 25939, parm_start=18019
// OP_ADDRESS	28	162	18020
// OP_LOAD_F	28	162	18021
// OP_LOAD_F	28	162	18022
// OP_BITAND	18022	286	18023
// OP_SUB_F	18021	18023	18024
// OP_STOREP_F	18024	18020	0
// OP_ADDRESS	28	390	18025
// OP_STOREP_F	817	18025	0
// OP_ADDRESS	28	389	18026
// OP_STOREP_F	817	18026	0
// OP_ADDRESS	28	391	18027
// OP_STOREP_F	817	18027	0
// OP_ADDRESS	28	392	18028
// OP_STOREP_F	817	18028	0
// OP_OR	35	36	18029
// OP_GT	738	819	18030
// OP_AND	18029	18030	18031
// OP_IFNOT	18031	2	0
// OP_CALL0	9121	0	0
// OP_ADDRESS	28	652	18032
// OP_STOREP_F	817	18032	0
// OP_ADDRESS	28	653	18033
// OP_STOREP_F	817	18033	0
// OP_ADDRESS	28	166	18034
// OP_STOREP_V	15090	18034	0
// OP_ADDRESS	28	165	18037
// OP_STOREP_F	253	18037	0
// OP_ADDRESS	28	104	18038
// OP_STOREP_F	243	18038	0
// OP_ADDRESS	28	182	18039
// OP_LOAD_F	28	182	18040
// OP_LOAD_F	28	182	18041
// OP_BITAND	18041	228	18042
// OP_SUB_F	18040	18042	18043
// OP_STOREP_F	18043	18039	0
// OP_ADDRESS	28	103	18044
// OP_STOREP_F	237	18044	0
// OP_LOAD_F	28	116	18045
// OP_LT	18045	855	18046
// OP_IFNOT	18046	7	0
// OP_ADDRESS	28	116	18047
// OP_LOAD_F	28	116	18048
// OP_CALL0	466	0	0
// OP_MUL_F	1	2299	18049
// OP_ADD_F	18048	18049	18050
// OP_STOREP_F	18050	18047	0
// OP_EQ_F	738	825	18051
// OP_IFNOT	18051	4	0
// OP_ADD_F	743	819	18052
// OP_STORE_F	18052	743	0
// OP_CALL0	17991	0	0
// OP_LOAD_F	28	152	18053
// OP_LT	18053	4504	18054
// OP_IFNOT	18054	4	0
// OP_CALL0	15041	0	0
// OP_CALL0	18011	0	0
// OP_RETURN	0	0	0
// OP_CALL0	14873	0	0
// OP_ADDRESS	28	118	18055
// OP_STOREP_F	817	18055	0
// OP_ADDRESS	28	120	18056
// OP_STOREP_F	817	18056	0
// OP_STORE_V	18057	4	0
// OP_CALL1	501	0	0
// OP_STORE_F	1	18019	0
// OP_NOT_F	18019	0	18058
// OP_IFNOT	18058	7	0
// OP_CALL0	466	0	0
// OP_MUL_F	1	839	18059
// OP_STORE_V	18059	4	0
// OP_CALL1	495	0	0
// OP_ADD_F	819	1	18060
// OP_STORE_F	18060	18019	0
// OP_EQ_F	18019	819	18061
// OP_IFNOT	18061	3	0
// OP_CALL0	17966	0	0
// OP_GOTO	18	0	0
// OP_EQ_F	18019	821	18062
// OP_IFNOT	18062	3	0
// OP_CALL0	17967	0	0
// OP_GOTO	14	0	0
// OP_EQ_F	18019	823	18063
// OP_IFNOT	18063	3	0
// OP_CALL0	17968	0	0
// OP_GOTO	10	0	0
// OP_EQ_F	18019	825	18064
// OP_IFNOT	18064	3	0
// OP_CALL0	17969	0	0
// OP_GOTO	6	0	0
// OP_EQ_F	18019	827	18065
// OP_IFNOT	18065	3	0
// OP_CALL0	17970	0	0
// OP_GOTO	2	0	0
// OP_CALL0	17971	0	0
// OP_CALL0	18011	0	0
// OP_DONE	0	0	0
void () DudeDie = 
{
    local float i;
    self.items = self.items - (self.items & IT_INVISIBILITY);
    self.invisible_finished = 0.000;
    self.invincible_finished = 0.000;
    self.super_damage_finished = 0.000;
    self.radsuit_finished = 0.000;
    
    if((deathmatch || coop) && (rally_type_index > 1.000))
    {
        DropBackpack();
    }
    
    self.last_engine1 = 0.000;
    self.last_engine2 = 0.000;
    self.view_ofs = '0.000 0.000 -8.000';
    self.deadflag = DEAD_DYING;
    self.solid = SOLID_NOT;
    self.flags = self.flags - (self.flags & FL_ONGROUND);
    self.movetype = MOVETYPE_TOSS;
    
    if(self.velocity_z < 10.000)
    {
        self.velocity_z = self.velocity_z + (random() * 300.000);
    }
    
    
    if(rally_type_index == 4.000)
    {
        cult_kills = cult_kills + 1.000;
        CheckCultKills();
    }
    
    
    if(self.health < -40.000)
    {
        GibPlayer();
        replenish_dudes();
        return;
    }
    
    DeathSound();
    self.angles_x = 0.000;
    self.angles_z = 0.000;
    i = cvar("temp1");
    
    if(!i)
    {
        i = 1.000 + (floor(random() * 7.000));
    }
    
    if(i == 1.000)
    {
        dude_diea1();
    }
    else
    {
        if(i == 2.000)
        {
            dude_dieb1();
        }
        else
        {
            if(i == 3.000)
            {
                dude_diec1();
            }
            else
            {
                if(i == 4.000)
                {
                    dude_died1();
                }
                else
                {
                    if(i == 5.000)
                    {
                        dude_diee1();
                    }
                    else
                    {
                        dude_die_ax1();
                    }
                    
                }
                
            }
            
        }
        
    }
    
    replenish_dudes();
};

// dude_diea1
// function begins at statement 26035, parm_start=18066
// OP_STATE	14813	18066	0
// OP_DONE	0	0	0
void () dude_diea1 = [33.000, dude_diea2]
{
};

// dude_diea2
// function begins at statement 26037, parm_start=18067
// OP_STATE	14815	18067	0
// OP_DONE	0	0	0
void () dude_diea2 = [34.000, dude_diea3]
{
};

// dude_diea3
// function begins at statement 26039, parm_start=18068
// OP_STATE	5499	18068	0
// OP_DONE	0	0	0
void () dude_diea3 = [35.000, dude_diea4]
{
};

// dude_diea4
// function begins at statement 26041, parm_start=18069
// OP_STATE	5405	18069	0
// OP_DONE	0	0	0
void () dude_diea4 = [36.000, dude_diea5]
{
};

// dude_diea5
// function begins at statement 26043, parm_start=18070
// OP_STATE	5376	18070	0
// OP_DONE	0	0	0
void () dude_diea5 = [37.000, dude_diea6]
{
};

// dude_diea6
// function begins at statement 26045, parm_start=18071
// OP_STATE	14803	18071	0
// OP_DONE	0	0	0
void () dude_diea6 = [38.000, dude_diea7]
{
};

// dude_diea7
// function begins at statement 26047, parm_start=18072
// OP_STATE	14805	18072	0
// OP_DONE	0	0	0
void () dude_diea7 = [39.000, dude_diea8]
{
};

// dude_diea8
// function begins at statement 26049, parm_start=18073
// OP_STATE	1632	18073	0
// OP_DONE	0	0	0
void () dude_diea8 = [40.000, dude_diea9]
{
};

// dude_diea9
// function begins at statement 26051, parm_start=18074
// OP_STATE	10987	18074	0
// OP_DONE	0	0	0
void () dude_diea9 = [41.000, dude_diea10]
{
};

// dude_diea10
// function begins at statement 26053, parm_start=18075
// OP_STATE	10994	18075	0
// OP_DONE	0	0	0
void () dude_diea10 = [42.000, dude_diea11]
{
};

// dude_diea11
// function begins at statement 26055, parm_start=18076
// OP_STATE	11000	18075	0
// OP_CALL0	17973	0	0
// OP_DONE	0	0	0
void () dude_diea11 = [43.000, dude_diea11]
{
    DudeDead();
};

// dude_dieb1
// function begins at statement 26058, parm_start=18076
// OP_STATE	15203	18076	0
// OP_DONE	0	0	0
void () dude_dieb1 = [44.000, dude_dieb2]
{
};

// dude_dieb2
// function begins at statement 26060, parm_start=18077
// OP_STATE	2558	18077	0
// OP_DONE	0	0	0
void () dude_dieb2 = [45.000, dude_dieb3]
{
};

// dude_dieb3
// function begins at statement 26062, parm_start=18078
// OP_STATE	15206	18078	0
// OP_DONE	0	0	0
void () dude_dieb3 = [46.000, dude_dieb4]
{
};

// dude_dieb4
// function begins at statement 26064, parm_start=18079
// OP_STATE	15208	18079	0
// OP_DONE	0	0	0
void () dude_dieb4 = [47.000, dude_dieb5]
{
};

// dude_dieb5
// function begins at statement 26066, parm_start=18080
// OP_STATE	3330	18080	0
// OP_DONE	0	0	0
void () dude_dieb5 = [48.000, dude_dieb6]
{
};

// dude_dieb6
// function begins at statement 26068, parm_start=18081
// OP_STATE	15211	18081	0
// OP_DONE	0	0	0
void () dude_dieb6 = [49.000, dude_dieb7]
{
};

// dude_dieb7
// function begins at statement 26070, parm_start=18082
// OP_STATE	2611	18082	0
// OP_DONE	0	0	0
void () dude_dieb7 = [50.000, dude_dieb8]
{
};

// dude_dieb8
// function begins at statement 26072, parm_start=18083
// OP_STATE	15118	18083	0
// OP_DONE	0	0	0
void () dude_dieb8 = [51.000, dude_dieb9]
{
};

// dude_dieb9
// function begins at statement 26074, parm_start=18084
// OP_STATE	15120	18083	0
// OP_CALL0	17973	0	0
// OP_DONE	0	0	0
void () dude_dieb9 = [52.000, dude_dieb9]
{
    DudeDead();
};

// dude_diec1
// function begins at statement 26077, parm_start=18084
// OP_STATE	2779	18084	0
// OP_DONE	0	0	0
void () dude_diec1 = [53.000, dude_diec2]
{
};

// dude_diec2
// function begins at statement 26079, parm_start=18085
// OP_STATE	15123	18085	0
// OP_DONE	0	0	0
void () dude_diec2 = [54.000, dude_diec3]
{
};

// dude_diec3
// function begins at statement 26081, parm_start=18086
// OP_STATE	11012	18086	0
// OP_DONE	0	0	0
void () dude_diec3 = [55.000, dude_diec4]
{
};

// dude_diec4
// function begins at statement 26083, parm_start=18087
// OP_STATE	11018	18087	0
// OP_DONE	0	0	0
void () dude_diec4 = [56.000, dude_diec5]
{
};

// dude_diec5
// function begins at statement 26085, parm_start=18088
// OP_STATE	15127	18088	0
// OP_DONE	0	0	0
void () dude_diec5 = [57.000, dude_diec6]
{
};

// dude_diec6
// function begins at statement 26087, parm_start=18089
// OP_STATE	15129	18089	0
// OP_DONE	0	0	0
void () dude_diec6 = [58.000, dude_diec7]
{
};

// dude_diec7
// function begins at statement 26089, parm_start=18090
// OP_STATE	15131	18090	0
// OP_DONE	0	0	0
void () dude_diec7 = [59.000, dude_diec8]
{
};

// dude_diec8
// function begins at statement 26091, parm_start=18091
// OP_STATE	2228	18091	0
// OP_DONE	0	0	0
void () dude_diec8 = [60.000, dude_diec9]
{
};

// dude_diec9
// function begins at statement 26093, parm_start=18092
// OP_STATE	15133	18092	0
// OP_DONE	0	0	0
void () dude_diec9 = [61.000, dude_diec10]
{
};

// dude_diec10
// function begins at statement 26095, parm_start=18093
// OP_STATE	15135	18093	0
// OP_DONE	0	0	0
void () dude_diec10 = [62.000, dude_diec11]
{
};

// dude_diec11
// function begins at statement 26097, parm_start=18094
// OP_STATE	12183	18094	0
// OP_DONE	0	0	0
void () dude_diec11 = [63.000, dude_diec12]
{
};

// dude_diec12
// function begins at statement 26099, parm_start=18095
// OP_STATE	2223	18095	0
// OP_DONE	0	0	0
void () dude_diec12 = [64.000, dude_diec13]
{
};

// dude_diec13
// function begins at statement 26101, parm_start=18096
// OP_STATE	15139	18096	0
// OP_DONE	0	0	0
void () dude_diec13 = [65.000, dude_diec14]
{
};

// dude_diec14
// function begins at statement 26103, parm_start=18097
// OP_STATE	15141	18097	0
// OP_DONE	0	0	0
void () dude_diec14 = [66.000, dude_diec15]
{
};

// dude_diec15
// function begins at statement 26105, parm_start=18098
// OP_STATE	15143	18097	0
// OP_CALL0	17973	0	0
// OP_DONE	0	0	0
void () dude_diec15 = [67.000, dude_diec15]
{
    DudeDead();
};

// dude_died1
// function begins at statement 26108, parm_start=18098
// OP_STATE	15145	18098	0
// OP_DONE	0	0	0
void () dude_died1 = [68.000, dude_died2]
{
};

// dude_died2
// function begins at statement 26110, parm_start=18099
// OP_STATE	15147	18099	0
// OP_DONE	0	0	0
void () dude_died2 = [69.000, dude_died3]
{
};

// dude_died3
// function begins at statement 26112, parm_start=18100
// OP_STATE	15148	18100	0
// OP_DONE	0	0	0
void () dude_died3 = [70.000, dude_died4]
{
};

// dude_died4
// function begins at statement 26114, parm_start=18101
// OP_STATE	15150	18101	0
// OP_DONE	0	0	0
void () dude_died4 = [71.000, dude_died5]
{
};

// dude_died5
// function begins at statement 26116, parm_start=18102
// OP_STATE	15152	18102	0
// OP_DONE	0	0	0
void () dude_died5 = [72.000, dude_died6]
{
};

// dude_died6
// function begins at statement 26118, parm_start=18103
// OP_STATE	9292	18103	0
// OP_DONE	0	0	0
void () dude_died6 = [73.000, dude_died7]
{
};

// dude_died7
// function begins at statement 26120, parm_start=18104
// OP_STATE	15155	18104	0
// OP_DONE	0	0	0
void () dude_died7 = [74.000, dude_died8]
{
};

// dude_died8
// function begins at statement 26122, parm_start=18105
// OP_STATE	15157	18105	0
// OP_DONE	0	0	0
void () dude_died8 = [75.000, dude_died9]
{
};

// dude_died9
// function begins at statement 26124, parm_start=18106
// OP_STATE	15159	18105	0
// OP_CALL0	17973	0	0
// OP_DONE	0	0	0
void () dude_died9 = [76.000, dude_died9]
{
    DudeDead();
};

// dude_diee1
// function begins at statement 26127, parm_start=18106
// OP_STATE	15161	18106	0
// OP_DONE	0	0	0
void () dude_diee1 = [77.000, dude_diee2]
{
};

// dude_diee2
// function begins at statement 26129, parm_start=18107
// OP_STATE	15163	18107	0
// OP_DONE	0	0	0
void () dude_diee2 = [78.000, dude_diee3]
{
};

// dude_diee3
// function begins at statement 26131, parm_start=18108
// OP_STATE	15165	18108	0
// OP_DONE	0	0	0
void () dude_diee3 = [79.000, dude_diee4]
{
};

// dude_diee4
// function begins at statement 26133, parm_start=18109
// OP_STATE	2677	18109	0
// OP_DONE	0	0	0
void () dude_diee4 = [80.000, dude_diee5]
{
};

// dude_diee5
// function begins at statement 26135, parm_start=18110
// OP_STATE	11033	18110	0
// OP_DONE	0	0	0
void () dude_diee5 = [81.000, dude_diee6]
{
};

// dude_diee6
// function begins at statement 26137, parm_start=18111
// OP_STATE	15169	18111	0
// OP_DONE	0	0	0
void () dude_diee6 = [82.000, dude_diee7]
{
};

// dude_diee7
// function begins at statement 26139, parm_start=18112
// OP_STATE	15171	18112	0
// OP_DONE	0	0	0
void () dude_diee7 = [83.000, dude_diee8]
{
};

// dude_diee8
// function begins at statement 26141, parm_start=18113
// OP_STATE	15173	18113	0
// OP_DONE	0	0	0
void () dude_diee8 = [84.000, dude_diee9]
{
};

// dude_diee9
// function begins at statement 26143, parm_start=18114
// OP_STATE	11037	18113	0
// OP_CALL0	17973	0	0
// OP_DONE	0	0	0
void () dude_diee9 = [85.000, dude_diee9]
{
    DudeDead();
};

// dude_die_ax1
// function begins at statement 26146, parm_start=18114
// OP_STATE	13015	18114	0
// OP_DONE	0	0	0
void () dude_die_ax1 = [24.000, dude_die_ax2]
{
};

// dude_die_ax2
// function begins at statement 26148, parm_start=18115
// OP_STATE	1380	18115	0
// OP_DONE	0	0	0
void () dude_die_ax2 = [25.000, dude_die_ax3]
{
};

// dude_die_ax3
// function begins at statement 26150, parm_start=18116
// OP_STATE	17369	18116	0
// OP_DONE	0	0	0
void () dude_die_ax3 = [26.000, dude_die_ax4]
{
};

// dude_die_ax4
// function begins at statement 26152, parm_start=18117
// OP_STATE	17371	18117	0
// OP_DONE	0	0	0
void () dude_die_ax4 = [27.000, dude_die_ax5]
{
};

// dude_die_ax5
// function begins at statement 26154, parm_start=18118
// OP_STATE	17373	18118	0
// OP_DONE	0	0	0
void () dude_die_ax5 = [28.000, dude_die_ax6]
{
};

// dude_die_ax6
// function begins at statement 26156, parm_start=18119
// OP_STATE	14808	18119	0
// OP_DONE	0	0	0
void () dude_die_ax6 = [29.000, dude_die_ax7]
{
};

// dude_die_ax7
// function begins at statement 26158, parm_start=18120
// OP_STATE	2522	18120	0
// OP_DONE	0	0	0
void () dude_die_ax7 = [30.000, dude_die_ax8]
{
};

// dude_die_ax8
// function begins at statement 26160, parm_start=18121
// OP_STATE	10956	18121	0
// OP_DONE	0	0	0
void () dude_die_ax8 = [31.000, dude_die_ax9]
{
};

// dude_die_ax9
// function begins at statement 26162, parm_start=18122
// OP_STATE	2657	18121	0
// OP_CALL0	17973	0	0
// OP_DONE	0	0	0
void () dude_die_ax9 = [32.000, dude_die_ax9]
{
    DudeDead();
};

// spawn_dude
// function begins at statement 26165, parm_start=18122
// OP_STORE_F	817	18122	0
// OP_STORE_ENT	740	18124	0
// OP_NOT_F	18122	0	18125
// OP_IFNOT	18125	39	0
// OP_STORE_V	740	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	11177	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	740	0
// OP_EQ_E	740	30	18126
// OP_IFNOT	18126	6	0
// OP_STORE_V	740	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	11177	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	740	0
// OP_STORE_F	819	18122	0
// OP_LOAD_V	740	105	18127
// OP_STORE_V	18127	4	0
// OP_STORE_V	2223	7	0
// OP_CALL2	481	0	0
// OP_STORE_ENT	1	18123	0
// OP_NE_E	18123	30	18130
// OP_AND	18130	18122	18131
// OP_IFNOT	18131	12	0
// OP_LOAD_F	18123	104	18132
// OP_EQ_F	18132	243	18133
// OP_LOAD_F	18123	104	18134
// OP_EQ_F	18134	244	18135
// OP_OR	18133	18135	18136
// OP_NOT_F	18136	0	18137
// OP_IFNOT	18137	2	0
// OP_STORE_F	817	18122	0
// OP_LOAD_ENT	18123	164	18138
// OP_STORE_ENT	18138	18123	0
// OP_GOTO	-13	0	0
// OP_NOT_F	18122	0	18139
// OP_EQ_E	740	18124	18140
// OP_AND	18139	18140	18141
// OP_IFNOT	18141	2	0
// OP_RETURN	817	0	0
// OP_GOTO	-39	0	0
// OP_STORE_ENT	740	28	0
// OP_CALL0	10910	0	0
// OP_RETURN	819	0	0
// OP_DONE	0	0	0
float () spawn_dude = 
{
    local float clear;
    local entity trav;
    local entity first_spot;
    clear = 0.000;
    first_spot = last_dude_spawn;
    
    while(!clear)
    {
        last_dude_spawn = find(last_dude_spawn, classname, "rally_spawn_dude");
        
        if(last_dude_spawn == world)
        {
            last_dude_spawn = find(last_dude_spawn, classname, "rally_spawn_dude");
        }
        
        clear = 1.000;
        trav = findradius(last_dude_spawn.origin, 64.000);
        
        while((trav != world) && clear)
        {
            
            if(!((trav.solid == SOLID_NOT) || (trav.solid == SOLID_TRIGGER)))
            {
                clear = 0.000;
            }
            
            trav = trav.chain;
        }
        
        
        if(!clear && (last_dude_spawn == first_spot))
        {
            return 0.000;
        }
        
    }
    
    self = last_dude_spawn;
    rally_spawn_dude();
    return 1.000;
};

// ThrowDudeGib
// function begins at statement 26211, parm_start=18143
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	18147	0
// OP_ADDRESS	18147	105	18148
// OP_LOAD_V	28	105	18151
// OP_STOREP_V	18151	18148	0
// OP_STORE_V	18147	4	0
// OP_STORE_V	18143	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	18147	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	926	10	0
// OP_CALL3	464	0	0
// OP_ADDRESS	18147	113	18154
// OP_MUL_VF	18144	883	18157
// OP_CALL0	466	0	0
// OP_MUL_FV	1	18160	18163
// OP_ADD_V	18157	18163	18166
// OP_CALL0	466	0	0
// OP_MUL_FV	1	18169	18172
// OP_ADD_V	18166	18172	18175
// OP_ADD_V	18175	18178	18181
// OP_STOREP_V	18181	18154	0
// OP_ADDRESS	18147	103	18184
// OP_STOREP_F	241	18184	0
// OP_ADDRESS	18147	104	18185
// OP_STOREP_F	243	18185	0
// OP_ADDRESS	18147	122	18186
// OP_CALL0	466	0	0
// OP_MUL_F	1	2127	18187
// OP_STOREP_F	18187	18186	0
// OP_ADDRESS	18147	123	18188
// OP_CALL0	466	0	0
// OP_MUL_F	1	2127	18189
// OP_STOREP_F	18189	18188	0
// OP_ADDRESS	18147	124	18190
// OP_CALL0	466	0	0
// OP_MUL_F	1	2127	18191
// OP_STOREP_F	18191	18190	0
// OP_ADDRESS	18147	148	18192
// OP_STOREP_FNC	533	18192	0
// OP_ADDRESS	18147	102	18193
// OP_STOREP_F	31	18193	0
// OP_ADDRESS	18147	150	18194
// OP_ADD_F	31	855	18195
// OP_CALL0	466	0	0
// OP_MUL_F	1	855	18196
// OP_ADD_F	18195	18196	18197
// OP_STOREP_F	18197	18194	0
// OP_ADDRESS	18147	131	18198
// OP_STOREP_F	817	18198	0
// OP_ADDRESS	18147	182	18199
// OP_STOREP_F	817	18199	0
// OP_DONE	0	0	0
void (string gibname, vector impact) ThrowDudeGib = 
{
    local entity new;
    new = spawn();
    new.origin = self.origin;
    setmodel(new, gibname);
    setsize(new, '0.000 0.000 0.000', '0.000 0.000 0.000');
    new.velocity = (((impact * 1.500) + (random() * '500.000 0.000 0.000')) + (random() * '0.000 500.000 0.000')) + '-250.000 -250.000 220.000';
    new.movetype = MOVETYPE_BOUNCE;
    new.solid = SOLID_NOT;
    new.avelocity_x = random() * 600.000;
    new.avelocity_y = random() * 600.000;
    new.avelocity_z = random() * 600.000;
    new.think = SUB_Remove;
    new.ltime = time;
    new.nextthink = (time + 10.000) + (random() * 10.000);
    new.frame = 0.000;
    new.flags = 0.000;
};

// GibDude
// function begins at statement 26264, parm_start=18201
// OP_STORE_V	12129	4	0
// OP_STORE_V	18201	7	0
// OP_CALL2	18142	0	0
// OP_STORE_V	12130	4	0
// OP_STORE_V	18201	7	0
// OP_CALL2	18142	0	0
// OP_STORE_V	12131	4	0
// OP_STORE_V	18201	7	0
// OP_CALL2	18142	0	0
// OP_ADDRESS	28	165	18204
// OP_STOREP_F	254	18204	0
// OP_LOAD_S	361	129	18205
// OP_EQ_S	18205	13360	18206
// OP_IFNOT	18206	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	12077	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	339	16	0
// OP_CALL5	467	0	0
// OP_RETURN	0	0	0
// OP_LOAD_S	361	129	18207
// OP_EQ_S	18207	13372	18208
// OP_IFNOT	18208	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	12077	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	339	16	0
// OP_CALL5	467	0	0
// OP_RETURN	0	0	0
// OP_CALL0	466	0	0
// OP_LT	1	1182	18209
// OP_IFNOT	18209	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	12086	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	339	16	0
// OP_CALL5	467	0	0
// OP_GOTO	7	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	12087	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	339	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	12128	4	0
// OP_LOAD_F	28	152	18210
// OP_STORE_V	18210	7	0
// OP_CALL2	14958	0	0
// OP_DONE	0	0	0
void (vector impact_vec) GibDude = 
{
    ThrowDudeGib("progs/gib1.mdl", impact_vec);
    ThrowDudeGib("progs/gib2.mdl", impact_vec);
    ThrowDudeGib("progs/gib3.mdl", impact_vec);
    self.deadflag = DEAD_DEAD;
    
    if(damage_attacker.classname == "teledeath")
    {
        sound(self, CHAN_VOICE, "player/teledth1.wav", 1.000, ATTN_NONE);
        return;
    }
    
    
    if(damage_attacker.classname == "teledeath2")
    {
        sound(self, CHAN_VOICE, "player/teledth1.wav", 1.000, ATTN_NONE);
        return;
    }
    
    if(random() < 0.500)
    {
        sound(self, CHAN_VOICE, "player/gib.wav", 1.000, ATTN_NONE);
    }
    else
    {
        sound(self, CHAN_VOICE, "player/udeath.wav", 1.000, ATTN_NONE);
    }
    
    ThrowHead("progs/h_player.mdl", self.health);
};

// dude_touch
// function begins at statement 26316, parm_start=18212
// OP_LOAD_S	29	129	18214
// OP_NE_S	18214	880	18215
// OP_IFNOT	18215	2	0
// OP_RETURN	0	0	0
// OP_LOAD_V	28	117	18216
// OP_STORE_V	18216	4	0
// OP_CALL1	461	0	0
// OP_LOAD_V	29	113	18219
// OP_MUL_VF	59	4664	18222
// OP_SUB_V	18219	18222	18225
// OP_STORE_V	18225	4	0
// OP_CALL1	471	0	0
// OP_STORE_F	1	18213	0
// OP_LOAD_F	29	154	18228
// OP_EQ_F	18228	277	18229
// OP_LOAD_F	29	217	18230
// OP_GT	18230	817	18231
// OP_AND	18229	18231	18232
// OP_IFNOT	18232	23	0
// OP_MUL_F	18213	825	18233
// OP_STORE_F	18233	18213	0
// OP_ADDRESS	29	157	18234
// OP_ADDRESS	29	217	18235
// OP_LOAD_F	29	217	18236
// OP_SUB_F	18236	825	18237
// OP_STOREP_F	18237	18235	0
// OP_STOREP_F	18237	18234	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	3631	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_LOAD_ENT	29	548	18238
// OP_ADDRESS	18238	133	18239
// OP_LOAD_ENT	29	548	18240
// OP_LOAD_F	18240	133	18241
// OP_BITOR	18241	350	18242
// OP_STOREP_F	18242	18239	0
// OP_ADDRESS	29	656	18243
// OP_STOREP_F	31	18243	0
// OP_DIV_F	778	821	18244
// OP_LT	18213	18244	18245
// OP_IFNOT	18245	24	0
// OP_CALL0	466	0	0
// OP_LT	1	1182	18246
// OP_IFNOT	18246	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	3649	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	7	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	3650	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	29	7	0
// OP_STORE_V	29	10	0
// OP_DIV_F	18213	1632	18247
// OP_STORE_V	18247	13	0
// OP_CALL4	534	0	0
// OP_GOTO	34	0	0
// OP_CALL0	466	0	0
// OP_LT	1	1182	18248
// OP_IFNOT	18248	8	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	3649	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_GOTO	7	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	3650	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	152	18249
// OP_MUL_F	18250	18213	18251
// OP_STOREP_F	18251	18249	0
// OP_LOAD_V	29	113	18252
// OP_STORE_V	18252	4	0
// OP_CALL1	18200	0	0
// OP_EQ_F	738	825	18255
// OP_IFNOT	18255	9	0
// OP_ADD_F	743	819	18256
// OP_STORE_F	18256	743	0
// OP_ADD_F	42	819	18257
// OP_STORE_F	18257	42	0
// OP_STORE_V	353	4	0
// OP_STORE_V	316	7	0
// OP_CALL2	507	0	0
// OP_CALL0	17991	0	0
// OP_CALL0	17972	0	0
// OP_DONE	0	0	0
void () dude_touch = 
{
    local float veh_speed;
    local float impact;
    
    if(other.classname != "player")
    {
        return;
    }
    
    makevectors(self.angles);
    impact = vlen(other.velocity - (v_forward * 320.000));
    
    if((other.weapon == IT_ROOBAR) && (other.ammo_roobar > 0.000))
    {
        impact = impact * 4.000;
        other.currentammo = other.ammo_roobar = other.ammo_roobar - 4.000;
        sound(self, CHAN_AUTO, "rally/process/elect02.wav", 1.000, ATTN_NORM);
        other.veh_body.effects = other.veh_body.effects | EF_DIMLIGHT;
        other.last_crash = time;
    }
    
    if(impact < (MAX_SPEED / 2.000))
    {
        if(random() < 0.500)
        {
            sound(self, CHAN_AUTO, "rally/dude/sevpain1.wav", 1.000, ATTN_NORM);
        }
        else
        {
            sound(self, CHAN_AUTO, "rally/dude/sevpain2.wav", 1.000, ATTN_NORM);
        }
        
        T_Damage(self, other, other, impact / 40.000);
    }
    else
    {
        if(random() < 0.500)
        {
            sound(self, CHAN_AUTO, "rally/dude/sevpain1.wav", 1.000, ATTN_NORM);
        }
        else
        {
            sound(self, CHAN_AUTO, "rally/dude/sevpain2.wav", 1.000, ATTN_NORM);
        }
        
        self.health = -0.200 * impact;
        GibDude(other.velocity);
        
        if(rally_type_index == 4.000)
        {
            cult_kills = cult_kills + 1.000;
            killed_monsters = killed_monsters + 1.000;
            WriteByte(MSG_ALL, SVC_KILLEDMONSTER);
            CheckCultKills();
        }
        
        spawn_dude();
    }
    
};

// dude_fire_grenade
// function begins at statement 26417, parm_start=18258
// OP_STORE_V	28	4	0
// OP_STORE_V	335	7	0
// OP_STORE_V	9184	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	18258	0
// OP_ADDRESS	18258	201	18260
// OP_STOREP_ENT	28	18260	0
// OP_ADDRESS	18258	103	18261
// OP_STOREP_F	241	18261	0
// OP_ADDRESS	18258	104	18262
// OP_STOREP_F	245	18262	0
// OP_ADDRESS	18258	129	18263
// OP_STOREP_S	9795	18263	0
// OP_ADDRESS	18258	113	18264
// OP_STOREP_V	1584	18264	0
// OP_ADDRESS	18258	121	18267
// OP_STOREP_V	9806	18267	0
// OP_ADDRESS	18258	146	18270
// OP_STOREP_FNC	9730	18270	0
// OP_ADDRESS	18258	647	18271
// OP_ADD_F	31	827	18272
// OP_STOREP_F	18272	18271	0
// OP_ADDRESS	18258	109	18273
// OP_LOAD_V	18258	105	18276
// OP_STOREP_V	18276	18273	0
// OP_ADDRESS	18258	150	18279
// OP_ADD_F	31	819	18280
// OP_STOREP_F	18280	18279	0
// OP_ADDRESS	18258	148	18281
// OP_STOREP_FNC	9754	18281	0
// OP_STORE_V	18258	4	0
// OP_STORE_V	9821	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	18258	4	0
// OP_STORE_V	6124	7	0
// OP_STORE_V	18282	10	0
// OP_CALL3	464	0	0
// OP_STORE_V	18258	4	0
// OP_LOAD_V	28	105	18285
// OP_STORE_V	18285	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	28	648	18288
// OP_STOREP_F	31	18288	0
// OP_DONE	0	0	0
void () dude_fire_grenade = 
{
    local entity missile;
    local entity mpuff;
    sound(self, CHAN_WEAPON, "weapons/grenade.wav", 1.000, ATTN_NORM);
    missile = spawn();
    missile.owner = self;
    missile.movetype = MOVETYPE_BOUNCE;
    missile.solid = SOLID_BBOX;
    missile.classname = "grenade";
    missile.velocity = '0.000 0.000 200.000';
    missile.avelocity = '0.000 300.000 0.000';
    missile.touch = GrenadeTouch;
    missile.last_idle = time + 5.000;
    missile.oldorigin = missile.origin;
    missile.nextthink = time + 1.000;
    missile.think = GrenadeThink;
    setmodel(missile, "models/detnator.mdl");
    setsize(missile, '-4.000 -4.000 0.000', '4.000 4.000 12.000');
    setorigin(missile, self.origin);
    self.last_rev = time;
};

// dude_fire_rocket
// function begins at statement 26464, parm_start=18289
// OP_STORE_V	28	4	0
// OP_STORE_V	335	7	0
// OP_STORE_V	9177	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	18290	0
// OP_ADDRESS	18290	647	18299
// OP_STOREP_F	31	18299	0
// OP_ADDRESS	18290	201	18300
// OP_STOREP_ENT	28	18300	0
// OP_ADDRESS	18290	103	18301
// OP_STOREP_F	240	18301	0
// OP_ADDRESS	18290	104	18302
// OP_STOREP_F	245	18302	0
// OP_STORE_V	59	18296	0
// OP_LOAD_V	28	175	18303
// OP_STORE_V	18303	18293	0
// OP_STORE_F	817	18293	0
// OP_STORE_V	18293	4	0
// OP_CALL1	461	0	0
// OP_STORE_V	59	18293	0
// OP_STORE_ENT	18289	18292	0
// OP_NE_E	18289	30	18306
// OP_IFNOT	18306	15	0
// OP_STORE_V	18292	4	0
// OP_STORE_V	18307	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	18292	4	0
// OP_STORE_V	9539	7	0
// OP_CALL2	876	0	0
// OP_ADDRESS	18290	181	18308
// OP_STOREP_ENT	18292	18308	0
// OP_ADDRESS	18290	150	18309
// OP_ADD_F	31	32	18310
// OP_STOREP_F	18310	18309	0
// OP_ADDRESS	18290	148	18311
// OP_STOREP_FNC	7269	18311	0
// OP_GOTO	6	0	0
// OP_ADDRESS	18290	150	18312
// OP_ADD_F	31	827	18313
// OP_STOREP_F	18313	18312	0
// OP_ADDRESS	18290	148	18314
// OP_STOREP_FNC	533	18314	0
// OP_STORE_V	18296	59	0
// OP_ADDRESS	18290	113	18315
// OP_STOREP_V	59	18315	0
// OP_ADDRESS	18290	113	18318
// OP_LOAD_V	18290	113	18321
// OP_MUL_VF	18321	1820	18324
// OP_STOREP_V	18324	18318	0
// OP_ADDRESS	18290	117	18327
// OP_LOAD_V	18290	113	18330
// OP_STORE_V	18330	4	0
// OP_CALL1	506	0	0
// OP_STOREP_V	1	18327	0
// OP_ADDRESS	18290	146	18333
// OP_STOREP_FNC	7268	18333	0
// OP_STORE_V	18290	4	0
// OP_STORE_V	9570	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	18290	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	926	10	0
// OP_CALL3	464	0	0
// OP_STORE_V	18290	4	0
// OP_LOAD_V	28	105	18334
// OP_MUL_VF	59	843	18337
// OP_ADD_V	18334	18337	18340
// OP_STORE_V	18340	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	28	648	18343
// OP_STOREP_F	31	18343	0
// OP_DONE	0	0	0
void (entity targ) dude_fire_rocket = 
{
    local entity missile;
    local entity mpuff;
    local entity missile_enemy;
    local vector dir;
    local vector old_forward;
    sound(self, CHAN_WEAPON, "weapons/sgun1.wav", 1.000, ATTN_NORM);
    missile = spawn();
    missile.last_idle = time;
    missile.owner = self;
    missile.movetype = MOVETYPE_FLYMISSILE;
    missile.solid = SOLID_BBOX;
    old_forward = v_forward;
    dir = self.v_angle;
    dir_x = 0.000;
    makevectors(dir);
    dir = v_forward;
    missile_enemy = targ;
    if(targ != world)
    {
        sprint(missile_enemy, "Missile lock!\n");
        commentary(missile_enemy, "process/buzztst1.wav");
        missile.enemy = missile_enemy;
        missile.nextthink = time + frametime;
        missile.think = RocketSeek;
    }
    else
    {
        missile.nextthink = time + 5.000;
        missile.think = SUB_Remove;
    }
    
    v_forward = old_forward;
    missile.velocity = v_forward;
    missile.velocity = missile.velocity * 500.000;
    missile.angles = vectoangles(missile.velocity);
    missile.touch = T_MissileTouch;
    setmodel(missile, "models/missile.mdl");
    setsize(missile, '0.000 0.000 0.000', '0.000 0.000 0.000');
    setorigin(missile, self.origin + (v_forward * 8.000));
    self.last_rev = time;
};

float dukes_spawned;
// rally_spawn_dude
// function begins at statement 26539, parm_start=18345
// OP_EQ_F	738	825	18346
// OP_AND	689	18346	18347
// OP_GE	18344	792	18348
// OP_AND	18347	18348	18349
// OP_IFNOT	18349	2	0
// OP_RETURN	0	0	0
// OP_ADD_F	18344	819	18350
// OP_STORE_F	18350	18344	0
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	18345	0
// OP_ADDRESS	18345	117	18351
// OP_LOAD_V	28	117	18354
// OP_STOREP_V	18354	18351	0
// OP_ADDRESS	18345	175	18357
// OP_LOAD_V	18345	117	18360
// OP_STOREP_V	18360	18357	0
// OP_STORE_V	18345	4	0
// OP_LOAD_V	28	105	18363
// OP_STORE_V	18363	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	18345	182	18366
// OP_LOAD_F	18345	182	18367
// OP_BITOR	18367	224	18368
// OP_STOREP_F	18368	18366	0
// OP_STORE_ENT	18345	28	0
// OP_ADDRESS	28	129	18369
// OP_STOREP_S	3609	18369	0
// OP_ADDRESS	28	104	18370
// OP_STOREP_F	246	18370	0
// OP_ADDRESS	28	103	18371
// OP_STOREP_F	235	18371	0
// OP_ADDRESS	28	163	18372
// OP_STOREP_F	258	18372	0
// OP_STORE_V	28	4	0
// OP_STORE_V	12147	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	303	7	0
// OP_STORE_V	306	10	0
// OP_CALL3	464	0	0
// OP_ADDRESS	28	152	18373
// OP_STOREP_F	4760	18373	0
// OP_CALL0	492	0	0
// OP_NOT_F	1	0	18374
// OP_IFNOT	18374	10	0
// OP_STORE_V	18375	4	0
// OP_CALL1	484	0	0
// OP_LOAD_V	28	105	18376
// OP_STORE_V	18376	4	0
// OP_CALL1	486	0	0
// OP_STORE_V	1	4	0
// OP_CALL1	484	0	0
// OP_STORE_V	888	4	0
// OP_CALL1	484	0	0
// OP_ADDRESS	28	191	18379
// OP_LOAD_F	28	119	18380
// OP_STOREP_F	18380	18379	0
// OP_ADDRESS	28	146	18381
// OP_STOREP_FNC	18211	18381	0
// OP_ADDRESS	28	370	18382
// OP_STOREP_FNC	17731	18382	0
// OP_ADDRESS	28	371	18383
// OP_STOREP_FNC	17731	18383	0
// OP_ADDRESS	28	372	18384
// OP_STOREP_FNC	17731	18384	0
// OP_ADDRESS	28	376	18385
// OP_STOREP_FNC	18018	18385	0
// OP_ADDRESS	28	375	18386
// OP_STOREP_FNC	17957	18386	0
// OP_ADDRESS	28	648	18387
// OP_STOREP_F	817	18387	0
// OP_ADDRESS	28	17698	18388
// OP_STOREP_F	9155	18388	0
// OP_CALL0	15294	0	0
// OP_DONE	0	0	0
void () rally_spawn_dude = 
{
    local entity dude;
    
    if((challenge && (rally_type_index == 4.000)) && (dukes_spawned >= NUM_DUKES))
    {
        return;
    }
    
    dukes_spawned = dukes_spawned + 1.000;
    dude = spawn();
    dude.angles = self.angles;
    dude.v_angle = dude.angles;
    setorigin(dude, self.origin);
    dude.flags = dude.flags | FL_MONSTER;
    self = dude;
    self.classname = "rally_dude";
    self.solid = SOLID_SLIDEBOX;
    self.movetype = MOVETYPE_STEP;
    self.takedamage = DAMAGE_AIM;
    setmodel(self, "models/dude.mdl");
    setsize(self, VEC_HULL_MIN, VEC_HULL_MAX);
    self.health = 200.000;
    
    if(!droptofloor())
    {
        dprint("dude fell out of level at: ");
        dprint(vtos(self.origin));
        dprint("\n");
    }
    
    self.ideal_yaw = self.angles_y;
    self.touch = dude_touch;
    self.th_stand = dude_run;
    self.th_walk = dude_run;
    self.th_run = dude_run;
    self.th_die = DudeDie;
    self.th_pain = dude_axpain1;
    self.last_rev = 0.000;
    self.last_guide_touch = -100.000;
    walkmonster_start();
};

// dude_guide_touch
// function begins at statement 26614, parm_start=18390
// OP_LOAD_S	29	129	18390
// OP_EQ_S	18390	3609	18391
// OP_IFNOT	18391	6	0
// OP_ADDRESS	29	117	18392
// OP_LOAD_V	28	117	18395
// OP_STOREP_V	18395	18392	0
// OP_ADDRESS	29	17698	18398
// OP_STOREP_F	31	18398	0
// OP_ADDRESS	28	104	18399
// OP_STOREP_F	244	18399	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	28	105	18400
// OP_STORE_V	18400	7	0
// OP_CALL2	462	0	0
// OP_DONE	0	0	0
void () dude_guide_touch = 
{
    
    if(other.classname == "rally_dude")
    {
        other.angles = self.angles;
        other.last_guide_touch = time;
    }
    
    self.solid = SOLID_TRIGGER;
    setorigin(self, self.origin);
};

// rally_dude_guide
// function begins at statement 26629, parm_start=18404
// OP_STORE_V	28	4	0
// OP_STORE_V	303	7	0
// OP_STORE_V	306	10	0
// OP_CALL3	464	0	0
// OP_ADDRESS	28	104	18404
// OP_STOREP_F	244	18404	0
// OP_ADDRESS	28	103	18405
// OP_STOREP_F	233	18405	0
// OP_ADDRESS	28	146	18406
// OP_STOREP_FNC	18389	18406	0
// OP_DONE	0	0	0
void () rally_dude_guide = 
{
    setsize(self, VEC_HULL_MIN, VEC_HULL_MAX);
    self.solid = SOLID_TRIGGER;
    self.movetype = MOVETYPE_NONE;
    self.touch = dude_guide_touch;
};

float unspawned_roos;
void () roo_stand;
void (float dist) roo_run;
// roo_stand1
// function begins at statement 26640, parm_start=18411
// OP_STATE	819	18411	0
// OP_CALL0	18408	0	0
// OP_DONE	0	0	0
void () roo_stand1 = [1.000, roo_stand2]
{
    roo_stand();
};

// roo_stand2
// function begins at statement 26643, parm_start=18412
// OP_STATE	821	18412	0
// OP_DONE	0	0	0
void () roo_stand2 = [2.000, roo_stand3]
{
};

// roo_stand3
// function begins at statement 26645, parm_start=18413
// OP_STATE	823	18413	0
// OP_DONE	0	0	0
void () roo_stand3 = [3.000, roo_stand4]
{
};

// roo_stand4
// function begins at statement 26647, parm_start=18414
// OP_STATE	825	18414	0
// OP_DONE	0	0	0
void () roo_stand4 = [4.000, roo_stand5]
{
};

// roo_stand5
// function begins at statement 26649, parm_start=18415
// OP_STATE	827	18410	0
// OP_DONE	0	0	0
void () roo_stand5 = [5.000, roo_stand1]
{
};

// roo_run1
// function begins at statement 26651, parm_start=18416
// OP_STATE	829	18416	0
// OP_STORE_V	834	4	0
// OP_CALL1	18409	0	0
// OP_DONE	0	0	0
void () roo_run1 = [6.000, roo_run2]
{
    roo_run(12.000);
};

// roo_run2
// function begins at statement 26655, parm_start=18417
// OP_STATE	839	18417	0
// OP_STORE_V	2670	4	0
// OP_CALL1	18409	0	0
// OP_DONE	0	0	0
void () roo_run2 = [7.000, roo_run3]
{
    roo_run(16.000);
};

// roo_run3
// function begins at statement 26659, parm_start=18418
// OP_STATE	843	18418	0
// OP_STORE_V	3974	4	0
// OP_CALL1	18409	0	0
// OP_DONE	0	0	0
void () roo_run3 = [8.000, roo_run4]
{
    roo_run(18.000);
};

// roo_run4
// function begins at statement 26663, parm_start=18419
// OP_STATE	847	18419	0
// OP_STORE_V	1112	4	0
// OP_CALL1	18409	0	0
// OP_DONE	0	0	0
void () roo_run4 = [9.000, roo_run5]
{
    roo_run(20.000);
};

// roo_run5
// function begins at statement 26667, parm_start=18420
// OP_STATE	855	18420	0
// OP_STORE_V	13015	4	0
// OP_CALL1	18409	0	0
// OP_DONE	0	0	0
void () roo_run5 = [10.000, roo_run6]
{
    roo_run(24.000);
};

// roo_run6
// function begins at statement 26671, parm_start=18421
// OP_STATE	831	18421	0
// OP_STORE_V	17369	4	0
// OP_CALL1	18409	0	0
// OP_DONE	0	0	0
void () roo_run6 = [11.000, roo_run7]
{
    roo_run(26.000);
};

// roo_run7
// function begins at statement 26675, parm_start=18422
// OP_STATE	834	18422	0
// OP_STORE_V	17369	4	0
// OP_CALL1	18409	0	0
// OP_DONE	0	0	0
void () roo_run7 = [12.000, roo_run8]
{
    roo_run(26.000);
};

// roo_run8
// function begins at statement 26679, parm_start=18423
// OP_STATE	834	18423	0
// OP_STORE_V	17363	4	0
// OP_CALL1	18409	0	0
// OP_DONE	0	0	0
void () roo_run8 = [12.000, roo_run9]
{
    roo_run(22.000);
};

// roo_run9
// function begins at statement 26683, parm_start=18424
// OP_STATE	837	18424	0
// OP_STORE_V	3974	4	0
// OP_CALL1	18409	0	0
// OP_DONE	0	0	0
void () roo_run9 = [13.000, roo_run10]
{
    roo_run(18.000);
};

// roo_run10
// function begins at statement 26687, parm_start=18425
// OP_STATE	841	18415	0
// OP_STORE_V	2670	4	0
// OP_CALL1	18409	0	0
// OP_LOAD_ENT	28	181	18425
// OP_LOAD_V	18425	105	18426
// OP_LOAD_V	28	105	18429
// OP_SUB_V	18426	18429	18432
// OP_STORE_V	18432	4	0
// OP_CALL1	471	0	0
// OP_LT	1	6067	18435
// OP_IFNOT	18435	16	0
// OP_ADDRESS	28	119	18436
// OP_LOAD_F	28	119	18437
// OP_STORE_V	18437	4	0
// OP_LOAD_F	28	119	18438
// OP_CALL0	466	0	0
// OP_LT	1	1182	18439
// OP_MUL_F	18439	821	18440
// OP_SUB_F	18440	819	18441
// OP_MUL_F	18441	1632	18442
// OP_ADD_F	18438	18442	18443
// OP_STORE_V	18443	7	0
// OP_STORE_V	3337	10	0
// OP_CALL3	1453	0	0
// OP_STOREP_F	1	18436	0
// OP_GOTO	13	0	0
// OP_ADDRESS	28	119	18444
// OP_LOAD_F	28	119	18445
// OP_STORE_V	18445	4	0
// OP_LOAD_F	28	119	18446
// OP_CALL0	466	0	0
// OP_MUL_F	1	1632	18447
// OP_ADD_F	18446	18447	18448
// OP_SUB_F	18448	1112	18449
// OP_STORE_V	18449	7	0
// OP_STORE_V	3337	10	0
// OP_CALL3	1453	0	0
// OP_STOREP_F	1	18444	0
// OP_LOAD_V	28	105	18450
// OP_LOAD_ENT	28	181	18453
// OP_LOAD_V	18453	105	18454
// OP_SUB_V	18450	18454	18457
// OP_STORE_V	18457	4	0
// OP_CALL1	471	0	0
// OP_GT	1	4345	18460
// OP_IFNOT	18460	3	0
// OP_ADDRESS	28	148	18461
// OP_STOREP_FNC	18410	18461	0
// OP_ADDRESS	28	378	18462
// OP_CALL0	466	0	0
// OP_MUL_F	1	1182	18463
// OP_STOREP_F	18463	18462	0
// OP_DONE	0	0	0
void () roo_run10 = [14.000, roo_run1]
{
    roo_run(16.000);
    if((vlen(self.enemy.origin - self.origin)) < 128.000)
    {
        self.angles_y = MoveToAngle(self.angles_y, self.angles_y + ((((random() < 0.500) * 2.000) - 1.000) * 40.000), 1000.000);
    }
    else
    {
        self.angles_y = MoveToAngle(self.angles_y, (self.angles_y + (random() * 40.000)) - 20.000, 1000.000);
    }
    
    
    if((vlen(self.origin - self.enemy.origin)) > 384.000)
    {
        self.think = roo_stand1;
    }
    
    self.speed = random() * 0.500;
};

// roo_stand
// function begins at statement 26740, parm_start=18464
// OP_LOAD_V	28	105	18465
// OP_STORE_V	18465	4	0
// OP_STORE_V	18468	7	0
// OP_CALL2	481	0	0
// OP_STORE_ENT	1	18464	0
// OP_NE_E	18464	30	18469
// OP_IFNOT	18469	13	0
// OP_LOAD_S	18464	129	18470
// OP_EQ_S	18470	880	18471
// OP_IFNOT	18471	7	0
// OP_ADDRESS	28	181	18472
// OP_STOREP_ENT	18464	18472	0
// OP_ADDRESS	28	148	18473
// OP_LOAD_FNC	28	372	18474
// OP_STOREP_FNC	18474	18473	0
// OP_RETURN	0	0	0
// OP_LOAD_ENT	18464	164	18475
// OP_STORE_ENT	18475	18464	0
// OP_GOTO	-13	0	0
// OP_CALL0	466	0	0
// OP_MUL_F	1	855	18476
// OP_GE	18476	839	18477
// OP_IFNOT	18477	15	0
// OP_ADDRESS	28	181	18478
// OP_STORE_V	30	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	880	10	0
// OP_CALL3	477	0	0
// OP_STOREP_ENT	1	18478	0
// OP_NE_E	1	30	18479
// OP_IFNOT	18479	7	0
// OP_ADDRESS	28	181	18480
// OP_STOREP_ENT	18464	18480	0
// OP_ADDRESS	28	148	18481
// OP_LOAD_FNC	28	372	18482
// OP_STOREP_FNC	18482	18481	0
// OP_RETURN	0	0	0
// OP_DONE	0	0	0
void () roo_stand = 
{
    local entity trav;
    trav = findradius(self.origin, 1024.000);
    
    while(trav != world)
    {
        
        if(trav.classname == "player")
        {
            self.enemy = trav;
            self.think = self.th_run;
            return;
        }
        
        trav = trav.chain;
    }
    
    
    if((random() * 10.000) >= 7.000)
    {
        self.enemy = find(world, classname, "player");
        
        if(find(world, classname, "player") != world)
        {
            self.enemy = trav;
            self.think = self.th_run;
            return;
        }
        
    }
    
};

// roo_pain
// function begins at statement 26778, parm_start=18484
// OP_LOAD_V	28	105	18484
// OP_STORE_V	18484	4	0
// OP_STORE_V	18487	7	0
// OP_STORE_V	1957	10	0
// OP_CALL3	9170	0	0
// OP_CALL0	18410	0	0
// OP_DONE	0	0	0
void () roo_pain = 
{
    SpawnBlood(self.origin, '0.000 0.000 -5.000', 100.000);
    roo_stand1();
};

// roo_run
// function begins at statement 26785, parm_start=18490
// OP_CALL0	492	0	0
// OP_LOAD_F	28	119	18491
// OP_STORE_V	18491	4	0
// OP_STORE_V	18490	7	0
// OP_CALL2	491	0	0
// OP_NOT_F	1	0	18492
// OP_IFNOT	18492	17	0
// OP_ADDRESS	28	119	18493
// OP_LOAD_F	28	119	18494
// OP_CALL0	466	0	0
// OP_GT	1	1182	18495
// OP_MUL_F	18495	821	18496
// OP_SUB_F	18496	819	18497
// OP_MUL_F	18497	17712	18498
// OP_ADD_F	18494	18498	18499
// OP_STOREP_F	18499	18493	0
// OP_ADDRESS	28	119	18500
// OP_LOAD_F	28	119	18501
// OP_STORE_V	18501	4	0
// OP_CALL1	859	0	0
// OP_STOREP_F	1	18500	0
// OP_LOAD_FNC	28	372	18502
// OP_RETURN	0	0	0
// OP_ADDRESS	28	150	18503
// OP_ADD_F	31	1988	18504
// OP_STOREP_F	18504	18503	0
// OP_DONE	0	0	0
void (float dist) roo_run = 
{
    droptofloor();
    
    if(!walkmove(self.angles_y, dist))
    {
        self.angles_y = self.angles_y + ((((random() > 0.500) * 2.000) - 1.000) * 135.000);
        self.angles_y = anglemod(self.angles_y);
        return;
    }
    
    self.nextthink = time + 0.050;
};

void () rally_spawn_kangaroo;
// spawn_roo
// function begins at statement 26812, parm_start=18507
// OP_STORE_F	817	18507	0
// OP_STORE_ENT	739	18510	0
// OP_NOT_F	18507	0	18511
// OP_IFNOT	18511	39	0
// OP_STORE_V	739	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	18512	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	739	0
// OP_EQ_E	739	30	18513
// OP_IFNOT	18513	6	0
// OP_STORE_V	739	4	0
// OP_STORE_V	129	7	0
// OP_STORE_V	18512	10	0
// OP_CALL3	477	0	0
// OP_STORE_ENT	1	739	0
// OP_STORE_F	819	18507	0
// OP_LOAD_V	739	105	18514
// OP_STORE_V	18514	4	0
// OP_STORE_V	2657	7	0
// OP_CALL2	481	0	0
// OP_STORE_ENT	1	18508	0
// OP_NE_E	18508	30	18517
// OP_AND	18517	18507	18518
// OP_IFNOT	18518	12	0
// OP_LOAD_F	18508	104	18519
// OP_EQ_F	18519	243	18520
// OP_LOAD_F	18508	104	18521
// OP_EQ_F	18521	244	18522
// OP_OR	18520	18522	18523
// OP_NOT_F	18523	0	18524
// OP_IFNOT	18524	2	0
// OP_STORE_F	817	18507	0
// OP_LOAD_ENT	18508	164	18525
// OP_STORE_ENT	18525	18508	0
// OP_GOTO	-13	0	0
// OP_NOT_F	18507	0	18526
// OP_EQ_E	18510	739	18527
// OP_AND	18526	18527	18528
// OP_IFNOT	18528	2	0
// OP_RETURN	817	0	0
// OP_GOTO	-39	0	0
// OP_STORE_ENT	28	18509	0
// OP_STORE_ENT	739	28	0
// OP_CALL0	18505	0	0
// OP_STORE_ENT	18509	28	0
// OP_DONE	0	0	0
float () spawn_roo = 
{
    local float clear;
    local entity trav;
    local entity oself;
    local entity first_spawn;
    clear = 0.000;
    first_spawn = last_roo_spawn;
    
    while(!clear)
    {
        last_roo_spawn = find(last_roo_spawn, classname, "rally_spawn_kangaroo");
        
        if(last_roo_spawn == world)
        {
            last_roo_spawn = find(last_roo_spawn, classname, "rally_spawn_kangaroo");
        }
        
        clear = 1.000;
        trav = findradius(last_roo_spawn.origin, 32.000);
        
        while((trav != world) && clear)
        {
            
            if(!((trav.solid == SOLID_NOT) || (trav.solid == SOLID_TRIGGER)))
            {
                clear = 0.000;
            }
            
            trav = trav.chain;
        }
        
        
        if(!clear && (first_spawn == last_roo_spawn))
        {
            return 0.000;
        }
        
    }
    
    oself = self;
    self = last_roo_spawn;
    rally_spawn_kangaroo();
    self = oself;
};

// spawn_nailbox
// function begins at statement 26859, parm_start=18530
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	18530	0
// OP_STORE_V	18530	4	0
// OP_LOAD_V	28	105	18532
// OP_ADD_V	18532	7028	18535
// OP_STORE_V	18535	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	18530	117	18538
// OP_STOREP_V	926	18538	0
// OP_STORE_ENT	28	18531	0
// OP_STORE_ENT	18530	28	0
// OP_ADDRESS	28	146	18541
// OP_STOREP_FNC	7171	18541	0
// OP_STORE_V	28	4	0
// OP_STORE_V	8835	7	0
// OP_CALL2	463	0	0
// OP_ADDRESS	28	433	18542
// OP_STOREP_F	1380	18542	0
// OP_ADDRESS	28	154	18543
// OP_STOREP_F	821	18543	0
// OP_ADDRESS	28	180	18544
// OP_STOREP_S	8839	18544	0
// OP_STORE_V	28	4	0
// OP_STORE_V	926	7	0
// OP_STORE_V	8441	10	0
// OP_CALL3	464	0	0
// OP_CALL0	492	0	0
// OP_NOT_F	1	0	18545
// OP_IFNOT	18545	5	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_STORE_ENT	18531	28	0
// OP_RETURN	0	0	0
// OP_CALL0	8366	0	0
// OP_ADDRESS	28	148	18546
// OP_STOREP_FNC	533	18546	0
// OP_ADDRESS	28	150	18547
// OP_ADD_F	31	855	18548
// OP_STOREP_F	18548	18547	0
// OP_STORE_ENT	18531	28	0
// OP_DONE	0	0	0
void () spawn_nailbox = 
{
    local entity nailbox;
    local entity oself;
    nailbox = spawn();
    setorigin(nailbox, self.origin + '0.000 0.000 32.000');
    nailbox.angles = '0.000 0.000 0.000';
    oself = self;
    self = nailbox;
    self.touch = ammo_touch;
    setmodel(self, "maps/b_nail0.bsp");
    self.aflag = 25.000;
    self.weapon = 2.000;
    self.netname = "nails";
    setsize(self, '0.000 0.000 0.000', '32.000 32.000 56.000');
    
    if(!droptofloor())
    {
        remove(self);
        self = oself;
        return;
    }
    
    PlaceItem();
    self.think = SUB_Remove;
    self.nextthink = time + 10.000;
    self = oself;
};

// roo_die
// function begins at statement 26900, parm_start=18550
// OP_LOAD_S	29	129	18554
// OP_EQ_S	18554	880	18555
// OP_IFNOT	18555	4	0
// OP_LOAD_V	29	113	18556
// OP_STORE_V	18556	18550	0
// OP_GOTO	2	0	0
// OP_STORE_V	926	18550	0
// OP_STORE_V	12129	4	0
// OP_STORE_V	18550	7	0
// OP_CALL2	18142	0	0
// OP_STORE_V	12130	4	0
// OP_STORE_V	18550	7	0
// OP_CALL2	18142	0	0
// OP_STORE_V	12130	4	0
// OP_STORE_V	18550	7	0
// OP_CALL2	18142	0	0
// OP_STORE_V	12131	4	0
// OP_STORE_V	18550	7	0
// OP_CALL2	18142	0	0
// OP_STORE_V	12131	4	0
// OP_STORE_V	18550	7	0
// OP_CALL2	18142	0	0
// OP_ADDRESS	28	165	18559
// OP_STOREP_F	254	18559	0
// OP_STORE_V	28	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	12086	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	339	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	28	104	18560
// OP_STOREP_F	243	18560	0
// OP_LOAD_S	29	129	18561
// OP_NE_S	18561	880	18562
// OP_IFNOT	18562	2	0
// OP_CALL0	18529	0	0
// OP_ADD_F	18407	819	18563
// OP_STORE_F	18563	18407	0
// OP_STORE_F	817	18553	0
// OP_GT	18407	817	18564
// OP_NOT_F	18553	0	18565
// OP_AND	18564	18565	18566
// OP_IFNOT	18566	8	0
// OP_CALL0	18506	0	0
// OP_IFNOT	1	4	0
// OP_SUB_F	18407	819	18567
// OP_STORE_F	18567	18407	0
// OP_GOTO	2	0	0
// OP_STORE_F	819	18553	0
// OP_GOTO	-10	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	474	0	0
// OP_DONE	0	0	0
void () roo_die = 
{
    local vector impact;
    local float done;
    if(other.classname == "player")
    {
        impact = other.velocity;
    }
    else
    {
        impact = '0.000 0.000 0.000';
    }
    
    ThrowDudeGib("progs/gib1.mdl", impact);
    ThrowDudeGib("progs/gib2.mdl", impact);
    ThrowDudeGib("progs/gib2.mdl", impact);
    ThrowDudeGib("progs/gib3.mdl", impact);
    ThrowDudeGib("progs/gib3.mdl", impact);
    self.deadflag = DEAD_DEAD;
    sound(self, CHAN_VOICE, "player/gib.wav", 1.000, ATTN_NONE);
    self.solid = SOLID_NOT;
    
    if(other.classname != "player")
    {
        spawn_nailbox();
    }
    
    unspawned_roos = unspawned_roos + 1.000;
    done = 0.000;
    
    while((unspawned_roos > 0.000) && !done)
    {
        if(spawn_roo())
        {
            unspawned_roos = unspawned_roos - 1.000;
        }
        else
        {
            done = 1.000;
        }
        
    }
    
    remove(self);
};

// roo_touch
// function begins at statement 26953, parm_start=18569
// OP_LOAD_S	29	129	18570
// OP_NE_S	18570	880	18571
// OP_IFNOT	18571	2	0
// OP_RETURN	0	0	0
// OP_LOAD_V	29	113	18572
// OP_STORE_V	18572	4	0
// OP_CALL1	471	0	0
// OP_DIV_F	778	823	18575
// OP_LT	1	18575	18576
// OP_IFNOT	18576	2	0
// OP_RETURN	0	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	18577	7	0
// OP_CALL2	483	0	0
// OP_LOAD_F	29	154	18578
// OP_EQ_F	18578	277	18579
// OP_LOAD_F	29	217	18580
// OP_GT	18580	817	18581
// OP_AND	18579	18581	18582
// OP_IFNOT	18582	21	0
// OP_ADDRESS	29	157	18583
// OP_ADDRESS	29	217	18584
// OP_LOAD_F	29	217	18585
// OP_SUB_F	18585	821	18586
// OP_STOREP_F	18586	18584	0
// OP_STOREP_F	18586	18583	0
// OP_STORE_V	28	4	0
// OP_STORE_V	334	7	0
// OP_STORE_V	3631	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_LOAD_ENT	29	548	18587
// OP_ADDRESS	18587	133	18588
// OP_LOAD_ENT	29	548	18589
// OP_LOAD_F	18589	133	18590
// OP_BITOR	18590	350	18591
// OP_STOREP_F	18591	18588	0
// OP_ADDRESS	29	656	18592
// OP_STOREP_F	31	18592	0
// OP_CALL0	466	0	0
// OP_STORE_F	1	18569	0
// OP_LT	18569	2869	18593
// OP_IFNOT	18593	20	0
// OP_STORE_V	29	4	0
// OP_STORE_V	18594	7	0
// OP_CALL2	483	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	336	7	0
// OP_STORE_V	9032	10	0
// OP_STORE_V	819	13	0
// OP_STORE_V	340	16	0
// OP_CALL5	467	0	0
// OP_ADDRESS	29	162	18595
// OP_LOAD_F	29	162	18596
// OP_BITOR	18596	287	18597
// OP_STOREP_F	18597	18595	0
// OP_ADDRESS	29	393	18598
// OP_STOREP_F	819	18598	0
// OP_ADDRESS	29	389	18599
// OP_ADD_F	31	1112	18600
// OP_STOREP_F	18600	18599	0
// OP_GOTO	22	0	0
// OP_LT	18569	2575	18601
// OP_IFNOT	18601	11	0
// OP_STORE_V	29	4	0
// OP_STORE_V	18602	7	0
// OP_CALL2	483	0	0
// OP_ADDRESS	29	644	18603
// OP_LOAD_F	29	644	18604
// OP_BITOR	18604	699	18605
// OP_STOREP_F	18605	18603	0
// OP_ADDRESS	29	681	18606
// OP_STOREP_F	31	18606	0
// OP_GOTO	10	0	0
// OP_STORE_V	29	4	0
// OP_STORE_V	18607	7	0
// OP_CALL2	483	0	0
// OP_ADDRESS	29	157	18608
// OP_ADDRESS	29	160	18609
// OP_LOAD_F	29	160	18610
// OP_ADD_F	18610	823	18611
// OP_STOREP_F	18611	18609	0
// OP_STOREP_F	18611	18608	0
// OP_ADDRESS	28	181	18612
// OP_STOREP_ENT	29	18612	0
// OP_CALL0	18549	0	0
// OP_DONE	0	0	0
void () roo_touch = 
{
    local float rnd;
    
    if(other.classname != "player")
    {
        return;
    }
    
    
    if(vlen(other.velocity) < (MAX_SPEED / 3.000))
    {
        return;
    }
    
    sprint(other, "Road Kill!\nPouch bonus: ");
    
    if((other.weapon == IT_ROOBAR) && (other.ammo_roobar > 0.000))
    {
        other.currentammo = other.ammo_roobar = other.ammo_roobar - 2.000;
        sound(self, CHAN_AUTO, "rally/process/elect02.wav", 1.000, ATTN_NORM);
        other.veh_body.effects = other.veh_body.effects | EF_DIMLIGHT;
        other.last_crash = time;
    }
    
    rnd = random();
    if(rnd < 0.100)
    {
        sprint(other, "20 seconds of Protection!\n");
        sound(other, CHAN_VOICE, "items/protect.wav", 1.000, ATTN_NORM);
        other.items = other.items | IT_INVULNERABILITY;
        other.invincible_time = 1.000;
        other.invincible_finished = time + 20.000;
    }
    else
    {
        if(rnd < 0.300)
        {
            sprint(other, "Extra Traction!\n");
            other.racing_flags = other.racing_flags | QR_FULL_TRACTION;
            other.full_traction_time = time;
        }
        else
        {
            sprint(other, "3 rockets!\n");
            other.currentammo = other.ammo_rockets = other.ammo_rockets + 3.000;
        }
        
    }
    
    self.enemy = other;
    roo_die();
};

// rally_spawn_kangaroo
// function begins at statement 27041, parm_start=18613
// OP_CALL0	473	0	0
// OP_STORE_ENT	1	18613	0
// OP_ADDRESS	18613	117	18614
// OP_LOAD_V	28	117	18617
// OP_STOREP_V	18617	18614	0
// OP_STORE_V	18613	4	0
// OP_LOAD_V	28	105	18620
// OP_STORE_V	18620	7	0
// OP_CALL2	462	0	0
// OP_ADDRESS	18613	182	18623
// OP_LOAD_F	18613	182	18624
// OP_BITOR	18624	224	18625
// OP_STOREP_F	18625	18623	0
// OP_STORE_ENT	18613	28	0
// OP_ADDRESS	28	129	18626
// OP_STOREP_S	7244	18626	0
// OP_ADDRESS	28	104	18627
// OP_STOREP_F	246	18627	0
// OP_ADDRESS	28	103	18628
// OP_STOREP_F	235	18628	0
// OP_ADDRESS	28	163	18629
// OP_STOREP_F	258	18629	0
// OP_STORE_V	28	4	0
// OP_STORE_V	12146	7	0
// OP_CALL2	463	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	303	7	0
// OP_STORE_V	306	10	0
// OP_CALL3	464	0	0
// OP_ADDRESS	28	152	18630
// OP_STOREP_F	5807	18630	0
// OP_CALL0	492	0	0
// OP_NOT_F	1	0	18631
// OP_IFNOT	18631	10	0
// OP_STORE_V	18632	4	0
// OP_CALL1	484	0	0
// OP_LOAD_V	28	105	18633
// OP_STORE_V	18633	4	0
// OP_CALL1	486	0	0
// OP_STORE_V	1	4	0
// OP_CALL1	484	0	0
// OP_STORE_V	888	4	0
// OP_CALL1	484	0	0
// OP_ADDRESS	28	146	18636
// OP_STOREP_FNC	18568	18636	0
// OP_ADDRESS	28	370	18637
// OP_STOREP_FNC	18410	18637	0
// OP_ADDRESS	28	371	18638
// OP_STOREP_FNC	18410	18638	0
// OP_ADDRESS	28	372	18639
// OP_STOREP_FNC	18415	18639	0
// OP_ADDRESS	28	376	18640
// OP_STOREP_FNC	18549	18640	0
// OP_ADDRESS	28	375	18641
// OP_STOREP_FNC	18483	18641	0
// OP_CALL0	15294	0	0
// OP_DONE	0	0	0
void () rally_spawn_kangaroo = 
{
    local entity roo;
    roo = spawn();
    roo.angles = self.angles;
    setorigin(roo, self.origin);
    roo.flags = roo.flags | FL_MONSTER;
    self = roo;
    self.classname = "rally_kangaroo";
    self.solid = SOLID_SLIDEBOX;
    self.movetype = MOVETYPE_STEP;
    self.takedamage = DAMAGE_AIM;
    setmodel(self, "models/kangaroo.mdl");
    setsize(self, VEC_HULL_MIN, VEC_HULL_MAX);
    self.health = 120.000;
    
    if(!droptofloor())
    {
        dprint("roo fell out of level at: ");
        dprint(vtos(self.origin));
        dprint("\n");
    }
    
    self.touch = roo_touch;
    self.th_stand = roo_stand1;
    self.th_walk = roo_stand1;
    self.th_run = roo_run1;
    self.th_die = roo_die;
    self.th_pain = roo_pain;
    walkmonster_start();
};

