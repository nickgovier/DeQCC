void (float num_bubbles) DeathBubbles;
// gv_tilt
// function begins at statement 8443, parm_start=6405
// OP_LOAD_ENT	28	206	6426
// OP_STORE_ENT	6426	6425	0
// OP_LOAD_F	6425	144	6427
// OP_MUL_FV	6427	6286	6428
// OP_STORE_V	6428	6405	0
// OP_STORE_V	6405	4	0
// OP_CALL1	496	0	0
// OP_LOAD_V	6425	130	6431
// OP_MUL_FV	810	59	6434
// OP_ADD_V	6431	6434	6437
// OP_MUL_FV	810	65	6440
// OP_SUB_V	6437	6440	6443
// OP_STORE_V	6443	6405	0
// OP_LOAD_V	6425	130	6446
// OP_MUL_FV	810	59	6449
// OP_ADD_V	6446	6449	6452
// OP_MUL_FV	810	65	6455
// OP_ADD_V	6452	6455	6458
// OP_STORE_V	6458	6408	0
// OP_LOAD_V	6425	130	6461
// OP_MUL_FV	810	59	6464
// OP_SUB_V	6461	6464	6467
// OP_MUL_FV	810	65	6470
// OP_SUB_V	6467	6470	6473
// OP_STORE_V	6473	6411	0
// OP_LOAD_V	6425	130	6476
// OP_MUL_FV	810	59	6479
// OP_SUB_V	6476	6479	6482
// OP_MUL_FV	810	65	6485
// OP_ADD_V	6482	6485	6488
// OP_STORE_V	6488	6414	0
// OP_MUL_FV	812	62	6491
// OP_SUB_V	6405	6491	6494
// OP_STORE_V	6494	4	0
// OP_MUL_FV	1252	62	6497
// OP_SUB_V	6405	6497	6500
// OP_STORE_V	6500	7	0
// OP_STORE_V	268	10	0
// OP_STORE_V	6425	13	0
// OP_CALL4	510	0	0
// OP_STORE_F	70	6417	0
// OP_MUL_FV	812	62	6503
// OP_SUB_V	6408	6503	6506
// OP_STORE_V	6506	4	0
// OP_MUL_FV	1252	62	6509
// OP_SUB_V	6408	6509	6512
// OP_STORE_V	6512	7	0
// OP_STORE_V	268	10	0
// OP_STORE_V	6425	13	0
// OP_CALL4	510	0	0
// OP_STORE_F	70	6418	0
// OP_MUL_FV	812	62	6515
// OP_SUB_V	6411	6515	6518
// OP_STORE_V	6518	4	0
// OP_MUL_FV	1252	62	6521
// OP_SUB_V	6411	6521	6524
// OP_STORE_V	6524	7	0
// OP_STORE_V	268	10	0
// OP_STORE_V	6425	13	0
// OP_CALL4	510	0	0
// OP_STORE_F	70	6419	0
// OP_MUL_FV	812	62	6527
// OP_SUB_V	6414	6527	6530
// OP_STORE_V	6530	4	0
// OP_MUL_FV	1252	62	6533
// OP_SUB_V	6414	6533	6536
// OP_STORE_V	6536	7	0
// OP_STORE_V	268	10	0
// OP_STORE_V	6425	13	0
// OP_CALL4	510	0	0
// OP_STORE_F	70	6420	0
// OP_EQ_F	6417	677	6539
// OP_IFNOT	6539	18	0
// OP_EQ_F	6418	677	6540
// OP_IFNOT	6540	16	0
// OP_EQ_F	6419	677	6541
// OP_IFNOT	6541	14	0
// OP_EQ_F	6420	677	6542
// OP_IFNOT	6542	12	0
// OP_LOAD_F	6425	143	6543
// OP_GT	6543	619	6544
// OP_LOAD_F	6425	143	6545
// OP_LT	6545	1827	6546
// OP_AND	6544	6546	6547
// OP_IFNOT	6547	5	0
// OP_ADDRESS	6425	143	6548
// OP_LOAD_F	6425	143	6549
// OP_SUB_F	6549	813	6550
// OP_STOREP_F	6550	6548	0
// OP_RETURN	0	0	0
// OP_SUB_F	6417	6418	6551
// OP_ADD_F	6551	6419	6552
// OP_SUB_F	6552	6420	6553
// OP_STORE_F	6553	6421	0
// OP_SUB_F	6417	6419	6554
// OP_ADD_F	6554	6418	6555
// OP_SUB_F	6555	6420	6556
// OP_STORE_F	6556	6422	0
// OP_STORE_V	6557	6405	0
// OP_STORE_F	6421	6405	0
// OP_STORE_F	6422	6407	0
// OP_STORE_V	6405	4	0
// OP_CALL1	503	0	0
// OP_STORE_V	1	6405	0
// OP_STORE_F	6405	6408	0
// OP_STORE_F	6407	6409	0
// OP_STORE_F	6406	6410	0
// OP_MUL_VF	62	6410	6560
// OP_MUL_VF	59	6409	6563
// OP_ADD_V	6560	6563	6566
// OP_MUL_VF	65	6408	6569
// OP_SUB_V	6566	6569	6572
// OP_STORE_V	6572	6411	0
// OP_STORE_V	6411	4	0
// OP_CALL1	503	0	0
// OP_STORE_V	1	6411	0
// OP_NOT_F	6423	0	6575
// OP_IFNOT	6575	10	0
// OP_SUB_F	808	6417	6576
// OP_SUB_F	6576	6418	6577
// OP_SUB_F	6577	6419	6578
// OP_SUB_F	6578	6420	6579
// OP_MUL_F	6579	818	6580
// OP_STORE_F	6580	6424	0
// OP_GT	6424	6423	6581
// OP_IFNOT	6581	2	0
// OP_STORE_F	6424	6423	0
// OP_LOAD_V	6425	142	6582
// OP_STORE_V	6582	4	0
// OP_CALL1	496	0	0
// OP_STORE_V	6405	4	0
// OP_CALL1	541	0	0
// OP_STORE_V	1	6408	0
// OP_STORE_V	6585	6411	0
// OP_SUB_F	619	6408	6588
// OP_STORE_V	6588	4	0
// OP_CALL1	1299	0	0
// OP_STORE_F	1	6411	0
// OP_LOAD_F	6425	144	6589
// OP_STORE_F	6589	6412	0
// OP_SUB_F	6409	1268	6590
// OP_STORE_V	6590	4	0
// OP_CALL1	1299	0	0
// OP_STORE_F	1	6413	0
// OP_LOAD_V	6425	142	6591
// OP_SUB_V	6411	6591	6594
// OP_STORE_V	6594	6414	0
// OP_STORE_V	6414	4	0
// OP_CALL1	1299	0	0
// OP_STORE_F	1	6417	0
// OP_GT	6417	1827	6597
// OP_IFNOT	6597	3	0
// OP_SUB_F	6417	1459	6598
// OP_STORE_F	6598	6417	0
// OP_STORE_V	6416	4	0
// OP_CALL1	1299	0	0
// OP_STORE_F	1	6418	0
// OP_GT	6418	1827	6599
// OP_IFNOT	6599	3	0
// OP_SUB_F	6418	1459	6600
// OP_STORE_F	6600	6418	0
// OP_ADDRESS	6425	147	6601
// OP_MUL_F	6417	808	6602
// OP_STOREP_F	6602	6601	0
// OP_ADDRESS	6425	149	6603
// OP_MUL_F	6418	808	6604
// OP_STOREP_F	6604	6603	0
// OP_DONE	0	0	0
void () gv_tilt = 
{
    local vector v1;
    local vector v2;
    local vector v3;
    local vector v4;
    local float l1;
    local float l2;
    local float l3;
    local float l4;
    local float r1;
    local float r2;
    local float w1;
    local float w2;
    local entity vehicle;
    vehicle = self.enemy;
    v1 = vehicle.angles_y * '0.000 1.000 0.000';
    makevectors(v1);
    v1 = (vehicle.origin + (8.000 * v_forward)) - (8.000 * v_right);
    v2 = (vehicle.origin + (8.000 * v_forward)) + (8.000 * v_right);
    v3 = (vehicle.origin - (8.000 * v_forward)) - (8.000 * v_right);
    v4 = (vehicle.origin - (8.000 * v_forward)) + (8.000 * v_right);
    traceline(v1 - (16.000 * v_up), v1 - (80.000 * v_up), TRUE, vehicle);
    l1 = trace_fraction;
    traceline(v2 - (16.000 * v_up), v2 - (80.000 * v_up), TRUE, vehicle);
    l2 = trace_fraction;
    traceline(v3 - (16.000 * v_up), v3 - (80.000 * v_up), TRUE, vehicle);
    l3 = trace_fraction;
    traceline(v4 - (16.000 * v_up), v4 - (80.000 * v_up), TRUE, vehicle);
    l4 = trace_fraction;
    
    if(l1 == 1.000)
    {
        
        if(l2 == 1.000)
        {
            
            if(l3 == 1.000)
            {
                
                if(l4 == 1.000)
                {
                    
                    if((vehicle.angles_x > 0.000) && (vehicle.angles_x < 180.000))
                    {
                        vehicle.angles_x = vehicle.angles_x - 5.000;
                    }
                    
                    return;
                }
                
            }
            
        }
        
    }
    
    r1 = ((l1 - l2) + l3) - l4;
    r2 = ((l1 - l3) + l2) - l4;
    v1 = '0.000 0.500 0.000';
    v1_x = r1;
    v1_z = r2;
    v1 = normalize(v1);
    v2_x = v1_x;
    v2_y = 0.000;
    v2_z = 0.000;
    v3 = ((v_up * 0.000) + (v_forward * 0.000)) - (v_right * v2_x);
    v3 = normalize(v3);
    
    if(!w1)
    {
        w2 = ((((4.000 - l1) - l2) - l3) - l4) * 64.000;
        
        if(w2 > w1)
        {
            w1 = w2;
        }
        
    }
    
    makevectors(vehicle.angles);
    v2 = vectoangles(v1);
    v3 = '0.000 2.000 0.000';
    v3_x = anglemod(0.000 - v2_x);
    v3_y = vehicle.angles_y;
    v3_z = anglemod(0.000 - 90.000);
    v4 = v3 - vehicle.angles;
    l1 = anglemod(v4_x);
    
    if(l1 > 180.000)
    {
        l1 = l1 - 360.000;
    }
    
    l2 = anglemod(0.000);
    
    if(l2 > 180.000)
    {
        l2 = l2 - 360.000;
    }
    
    vehicle.avelocity_x = l1 * 4.000;
    vehicle.avelocity_z = l2 * 4.000;
};

// hv_tilt
// function begins at statement 8611, parm_start=6606
// OP_LOAD_ENT	28	206	6628
// OP_STORE_ENT	6628	6627	0
// OP_LOAD_F	6627	144	6629
// OP_MUL_FV	6629	6286	6630
// OP_STORE_V	6630	6607	0
// OP_STORE_V	6607	4	0
// OP_CALL1	496	0	0
// OP_LOAD_V	6627	130	6633
// OP_MUL_FV	810	59	6636
// OP_ADD_V	6633	6636	6639
// OP_MUL_FV	810	65	6642
// OP_SUB_V	6639	6642	6645
// OP_STORE_V	6645	6607	0
// OP_LOAD_V	6627	130	6648
// OP_MUL_FV	810	59	6651
// OP_ADD_V	6648	6651	6654
// OP_MUL_FV	810	65	6657
// OP_ADD_V	6654	6657	6660
// OP_STORE_V	6660	6610	0
// OP_LOAD_V	6627	130	6663
// OP_MUL_FV	810	59	6666
// OP_SUB_V	6663	6666	6669
// OP_MUL_FV	810	65	6672
// OP_SUB_V	6669	6672	6675
// OP_STORE_V	6675	6613	0
// OP_LOAD_V	6627	130	6678
// OP_MUL_FV	810	59	6681
// OP_SUB_V	6678	6681	6684
// OP_MUL_FV	810	65	6687
// OP_ADD_V	6684	6687	6690
// OP_STORE_V	6690	6616	0
// OP_MUL_F	6606	818	6693
// OP_STORE_F	6693	6625	0
// OP_MUL_FV	812	62	6694
// OP_SUB_V	6607	6694	6697
// OP_STORE_V	6697	4	0
// OP_ADD_F	812	6625	6700
// OP_MUL_FV	6700	62	6701
// OP_SUB_V	6607	6701	6704
// OP_STORE_V	6704	7	0
// OP_STORE_V	268	10	0
// OP_STORE_V	6627	13	0
// OP_CALL4	510	0	0
// OP_STORE_F	70	6619	0
// OP_IFNOT	80	2	0
// OP_STORE_F	972	6619	0
// OP_MUL_FV	812	62	6707
// OP_SUB_V	6610	6707	6710
// OP_STORE_V	6710	4	0
// OP_ADD_F	812	6625	6713
// OP_MUL_FV	6713	62	6714
// OP_SUB_V	6610	6714	6717
// OP_STORE_V	6717	7	0
// OP_STORE_V	268	10	0
// OP_STORE_V	6627	13	0
// OP_CALL4	510	0	0
// OP_STORE_F	70	6620	0
// OP_IFNOT	80	2	0
// OP_STORE_F	972	6620	0
// OP_MUL_FV	812	62	6720
// OP_SUB_V	6613	6720	6723
// OP_STORE_V	6723	4	0
// OP_ADD_F	812	6625	6726
// OP_MUL_FV	6726	62	6727
// OP_SUB_V	6613	6727	6730
// OP_STORE_V	6730	7	0
// OP_STORE_V	268	10	0
// OP_STORE_V	6627	13	0
// OP_CALL4	510	0	0
// OP_STORE_F	70	6621	0
// OP_IFNOT	80	2	0
// OP_STORE_F	972	6621	0
// OP_MUL_FV	812	62	6733
// OP_SUB_V	6616	6733	6736
// OP_STORE_V	6736	4	0
// OP_ADD_F	812	6625	6739
// OP_MUL_FV	6739	62	6740
// OP_SUB_V	6616	6740	6743
// OP_STORE_V	6743	7	0
// OP_STORE_V	268	10	0
// OP_STORE_V	6627	13	0
// OP_CALL4	510	0	0
// OP_STORE_F	70	6622	0
// OP_IFNOT	80	2	0
// OP_STORE_F	972	6622	0
// OP_EQ_F	6619	677	6746
// OP_IFNOT	6746	18	0
// OP_EQ_F	6620	677	6747
// OP_IFNOT	6747	16	0
// OP_EQ_F	6621	677	6748
// OP_IFNOT	6748	14	0
// OP_EQ_F	6622	677	6749
// OP_IFNOT	6749	12	0
// OP_LOAD_F	6627	143	6750
// OP_GT	6750	619	6751
// OP_LOAD_F	6627	143	6752
// OP_LT	6752	1827	6753
// OP_AND	6751	6753	6754
// OP_IFNOT	6754	5	0
// OP_ADDRESS	6627	143	6755
// OP_LOAD_F	6627	143	6756
// OP_SUB_F	6756	813	6757
// OP_STOREP_F	6757	6755	0
// OP_RETURN	0	0	0
// OP_SUB_F	6619	6620	6758
// OP_ADD_F	6758	6621	6759
// OP_SUB_F	6759	6622	6760
// OP_STORE_F	6760	6623	0
// OP_SUB_F	6619	6621	6761
// OP_ADD_F	6761	6620	6762
// OP_SUB_F	6762	6622	6763
// OP_STORE_F	6763	6624	0
// OP_DIV_F	677	6606	6764
// OP_MUL_VF	6557	6764	6765
// OP_STORE_V	6765	6607	0
// OP_STORE_F	6623	6607	0
// OP_STORE_F	6624	6609	0
// OP_STORE_V	6607	4	0
// OP_CALL1	503	0	0
// OP_STORE_V	1	6607	0
// OP_STORE_F	6607	6610	0
// OP_STORE_F	6609	6611	0
// OP_STORE_F	6608	6612	0
// OP_MUL_VF	62	6612	6768
// OP_MUL_VF	59	6611	6771
// OP_ADD_V	6768	6771	6774
// OP_MUL_VF	65	6610	6777
// OP_SUB_V	6774	6777	6780
// OP_STORE_V	6780	6613	0
// OP_STORE_V	6613	4	0
// OP_CALL1	503	0	0
// OP_STORE_V	1	6613	0
// OP_NOT_F	6625	0	6783
// OP_IFNOT	6783	10	0
// OP_SUB_F	808	6619	6784
// OP_SUB_F	6784	6620	6785
// OP_SUB_F	6785	6621	6786
// OP_SUB_F	6786	6622	6787
// OP_MUL_F	6787	818	6788
// OP_STORE_F	6788	6626	0
// OP_GT	6626	6625	6789
// OP_IFNOT	6789	2	0
// OP_STORE_F	6626	6625	0
// OP_LOAD_V	6627	142	6790
// OP_STORE_V	6790	4	0
// OP_CALL1	496	0	0
// OP_STORE_V	6607	4	0
// OP_CALL1	541	0	0
// OP_STORE_V	1	6610	0
// OP_STORE_V	6585	6613	0
// OP_SUB_F	619	6610	6793
// OP_STORE_V	6793	4	0
// OP_CALL1	1299	0	0
// OP_STORE_F	1	6613	0
// OP_LOAD_F	6627	144	6794
// OP_STORE_F	6794	6614	0
// OP_SUB_F	6611	1268	6795
// OP_STORE_V	6795	4	0
// OP_CALL1	1299	0	0
// OP_STORE_F	1	6615	0
// OP_LOAD_F	28	414	6796
// OP_IFNOT	6796	7	0
// OP_LOAD_F	28	414	6797
// OP_LOAD_F	6627	240	6798
// OP_MUL_F	6797	6798	6799
// OP_MUL_F	6799	810	6800
// OP_ADD_F	6615	6800	6801
// OP_STORE_F	6801	6615	0
// OP_LOAD_V	6627	142	6802
// OP_SUB_V	6613	6802	6805
// OP_STORE_V	6805	6616	0
// OP_STORE_V	6616	4	0
// OP_CALL1	1299	0	0
// OP_STORE_F	1	6619	0
// OP_GT	6619	1827	6808
// OP_IFNOT	6808	3	0
// OP_SUB_F	6619	1459	6809
// OP_STORE_F	6809	6619	0
// OP_STORE_V	6618	4	0
// OP_CALL1	1299	0	0
// OP_STORE_F	1	6620	0
// OP_GT	6620	1827	6810
// OP_IFNOT	6810	3	0
// OP_SUB_F	6620	1459	6811
// OP_STORE_F	6811	6620	0
// OP_ADDRESS	6627	147	6812
// OP_MUL_F	6619	808	6813
// OP_STOREP_F	6813	6812	0
// OP_ADDRESS	6627	149	6814
// OP_MUL_F	6620	808	6815
// OP_STOREP_F	6815	6814	0
// OP_DONE	0	0	0
void (float fac) hv_tilt = 
{
    local vector v1;
    local vector v2;
    local vector v3;
    local vector v4;
    local float l1;
    local float l2;
    local float l3;
    local float l4;
    local float r1;
    local float r2;
    local float w1;
    local float w2;
    local entity vehicle;
    vehicle = self.enemy;
    v1 = vehicle.angles_y * '0.000 1.000 0.000';
    makevectors(v1);
    v1 = (vehicle.origin + (8.000 * v_forward)) - (8.000 * v_right);
    v2 = (vehicle.origin + (8.000 * v_forward)) + (8.000 * v_right);
    v3 = (vehicle.origin - (8.000 * v_forward)) - (8.000 * v_right);
    v4 = (vehicle.origin - (8.000 * v_forward)) + (8.000 * v_right);
    w1 = fac * 64.000;
    traceline(v1 - (16.000 * v_up), v1 - ((16.000 + w1) * v_up), TRUE, vehicle);
    l1 = trace_fraction;
    
    if(trace_inwater)
    {
        l1 = 0.500;
    }
    
    traceline(v2 - (16.000 * v_up), v2 - ((16.000 + w1) * v_up), TRUE, vehicle);
    l2 = trace_fraction;
    
    if(trace_inwater)
    {
        l2 = 0.500;
    }
    
    traceline(v3 - (16.000 * v_up), v3 - ((16.000 + w1) * v_up), TRUE, vehicle);
    l3 = trace_fraction;
    
    if(trace_inwater)
    {
        l3 = 0.500;
    }
    
    traceline(v4 - (16.000 * v_up), v4 - ((16.000 + w1) * v_up), TRUE, vehicle);
    l4 = trace_fraction;
    
    if(trace_inwater)
    {
        l4 = 0.500;
    }
    
    
    if(l1 == 1.000)
    {
        
        if(l2 == 1.000)
        {
            
            if(l3 == 1.000)
            {
                
                if(l4 == 1.000)
                {
                    
                    if((vehicle.angles_x > 0.000) && (vehicle.angles_x < 180.000))
                    {
                        vehicle.angles_x = vehicle.angles_x - 5.000;
                    }
                    
                    return;
                }
                
            }
            
        }
        
    }
    
    r1 = ((l1 - l2) + l3) - l4;
    r2 = ((l1 - l3) + l2) - l4;
    v1 = '0.000 0.500 0.000' * (1.000 / fac);
    v1_x = r1;
    v1_z = r2;
    v1 = normalize(v1);
    v2_x = v1_x;
    v2_y = 0.000;
    v2_z = 0.000;
    v3 = ((v_up * 0.000) + (v_forward * 0.000)) - (v_right * v2_x);
    v3 = normalize(v3);
    
    if(!w1)
    {
        w2 = ((((4.000 - l1) - l2) - l3) - l4) * 64.000;
        
        if(w2 > w1)
        {
            w1 = w2;
        }
        
    }
    
    makevectors(vehicle.angles);
    v2 = vectoangles(v1);
    v3 = '0.000 2.000 0.000';
    v3_x = anglemod(0.000 - v2_x);
    v3_y = vehicle.angles_y;
    v3_z = anglemod(0.000 - 90.000);
    
    if(self.lefty)
    {
        v3_z = 0.000 + ((self.lefty * vehicle.thru) * 8.000);
    }
    
    v4 = v3 - vehicle.angles;
    l1 = anglemod(v4_x);
    
    if(l1 > 180.000)
    {
        l1 = l1 - 360.000;
    }
    
    l2 = anglemod(0.000);
    
    if(l2 > 180.000)
    {
        l2 = l2 - 360.000;
    }
    
    vehicle.avelocity_x = l1 * 4.000;
    vehicle.avelocity_z = l2 * 4.000;
};

// Turn_groundveh
// function begins at statement 8803, parm_start=6817
// OP_LOAD_ENT	28	206	6838
// OP_STORE_ENT	6838	6822	0
// OP_STORE_V	607	6823	0
// OP_LOAD_F	6822	144	6839
// OP_SUB_F	6818	6839	6840
// OP_STORE_V	6840	4	0
// OP_CALL1	1299	0	0
// OP_STORE_F	1	6824	0
// OP_GT	6824	1827	6841
// OP_IFNOT	6841	3	0
// OP_SUB_F	6824	1459	6842
// OP_STORE_F	6842	6824	0
// OP_STORE_F	619	6827	0
// OP_LT	6824	619	6843
// OP_IFNOT	6843	3	0
// OP_SUB_F	619	6821	6844
// OP_STORE_F	6844	6827	0
// OP_GT	6824	619	6845
// OP_IFNOT	6845	2	0
// OP_STORE_F	6821	6827	0
// OP_STORE_V	6824	4	0
// OP_CALL1	534	0	0
// OP_STORE_F	1	6835	0
// OP_STORE_V	6827	4	0
// OP_CALL1	534	0	0
// OP_MUL_F	1	32	6846
// OP_STORE_F	6846	6836	0
// OP_LT	6835	6836	6847
// OP_IFNOT	6847	4	0
// OP_STORE_F	619	6827	0
// OP_ADDRESS	6822	144	6848
// OP_STOREP_F	6818	6848	0
// OP_LOAD_F	28	414	6849
// OP_IFNOT	6849	5	0
// OP_LOAD_F	28	414	6850
// OP_MUL_F	6850	6821	6851
// OP_SUB_F	619	6851	6852
// OP_STORE_F	6852	6827	0
// OP_ADDRESS	6822	143	6853
// OP_LOAD_F	6822	143	6854
// OP_STORE_V	6854	4	0
// OP_CALL1	1299	0	0
// OP_STOREP_F	1	6853	0
// OP_LOAD_F	6822	143	6855
// OP_GT	6855	1827	6856
// OP_IFNOT	6856	5	0
// OP_ADDRESS	6822	143	6857
// OP_LOAD_F	6822	143	6858
// OP_SUB_F	6858	1459	6859
// OP_STOREP_F	6859	6857	0
// OP_ADDRESS	6822	144	6860
// OP_LOAD_F	6822	144	6861
// OP_STORE_V	6861	4	0
// OP_CALL1	1299	0	0
// OP_STOREP_F	1	6860	0
// OP_LOAD_F	6822	144	6862
// OP_GT	6862	1827	6863
// OP_IFNOT	6863	5	0
// OP_ADDRESS	6822	144	6864
// OP_LOAD_F	6822	144	6865
// OP_SUB_F	6865	1459	6866
// OP_STOREP_F	6866	6864	0
// OP_ADDRESS	6822	145	6867
// OP_LOAD_F	6822	145	6868
// OP_STORE_V	6868	4	0
// OP_CALL1	1299	0	0
// OP_STOREP_F	1	6867	0
// OP_LOAD_F	6822	145	6869
// OP_GT	6869	1827	6870
// OP_IFNOT	6870	5	0
// OP_ADDRESS	6822	145	6871
// OP_LOAD_F	6822	145	6872
// OP_SUB_F	6872	1459	6873
// OP_STOREP_F	6873	6871	0
// OP_ADDRESS	6822	148	6874
// OP_STOREP_F	6827	6874	0
// OP_LOAD_V	28	200	6875
// OP_STORE_V	6875	6832	0
// OP_LOAD_ENT	28	412	6878
// OP_LOAD_F	6878	238	6879
// OP_BITAND	6879	677	6880
// OP_IFNOT	6880	26	0
// OP_LOAD_ENT	28	412	6881
// OP_LOAD_ENT	6881	263	6882
// OP_IFNOT	6882	22	0
// OP_LOAD_ENT	28	412	6883
// OP_LOAD_ENT	6883	263	6884
// OP_LOAD_V	6884	130	6885
// OP_LOAD_ENT	28	412	6888
// OP_LOAD_ENT	6888	263	6889
// OP_LOAD_V	6889	159	6890
// OP_LOAD_ENT	28	412	6893
// OP_LOAD_ENT	6893	263	6894
// OP_LOAD_V	6894	163	6895
// OP_ADD_V	6890	6895	6898
// OP_MUL_VF	6898	972	6901
// OP_ADD_V	6885	6901	6904
// OP_STORE_V	6904	6823	0
// OP_LOAD_ENT	28	206	6907
// OP_LOAD_V	6907	130	6908
// OP_SUB_V	6823	6908	6911
// OP_STORE_V	6911	4	0
// OP_CALL1	541	0	0
// OP_STORE_V	1	6817	0
// OP_STORE_V	1	6832	0
// OP_GOTO	2	0	0
// OP_STORE_F	619	6820	0
// OP_LOAD_ENT	6822	467	6914
// OP_IFNOT	6914	107	0
// OP_LOAD_F	6822	144	6915
// OP_SUB_F	6915	6833	6916
// OP_STORE_F	6916	6818	0
// OP_GT	6818	1827	6917
// OP_IFNOT	6917	3	0
// OP_SUB_F	6818	1459	6918
// OP_STORE_F	6918	6818	0
// OP_LOAD_F	28	207	6919
// OP_BITAND	6919	277	6920
// OP_NOT_F	6920	0	6921
// OP_IFNOT	6921	2	0
// OP_STORE_F	619	6818	0
// OP_LOAD_F	6822	238	6922
// OP_SUB_F	6818	6922	6923
// OP_STORE_F	6923	6824	0
// OP_LT	6824	619	6924
// OP_IFNOT	6924	3	0
// OP_ADD_F	6824	1459	6925
// OP_STORE_F	6925	6824	0
// OP_GT	6824	1827	6926
// OP_IFNOT	6926	3	0
// OP_SUB_F	6824	1459	6927
// OP_STORE_F	6927	6824	0
// OP_STORE_F	619	6827	0
// OP_LT	6824	619	6928
// OP_IFNOT	6928	3	0
// OP_SUB_F	619	6820	6929
// OP_STORE_F	6929	6827	0
// OP_GT	6824	619	6930
// OP_IFNOT	6930	2	0
// OP_STORE_F	6820	6827	0
// OP_STORE_V	6824	4	0
// OP_CALL1	534	0	0
// OP_STORE_F	1	6835	0
// OP_STORE_V	6827	4	0
// OP_CALL1	534	0	0
// OP_MUL_F	1	32	6931
// OP_STORE_F	6931	6836	0
// OP_LT	6835	6836	6932
// OP_IFNOT	6932	5	0
// OP_STORE_F	619	6827	0
// OP_ADDRESS	6822	238	6933
// OP_STOREP_F	6818	6933	0
// OP_GOTO	6	0	0
// OP_ADDRESS	6822	238	6934
// OP_LOAD_F	6822	238	6935
// OP_MUL_F	6827	32	6936
// OP_ADD_F	6935	6936	6937
// OP_STOREP_F	6937	6934	0
// OP_LOAD_F	6822	238	6938
// OP_EQ_F	6938	619	6939
// OP_IFNOT	6939	7	0
// OP_LOAD_ENT	28	206	6940
// OP_LOAD_ENT	6940	467	6941
// OP_ADDRESS	6941	142	6942
// OP_LOAD_V	6822	142	6945
// OP_STOREP_V	6945	6942	0
// OP_GOTO	47	0	0
// OP_LOAD_F	6822	238	6948
// OP_MUL_VF	6286	6948	6949
// OP_STORE_V	6949	4	0
// OP_CALL1	496	0	0
// OP_STORE_F	60	6835	0
// OP_STORE_F	59	6836	0
// OP_LOAD_V	6822	142	6952
// OP_STORE_V	6952	6829	0
// OP_SUB_F	619	6829	6955
// OP_STORE_F	6955	6829	0
// OP_STORE_V	6829	4	0
// OP_CALL1	496	0	0
// OP_MUL_VF	59	6836	6956
// OP_MUL_VF	65	6835	6959
// OP_ADD_V	6956	6959	6962
// OP_STORE_V	6962	6829	0
// OP_STORE_V	6829	4	0
// OP_CALL1	541	0	0
// OP_STORE_V	1	6829	0
// OP_LOAD_ENT	28	206	6965
// OP_LOAD_ENT	6965	467	6966
// OP_ADDRESS	6966	142	6967
// OP_STOREP_V	6829	6967	0
// OP_LOAD_ENT	28	206	6970
// OP_LOAD_ENT	6970	467	6971
// OP_LOAD_F	6971	144	6972
// OP_LOAD_F	6822	144	6973
// OP_SUB_F	6972	6973	6974
// OP_STORE_F	6974	6837	0
// OP_LT	6837	619	6975
// OP_IFNOT	6975	3	0
// OP_ADD_F	6837	1459	6976
// OP_STORE_F	6976	6837	0
// OP_GT	6837	1827	6977
// OP_IFNOT	6977	3	0
// OP_SUB_F	6837	1459	6978
// OP_STORE_F	6978	6837	0
// OP_LOAD_ENT	28	206	6979
// OP_LOAD_ENT	6979	467	6980
// OP_ADDRESS	6980	145	6981
// OP_LOAD_F	6822	145	6982
// OP_MUL_F	6982	6836	6983
// OP_LOAD_F	6822	143	6984
// OP_MUL_F	6984	6835	6985
// OP_ADD_F	6983	6985	6986
// OP_STOREP_F	6986	6981	0
// OP_LOAD_ENT	6822	467	6987
// OP_STORE_ENT	6987	6822	0
// OP_LOAD_ENT	28	206	6988
// OP_LOAD_ENT	6988	412	6989
// OP_IFNOT	6989	106	0
// OP_LOAD_F	6822	143	6990
// OP_SUB_F	6817	6990	6991
// OP_STORE_F	6991	6817	0
// OP_LT	6817	619	6992
// OP_IFNOT	6992	3	0
// OP_ADD_F	6817	1459	6993
// OP_STORE_F	6993	6817	0
// OP_GT	6817	1827	6994
// OP_IFNOT	6994	3	0
// OP_SUB_F	6817	1459	6995
// OP_STORE_F	6995	6817	0
// OP_GT	6817	1252	6996
// OP_IFNOT	6996	2	0
// OP_STORE_F	1252	6817	0
// OP_LT	6817	6997	6998
// OP_IFNOT	6998	2	0
// OP_STORE_F	6997	6817	0
// OP_LOAD_F	28	207	6999
// OP_BITAND	6999	277	7000
// OP_NOT_F	7000	0	7001
// OP_IFNOT	7001	2	0
// OP_STORE_F	619	6817	0
// OP_LOAD_F	6822	238	7002
// OP_SUB_F	6817	7002	7003
// OP_STORE_F	7003	6823	0
// OP_STORE_F	619	6826	0
// OP_LT	6823	619	7004
// OP_IFNOT	7004	3	0
// OP_SUB_F	619	6820	7005
// OP_STORE_F	7005	6826	0
// OP_GT	6823	619	7006
// OP_IFNOT	7006	2	0
// OP_STORE_F	6820	6826	0
// OP_STORE_V	6823	4	0
// OP_CALL1	534	0	0
// OP_STORE_F	1	6835	0
// OP_STORE_V	6826	4	0
// OP_CALL1	534	0	0
// OP_MUL_F	1	32	7007
// OP_STORE_F	7007	6836	0
// OP_LT	6835	6836	7008
// OP_IFNOT	7008	5	0
// OP_STORE_F	619	6826	0
// OP_ADDRESS	6822	238	7009
// OP_STOREP_F	6817	7009	0
// OP_GOTO	6	0	0
// OP_ADDRESS	6822	238	7010
// OP_LOAD_F	6822	238	7011
// OP_MUL_F	6826	32	7012
// OP_ADD_F	7011	7012	7013
// OP_STOREP_F	7013	7010	0
// OP_LOAD_F	6822	238	7014
// OP_EQ_F	7014	619	7015
// OP_IFNOT	7015	7	0
// OP_LOAD_ENT	28	206	7016
// OP_LOAD_ENT	7016	412	7017
// OP_ADDRESS	7017	142	7018
// OP_LOAD_V	6822	142	7021
// OP_STOREP_V	7021	7018	0
// OP_RETURN	0	0	0
// OP_LOAD_F	6822	238	7024
// OP_MUL_VF	6286	7024	7025
// OP_STORE_V	7025	4	0
// OP_CALL1	496	0	0
// OP_STORE_F	60	6835	0
// OP_STORE_F	59	6836	0
// OP_LOAD_V	6822	142	7028
// OP_STORE_V	7028	6829	0
// OP_SUB_F	619	6829	7031
// OP_STORE_F	7031	6829	0
// OP_STORE_V	6829	4	0
// OP_CALL1	496	0	0
// OP_MUL_VF	59	6836	7032
// OP_MUL_VF	62	6835	7035
// OP_ADD_V	7032	7035	7038
// OP_STORE_V	7038	6829	0
// OP_STORE_V	6829	4	0
// OP_CALL1	541	0	0
// OP_STORE_V	1	6829	0
// OP_LOAD_ENT	28	206	7041
// OP_LOAD_ENT	7041	412	7042
// OP_ADDRESS	7042	142	7043
// OP_STOREP_V	6829	7043	0
// OP_LOAD_ENT	28	206	7046
// OP_LOAD_ENT	7046	412	7047
// OP_LOAD_F	7047	144	7048
// OP_LOAD_F	6822	144	7049
// OP_SUB_F	7048	7049	7050
// OP_STORE_F	7050	6837	0
// OP_LT	6837	619	7051
// OP_IFNOT	7051	3	0
// OP_ADD_F	6837	1459	7052
// OP_STORE_F	7052	6837	0
// OP_GT	6837	1827	7053
// OP_IFNOT	7053	3	0
// OP_SUB_F	6837	1459	7054
// OP_STORE_F	7054	6837	0
// OP_LOAD_ENT	28	206	7055
// OP_LOAD_ENT	7055	412	7056
// OP_ADDRESS	7056	145	7057
// OP_LOAD_F	6822	145	7058
// OP_MUL_F	7058	6836	7059
// OP_MUL_F	6837	6835	7060
// OP_SUB_F	7059	7060	7061
// OP_STOREP_F	7061	7057	0
// OP_DONE	0	0	0
void (vector v0, float sp_x, float sp_y) Turn_groundveh = 
{
    local entity stemp;
    local vector v1;
    local vector v2;
    local vector v3;
    local vector v_a;
    local float f1;
    local float f2;
    local float f3;
    stemp = self.enemy;
    v1 = '0.000 0.000 0.000';
    v1_y = anglemod(0.000 - stemp.angles_y);
    
    if(0.000 > 180.000)
    {
        v1_y = 0.000 - 360.000;
    }
    
    v2_y = 0.000;
    
    if(0.000 < 0.000)
    {
        v2_y = 0.000 - sp_y;
    }
    
    
    if(0.000 > 0.000)
    {
        v2_y = sp_y;
    }
    
    f1 = fabs(0.000);
    f2 = fabs(0.000) * frametime;
    
    if(f1 < f2)
    {
        v2_y = 0.000;
        stemp.angles_y = 0.000;
    }
    
    
    if(self.lefty)
    {
        v2_y = 0.000 - (self.lefty * sp_y);
    }
    
    stemp.angles_x = anglemod(stemp.angles_x);
    
    if(stemp.angles_x > 180.000)
    {
        stemp.angles_x = stemp.angles_x - 360.000;
    }
    
    stemp.angles_y = anglemod(stemp.angles_y);
    
    if(stemp.angles_y > 180.000)
    {
        stemp.angles_y = stemp.angles_y - 360.000;
    }
    
    stemp.angles_z = anglemod(stemp.angles_z);
    
    if(stemp.angles_z > 180.000)
    {
        stemp.angles_z = stemp.angles_z - 360.000;
    }
    
    stemp.avelocity_y = 0.000;
    v_a = self.v_angle;
    
    if(self.oldenemy.toyview & 1.000)
    {
        if(self.oldenemy.tur1)
        {
            v1 = self.oldenemy.tur1.origin + ((self.oldenemy.tur1.mins + self.oldenemy.tur1.maxs) * 0.500);
            v_a = v0 = vectoangles(v1 - self.enemy.origin);
        }
        else
        {
            sp_x = 0.000;
        }
        
    }
    
    
    if(stemp.movetarget)
    {
        v0_y = stemp.angles_y - 0.000;
        
        if(0.000 > 180.000)
        {
            v0_y = 0.000 - 360.000;
        }
        
        
        if(!(self.flags & FL_ONGROUND))
        {
            v0_y = 0.000;
        }
        
        v1_y = 0.000 - stemp.toyview;
        
        if(0.000 < 0.000)
        {
            v1_y = 0.000 + 360.000;
        }
        
        
        if(0.000 > 180.000)
        {
            v1_y = 0.000 - 360.000;
        }
        
        v2_y = 0.000;
        
        if(0.000 < 0.000)
        {
            v2_y = 0.000 - sp_x;
        }
        
        
        if(0.000 > 0.000)
        {
            v2_y = sp_x;
        }
        
        f1 = fabs(0.000);
        f2 = fabs(0.000) * frametime;
        if(f1 < f2)
        {
            v2_y = 0.000;
            stemp.toyview = 0.000;
        }
        else
        {
            stemp.toyview = stemp.toyview + (0.000 * frametime);
        }
        
        if(stemp.toyview == 0.000)
        {
            self.enemy.movetarget.angles = stemp.angles;
        }
        else
        {
            makevectors('0.000 1.000 0.000' * stemp.toyview);
            f1 = 0.000;
            f2 = v_forward_x;
            v3 = stemp.angles;
            v3_x = 0.000 - v3_x;
            makevectors(v3);
            v3 = (v_forward * f2) + (v_right * f1);
            v3 = vectoangles(v3);
            self.enemy.movetarget.angles = v3;
            f3 = self.enemy.movetarget.angles_y - stemp.angles_y;
            
            if(f3 < 0.000)
            {
                f3 = f3 + 360.000;
            }
            
            
            if(f3 > 180.000)
            {
                f3 = f3 - 360.000;
            }
            
            self.enemy.movetarget.angles_z = (stemp.angles_z * f2) + (stemp.angles_x * f1);
        }
        
        stemp = stemp.movetarget;
    }
    
    
    if(self.enemy.oldenemy)
    {
        v0_x = v0_x - stemp.angles_x;
        
        if(v0_x < 0.000)
        {
            v0_x = v0_x + 360.000;
        }
        
        
        if(v0_x > 180.000)
        {
            v0_x = v0_x - 360.000;
        }
        
        
        if(v0_x > 80.000)
        {
            v0_x = 80.000;
        }
        
        
        if(v0_x < -10.000)
        {
            v0_x = -10.000;
        }
        
        
        if(!(self.flags & FL_ONGROUND))
        {
            v0_x = 0.000;
        }
        
        v1_x = v0_x - stemp.toyview;
        v2_x = 0.000;
        
        if(v1_x < 0.000)
        {
            v2_x = 0.000 - sp_x;
        }
        
        
        if(v1_x > 0.000)
        {
            v2_x = sp_x;
        }
        
        f1 = fabs(v1_x);
        f2 = fabs(v2_x) * frametime;
        if(f1 < f2)
        {
            v2_x = 0.000;
            stemp.toyview = v0;
        }
        else
        {
            stemp.toyview = stemp.toyview + (v2_x * frametime);
        }
        
        
        if(stemp.toyview == 0.000)
        {
            self.enemy.oldenemy.angles = stemp.angles;
            return;
        }
        
        makevectors('0.000 1.000 0.000' * stemp.toyview);
        f1 = 0.000;
        f2 = v_forward_x;
        v3 = stemp.angles;
        v3_x = 0.000 - v3_x;
        makevectors(v3);
        v3 = (v_forward * f2) + (v_up * f1);
        v3 = vectoangles(v3);
        self.enemy.oldenemy.angles = v3;
        f3 = self.enemy.oldenemy.angles_y - stemp.angles_y;
        
        if(f3 < 0.000)
        {
            f3 = f3 + 360.000;
        }
        
        
        if(f3 > 180.000)
        {
            f3 = f3 - 360.000;
        }
        
        self.enemy.oldenemy.angles_z = (stemp.angles_z * f2) - (f3 * f1);
    }
    
};

// Steer_groundveh
// function begins at statement 9127, parm_start=7063
// OP_LOAD_ENT	28	206	7070
// OP_STORE_ENT	7070	7065	0
// OP_LOAD_ENT	7065	226	7071
// OP_NE_E	7071	28	7072
// OP_IFNOT	7072	2	0
// OP_RETURN	0	0	0
// OP_LOAD_V	7065	130	7073
// OP_STORE_V	7073	4	0
// OP_CALL1	533	0	0
// OP_LT	1	325	7076
// OP_IFNOT	7076	27	0
// OP_LOAD_F	28	423	7077
// OP_LT	7077	31	7078
// OP_IFNOT	7078	23	0
// OP_LOAD_F	28	440	7079
// OP_LT	7079	31	7080
// OP_IFNOT	7080	15	0
// OP_LOAD_F	28	404	7081
// OP_NE_F	7081	824	7082
// OP_IFNOT	7082	7	0
// OP_STORE_V	7065	4	0
// OP_STORE_V	7065	7	0
// OP_STORE_V	7065	10	0
// OP_STORE_V	856	13	0
// OP_CALL4	569	0	0
// OP_GOTO	6	0	0
// OP_STORE_V	7065	4	0
// OP_STORE_V	7065	7	0
// OP_STORE_V	7065	10	0
// OP_STORE_V	827	13	0
// OP_CALL4	569	0	0
// OP_ADDRESS	28	423	7083
// OP_ADD_F	31	677	7084
// OP_STOREP_F	7084	7083	0
// OP_STORE_V	677	4	0
// OP_CALL1	6403	0	0
// OP_GOTO	7	0	0
// OP_LOAD_F	28	404	7085
// OP_EQ_F	7085	824	7086
// OP_IFNOT	7086	4	0
// OP_ADDRESS	28	440	7087
// OP_ADD_F	31	827	7088
// OP_STOREP_F	7088	7087	0
// OP_LOAD_F	7065	143	7089
// OP_LT	7089	4766	7090
// OP_IFNOT	7090	5	0
// OP_ADDRESS	7065	143	7091
// OP_LOAD_F	7065	143	7092
// OP_ADD_F	7092	1459	7093
// OP_STOREP_F	7093	7091	0
// OP_LOAD_F	7065	143	7094
// OP_GT	7094	1827	7095
// OP_IFNOT	7095	5	0
// OP_ADDRESS	7065	143	7096
// OP_LOAD_F	7065	143	7097
// OP_SUB_F	7097	1459	7098
// OP_STOREP_F	7098	7096	0
// OP_ADDRESS	7065	207	7099
// OP_LOAD_F	7065	207	7100
// OP_LOAD_F	7065	207	7101
// OP_BITAND	7101	277	7102
// OP_SUB_F	7100	7102	7103
// OP_STOREP_F	7103	7099	0
// OP_LOAD_F	7065	177	7104
// OP_GT	7104	619	7105
// OP_IFNOT	7105	53	0
// OP_LOAD_F	28	201	7106
// OP_STORE_F	7106	7066	0
// OP_SUB_F	619	7066	7107
// OP_STORE_F	7107	7066	0
// OP_LOAD_F	28	238	7108
// OP_EQ_F	7108	619	7109
// OP_IFNOT	7109	4	0
// OP_LOAD_F	28	202	7110
// OP_STORE_F	7110	7067	0
// OP_GOTO	33	0	0
// OP_LOAD_F	28	238	7111
// OP_EQ_F	7111	677	7112
// OP_IFNOT	7112	7	0
// OP_LOAD_F	28	202	7113
// OP_ADD_F	7113	1268	7114
// OP_STORE_V	7114	4	0
// OP_CALL1	1299	0	0
// OP_STORE_F	1	7067	0
// OP_GOTO	24	0	0
// OP_LOAD_F	28	238	7115
// OP_EQ_F	7115	806	7116
// OP_IFNOT	7116	7	0
// OP_LOAD_F	28	202	7117
// OP_ADD_F	7117	1827	7118
// OP_STORE_V	7118	4	0
// OP_CALL1	1299	0	0
// OP_STORE_F	1	7067	0
// OP_GOTO	15	0	0
// OP_LOAD_F	28	238	7119
// OP_EQ_F	7119	788	7120
// OP_IFNOT	7120	7	0
// OP_LOAD_F	28	202	7121
// OP_ADD_F	7121	2995	7122
// OP_STORE_V	7122	4	0
// OP_CALL1	1299	0	0
// OP_STORE_F	1	7067	0
// OP_GOTO	6	0	0
// OP_LOAD_F	28	238	7123
// OP_EQ_F	7123	808	7124
// OP_IFNOT	7124	3	0
// OP_LOAD_F	7065	144	7125
// OP_STORE_F	7125	7067	0
// OP_LOAD_F	28	207	7126
// OP_BITAND	7126	277	7127
// OP_NOT_F	7127	0	7128
// OP_IFNOT	7128	3	0
// OP_LOAD_F	7065	144	7129
// OP_STORE_F	7129	7067	0
// OP_STORE_V	7066	4	0
// OP_STORE_V	7063	7	0
// OP_STORE_V	7064	10	0
// OP_CALL3	6816	0	0
// OP_CALL0	6404	0	0
// OP_LOAD_F	7065	177	7130
// OP_MUL_F	7130	2618	7131
// OP_LOAD_F	7065	210	7132
// OP_DIV_F	7131	7132	7133
// OP_STORE_F	7133	7069	0
// OP_LT	7069	677	7134
// OP_IFNOT	7134	2	0
// OP_STORE_F	677	7069	0
// OP_LOAD_F	28	177	7135
// OP_LT	7069	7135	7136
// OP_IFNOT	7136	5	0
// OP_ADDRESS	28	223	7137
// OP_LOAD_F	28	177	7138
// OP_SUB_F	7138	7069	7139
// OP_STOREP_F	7139	7137	0
// OP_ADDRESS	28	177	7140
// OP_STOREP_F	7069	7140	0
// OP_LOAD_ENT	28	206	7141
// OP_STORE_V	7141	4	0
// OP_LOAD_V	28	130	7142
// OP_STORE_V	7142	7	0
// OP_CALL2	497	0	0
// OP_LOAD_ENT	28	206	7145
// OP_LOAD_ENT	7145	412	7146
// OP_IFNOT	7146	7	0
// OP_LOAD_ENT	28	206	7147
// OP_LOAD_ENT	7147	412	7148
// OP_STORE_V	7148	4	0
// OP_LOAD_V	28	130	7149
// OP_STORE_V	7149	7	0
// OP_CALL2	497	0	0
// OP_LOAD_ENT	28	206	7152
// OP_LOAD_ENT	7152	467	7153
// OP_IFNOT	7153	7	0
// OP_LOAD_ENT	28	206	7154
// OP_LOAD_ENT	7154	467	7155
// OP_STORE_V	7155	4	0
// OP_LOAD_V	28	130	7156
// OP_STORE_V	7156	7	0
// OP_CALL2	497	0	0
// OP_DONE	0	0	0
void (float sp_x, float sp_y) Steer_groundveh = 
{
    local entity stemp;
    local vector v0;
    local float tmp;
    stemp = self.enemy;
    
    if(stemp.owner != self)
    {
        return;
    }
    
    if(pointcontents(stemp.origin) < CONTENT_EMPTY)
    {
        
        if(self.pain_finished < time)
        {
            
            if(self.air_finished < time)
            {
                if(self.style != 9.000)
                {
                    T_Damage(stemp, stemp, stemp, 50.000);
                }
                else
                {
                    T_Damage(stemp, stemp, stemp, 10.000);
                }
                
            }
            
            self.pain_finished = time + 1.000;
            DeathBubbles(1.000);
        }
        
    }
    else
    {
        
        if(self.style == 9.000)
        {
            self.air_finished = time + 10.000;
        }
        
    }
    
    
    if(stemp.angles_x < -180.000)
    {
        stemp.angles_x = stemp.angles_x + 360.000;
    }
    
    
    if(stemp.angles_x > 180.000)
    {
        stemp.angles_x = stemp.angles_x - 360.000;
    }
    
    stemp.flags = stemp.flags - (stemp.flags & FL_ONGROUND);
    
    if(stemp.health > 0.000)
    {
        v0_x = self.v_angle_x;
        v0_x = 0.000 - v0_x;
        if(self.toyview == 0.000)
        {
            v0_y = self.v_angle_y;
        }
        else
        {
            if(self.toyview == 1.000)
            {
                v0_y = anglemod(self.v_angle_y + 90.000);
            }
            else
            {
                if(self.toyview == 2.000)
                {
                    v0_y = anglemod(self.v_angle_y + 180.000);
                }
                else
                {
                    if(self.toyview == 3.000)
                    {
                        v0_y = anglemod(self.v_angle_y + 270.000);
                    }
                    else
                    {
                        
                        if(self.toyview == 4.000)
                        {
                            v0_y = stemp.angles_y;
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        
        if(!(self.flags & FL_ONGROUND))
        {
            v0_y = stemp.angles_y;
        }
        
        Turn_groundveh(v0, sp_x, sp_y);
    }
    
    gv_tilt();
    tmp = (stemp.health * 100.000) / stemp.max_health;
    
    if(tmp < 1.000)
    {
        tmp = 1.000;
    }
    
    
    if(tmp < self.health)
    {
        self.dmg_take = self.health - tmp;
    }
    
    self.health = tmp;
    setorigin(self.enemy, self.origin);
    
    if(self.enemy.oldenemy)
    {
        setorigin(self.enemy.oldenemy, self.origin);
    }
    
    
    if(self.enemy.movetarget)
    {
        setorigin(self.enemy.movetarget, self.origin);
    }
    
};

// Turn_hover
// function begins at statement 9287, parm_start=7160
// OP_LOAD_ENT	28	206	7182
// OP_STORE_ENT	7182	7165	0
// OP_STORE_V	607	7166	0
// OP_LOAD_F	7165	144	7183
// OP_SUB_F	7161	7183	7184
// OP_STORE_V	7184	4	0
// OP_CALL1	1299	0	0
// OP_STORE_F	1	7167	0
// OP_GT	7167	1827	7185
// OP_IFNOT	7185	3	0
// OP_SUB_F	7167	1459	7186
// OP_STORE_F	7186	7167	0
// OP_STORE_F	619	7170	0
// OP_LT	7167	619	7187
// OP_IFNOT	7187	3	0
// OP_SUB_F	619	7164	7188
// OP_STORE_F	7188	7170	0
// OP_GT	7167	619	7189
// OP_IFNOT	7189	2	0
// OP_STORE_F	7164	7170	0
// OP_STORE_V	7167	4	0
// OP_CALL1	534	0	0
// OP_STORE_F	1	7178	0
// OP_STORE_V	7170	4	0
// OP_CALL1	534	0	0
// OP_MUL_F	1	32	7190
// OP_STORE_F	7190	7179	0
// OP_LT	7178	7179	7191
// OP_IFNOT	7191	4	0
// OP_STORE_F	619	7170	0
// OP_ADDRESS	7165	144	7192
// OP_STOREP_F	7161	7192	0
// OP_ADDRESS	7165	143	7193
// OP_LOAD_F	7165	143	7194
// OP_STORE_V	7194	4	0
// OP_CALL1	1299	0	0
// OP_STOREP_F	1	7193	0
// OP_LOAD_F	7165	143	7195
// OP_GT	7195	1827	7196
// OP_IFNOT	7196	5	0
// OP_ADDRESS	7165	143	7197
// OP_LOAD_F	7165	143	7198
// OP_SUB_F	7198	1459	7199
// OP_STOREP_F	7199	7197	0
// OP_ADDRESS	7165	144	7200
// OP_LOAD_F	7165	144	7201
// OP_STORE_V	7201	4	0
// OP_CALL1	1299	0	0
// OP_STOREP_F	1	7200	0
// OP_LOAD_F	7165	144	7202
// OP_GT	7202	1827	7203
// OP_IFNOT	7203	5	0
// OP_ADDRESS	7165	144	7204
// OP_LOAD_F	7165	144	7205
// OP_SUB_F	7205	1459	7206
// OP_STOREP_F	7206	7204	0
// OP_ADDRESS	7165	145	7207
// OP_LOAD_F	7165	145	7208
// OP_STORE_V	7208	4	0
// OP_CALL1	1299	0	0
// OP_STOREP_F	1	7207	0
// OP_LOAD_F	7165	145	7209
// OP_GT	7209	1827	7210
// OP_IFNOT	7210	5	0
// OP_ADDRESS	7165	145	7211
// OP_LOAD_F	7165	145	7212
// OP_SUB_F	7212	1459	7213
// OP_STOREP_F	7213	7211	0
// OP_ADDRESS	7165	148	7214
// OP_STOREP_F	7170	7214	0
// OP_LOAD_V	28	200	7215
// OP_STORE_V	7215	7175	0
// OP_LOAD_ENT	28	412	7218
// OP_LOAD_F	7218	238	7219
// OP_BITAND	7219	677	7220
// OP_IFNOT	7220	26	0
// OP_LOAD_ENT	28	412	7221
// OP_LOAD_ENT	7221	263	7222
// OP_IFNOT	7222	22	0
// OP_LOAD_ENT	28	412	7223
// OP_LOAD_ENT	7223	263	7224
// OP_LOAD_V	7224	130	7225
// OP_LOAD_ENT	28	412	7228
// OP_LOAD_ENT	7228	263	7229
// OP_LOAD_V	7229	159	7230
// OP_LOAD_ENT	28	412	7233
// OP_LOAD_ENT	7233	263	7234
// OP_LOAD_V	7234	163	7235
// OP_ADD_V	7230	7235	7238
// OP_MUL_VF	7238	972	7241
// OP_ADD_V	7225	7241	7244
// OP_STORE_V	7244	7166	0
// OP_LOAD_ENT	28	206	7247
// OP_LOAD_V	7247	130	7248
// OP_SUB_V	7166	7248	7251
// OP_STORE_V	7251	4	0
// OP_CALL1	541	0	0
// OP_STORE_V	1	7160	0
// OP_STORE_V	1	7175	0
// OP_GOTO	2	0	0
// OP_STORE_F	619	7163	0
// OP_STORE_F	619	7181	0
// OP_LOAD_F	7165	143	7254
// OP_STORE_V	7254	4	0
// OP_CALL1	534	0	0
// OP_GT	1	1193	7255
// OP_IFNOT	7255	2	0
// OP_STORE_F	677	7181	0
// OP_LOAD_F	7165	145	7256
// OP_STORE_V	7256	4	0
// OP_CALL1	534	0	0
// OP_GT	1	1193	7257
// OP_IFNOT	7257	2	0
// OP_STORE_F	677	7181	0
// OP_LOAD_ENT	7165	467	7258
// OP_IFNOT	7258	104	0
// OP_LOAD_F	7165	144	7259
// OP_SUB_F	7259	7176	7260
// OP_STORE_F	7260	7161	0
// OP_GT	7161	1827	7261
// OP_IFNOT	7261	3	0
// OP_SUB_F	7161	1459	7262
// OP_STORE_F	7262	7161	0
// OP_IFNOT	7181	2	0
// OP_STORE_F	619	7161	0
// OP_LOAD_F	7165	238	7263
// OP_SUB_F	7161	7263	7264
// OP_STORE_F	7264	7167	0
// OP_LT	7167	619	7265
// OP_IFNOT	7265	3	0
// OP_ADD_F	7167	1459	7266
// OP_STORE_F	7266	7167	0
// OP_GT	7167	1827	7267
// OP_IFNOT	7267	3	0
// OP_SUB_F	7167	1459	7268
// OP_STORE_F	7268	7167	0
// OP_STORE_F	619	7170	0
// OP_LT	7167	619	7269
// OP_IFNOT	7269	3	0
// OP_SUB_F	619	7163	7270
// OP_STORE_F	7270	7170	0
// OP_GT	7167	619	7271
// OP_IFNOT	7271	2	0
// OP_STORE_F	7163	7170	0
// OP_STORE_V	7167	4	0
// OP_CALL1	534	0	0
// OP_STORE_F	1	7178	0
// OP_STORE_V	7170	4	0
// OP_CALL1	534	0	0
// OP_MUL_F	1	32	7272
// OP_STORE_F	7272	7179	0
// OP_LT	7178	7179	7273
// OP_IFNOT	7273	5	0
// OP_STORE_F	619	7170	0
// OP_ADDRESS	7165	238	7274
// OP_STOREP_F	7161	7274	0
// OP_GOTO	6	0	0
// OP_ADDRESS	7165	238	7275
// OP_LOAD_F	7165	238	7276
// OP_MUL_F	7170	32	7277
// OP_ADD_F	7276	7277	7278
// OP_STOREP_F	7278	7275	0
// OP_LOAD_F	7165	238	7279
// OP_EQ_F	7279	619	7280
// OP_IFNOT	7280	7	0
// OP_LOAD_ENT	28	206	7281
// OP_LOAD_ENT	7281	467	7282
// OP_ADDRESS	7282	142	7283
// OP_LOAD_V	7165	142	7286
// OP_STOREP_V	7286	7283	0
// OP_GOTO	47	0	0
// OP_LOAD_F	7165	238	7289
// OP_MUL_VF	6286	7289	7290
// OP_STORE_V	7290	4	0
// OP_CALL1	496	0	0
// OP_STORE_F	60	7178	0
// OP_STORE_F	59	7179	0
// OP_LOAD_V	7165	142	7293
// OP_STORE_V	7293	7172	0
// OP_SUB_F	619	7172	7296
// OP_STORE_F	7296	7172	0
// OP_STORE_V	7172	4	0
// OP_CALL1	496	0	0
// OP_MUL_VF	59	7179	7297
// OP_MUL_VF	65	7178	7300
// OP_ADD_V	7297	7300	7303
// OP_STORE_V	7303	7172	0
// OP_STORE_V	7172	4	0
// OP_CALL1	541	0	0
// OP_STORE_V	1	7172	0
// OP_LOAD_ENT	28	206	7306
// OP_LOAD_ENT	7306	467	7307
// OP_ADDRESS	7307	142	7308
// OP_STOREP_V	7172	7308	0
// OP_LOAD_ENT	28	206	7311
// OP_LOAD_ENT	7311	467	7312
// OP_LOAD_F	7312	144	7313
// OP_LOAD_F	7165	144	7314
// OP_SUB_F	7313	7314	7315
// OP_STORE_F	7315	7180	0
// OP_LT	7180	619	7316
// OP_IFNOT	7316	3	0
// OP_ADD_F	7180	1459	7317
// OP_STORE_F	7317	7180	0
// OP_GT	7180	1827	7318
// OP_IFNOT	7318	3	0
// OP_SUB_F	7180	1459	7319
// OP_STORE_F	7319	7180	0
// OP_LOAD_ENT	28	206	7320
// OP_LOAD_ENT	7320	467	7321
// OP_ADDRESS	7321	145	7322
// OP_LOAD_F	7165	145	7323
// OP_MUL_F	7323	7179	7324
// OP_LOAD_F	7165	143	7325
// OP_MUL_F	7325	7178	7326
// OP_ADD_F	7324	7326	7327
// OP_STOREP_F	7327	7322	0
// OP_LOAD_ENT	7165	467	7328
// OP_STORE_ENT	7328	7165	0
// OP_LOAD_ENT	28	206	7329
// OP_LOAD_ENT	7329	412	7330
// OP_IFNOT	7330	103	0
// OP_LOAD_F	7165	143	7331
// OP_SUB_F	7160	7331	7332
// OP_STORE_F	7332	7160	0
// OP_LT	7160	619	7333
// OP_IFNOT	7333	3	0
// OP_ADD_F	7160	1459	7334
// OP_STORE_F	7334	7160	0
// OP_GT	7160	1827	7335
// OP_IFNOT	7335	3	0
// OP_SUB_F	7160	1459	7336
// OP_STORE_F	7336	7160	0
// OP_GT	7160	1252	7337
// OP_IFNOT	7337	2	0
// OP_STORE_F	1252	7160	0
// OP_LT	7160	6997	7338
// OP_IFNOT	7338	2	0
// OP_STORE_F	6997	7160	0
// OP_IFNOT	7181	2	0
// OP_STORE_F	619	7160	0
// OP_LOAD_F	7165	238	7339
// OP_SUB_F	7160	7339	7340
// OP_STORE_F	7340	7166	0
// OP_STORE_F	619	7169	0
// OP_LT	7166	619	7341
// OP_IFNOT	7341	3	0
// OP_SUB_F	619	7163	7342
// OP_STORE_F	7342	7169	0
// OP_GT	7166	619	7343
// OP_IFNOT	7343	2	0
// OP_STORE_F	7163	7169	0
// OP_STORE_V	7166	4	0
// OP_CALL1	534	0	0
// OP_STORE_F	1	7178	0
// OP_STORE_V	7169	4	0
// OP_CALL1	534	0	0
// OP_MUL_F	1	32	7344
// OP_STORE_F	7344	7179	0
// OP_LT	7178	7179	7345
// OP_IFNOT	7345	5	0
// OP_STORE_F	619	7169	0
// OP_ADDRESS	7165	238	7346
// OP_STOREP_F	7160	7346	0
// OP_GOTO	6	0	0
// OP_ADDRESS	7165	238	7347
// OP_LOAD_F	7165	238	7348
// OP_MUL_F	7169	32	7349
// OP_ADD_F	7348	7349	7350
// OP_STOREP_F	7350	7347	0
// OP_LOAD_F	7165	238	7351
// OP_EQ_F	7351	619	7352
// OP_IFNOT	7352	7	0
// OP_LOAD_ENT	28	206	7353
// OP_LOAD_ENT	7353	412	7354
// OP_ADDRESS	7354	142	7355
// OP_LOAD_V	7165	142	7358
// OP_STOREP_V	7358	7355	0
// OP_RETURN	0	0	0
// OP_LOAD_F	7165	238	7361
// OP_MUL_VF	6286	7361	7362
// OP_STORE_V	7362	4	0
// OP_CALL1	496	0	0
// OP_STORE_F	60	7178	0
// OP_STORE_F	59	7179	0
// OP_LOAD_V	7165	142	7365
// OP_STORE_V	7365	7172	0
// OP_SUB_F	619	7172	7368
// OP_STORE_F	7368	7172	0
// OP_STORE_V	7172	4	0
// OP_CALL1	496	0	0
// OP_MUL_VF	59	7179	7369
// OP_MUL_VF	62	7178	7372
// OP_ADD_V	7369	7372	7375
// OP_STORE_V	7375	7172	0
// OP_STORE_V	7172	4	0
// OP_CALL1	541	0	0
// OP_STORE_V	1	7172	0
// OP_LOAD_ENT	28	206	7378
// OP_LOAD_ENT	7378	412	7379
// OP_ADDRESS	7379	142	7380
// OP_STOREP_V	7172	7380	0
// OP_LOAD_ENT	28	206	7383
// OP_LOAD_ENT	7383	412	7384
// OP_LOAD_F	7384	144	7385
// OP_LOAD_F	7165	144	7386
// OP_SUB_F	7385	7386	7387
// OP_STORE_F	7387	7180	0
// OP_LT	7180	619	7388
// OP_IFNOT	7388	3	0
// OP_ADD_F	7180	1459	7389
// OP_STORE_F	7389	7180	0
// OP_GT	7180	1827	7390
// OP_IFNOT	7390	3	0
// OP_SUB_F	7180	1459	7391
// OP_STORE_F	7391	7180	0
// OP_LOAD_ENT	28	206	7392
// OP_LOAD_ENT	7392	412	7393
// OP_ADDRESS	7393	145	7394
// OP_LOAD_F	7165	145	7395
// OP_MUL_F	7395	7179	7396
// OP_MUL_F	7180	7178	7397
// OP_SUB_F	7396	7397	7398
// OP_STOREP_F	7398	7394	0
// OP_DONE	0	0	0
void (vector v0, float sp_x, float sp_y) Turn_hover = 
{
    local entity stemp;
    local vector v1;
    local vector v2;
    local vector v3;
    local vector v_a;
    local float f1;
    local float f2;
    local float f3;
    local float lck;
    stemp = self.enemy;
    v1 = '0.000 0.000 0.000';
    v1_y = anglemod(0.000 - stemp.angles_y);
    
    if(0.000 > 180.000)
    {
        v1_y = 0.000 - 360.000;
    }
    
    v2_y = 0.000;
    
    if(0.000 < 0.000)
    {
        v2_y = 0.000 - sp_y;
    }
    
    
    if(0.000 > 0.000)
    {
        v2_y = sp_y;
    }
    
    f1 = fabs(0.000);
    f2 = fabs(0.000) * frametime;
    
    if(f1 < f2)
    {
        v2_y = 0.000;
        stemp.angles_y = 0.000;
    }
    
    stemp.angles_x = anglemod(stemp.angles_x);
    
    if(stemp.angles_x > 180.000)
    {
        stemp.angles_x = stemp.angles_x - 360.000;
    }
    
    stemp.angles_y = anglemod(stemp.angles_y);
    
    if(stemp.angles_y > 180.000)
    {
        stemp.angles_y = stemp.angles_y - 360.000;
    }
    
    stemp.angles_z = anglemod(stemp.angles_z);
    
    if(stemp.angles_z > 180.000)
    {
        stemp.angles_z = stemp.angles_z - 360.000;
    }
    
    stemp.avelocity_y = 0.000;
    v_a = self.v_angle;
    
    if(self.oldenemy.toyview & 1.000)
    {
        if(self.oldenemy.tur1)
        {
            v1 = self.oldenemy.tur1.origin + ((self.oldenemy.tur1.mins + self.oldenemy.tur1.maxs) * 0.500);
            v_a = v0 = vectoangles(v1 - self.enemy.origin);
        }
        else
        {
            sp_x = 0.000;
        }
        
    }
    
    lck = 0.000;
    
    if(fabs(stemp.angles_x) > 45.000)
    {
        lck = 1.000;
    }
    
    
    if(fabs(stemp.angles_z) > 45.000)
    {
        lck = 1.000;
    }
    
    
    if(stemp.movetarget)
    {
        v0_y = stemp.angles_y - 0.000;
        
        if(0.000 > 180.000)
        {
            v0_y = 0.000 - 360.000;
        }
        
        
        if(lck)
        {
            v0_y = 0.000;
        }
        
        v1_y = 0.000 - stemp.toyview;
        
        if(0.000 < 0.000)
        {
            v1_y = 0.000 + 360.000;
        }
        
        
        if(0.000 > 180.000)
        {
            v1_y = 0.000 - 360.000;
        }
        
        v2_y = 0.000;
        
        if(0.000 < 0.000)
        {
            v2_y = 0.000 - sp_x;
        }
        
        
        if(0.000 > 0.000)
        {
            v2_y = sp_x;
        }
        
        f1 = fabs(0.000);
        f2 = fabs(0.000) * frametime;
        if(f1 < f2)
        {
            v2_y = 0.000;
            stemp.toyview = 0.000;
        }
        else
        {
            stemp.toyview = stemp.toyview + (0.000 * frametime);
        }
        
        if(stemp.toyview == 0.000)
        {
            self.enemy.movetarget.angles = stemp.angles;
        }
        else
        {
            makevectors('0.000 1.000 0.000' * stemp.toyview);
            f1 = 0.000;
            f2 = v_forward_x;
            v3 = stemp.angles;
            v3_x = 0.000 - v3_x;
            makevectors(v3);
            v3 = (v_forward * f2) + (v_right * f1);
            v3 = vectoangles(v3);
            self.enemy.movetarget.angles = v3;
            f3 = self.enemy.movetarget.angles_y - stemp.angles_y;
            
            if(f3 < 0.000)
            {
                f3 = f3 + 360.000;
            }
            
            
            if(f3 > 180.000)
            {
                f3 = f3 - 360.000;
            }
            
            self.enemy.movetarget.angles_z = (stemp.angles_z * f2) + (stemp.angles_x * f1);
        }
        
        stemp = stemp.movetarget;
    }
    
    
    if(self.enemy.oldenemy)
    {
        v0_x = v0_x - stemp.angles_x;
        
        if(v0_x < 0.000)
        {
            v0_x = v0_x + 360.000;
        }
        
        
        if(v0_x > 180.000)
        {
            v0_x = v0_x - 360.000;
        }
        
        
        if(v0_x > 80.000)
        {
            v0_x = 80.000;
        }
        
        
        if(v0_x < -10.000)
        {
            v0_x = -10.000;
        }
        
        
        if(lck)
        {
            v0_x = 0.000;
        }
        
        v1_x = v0_x - stemp.toyview;
        v2_x = 0.000;
        
        if(v1_x < 0.000)
        {
            v2_x = 0.000 - sp_x;
        }
        
        
        if(v1_x > 0.000)
        {
            v2_x = sp_x;
        }
        
        f1 = fabs(v1_x);
        f2 = fabs(v2_x) * frametime;
        if(f1 < f2)
        {
            v2_x = 0.000;
            stemp.toyview = v0;
        }
        else
        {
            stemp.toyview = stemp.toyview + (v2_x * frametime);
        }
        
        
        if(stemp.toyview == 0.000)
        {
            self.enemy.oldenemy.angles = stemp.angles;
            return;
        }
        
        makevectors('0.000 1.000 0.000' * stemp.toyview);
        f1 = 0.000;
        f2 = v_forward_x;
        v3 = stemp.angles;
        v3_x = 0.000 - v3_x;
        makevectors(v3);
        v3 = (v_forward * f2) + (v_up * f1);
        v3 = vectoangles(v3);
        self.enemy.oldenemy.angles = v3;
        f3 = self.enemy.oldenemy.angles_y - stemp.angles_y;
        
        if(f3 < 0.000)
        {
            f3 = f3 + 360.000;
        }
        
        
        if(f3 > 180.000)
        {
            f3 = f3 - 360.000;
        }
        
        self.enemy.oldenemy.angles_z = (stemp.angles_z * f2) - (f3 * f1);
    }
    
};

// Steer_hover
// function begins at statement 9612, parm_start=7400
// OP_LOAD_ENT	28	206	7407
// OP_STORE_ENT	7407	7402	0
// OP_LOAD_ENT	7402	226	7408
// OP_NE_E	7408	28	7409
// OP_IFNOT	7409	2	0
// OP_RETURN	0	0	0
// OP_LOAD_ENT	28	206	7410
// OP_LOAD_V	7410	130	7411
// OP_STORE_V	7411	4	0
// OP_CALL1	533	0	0
// OP_LT	1	325	7414
// OP_LOAD_F	28	423	7415
// OP_LT	7415	31	7416
// OP_AND	7414	7416	7417
// OP_IFNOT	7417	9	0
// OP_STORE_V	7402	4	0
// OP_STORE_V	7402	7	0
// OP_STORE_V	7402	10	0
// OP_STORE_V	856	13	0
// OP_CALL4	569	0	0
// OP_ADDRESS	28	423	7418
// OP_ADD_F	31	677	7419
// OP_STOREP_F	7419	7418	0
// OP_LOAD_F	7402	143	7420
// OP_LT	7420	4766	7421
// OP_IFNOT	7421	5	0
// OP_ADDRESS	7402	143	7422
// OP_LOAD_F	7402	143	7423
// OP_ADD_F	7423	1459	7424
// OP_STOREP_F	7424	7422	0
// OP_LOAD_F	7402	143	7425
// OP_GT	7425	1827	7426
// OP_IFNOT	7426	5	0
// OP_ADDRESS	7402	143	7427
// OP_LOAD_F	7402	143	7428
// OP_SUB_F	7428	1459	7429
// OP_STOREP_F	7429	7427	0
// OP_ADDRESS	7402	207	7430
// OP_LOAD_F	7402	207	7431
// OP_LOAD_F	7402	207	7432
// OP_BITAND	7432	277	7433
// OP_SUB_F	7431	7433	7434
// OP_STOREP_F	7434	7430	0
// OP_LOAD_F	7402	177	7435
// OP_GT	7435	619	7436
// OP_IFNOT	7436	47	0
// OP_LOAD_F	28	201	7437
// OP_STORE_F	7437	7403	0
// OP_SUB_F	619	7403	7438
// OP_STORE_F	7438	7403	0
// OP_LOAD_F	28	238	7439
// OP_EQ_F	7439	619	7440
// OP_IFNOT	7440	4	0
// OP_LOAD_F	28	202	7441
// OP_STORE_F	7441	7404	0
// OP_GOTO	33	0	0
// OP_LOAD_F	28	238	7442
// OP_EQ_F	7442	677	7443
// OP_IFNOT	7443	7	0
// OP_LOAD_F	28	202	7444
// OP_ADD_F	7444	1268	7445
// OP_STORE_V	7445	4	0
// OP_CALL1	1299	0	0
// OP_STORE_F	1	7404	0
// OP_GOTO	24	0	0
// OP_LOAD_F	28	238	7446
// OP_EQ_F	7446	806	7447
// OP_IFNOT	7447	7	0
// OP_LOAD_F	28	202	7448
// OP_ADD_F	7448	1827	7449
// OP_STORE_V	7449	4	0
// OP_CALL1	1299	0	0
// OP_STORE_F	1	7404	0
// OP_GOTO	15	0	0
// OP_LOAD_F	28	238	7450
// OP_EQ_F	7450	788	7451
// OP_IFNOT	7451	7	0
// OP_LOAD_F	28	202	7452
// OP_ADD_F	7452	2995	7453
// OP_STORE_V	7453	4	0
// OP_CALL1	1299	0	0
// OP_STORE_F	1	7404	0
// OP_GOTO	6	0	0
// OP_LOAD_F	28	238	7454
// OP_EQ_F	7454	808	7455
// OP_IFNOT	7455	3	0
// OP_LOAD_F	7402	144	7456
// OP_STORE_F	7456	7404	0
// OP_STORE_V	7403	4	0
// OP_STORE_V	7400	7	0
// OP_STORE_V	7401	10	0
// OP_CALL3	7159	0	0
// OP_LOAD_F	7402	240	7457
// OP_STORE_V	7457	4	0
// OP_CALL1	534	0	0
// OP_STORE_F	1	7406	0
// OP_ADD_F	972	7406	7458
// OP_STORE_V	7458	4	0
// OP_CALL1	6605	0	0
// OP_LOAD_F	7402	177	7459
// OP_MUL_F	7459	2618	7460
// OP_LOAD_F	7402	210	7461
// OP_DIV_F	7460	7461	7462
// OP_STORE_F	7462	7406	0
// OP_LT	7406	677	7463
// OP_IFNOT	7463	2	0
// OP_STORE_F	677	7406	0
// OP_LOAD_F	28	177	7464
// OP_LT	7406	7464	7465
// OP_IFNOT	7465	5	0
// OP_ADDRESS	28	223	7466
// OP_LOAD_F	28	177	7467
// OP_SUB_F	7467	7406	7468
// OP_STOREP_F	7468	7466	0
// OP_ADDRESS	28	177	7469
// OP_STOREP_F	7406	7469	0
// OP_DONE	0	0	0
void (float sp_x, float sp_y) Steer_hover = 
{
    local entity stemp;
    local vector v0;
    local float tmp;
    stemp = self.enemy;
    
    if(stemp.owner != self)
    {
        return;
    }
    
    
    if((pointcontents(self.enemy.origin) < CONTENT_EMPTY) && (self.pain_finished < time))
    {
        T_Damage(stemp, stemp, stemp, 50.000);
        self.pain_finished = time + 1.000;
    }
    
    
    if(stemp.angles_x < -180.000)
    {
        stemp.angles_x = stemp.angles_x + 360.000;
    }
    
    
    if(stemp.angles_x > 180.000)
    {
        stemp.angles_x = stemp.angles_x - 360.000;
    }
    
    stemp.flags = stemp.flags - (stemp.flags & FL_ONGROUND);
    
    if(stemp.health > 0.000)
    {
        v0_x = self.v_angle_x;
        v0_x = 0.000 - v0_x;
        if(self.toyview == 0.000)
        {
            v0_y = self.v_angle_y;
        }
        else
        {
            if(self.toyview == 1.000)
            {
                v0_y = anglemod(self.v_angle_y + 90.000);
            }
            else
            {
                if(self.toyview == 2.000)
                {
                    v0_y = anglemod(self.v_angle_y + 180.000);
                }
                else
                {
                    if(self.toyview == 3.000)
                    {
                        v0_y = anglemod(self.v_angle_y + 270.000);
                    }
                    else
                    {
                        
                        if(self.toyview == 4.000)
                        {
                            v0_y = stemp.angles_y;
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        Turn_hover(v0, sp_x, sp_y);
    }
    
    tmp = fabs(stemp.thru);
    hv_tilt(0.500 + tmp);
    tmp = (stemp.health * 100.000) / stemp.max_health;
    
    if(tmp < 1.000)
    {
        tmp = 1.000;
    }
    
    
    if(tmp < self.health)
    {
        self.dmg_take = self.health - tmp;
    }
    
    self.health = tmp;
};

// GV_aim
// function begins at statement 9729, parm_start=7471
// OP_STORE_F	619	7477	0
// OP_LT	7472	619	7487
// OP_IFNOT	7487	5	0
// OP_ADD_F	7477	677	7488
// OP_STORE_F	7488	7477	0
// OP_SUB_F	619	7472	7489
// OP_STORE_F	7489	7472	0
// OP_STORE_ENT	30	7474	0
// OP_LOAD_ENT	28	206	7490
// OP_LOAD_ENT	7490	412	7491
// OP_LOAD_V	7491	142	7492
// OP_STORE_V	7492	4	0
// OP_CALL1	496	0	0
// OP_STORE_V	59	7478	0
// OP_SUB_F	619	7480	7495
// OP_STORE_F	7495	7480	0
// OP_LOAD_ENT	28	206	7496
// OP_LOAD_V	7496	130	7497
// OP_STORE_V	7497	4	0
// OP_STORE_V	7472	7	0
// OP_CALL2	516	0	0
// OP_STORE_ENT	1	7473	0
// OP_IFNOT	7473	100	0
// OP_LOAD_V	7473	130	7500
// OP_LOAD_V	7473	159	7503
// OP_LOAD_V	7473	163	7506
// OP_ADD_V	7503	7506	7509
// OP_MUL_VF	7509	972	7512
// OP_ADD_V	7500	7512	7515
// OP_STORE_V	7515	7484	0
// OP_LOAD_F	7473	188	7518
// OP_GT	7518	677	7519
// OP_LOAD_F	7473	128	7520
// OP_NE_F	7520	284	7521
// OP_BITAND	7477	677	7522
// OP_EQ_F	7522	619	7523
// OP_OR	7521	7523	7524
// OP_AND	7519	7524	7525
// OP_IFNOT	7525	81	0
// OP_STORE_V	7484	4	0
// OP_LOAD_ENT	28	206	7526
// OP_LOAD_V	7526	130	7527
// OP_STORE_V	7527	7	0
// OP_STORE_V	268	10	0
// OP_STORE_V	30	13	0
// OP_CALL4	510	0	0
// OP_LOAD_S	7473	155	7530
// OP_EQ_S	7530	1802	7531
// OP_IFNOT	7531	8	0
// OP_LOAD_F	7473	157	7532
// OP_EQ_F	7532	677	7533
// OP_CALL0	501	0	0
// OP_LT	1	972	7534
// OP_AND	7533	7534	7535
// OP_IFNOT	7535	2	0
// OP_STORE_F	619	70	0
// OP_LOAD_F	7473	129	7536
// OP_EQ_F	7536	295	7537
// OP_IFNOT	7537	15	0
// OP_LOAD_ENT	28	206	7538
// OP_LOAD_V	7538	130	7539
// OP_SUB_V	7484	7539	7542
// OP_STORE_V	7542	4	0
// OP_CALL1	506	0	0
// OP_STORE_F	1	7475	0
// OP_LOAD_V	7473	167	7545
// OP_STORE_V	7545	4	0
// OP_CALL1	506	0	0
// OP_STORE_F	1	7476	0
// OP_GT	7476	7475	7548
// OP_IFNOT	7548	2	0
// OP_STORE_F	619	70	0
// OP_GOTO	22	0	0
// OP_IFNOT	37	21	0
// OP_BITAND	112	810	7549
// OP_GT	7549	619	7550
// OP_LOAD_S	7473	243	7551
// OP_LOAD_S	28	243	7552
// OP_EQ_S	7551	7552	7553
// OP_AND	7550	7553	7554
// OP_IFNOT	7554	3	0
// OP_STORE_F	619	70	0
// OP_GOTO	12	0	0
// OP_LOAD_S	7473	243	7555
// OP_LOAD_S	28	243	7556
// OP_EQ_S	7555	7556	7557
// OP_LOAD_S	7474	243	7558
// OP_LOAD_S	28	243	7559
// OP_NE_S	7558	7559	7560
// OP_AND	7557	7560	7561
// OP_NE_E	7474	30	7562
// OP_AND	7561	7562	7563
// OP_IFNOT	7563	2	0
// OP_STORE_F	619	70	0
// OP_NOT_F	37	0	7564
// OP_AND	35	7564	7565
// OP_IFNOT	7565	6	0
// OP_LOAD_ENT	7473	226	7566
// OP_LOAD_S	7566	154	7567
// OP_NE_S	7567	766	7568
// OP_IFNOT	7568	2	0
// OP_STORE_F	619	70	0
// OP_AND	79	80	7569
// OP_IFNOT	7569	2	0
// OP_STORE_F	619	70	0
// OP_EQ_F	70	677	7570
// OP_IFNOT	7570	13	0
// OP_LOAD_ENT	28	206	7571
// OP_LOAD_V	7571	130	7572
// OP_SUB_V	7484	7572	7575
// OP_STORE_V	7575	4	0
// OP_CALL1	503	0	0
// OP_STORE_V	1	7481	0
// OP_MUL_V	7478	7481	7578
// OP_STORE_F	7578	7475	0
// OP_GT	7475	7471	7579
// OP_IFNOT	7579	3	0
// OP_STORE_F	7475	7471	0
// OP_STORE_ENT	7473	7474	0
// OP_LOAD_ENT	7473	189	7580
// OP_STORE_ENT	7580	7473	0
// OP_GOTO	-99	0	0
// OP_NE_E	7474	30	7581
// OP_IFNOT	7581	14	0
// OP_LOAD_V	7474	130	7582
// OP_LOAD_V	7474	159	7585
// OP_LOAD_V	7474	163	7588
// OP_ADD_V	7585	7588	7591
// OP_MUL_VF	7591	972	7594
// OP_ADD_V	7582	7594	7597
// OP_STORE_V	7597	7484	0
// OP_LOAD_ENT	28	206	7600
// OP_LOAD_V	7600	130	7601
// OP_SUB_V	7484	7601	7604
// OP_STORE_V	7604	4	0
// OP_CALL1	503	0	0
// OP_STORE_V	1	7478	0
// OP_LOAD_ENT	28	206	7607
// OP_ADDRESS	7607	464	7608
// OP_STOREP_ENT	7474	7608	0
// OP_RETURN	7478	0	0
// OP_DONE	0	0	0
vector (float minim, float maxdist) GV_aim = 
{
    local entity e;
    local entity re;
    local float f1;
    local float f2;
    local float flg;
    local vector v1;
    local vector v2;
    local vector org;
    flg = 0.000;
    
    if(maxdist < 0.000)
    {
        flg = flg + 1.000;
        maxdist = 0.000 - maxdist;
    }
    
    re = world;
    makevectors(self.enemy.oldenemy.angles);
    v1 = v_forward;
    v1_z = 0.000 - 0.000;
    e = findradius(self.enemy.origin, maxdist);
    
    while(e)
    {
        org = e.origin + ((e.mins + e.maxs) * 0.500);
        
        if((e.takedamage > 1.000) && ((e.movetype != MOVETYPE_FLY) || ((flg & 1.000) == 0.000)))
        {
            traceline(org, self.enemy.origin, TRUE, world);
            
            if(e.model == "progs/plane3.mdl")
            {
                
                if((e.skin == 1.000) && (random() < 0.500))
                {
                    trace_fraction = 0.000;
                }
                
            }
            
            if(e.solid == SOLID_BSP)
            {
                f1 = vlen(org - self.enemy.origin);
                f2 = vlen(e.size);
                
                if(f2 > f1)
                {
                    trace_fraction = 0.000;
                }
                
            }
            else
            {
                
                if(teamplay)
                {
                    if(((temp1 & 8.000) > 0.000) && (e.ts == self.ts))
                    {
                        trace_fraction = 0.000;
                    }
                    else
                    {
                        
                        if(((e.ts == self.ts) && (re.ts != self.ts)) && (re != world))
                        {
                            trace_fraction = 0.000;
                        }
                        
                    }
                    
                }
                
            }
            
            
            if(deathmatch && !teamplay)
            {
                
                if(e.owner.classname != "player")
                {
                    trace_fraction = 0.000;
                }
                
            }
            
            
            if(trace_inopen && trace_inwater)
            {
                trace_fraction = 0.000;
            }
            
            
            if(trace_fraction == 1.000)
            {
                v2 = normalize(org - self.enemy.origin);
                f1 = v1 * v2;
                
                if(f1 > minim)
                {
                    minim = f1;
                    re = e;
                }
                
            }
            
        }
        
        e = e.chain;
    }
    
    
    if(re != world)
    {
        org = re.origin + ((re.mins + re.maxs) * 0.500);
        v1 = normalize(org - self.enemy.origin);
    }
    
    self.enemy.trigger_field = re;
    return v1;
};

// GV_Die
// function begins at statement 9871, parm_start=7610
// OP_LOAD_ENT	28	226	7610
// OP_ADDRESS	7610	188	7611
// OP_STOREP_F	806	7611	0
// OP_LOAD_ENT	28	226	7612
// OP_STORE_V	7612	4	0
// OP_LOAD_ENT	28	226	7613
// OP_STORE_V	7613	7	0
// OP_LOAD_ENT	28	226	7614
// OP_STORE_V	7614	10	0
// OP_STORE_V	1622	13	0
// OP_CALL4	569	0	0
// OP_ADDRESS	28	188	7615
// OP_STOREP_F	619	7615	0
// OP_LOAD_ENT	28	412	7616
// OP_IFNOT	7616	4	0
// OP_LOAD_ENT	28	412	7617
// OP_STORE_V	7617	4	0
// OP_CALL1	509	0	0
// OP_LOAD_ENT	28	467	7618
// OP_IFNOT	7618	4	0
// OP_LOAD_ENT	28	467	7619
// OP_STORE_V	7619	4	0
// OP_CALL1	509	0	0
// OP_CALL0	3796	0	0
// OP_DONE	0	0	0
void () GV_Die = 
{
    self.owner.takedamage = 2.000;
    T_Damage(self.owner, self.owner, self.owner, 1000.000);
    self.takedamage = 0.000;
    
    if(self.oldenemy)
    {
        remove(self.oldenemy);
    }
    
    
    if(self.movetarget)
    {
        remove(self.movetarget);
    }
    
    AC_Explode();
};

