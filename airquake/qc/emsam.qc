// emsam_run
// function begins at statement 32350, parm_start=22482
// OP_CALL0	21893	0	0
// OP_LOAD_ENT	28	219	22489
// OP_LOAD_F	22489	177	22490
// OP_LT	22490	677	22491
// OP_LOAD_ENT	28	219	22492
// OP_LOAD_F	22492	188	22493
// OP_LT	22493	677	22494
// OP_OR	22491	22494	22495
// OP_IFNOT	22495	3	0
// OP_ADDRESS	28	219	22496
// OP_STOREP_ENT	30	22496	0
// OP_LOAD_ENT	28	219	22497
// OP_STORE_V	22497	4	0
// OP_CALL1	792	0	0
// OP_NOT_F	1	0	22498
// OP_LOAD_F	28	415	22499
// OP_LT	22499	31	22500
// OP_AND	22498	22500	22501
// OP_IFNOT	22501	3	0
// OP_ADDRESS	28	219	22502
// OP_STOREP_ENT	30	22502	0
// OP_LOAD_ENT	28	219	22503
// OP_NOT_ENT	22503	0	22504
// OP_IFNOT	22504	19	0
// OP_LOAD_F	28	144	22505
// OP_STORE_V	22505	4	0
// OP_LOAD_F	28	413	22506
// OP_MUL_F	22506	655	22507
// OP_STORE_V	22507	7	0
// OP_CALL2	526	0	0
// OP_LOAD_F	28	144	22508
// OP_MUL_FV	22508	6286	22509
// OP_STORE_V	22509	4	0
// OP_STORE_V	2618	7	0
// OP_CALL2	17830	0	0
// OP_ADDRESS	28	173	22512
// OP_LOAD_FNC	28	406	22513
// OP_STOREP_FNC	22513	22512	0
// OP_ADDRESS	28	175	22514
// OP_ADD_F	31	655	22515
// OP_STOREP_F	22515	22514	0
// OP_RETURN	0	0	0
// OP_LOAD_ENT	28	219	22516
// OP_LOAD_V	22516	130	22517
// OP_LOAD_ENT	28	219	22520
// OP_LOAD_V	22520	159	22521
// OP_LOAD_ENT	28	219	22524
// OP_LOAD_V	22524	163	22525
// OP_ADD_V	22521	22525	22528
// OP_MUL_VF	22528	972	22531
// OP_ADD_V	22517	22531	22534
// OP_STORE_V	22534	22485	0
// OP_LOAD_V	28	130	22537
// OP_SUB_V	22485	22537	22540
// OP_STORE_V	22540	4	0
// OP_CALL1	541	0	0
// OP_STORE_V	1	22482	0
// OP_LOAD_ENT	28	219	22543
// OP_STORE_V	22543	4	0
// OP_CALL1	792	0	0
// OP_EQ_F	1	268	22544
// OP_IFNOT	22544	4	0
// OP_ADDRESS	28	414	22545
// OP_STOREP_F	689	22545	0
// OP_GOTO	46	0	0
// OP_LOAD_F	28	415	22546
// OP_LT	22546	31	22547
// OP_IFNOT	22547	11	0
// OP_ADDRESS	28	414	22548
// OP_LOAD_F	28	414	22549
// OP_SUB_F	677	22549	22550
// OP_STOREP_F	22550	22548	0
// OP_ADDRESS	28	415	22551
// OP_CALL0	501	0	0
// OP_MUL_F	1	1111	22552
// OP_ADD_F	31	22552	22553
// OP_ADD_F	22553	827	22554
// OP_STOREP_F	22554	22551	0
// OP_LOAD_F	28	414	22555
// OP_LT	22555	619	22556
// OP_IFNOT	22556	12	0
// OP_ADDRESS	28	415	22557
// OP_ADD_F	31	1130	22558
// OP_STOREP_F	22558	22557	0
// OP_CALL0	501	0	0
// OP_LT	1	972	22559
// OP_IFNOT	22559	4	0
// OP_ADDRESS	28	414	22560
// OP_STOREP_F	619	22560	0
// OP_GOTO	3	0	0
// OP_ADDRESS	28	414	22561
// OP_STOREP_F	677	22561	0
// OP_LOAD_F	28	414	22562
// OP_EQ_F	22562	619	22563
// OP_IFNOT	22563	3	0
// OP_STORE_F	677	22488	0
// OP_GOTO	2	0	0
// OP_STORE_F	689	22488	0
// OP_LOAD_ENT	28	219	22564
// OP_STORE_V	22564	4	0
// OP_CALL1	1369	0	0
// OP_GT	1	296	22565
// OP_IFNOT	22565	5	0
// OP_MUL_F	22488	1228	22566
// OP_ADD_F	22483	22566	22567
// OP_STORE_F	22567	22483	0
// OP_GOTO	4	0	0
// OP_MUL_F	22488	2618	22568
// OP_ADD_F	22483	22568	22569
// OP_STORE_F	22569	22483	0
// OP_MUL_FV	22483	6286	22570
// OP_STORE_V	22570	4	0
// OP_CALL1	496	0	0
// OP_LOAD_V	28	130	22573
// OP_MUL_VF	65	830	22576
// OP_ADD_V	22573	22576	22579
// OP_STORE_V	22579	4	0
// OP_LOAD_V	28	130	22582
// OP_MUL_VF	65	830	22585
// OP_ADD_V	22582	22585	22588
// OP_MUL_VF	59	821	22591
// OP_ADD_V	22588	22591	22594
// OP_STORE_V	22594	7	0
// OP_STORE_V	267	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	510	0	0
// OP_STORE_F	70	22488	0
// OP_LOAD_V	28	130	22597
// OP_MUL_VF	65	830	22600
// OP_SUB_V	22597	22600	22603
// OP_STORE_V	22603	4	0
// OP_LOAD_V	28	130	22606
// OP_MUL_VF	65	830	22609
// OP_SUB_V	22606	22609	22612
// OP_MUL_VF	59	821	22615
// OP_ADD_V	22612	22615	22618
// OP_STORE_V	22618	7	0
// OP_STORE_V	267	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	510	0	0
// OP_SUB_F	22488	70	22621
// OP_STORE_F	22621	22488	0
// OP_IFNOT	22488	4	0
// OP_MUL_F	22488	1268	22622
// OP_SUB_F	22483	22622	22623
// OP_STORE_F	22623	22483	0
// OP_STORE_V	607	22485	0
// OP_LOAD_F	28	144	22624
// OP_SUB_F	22483	22624	22625
// OP_STORE_V	22625	4	0
// OP_CALL1	1299	0	0
// OP_STORE_F	1	22486	0
// OP_GT	22486	1827	22626
// OP_IFNOT	22626	3	0
// OP_SUB_F	22486	1459	22627
// OP_STORE_F	22627	22486	0
// OP_STORE_V	22486	4	0
// OP_CALL1	534	0	0
// OP_GT	1	827	22628
// OP_IFNOT	22628	18	0
// OP_LT	22486	619	22629
// OP_IFNOT	22629	7	0
// OP_ADDRESS	28	144	22630
// OP_LOAD_F	28	144	22631
// OP_SUB_F	22631	827	22632
// OP_STORE_V	22632	4	0
// OP_CALL1	1299	0	0
// OP_STOREP_F	1	22630	0
// OP_GT	22486	619	22633
// OP_IFNOT	22633	7	0
// OP_ADDRESS	28	144	22634
// OP_LOAD_F	28	144	22635
// OP_ADD_F	22635	827	22636
// OP_STORE_V	22636	4	0
// OP_CALL1	1299	0	0
// OP_STOREP_F	1	22634	0
// OP_GOTO	3	0	0
// OP_ADDRESS	28	144	22637
// OP_STOREP_F	22483	22637	0
// OP_STORE_V	22486	4	0
// OP_CALL1	534	0	0
// OP_LT	1	1193	22638
// OP_LOAD_F	28	422	22639
// OP_SUB_F	31	677	22640
// OP_LT	22639	22640	22641
// OP_AND	22638	22641	22642
// OP_IFNOT	22642	14	0
// OP_LOAD_F	28	413	22643
// OP_LT	22643	2627	22644
// OP_IFNOT	22644	10	0
// OP_ADDRESS	28	413	22645
// OP_LOAD_F	28	413	22646
// OP_ADD_F	22646	813	22647
// OP_STOREP_F	22647	22645	0
// OP_LOAD_F	28	413	22648
// OP_GT	22648	2627	22649
// OP_IFNOT	22649	3	0
// OP_ADDRESS	28	413	22650
// OP_STOREP_F	2627	22650	0
// OP_GOTO	13	0	0
// OP_LOAD_F	28	413	22651
// OP_GT	22651	619	22652
// OP_IFNOT	22652	10	0
// OP_ADDRESS	28	413	22653
// OP_LOAD_F	28	413	22654
// OP_SUB_F	22654	813	22655
// OP_STOREP_F	22655	22653	0
// OP_LOAD_F	28	413	22656
// OP_LT	22656	619	22657
// OP_IFNOT	22657	3	0
// OP_ADDRESS	28	413	22658
// OP_STOREP_F	619	22658	0
// OP_LOAD_F	28	144	22659
// OP_STORE_V	22659	4	0
// OP_LOAD_F	28	413	22660
// OP_MUL_F	22660	655	22661
// OP_STORE_V	22661	7	0
// OP_CALL2	526	0	0
// OP_NOT_F	1	0	22662
// OP_IFNOT	22662	18	0
// OP_LOAD_F	28	414	22663
// OP_GE	22663	619	22664
// OP_LOAD_F	28	415	22665
// OP_ADD_F	31	827	22666
// OP_LT	22665	22666	22667
// OP_AND	22664	22667	22668
// OP_IFNOT	22668	11	0
// OP_ADDRESS	28	414	22669
// OP_LOAD_F	28	414	22670
// OP_SUB_F	677	22670	22671
// OP_STOREP_F	22671	22669	0
// OP_ADDRESS	28	415	22672
// OP_ADD_F	31	827	22673
// OP_CALL0	501	0	0
// OP_MUL_F	1	1111	22674
// OP_ADD_F	22673	22674	22675
// OP_STOREP_F	22675	22672	0
// OP_CALL0	17812	0	0
// OP_LOAD_ENT	28	219	22676
// OP_STORE_V	22676	4	0
// OP_CALL1	1045	0	0
// OP_STORE_V	1	22485	0
// OP_LOAD_V	28	130	22677
// OP_SUB_V	22485	22677	22680
// OP_STORE_V	22680	4	0
// OP_CALL1	541	0	0
// OP_STORE_V	1	22482	0
// OP_STORE_V	22482	4	0
// OP_STORE_V	2618	7	0
// OP_CALL2	17830	0	0
// OP_LOAD_ENT	28	264	22683
// OP_LOAD_V	22683	142	22684
// OP_STORE_V	22684	22485	0
// OP_SUB_F	619	22485	22687
// OP_STORE_F	22687	22485	0
// OP_LOAD_F	28	422	22688
// OP_LT	22688	31	22689
// OP_IFNOT	22689	33	0
// OP_LOAD_V	28	130	22690
// OP_STORE_V	22690	4	0
// OP_LOAD_ENT	28	219	22693
// OP_LOAD_V	22693	130	22694
// OP_LOAD_ENT	28	219	22697
// OP_LOAD_V	22697	159	22698
// OP_LOAD_ENT	28	219	22701
// OP_LOAD_V	22701	163	22702
// OP_ADD_V	22698	22702	22705
// OP_MUL_VF	22705	972	22708
// OP_ADD_V	22694	22708	22711
// OP_STORE_V	22711	7	0
// OP_STORE_V	267	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	510	0	0
// OP_LOAD_ENT	28	219	22714
// OP_EQ_E	78	22714	22715
// OP_IFNOT	22715	15	0
// OP_STORE_V	22485	4	0
// OP_CALL1	496	0	0
// OP_LOAD_ENT	28	219	22716
// OP_LOAD_V	22716	130	22717
// OP_LOAD_V	28	130	22720
// OP_SUB_V	22717	22720	22723
// OP_STORE_V	22723	4	0
// OP_CALL1	503	0	0
// OP_STORE_V	1	22482	0
// OP_MUL_V	59	22482	22726
// OP_GT	22726	10293	22727
// OP_IFNOT	22727	3	0
// OP_LOAD_FNC	28	408	22728
// OP_CALL0	22728	0	0
// OP_ADDRESS	28	173	22729
// OP_STOREP_FNC	22481	22729	0
// OP_ADDRESS	28	175	22730
// OP_ADD_F	31	655	22731
// OP_STOREP_F	22731	22730	0
// OP_DONE	0	0	0
void () emsam_run = 
{
    local vector v0;
    local vector v1;
    local float tmp;
    etank_sound();
    
    if((self.goalentity.health < 1.000) || (self.goalentity.takedamage < 1.000))
    {
        self.goalentity = world;
    }
    
    
    if(!visible(self.goalentity) && (self.search_time < time))
    {
        self.goalentity = world;
    }
    
    
    if(!self.goalentity)
    {
        walkmove(self.angles_y, self.speed * 0.100);
        turn_eturret(self.angles_y * '0.000 1.000 0.000', 100.000);
        self.think = self.th_walk;
        self.nextthink = time + 0.100;
        return;
    }
    
    v1 = self.goalentity.origin + ((self.goalentity.mins + self.goalentity.maxs) * 0.500);
    v0 = vectoangles(v1 - self.origin);
    if(visible(self.goalentity) == TRUE)
    {
        self.lefty = -1.000;
    }
    else
    {
        
        if(self.search_time < time)
        {
            self.lefty = 1.000 - self.lefty;
            self.search_time = (time + (random() * 20.000)) + 10.000;
        }
        
        
        if(self.lefty < 0.000)
        {
            self.search_time = time + 30.000;
            if(random() < 0.500)
            {
                self.lefty = 0.000;
            }
            else
            {
                self.lefty = 1.000;
            }
            
        }
        
        if(self.lefty == 0.000)
        {
            tmp = 1.000;
        }
        else
        {
            tmp = -1.000;
        }
        
        if(range(self.goalentity) > RANGE_MELEE)
        {
            v0_y = 0.000 + (tmp * 70.000);
        }
        else
        {
            v0_y = 0.000 + (tmp * 100.000);
        }
        
    }
    
    makevectors(0.000 * '0.000 1.000 0.000');
    traceline(self.origin + (v_right * 11.000), (self.origin + (v_right * 11.000)) + (v_forward * 128.000), FALSE, self);
    tmp = trace_fraction;
    traceline(self.origin - (v_right * 11.000), (self.origin - (v_right * 11.000)) + (v_forward * 128.000), FALSE, self);
    tmp = tmp - trace_fraction;
    
    if(tmp)
    {
        v0_y = 0.000 - (tmp * 90.000);
    }
    
    v1 = '0.000 0.000 0.000';
    v1_y = anglemod(0.000 - self.angles_y);
    
    if(0.000 > 180.000)
    {
        v1_y = 0.000 - 360.000;
    }
    
    if(fabs(0.000) > 10.000)
    {
        
        if(0.000 < 0.000)
        {
            self.angles_y = anglemod(self.angles_y - 10.000);
        }
        
        
        if(0.000 > 0.000)
        {
            self.angles_y = anglemod(self.angles_y + 10.000);
        }
        
    }
    else
    {
        self.angles_y = 0.000;
    }
    
    if((fabs(0.000) < 45.000) && (self.attack_finished < (time - 1.000)))
    {
        
        if(self.speed < 120.000)
        {
            self.speed = self.speed + 5.000;
            
            if(self.speed > 120.000)
            {
                self.speed = 120.000;
            }
            
        }
        
    }
    else
    {
        
        if(self.speed > 0.000)
        {
            self.speed = self.speed - 5.000;
            
            if(self.speed < 0.000)
            {
                self.speed = 0.000;
            }
            
        }
        
    }
    
    
    if(!(walkmove(self.angles_y, self.speed * 0.100)))
    {
        
        if((self.lefty >= 0.000) && (self.search_time < (time + 10.000)))
        {
            self.lefty = 1.000 - self.lefty;
            self.search_time = (time + 10.000) + (random() * 20.000);
        }
        
    }
    
    tilt_etank();
    v1 = orgia(self.goalentity);
    v0 = vectoangles(v1 - self.origin);
    turn_eturret(v0, 100.000);
    v1 = self.tur2.angles;
    v1_x = 0.000 - v1_x;
    
    if(self.attack_finished < time)
    {
        traceline(self.origin, self.goalentity.origin + ((self.goalentity.mins + self.goalentity.maxs) * 0.500), FALSE, self);
        
        if(trace_ent == self.goalentity)
        {
            makevectors(v1);
            v0 = normalize(self.goalentity.origin - self.origin);
            
            if((v_forward * v0) > 0.950)
            {
                self.th_missile();
            }
            
        }
        
    }
    
    self.think = emsam_run;
    self.nextthink = time + 0.100;
};

// emsam_shoot
// function begins at statement 32646, parm_start=22733
// OP_LOAD_ENT	28	264	22736
// OP_LOAD_V	22736	142	22737
// OP_STORE_V	22737	22733	0
// OP_SUB_F	619	22733	22740
// OP_STORE_F	22740	22733	0
// OP_STORE_V	22733	4	0
// OP_CALL1	496	0	0
// OP_LOAD_F	28	185	22741
// OP_GT	22741	619	22742
// OP_IFNOT	22742	23	0
// OP_LOAD_V	28	130	22743
// OP_MUL_VF	65	812	22746
// OP_ADD_V	22743	22746	22749
// OP_MUL_VF	59	827	22752
// OP_ADD_V	22749	22752	22755
// OP_STORE_V	22755	4	0
// OP_STORE_V	59	7	0
// OP_LOAD_ENT	28	206	22758
// OP_STORE_V	22758	10	0
// OP_CALL3	4829	0	0
// OP_ADDRESS	28	422	22759
// OP_ADD_F	31	1798	22760
// OP_STOREP_F	22760	22759	0
// OP_ADDRESS	28	185	22761
// OP_LOAD_F	28	185	22762
// OP_SUB_F	22762	677	22763
// OP_STOREP_F	22763	22761	0
// OP_ADDRESS	28	158	22764
// OP_LOAD_F	28	158	22765
// OP_BITOR	22765	383	22766
// OP_STOREP_F	22766	22764	0
// OP_GOTO	18	0	0
// OP_LOAD_V	28	130	22767
// OP_MUL_VF	65	812	22770
// OP_ADD_V	22767	22770	22773
// OP_MUL_VF	59	827	22776
// OP_ADD_V	22773	22776	22779
// OP_STORE_V	22779	4	0
// OP_STORE_V	59	7	0
// OP_LOAD_ENT	28	206	22782
// OP_STORE_V	22782	10	0
// OP_CALL3	4006	0	0
// OP_ADDRESS	28	422	22783
// OP_ADD_F	31	1349	22784
// OP_STOREP_F	22784	22783	0
// OP_ADDRESS	28	158	22785
// OP_LOAD_F	28	158	22786
// OP_BITOR	22786	383	22787
// OP_STOREP_F	22787	22785	0
// OP_DONE	0	0	0
void () emsam_shoot = 
{
    local vector v0;
    v0 = self.tur2.angles;
    v0_x = 0.000 - v0_x;
    makevectors(v0);
    if(self.ammo_rockets > 0.000)
    {
        AC_heatseeker((self.origin + (v_right * 16.000)) + (v_forward * 10.000), v_forward, self.enemy);
        self.attack_finished = time + 1.500;
        self.ammo_rockets = self.ammo_rockets - 1.000;
        self.effects = self.effects | EF_MUZZLEFLASH;
    }
    else
    {
        AC_spike((self.origin + (v_right * 16.000)) + (v_forward * 10.000), v_forward, self.enemy);
        self.attack_finished = time + 0.200;
        self.effects = self.effects | EF_MUZZLEFLASH;
    }
    
};

// emsam_start
// function begins at statement 32696, parm_start=22789
// OP_GT	35	619	22789
// OP_LOAD_F	28	209	22790
// OP_EQ_F	22790	619	22791
// OP_EQ_F	37	619	22792
// OP_OR	22791	22792	22793
// OP_AND	22789	22793	22794
// OP_IFNOT	22794	4	0
// OP_STORE_V	28	4	0
// OP_CALL1	509	0	0
// OP_RETURN	0	0	0
// OP_ADDRESS	28	188	22795
// OP_STOREP_F	306	22795	0
// OP_ADDRESS	28	191	22796
// OP_STOREP_V	582	22796	0
// OP_ADDRESS	28	207	22799
// OP_LOAD_F	28	207	22800
// OP_BITOR	22800	273	22801
// OP_STOREP_F	22801	22799	0
// OP_ADDRESS	28	264	22802
// OP_CALL0	508	0	0
// OP_STOREP_ENT	1	22802	0
// OP_LOAD_ENT	28	264	22803
// OP_STORE_V	22803	4	0
// OP_LOAD_V	28	130	22804
// OP_STORE_V	22804	7	0
// OP_CALL2	497	0	0
// OP_LOAD_ENT	28	264	22807
// OP_STORE_V	22807	4	0
// OP_STORE_V	10961	7	0
// OP_CALL2	498	0	0
// OP_LOAD_S	28	221	22808
// OP_IFNOT	22808	26	0
// OP_ADDRESS	28	219	22809
// OP_ADDRESS	28	467	22810
// OP_STORE_V	30	4	0
// OP_STORE_V	222	7	0
// OP_LOAD_S	28	221	22811
// OP_STORE_V	22811	10	0
// OP_CALL3	512	0	0
// OP_STOREP_ENT	1	22810	0
// OP_STOREP_ENT	1	22809	0
// OP_LOAD_ENT	28	467	22812
// OP_NOT_ENT	22812	0	22813
// OP_IFNOT	22813	10	0
// OP_STORE_V	15338	4	0
// OP_CALL1	519	0	0
// OP_LOAD_V	28	130	22814
// OP_STORE_V	22814	4	0
// OP_CALL1	521	0	0
// OP_STORE_V	1	4	0
// OP_CALL1	519	0	0
// OP_STORE_V	2073	4	0
// OP_CALL1	519	0	0
// OP_ADDRESS	28	173	22817
// OP_LOAD_FNC	28	406	22818
// OP_STOREP_FNC	22818	22817	0
// OP_GOTO	4	0	0
// OP_ADDRESS	28	173	22819
// OP_LOAD_FNC	28	405	22820
// OP_STOREP_FNC	22820	22819	0
// OP_ADDRESS	28	175	22821
// OP_LOAD_F	28	175	22822
// OP_CALL0	501	0	0
// OP_MUL_F	1	972	22823
// OP_ADD_F	22822	22823	22824
// OP_STOREP_F	22824	22821	0
// OP_DONE	0	0	0
void () emsam_start = 
{
    
    if((deathmatch > 0.000) && ((self.team == 0.000) || (teamplay == 0.000)))
    {
        remove(self);
        return;
    }
    
    self.takedamage = DAMAGE_AIM;
    self.view_ofs = '0.000 0.000 1.000';
    self.flags = self.flags | FL_MONSTER;
    self.tur2 = spawn();
    setorigin(self.tur2, self.origin);
    setmodel(self.tur2, "progs/msamtb.mdl");
    if(self.target)
    {
        self.goalentity = self.movetarget = find(world, targetname, self.target);
        
        if(!self.movetarget)
        {
            dprint("Monster can't find target at ");
            dprint(vtos(self.origin));
            dprint("\n");
        }
        
        self.think = self.th_walk;
    }
    else
    {
        self.think = self.th_stand;
    }
    
    self.nextthink = self.nextthink + (random() * 0.500);
};

// monster_emsam
// function begins at statement 32763, parm_start=22826
// OP_ADDRESS	28	129	22826
// OP_STOREP_F	294	22826	0
// OP_ADDRESS	28	128	22827
// OP_STOREP_F	283	22827	0
// OP_NOT_F	35	0	22828
// OP_IFNOT	22828	3	0
// OP_ADD_F	40	677	22829
// OP_STORE_F	22829	40	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10922	7	0
// OP_CALL2	498	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	10915	7	0
// OP_STORE_V	22445	10	0
// OP_CALL3	499	0	0
// OP_ADDRESS	28	191	22830
// OP_STOREP_V	582	22830	0
// OP_LOAD_F	28	177	22833
// OP_NOT_F	22833	0	22834
// OP_IFNOT	22834	3	0
// OP_ADDRESS	28	177	22835
// OP_STOREP_F	986	22835	0
// OP_ADDRESS	28	205	22836
// OP_STOREP_S	22455	22836	0
// OP_LOAD_F	28	209	22837
// OP_EQ_F	22837	619	22838
// OP_LOAD_F	28	209	22839
// OP_NE_F	22839	677	22840
// OP_EQ_F	35	619	22841
// OP_AND	22840	22841	22842
// OP_OR	22838	22842	22843
// OP_IFNOT	22843	4	0
// OP_ADDRESS	28	243	22844
// OP_STOREP_S	101	22844	0
// OP_GOTO	9	0	0
// OP_LOAD_F	28	209	22845
// OP_EQ_F	22845	677	22846
// OP_IFNOT	22846	4	0
// OP_ADDRESS	28	243	22847
// OP_STOREP_S	102	22847	0
// OP_GOTO	3	0	0
// OP_ADDRESS	28	243	22848
// OP_STOREP_S	103	22848	0
// OP_LOAD_F	28	185	22849
// OP_NOT_F	22849	0	22850
// OP_IFNOT	22850	3	0
// OP_ADDRESS	28	185	22851
// OP_STOREP_F	808	22851	0
// OP_ADDRESS	28	411	22852
// OP_STOREP_FNC	21914	22852	0
// OP_ADDRESS	28	405	22853
// OP_STOREP_FNC	21920	22853	0
// OP_ADDRESS	28	406	22854
// OP_STOREP_FNC	21942	22854	0
// OP_ADDRESS	28	407	22855
// OP_STOREP_FNC	22481	22855	0
// OP_ADDRESS	28	408	22856
// OP_STOREP_FNC	22732	22856	0
// OP_ADDRESS	28	173	22857
// OP_STOREP_FNC	22788	22857	0
// OP_ADDRESS	28	175	22858
// OP_ADD_F	31	655	22859
// OP_CALL0	501	0	0
// OP_MUL_F	1	655	22860
// OP_ADD_F	22859	22860	22861
// OP_STOREP_F	22861	22858	0
// OP_DONE	0	0	0
void () monster_emsam = 
{
    self.solid = SOLID_SLIDEBOX;
    self.movetype = MOVETYPE_STEP;
    
    if(!deathmatch)
    {
        total_monsters = total_monsters + 1.000;
    }
    
    setmodel(self, "progs/msamba.mdl");
    setsize(self, '-16.000 -16.000 -24.000', '16.000 16.000 8.000');
    self.view_ofs = '0.000 0.000 1.000';
    
    if(!self.health)
    {
        self.health = 200.000;
    }
    
    self.netname = "a Tank";
    if((self.team == 0.000) || ((self.team != 1.000) && (deathmatch == 0.000)))
    {
        self.ts = T0;
    }
    else
    {
        if(self.team == 1.000)
        {
            self.ts = T1;
        }
        else
        {
            self.ts = T2;
        }
        
    }
    
    
    if(!self.ammo_rockets)
    {
        self.ammo_rockets = 4.000;
    }
    
    self.th_die = etank_die;
    self.th_stand = etank_stand;
    self.th_walk = etank_walk;
    self.th_run = emsam_run;
    self.th_missile = emsam_shoot;
    self.think = emsam_start;
    self.nextthink = (time + 0.100) + (random() * 0.100);
};

