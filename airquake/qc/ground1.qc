// gv1_steer
// function begins at statement 13807, parm_start=10581
// OP_LOAD_ENT	28	206	10595
// OP_STORE_ENT	10595	10581	0
// OP_LOAD_V	28	138	10596
// OP_STORE_V	10596	4	0
// OP_CALL1	506	0	0
// OP_MUL_F	1	10599	10600
// OP_STORE_F	10600	10594	0
// OP_STORE_V	10594	4	0
// OP_CALL1	530	0	0
// OP_STORE_F	1	10594	0
// OP_GT	10594	810	10601
// OP_IFNOT	10601	2	0
// OP_STORE_F	810	10594	0
// OP_LOAD_F	28	435	10602
// OP_GT	31	10602	10603
// OP_LOAD_F	10581	198	10604
// OP_NE_F	10604	10594	10605
// OP_OR	10603	10605	10606
// OP_IFNOT	10606	84	0
// OP_EQ_F	10594	619	10607
// OP_IFNOT	10607	8	0
// OP_STORE_V	10581	4	0
// OP_STORE_V	373	7	0
// OP_STORE_V	10608	10	0
// OP_STORE_V	1349	13	0
// OP_STORE_V	375	16	0
// OP_CALL5	502	0	0
// OP_GOTO	70	0	0
// OP_EQ_F	10594	677	10609
// OP_IFNOT	10609	8	0
// OP_STORE_V	10581	4	0
// OP_STORE_V	373	7	0
// OP_STORE_V	10610	10	0
// OP_STORE_V	1687	13	0
// OP_STORE_V	375	16	0
// OP_CALL5	502	0	0
// OP_GOTO	61	0	0
// OP_EQ_F	10594	806	10611
// OP_IFNOT	10611	8	0
// OP_STORE_V	10581	4	0
// OP_STORE_V	373	7	0
// OP_STORE_V	10612	10	0
// OP_STORE_V	1350	13	0
// OP_STORE_V	375	16	0
// OP_CALL5	502	0	0
// OP_GOTO	52	0	0
// OP_EQ_F	10594	788	10613
// OP_IFNOT	10613	8	0
// OP_STORE_V	10581	4	0
// OP_STORE_V	373	7	0
// OP_STORE_V	10614	10	0
// OP_STORE_V	972	13	0
// OP_STORE_V	375	16	0
// OP_CALL5	502	0	0
// OP_GOTO	43	0	0
// OP_EQ_F	10594	808	10615
// OP_IFNOT	10615	8	0
// OP_STORE_V	10581	4	0
// OP_STORE_V	373	7	0
// OP_STORE_V	10616	10	0
// OP_STORE_V	10617	13	0
// OP_STORE_V	375	16	0
// OP_CALL5	502	0	0
// OP_GOTO	34	0	0
// OP_EQ_F	10594	813	10618
// OP_IFNOT	10618	8	0
// OP_STORE_V	10581	4	0
// OP_STORE_V	373	7	0
// OP_STORE_V	10619	10	0
// OP_STORE_V	2571	13	0
// OP_STORE_V	375	16	0
// OP_CALL5	502	0	0
// OP_GOTO	25	0	0
// OP_EQ_F	10594	816	10620
// OP_IFNOT	10620	8	0
// OP_STORE_V	10581	4	0
// OP_STORE_V	373	7	0
// OP_STORE_V	10621	10	0
// OP_STORE_V	10247	13	0
// OP_STORE_V	375	16	0
// OP_CALL5	502	0	0
// OP_GOTO	16	0	0
// OP_EQ_F	10594	819	10622
// OP_IFNOT	10622	8	0
// OP_STORE_V	10581	4	0
// OP_STORE_V	373	7	0
// OP_STORE_V	10623	10	0
// OP_STORE_V	1345	13	0
// OP_STORE_V	375	16	0
// OP_CALL5	502	0	0
// OP_GOTO	7	0	0
// OP_STORE_V	10581	4	0
// OP_STORE_V	373	7	0
// OP_STORE_V	10624	10	0
// OP_STORE_V	677	13	0
// OP_STORE_V	375	16	0
// OP_CALL5	502	0	0
// OP_ADDRESS	28	435	10625
// OP_ADD_F	31	677	10626
// OP_STOREP_F	10626	10625	0
// OP_ADDRESS	10581	198	10627
// OP_STOREP_F	10594	10627	0
// OP_LOAD_V	28	138	10628
// OP_LOAD_V	28	227	10631
// OP_SUB_V	10628	10631	10634
// OP_STORE_V	10634	4	0
// OP_CALL1	506	0	0
// OP_STORE_F	1	10594	0
// OP_ADDRESS	28	227	10637
// OP_LOAD_V	28	138	10640
// OP_STOREP_V	10640	10637	0
// OP_GT	10594	2627	10643
// OP_IFNOT	10643	16	0
// OP_STORE_V	10581	4	0
// OP_STORE_V	371	7	0
// OP_STORE_V	10644	10	0
// OP_STORE_V	677	13	0
// OP_STORE_V	375	16	0
// OP_CALL5	502	0	0
// OP_STORE_V	10581	4	0
// OP_LOAD_ENT	28	265	10645
// OP_STORE_V	10645	7	0
// OP_LOAD_ENT	28	265	10646
// OP_STORE_V	10646	10	0
// OP_SUB_F	10594	2627	10647
// OP_MUL_F	10647	972	10648
// OP_STORE_V	10648	13	0
// OP_CALL4	569	0	0
// OP_LOAD_F	28	207	10649
// OP_BITAND	10649	277	10650
// OP_IFNOT	10650	3	0
// OP_ADDRESS	28	265	10651
// OP_STOREP_ENT	30	10651	0
// OP_LOAD_F	28	207	10652
// OP_BITAND	10652	274	10653
// OP_NOT_F	10653	0	10654
// OP_IFNOT	10654	5	0
// OP_STORE_V	2618	4	0
// OP_STORE_V	1228	7	0
// OP_CALL2	7062	0	0
// OP_GOTO	4	0	0
// OP_STORE_V	1622	4	0
// OP_STORE_V	1622	7	0
// OP_CALL2	7062	0	0
// OP_ADDRESS	10581	207	10655
// OP_LOAD_F	10581	207	10656
// OP_LOAD_F	10581	207	10657
// OP_BITAND	10657	277	10658
// OP_SUB_F	10656	10658	10659
// OP_STOREP_F	10659	10655	0
// OP_LOAD_F	28	207	10660
// OP_BITAND	10660	277	10661
// OP_IFNOT	10661	21	0
// OP_LOAD_F	10581	143	10662
// OP_GT	10662	1193	10663
// OP_IFNOT	10663	3	0
// OP_ADDRESS	10581	143	10664
// OP_STOREP_F	1193	10664	0
// OP_LOAD_F	10581	143	10665
// OP_LT	10665	10094	10666
// OP_IFNOT	10666	3	0
// OP_ADDRESS	10581	143	10667
// OP_STOREP_F	10094	10667	0
// OP_LOAD_F	10581	145	10668
// OP_GT	10668	1203	10669
// OP_IFNOT	10669	3	0
// OP_ADDRESS	10581	145	10670
// OP_STOREP_F	1203	10670	0
// OP_LOAD_F	10581	145	10671
// OP_LT	10671	10672	10673
// OP_IFNOT	10673	3	0
// OP_ADDRESS	10581	145	10674
// OP_STOREP_F	10672	10674	0
// OP_LOAD_V	10581	142	10675
// OP_STORE_V	10675	10585	0
// OP_SUB_F	619	10585	10678
// OP_STORE_F	10678	10585	0
// OP_STORE_V	10585	4	0
// OP_CALL1	496	0	0
// OP_STORE_V	59	10591	0
// OP_LOAD_F	28	466	10679
// OP_GE	31	10679	10680
// OP_IFNOT	10680	55	0
// OP_ADDRESS	10581	413	10681
// OP_LOAD_F	10581	413	10682
// OP_MUL_F	10593	813	10683
// OP_SUB_F	10682	10683	10684
// OP_STOREP_F	10684	10681	0
// OP_LOAD_F	10581	240	10685
// OP_MUL_F	10685	1130	10686
// OP_STORE_F	10686	10594	0
// OP_LOAD_F	28	197	10687
// OP_IFNOT	10687	20	0
// OP_LOAD_F	28	202	10688
// OP_LOAD_F	10581	144	10689
// OP_SUB_F	10688	10689	10690
// OP_STORE_F	10690	10594	0
// OP_LT	10594	619	10691
// OP_IFNOT	10691	3	0
// OP_ADD_F	10594	1459	10692
// OP_STORE_F	10692	10594	0
// OP_GT	10594	1827	10693
// OP_IFNOT	10693	3	0
// OP_SUB_F	10594	1459	10694
// OP_STORE_F	10694	10594	0
// OP_STORE_V	10594	4	0
// OP_CALL1	534	0	0
// OP_LE	1	1268	10695
// OP_IFNOT	10695	3	0
// OP_STORE_F	2627	10594	0
// OP_GOTO	2	0	0
// OP_STORE_F	10696	10594	0
// OP_LOAD_F	10581	413	10697
// OP_GE	10697	10594	10698
// OP_IFNOT	10698	11	0
// OP_ADDRESS	10581	413	10699
// OP_LOAD_F	10581	413	10700
// OP_SUB_F	10700	808	10701
// OP_STOREP_F	10701	10699	0
// OP_LOAD_F	10581	413	10702
// OP_LT	10702	10594	10703
// OP_IFNOT	10703	3	0
// OP_ADDRESS	10581	413	10704
// OP_STOREP_F	10594	10704	0
// OP_GOTO	10	0	0
// OP_ADDRESS	10581	413	10705
// OP_LOAD_F	10581	413	10706
// OP_ADD_F	10706	788	10707
// OP_STOREP_F	10707	10705	0
// OP_LOAD_F	10581	413	10708
// OP_GT	10708	10594	10709
// OP_IFNOT	10709	3	0
// OP_ADDRESS	10581	413	10710
// OP_STOREP_F	10594	10710	0
// OP_ADDRESS	28	466	10711
// OP_ADD_F	31	655	10712
// OP_STOREP_F	10712	10711	0
// OP_ADDRESS	28	213	10713
// OP_LOAD_V	28	138	10714
// OP_STORE_V	10714	4	0
// OP_CALL1	506	0	0
// OP_DIV_F	1	7730	10717
// OP_STOREP_F	10717	10713	0
// OP_LOAD_F	28	207	10718
// OP_BITAND	10718	277	10719
// OP_IFNOT	10719	9	0
// OP_ADDRESS	28	138	10720
// OP_LOAD_V	28	138	10723
// OP_MUL_VF	10723	972	10726
// OP_LOAD_F	10581	413	10729
// OP_MUL_VF	10591	10729	10730
// OP_MUL_VF	10730	972	10733
// OP_ADD_V	10726	10733	10736
// OP_STOREP_V	10736	10720	0
// OP_LOAD_ENT	28	464	10739
// OP_IFNOT	10739	64	0
// OP_LOAD_F	28	179	10740
// OP_EQ_F	10740	321	10741
// OP_IFNOT	10741	6	0
// OP_STORE_V	7765	4	0
// OP_STORE_V	7766	7	0
// OP_CALL2	7470	0	0
// OP_STORE_V	1	10585	0
// OP_GOTO	13	0	0
// OP_LOAD_F	28	179	10742
// OP_EQ_F	10742	322	10743
// OP_IFNOT	10743	6	0
// OP_STORE_V	7769	4	0
// OP_STORE_V	10744	7	0
// OP_CALL2	7470	0	0
// OP_STORE_V	1	10585	0
// OP_GOTO	5	0	0
// OP_STORE_V	677	4	0
// OP_STORE_V	7776	7	0
// OP_CALL2	7470	0	0
// OP_STORE_V	1	10585	0
// OP_LOAD_ENT	28	464	10745
// OP_NOT_ENT	10745	0	10746
// OP_IFNOT	10746	2	0
// OP_RETURN	0	0	0
// OP_LOAD_V	10581	142	10747
// OP_STORE_V	10747	10588	0
// OP_SUB_F	619	10588	10750
// OP_STORE_F	10750	10588	0
// OP_STORE_V	10588	4	0
// OP_CALL1	496	0	0
// OP_STORE_V	10585	4	0
// OP_CALL1	503	0	0
// OP_STORE_V	1	10585	0
// OP_LOAD_V	10581	130	10751
// OP_MUL_VF	65	812	10754
// OP_ADD_V	10751	10754	10757
// OP_STORE_V	10757	4	0
// OP_LOAD_V	10581	130	10760
// OP_MUL_VF	10585	986	10763
// OP_ADD_V	10760	10763	10766
// OP_MUL_VF	65	812	10769
// OP_ADD_V	10766	10769	10772
// OP_STORE_V	10772	7	0
// OP_STORE_V	267	10	0
// OP_STORE_V	10581	13	0
// OP_CALL4	510	0	0
// OP_LOAD_ENT	28	206	10775
// OP_LOAD_ENT	10775	464	10776
// OP_EQ_E	10776	30	10777
// OP_IFNOT	10777	8	0
// OP_MUL_VF	10585	810	10778
// OP_SUB_V	71	10778	10781
// OP_STORE_V	10781	10588	0
// OP_LOAD_ENT	28	464	10784
// OP_ADDRESS	10784	156	10785
// OP_STOREP_F	619	10785	0
// OP_GOTO	3	0	0
// OP_CALL0	945	0	0
// OP_STORE_V	1	10588	0
// OP_LOAD_ENT	28	464	10786
// OP_STORE_V	10786	4	0
// OP_STORE_V	10588	7	0
// OP_CALL2	497	0	0
// OP_DONE	0	0	0
void () gv1_steer = 
{
    local entity veh;
    local vector v0;
    local vector v1;
    local vector v2;
    local vector v3;
    local float tmp;
    veh = self.enemy;
    tmp = vlen(self.velocity) * 0.06;
    tmp = floor(tmp);
    
    if(tmp > 8)
    {
        tmp = 8;
    }
    
    
    if((time > self.fly_sound) || (veh.impulse != tmp))
    {
        if(tmp == 0)
        {
            sound(veh, CHAN_BODY, "engines/tank0.wav", 0.2, ATTN_NORM);
        }
        else
        {
            if(tmp == 1)
            {
                sound(veh, CHAN_BODY, "engines/tank1.wav", 0.3, ATTN_NORM);
            }
            else
            {
                if(tmp == 2)
                {
                    sound(veh, CHAN_BODY, "engines/tank2.wav", 0.4, ATTN_NORM);
                }
                else
                {
                    if(tmp == 3)
                    {
                        sound(veh, CHAN_BODY, "engines/tank3.wav", 0.5, ATTN_NORM);
                    }
                    else
                    {
                        if(tmp == 4)
                        {
                            sound(veh, CHAN_BODY, "engines/tank4.wav", 0.6, ATTN_NORM);
                        }
                        else
                        {
                            if(tmp == 5)
                            {
                                sound(veh, CHAN_BODY, "engines/tank5.wav", 0.7, ATTN_NORM);
                            }
                            else
                            {
                                if(tmp == 6)
                                {
                                    sound(veh, CHAN_BODY, "engines/tank6.wav", 0.8, ATTN_NORM);
                                }
                                else
                                {
                                    if(tmp == 7)
                                    {
                                        sound(veh, CHAN_BODY, "engines/tank7.wav", 0.9, ATTN_NORM);
                                    }
                                    else
                                    {
                                        sound(veh, CHAN_BODY, "engines/tank8.wav", 1, ATTN_NORM);
                                    }
                                    
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        self.fly_sound = time + 1;
        veh.impulse = tmp;
    }
    
    tmp = vlen(self.velocity - self.movedir);
    self.movedir = self.velocity;
    
    if(tmp > 120)
    {
        sound(veh, CHAN_VOICE, "player/land2.wav", 1, ATTN_NORM);
        T_Damage(veh, self.radiuskiller, self.radiuskiller, (tmp - 120) * 0.5);
    }
    
    
    if(self.flags & FL_ONGROUND)
    {
        self.radiuskiller = world;
    }
    
    if(!(self.flags & FL_GODMODE))
    {
        Steer_groundveh(100, 70);
    }
    else
    {
        Steer_groundveh(1000, 1000);
    }
    
    veh.flags = veh.flags - (veh.flags & FL_ONGROUND);
    
    if(self.flags & FL_ONGROUND)
    {
        
        if(veh.angles_x > 45)
        {
            veh.angles_x = 45;
        }
        
        
        if(veh.angles_x < -45)
        {
            veh.angles_x = -45;
        }
        
        
        if(veh.angles_z > 60)
        {
            veh.angles_z = 60;
        }
        
        
        if(veh.angles_z < -60)
        {
            veh.angles_z = -60;
        }
        
    }
    
    v1 = veh.angles;
    v1_x = 0 - v1_x;
    makevectors(v1);
    v3 = v_forward;
    
    if(time >= self.pausetime)
    {
        veh.speed = veh.speed - (0 * 5);
        tmp = veh.thru * 30;
        
        if(self.button2)
        {
            tmp = self.v_angle_y - veh.angles_y;
            
            if(tmp < 0)
            {
                tmp = tmp + 360;
            }
            
            
            if(tmp > 180)
            {
                tmp = tmp - 360;
            }
            
            if(fabs(tmp) <= 90)
            {
                tmp = 120;
            }
            else
            {
                tmp = -120;
            }
            
        }
        
        if(veh.speed >= tmp)
        {
            veh.speed = veh.speed - 4;
            
            if(veh.speed < tmp)
            {
                veh.speed = tmp;
            }
            
        }
        else
        {
            veh.speed = veh.speed + 3;
            
            if(veh.speed > tmp)
            {
                veh.speed = tmp;
            }
            
        }
        
        self.pausetime = time + 0.1;
    }
    
    self.armorvalue = vlen(self.velocity) / 3.3;
    
    if(self.flags & FL_ONGROUND)
    {
        self.velocity = (self.velocity * 0.5) + ((v3 * veh.speed) * 0.5);
    }
    
    
    if(self.trigger_field)
    {
        if(self.weapon == IT_WEP1)
        {
            v1 = GV_aim(0.97, -500);
        }
        else
        {
            if(self.weapon == IT_WEP2)
            {
                v1 = GV_aim(0.93, 1800);
            }
            else
            {
                v1 = GV_aim(1, -100);
            }
            
        }
        
        
        if(!self.trigger_field)
        {
            return;
        }
        
        v2 = veh.angles;
        v2_x = 0 - v2_x;
        makevectors(v2);
        v1 = normalize(v1);
        traceline(veh.origin + (v_right * 16), (veh.origin + (v1 * 200)) + (v_right * 16), FALSE, veh);
        if(self.enemy.trigger_field == world)
        {
            v2 = trace_endpos - (v1 * 8);
            self.trigger_field.frame = 0;
        }
        else
        {
            v2 = place_targetbox();
        }
        
        setorigin(self.trigger_field, v2);
    }
    
};

// gv1_attack
// function begins at statement 14127, parm_start=10788
// OP_LOAD_ENT	28	206	10796
// OP_STORE_ENT	10796	10794	0
// OP_LOAD_ENT	10794	412	10797
// OP_STORE_ENT	10797	10795	0
// OP_LOAD_V	10795	142	10798
// OP_STORE_V	10798	10788	0
// OP_SUB_F	619	10788	10801
// OP_STORE_F	10801	10788	0
// OP_LOAD_F	28	179	10802
// OP_EQ_F	10802	321	10803
// OP_IFNOT	10803	46	0
// OP_LOAD_F	28	245	10804
// OP_GE	10804	677	10805
// OP_IFNOT	10805	36	0
// OP_STORE_V	7765	4	0
// OP_STORE_V	7766	7	0
// OP_CALL2	7470	0	0
// OP_STORE_V	1	10791	0
// OP_STORE_V	10788	4	0
// OP_CALL1	496	0	0
// OP_LOAD_ENT	28	206	10806
// OP_LOAD_V	10806	130	10807
// OP_MUL_VF	59	827	10810
// OP_ADD_V	10807	10810	10813
// OP_MUL_VF	65	812	10816
// OP_ADD_V	10813	10816	10819
// OP_STORE_V	10819	4	0
// OP_STORE_V	10791	7	0
// OP_STORE_V	30	10	0
// OP_CALL3	4006	0	0
// OP_LOAD_ENT	28	206	10822
// OP_ADDRESS	10822	158	10823
// OP_LOAD_ENT	28	206	10824
// OP_LOAD_F	10824	158	10825
// OP_BITOR	10825	383	10826
// OP_STOREP_F	10826	10823	0
// OP_ADDRESS	28	182	10827
// OP_ADDRESS	28	183	10828
// OP_ADDRESS	28	245	10829
// OP_LOAD_F	28	245	10830
// OP_SUB_F	10830	677	10831
// OP_STOREP_F	10831	10829	0
// OP_STOREP_F	10831	10828	0
// OP_STOREP_F	10831	10827	0
// OP_LOAD_ENT	28	206	10832
// OP_ADDRESS	10832	437	10833
// OP_ADD_F	31	677	10834
// OP_STOREP_F	10834	10833	0
// OP_GOTO	4	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	2826	7	0
// OP_CALL2	518	0	0
// OP_ADDRESS	28	422	10835
// OP_ADD_F	31	655	10836
// OP_STOREP_F	10836	10835	0
// OP_GOTO	64	0	0
// OP_LOAD_F	28	179	10837
// OP_EQ_F	10837	322	10838
// OP_IFNOT	10838	61	0
// OP_LOAD_F	28	248	10839
// OP_GE	10839	677	10840
// OP_IFNOT	10840	52	0
// OP_STORE_V	7769	4	0
// OP_STORE_V	10744	7	0
// OP_CALL2	7470	0	0
// OP_STORE_V	1	10791	0
// OP_STORE_V	10788	4	0
// OP_CALL1	496	0	0
// OP_LOAD_F	28	248	10841
// OP_BITAND	10841	677	10842
// OP_IFNOT	10842	13	0
// OP_LOAD_V	10795	130	10843
// OP_MUL_VF	65	812	10846
// OP_ADD_V	10843	10846	10849
// OP_MUL_VF	62	808	10852
// OP_SUB_V	10849	10852	10855
// OP_STORE_V	10855	4	0
// OP_STORE_V	59	7	0
// OP_LOAD_ENT	28	206	10858
// OP_LOAD_ENT	10858	464	10859
// OP_STORE_V	10859	10	0
// OP_CALL3	4829	0	0
// OP_GOTO	12	0	0
// OP_LOAD_V	10795	130	10860
// OP_MUL_VF	65	812	10863
// OP_ADD_V	10860	10863	10866
// OP_MUL_VF	62	808	10869
// OP_ADD_V	10866	10869	10872
// OP_STORE_V	10872	4	0
// OP_STORE_V	59	7	0
// OP_LOAD_ENT	28	206	10875
// OP_LOAD_ENT	10875	464	10876
// OP_STORE_V	10876	10	0
// OP_CALL3	4829	0	0
// OP_LOAD_ENT	28	206	10877
// OP_ADDRESS	10877	158	10878
// OP_LOAD_ENT	28	206	10879
// OP_LOAD_F	10879	158	10880
// OP_BITOR	10880	383	10881
// OP_STOREP_F	10881	10878	0
// OP_ADDRESS	28	182	10882
// OP_ADDRESS	28	184	10883
// OP_ADDRESS	28	248	10884
// OP_LOAD_F	28	248	10885
// OP_SUB_F	10885	677	10886
// OP_STOREP_F	10886	10884	0
// OP_STOREP_F	10886	10883	0
// OP_STOREP_F	10886	10882	0
// OP_LOAD_ENT	28	206	10887
// OP_ADDRESS	10887	437	10888
// OP_ADD_F	31	677	10889
// OP_STOREP_F	10889	10888	0
// OP_GOTO	4	0	0
// OP_STORE_V	28	4	0
// OP_STORE_V	2826	7	0
// OP_CALL2	518	0	0
// OP_ADDRESS	28	422	10890
// OP_ADD_F	31	10247	10891
// OP_STOREP_F	10891	10890	0
// OP_DONE	0	0	0
void () gv1_attack = 
{
    local vector v1;
    local vector v2;
    local entity stemp;
    local entity e;
    stemp = self.enemy;
    e = stemp.oldenemy;
    v1 = e.angles;
    v1_x = 0 - v1_x;
    if(self.weapon == IT_WEP1)
    {
        if(self.ammo_auto >= 1)
        {
            v2 = GV_aim(0.97, -500);
            makevectors(v1);
            AC_spike((self.enemy.origin + (v_forward * 10)) + (v_right * 16), v2, world);
            self.enemy.effects = self.enemy.effects | EF_MUZZLEFLASH;
            self.currentammo = self.ammo_shells = self.ammo_auto = self.ammo_auto - 1;
            self.enemy.show_hostile = time + 1;
        }
        else
        {
            sprint(self, "not enough ammo.\n");
        }
        
        self.attack_finished = time + 0.1;
    }
    else
    {
        
        if(self.weapon == IT_WEP2)
        {
            if(self.ammo_amsl >= 1)
            {
                v2 = GV_aim(0.93, 1800);
                makevectors(v1);
                if(self.ammo_amsl & 1)
                {
                    AC_heatseeker((e.origin + (v_right * 16)) - (v_up * 4), v_forward, self.enemy.trigger_field);
                }
                else
                {
                    AC_heatseeker((e.origin + (v_right * 16)) + (v_up * 4), v_forward, self.enemy.trigger_field);
                }
                
                self.enemy.effects = self.enemy.effects | EF_MUZZLEFLASH;
                self.currentammo = self.ammo_nails = self.ammo_amsl = self.ammo_amsl - 1;
                self.enemy.show_hostile = time + 1;
            }
            else
            {
                sprint(self, "not enough ammo.\n");
            }
            
            self.attack_finished = time + 0.8;
        }
        
    }
    
};

// gv1_currentammo
// function begins at statement 14247, parm_start=10893
// OP_ADDRESS	28	183	10893
// OP_LOAD_F	28	245	10894
// OP_STOREP_F	10894	10893	0
// OP_ADDRESS	28	184	10895
// OP_LOAD_F	28	248	10896
// OP_STOREP_F	10896	10895	0
// OP_ADDRESS	28	185	10897
// OP_STOREP_F	619	10897	0
// OP_ADDRESS	28	186	10898
// OP_STOREP_F	619	10898	0
// OP_LOAD_F	28	179	10899
// OP_EQ_F	10899	321	10900
// OP_IFNOT	10900	4	0
// OP_ADDRESS	28	180	10901
// OP_STOREP_S	7632	10901	0
// OP_GOTO	18	0	0
// OP_LOAD_F	28	179	10902
// OP_EQ_F	10902	322	10903
// OP_IFNOT	10903	4	0
// OP_ADDRESS	28	180	10904
// OP_STOREP_S	10905	10904	0
// OP_GOTO	12	0	0
// OP_LOAD_F	28	179	10906
// OP_EQ_F	10906	323	10907
// OP_IFNOT	10907	4	0
// OP_ADDRESS	28	180	10908
// OP_STOREP_S	621	10908	0
// OP_GOTO	6	0	0
// OP_LOAD_F	28	179	10909
// OP_EQ_F	10909	324	10910
// OP_IFNOT	10910	3	0
// OP_ADDRESS	28	180	10911
// OP_STOREP_S	621	10911	0
// OP_DONE	0	0	0
void () gv1_currentammo = 
{
    self.ammo_shells = self.ammo_auto;
    self.ammo_nails = self.ammo_amsl;
    self.ammo_rockets = 0;
    self.ammo_cells = 0;
    if(self.weapon == IT_WEP1)
    {
        self.weaponmodel = "progs/v_auto.mdl";
    }
    else
    {
        if(self.weapon == IT_WEP2)
        {
            self.weaponmodel = "progs/v_sam.mdl";
        }
        else
        {
            if(self.weapon == IT_WEP3)
            {
                self.weaponmodel = "";
            }
            else
            {
                
                if(self.weapon == IT_WEP4)
                {
                    self.weaponmodel = "";
                }
                
            }
            
        }
        
    }
    
};

// start_groundveh1
// function begins at statement 14281, parm_start=10913
// OP_STORE_V	28	4	0
// OP_STORE_V	10915	7	0
// OP_STORE_V	10918	10	0
// OP_CALL3	499	0	0
// OP_ADDRESS	28	188	10921
// OP_STOREP_F	304	10921	0
// OP_CALL0	508	0	0
// OP_STORE_ENT	1	10913	0
// OP_STORE_V	10913	4	0
// OP_STORE_V	10922	7	0
// OP_CALL2	498	0	0
// OP_LOAD_ENT	28	219	10923
// OP_STORE_ENT	10923	10914	0
// OP_STORE_V	28	4	0
// OP_LOAD_V	10914	130	10924
// OP_STORE_V	10924	7	0
// OP_CALL2	497	0	0
// OP_STORE_V	10913	4	0
// OP_LOAD_V	10914	130	10927
// OP_STORE_V	10927	7	0
// OP_CALL2	497	0	0
// OP_ADDRESS	10913	142	10930
// OP_LOAD_V	10914	142	10933
// OP_STOREP_V	10933	10930	0
// OP_ADDRESS	10913	154	10936
// OP_STOREP_S	1550	10936	0
// OP_ADDRESS	10913	138	10937
// OP_STOREP_V	607	10937	0
// OP_ADDRESS	10913	128	10940
// OP_STOREP_F	284	10940	0
// OP_STORE_V	10913	4	0
// OP_STORE_V	10915	7	0
// OP_STORE_V	3565	10	0
// OP_CALL3	499	0	0
// OP_ADDRESS	10913	129	10941
// OP_STOREP_F	294	10941	0
// OP_ADDRESS	10913	177	10942
// OP_STOREP_F	2678	10942	0
// OP_ADDRESS	10913	210	10943
// OP_LOAD_F	10913	177	10944
// OP_STOREP_F	10944	10943	0
// OP_ADDRESS	10913	188	10945
// OP_STOREP_F	306	10945	0
// OP_ADDRESS	10913	411	10946
// OP_STOREP_FNC	7609	10946	0
// OP_ADDRESS	10913	205	10947
// OP_LOAD_S	28	205	10948
// OP_STOREP_S	10948	10947	0
// OP_ADDRESS	10913	413	10949
// OP_STOREP_F	619	10949	0
// OP_ADDRESS	10913	240	10950
// OP_STOREP_F	619	10950	0
// OP_ADDRESS	28	206	10951
// OP_STOREP_ENT	10913	10951	0
// OP_ADDRESS	10913	219	10952
// OP_STOREP_ENT	28	10952	0
// OP_ADDRESS	10913	226	10953
// OP_STOREP_ENT	28	10953	0
// OP_ADDRESS	10913	191	10954
// OP_STOREP_V	582	10954	0
// OP_ADDRESS	10913	208	10957
// OP_LOAD_F	28	208	10958
// OP_STOREP_F	10958	10957	0
// OP_ADDRESS	10913	213	10959
// OP_STOREP_F	842	10959	0
// OP_ADDRESS	28	238	10960
// OP_STOREP_F	619	10960	0
// OP_CALL0	508	0	0
// OP_STORE_ENT	1	10913	0
// OP_STORE_V	10913	4	0
// OP_STORE_V	10961	7	0
// OP_CALL2	498	0	0
// OP_STORE_V	10913	4	0
// OP_LOAD_ENT	28	206	10962
// OP_LOAD_V	10962	130	10963
// OP_STORE_V	10963	7	0
// OP_CALL2	497	0	0
// OP_ADDRESS	10913	226	10966
// OP_STOREP_ENT	28	10966	0
// OP_LOAD_ENT	28	206	10967
// OP_ADDRESS	10967	412	10968
// OP_STOREP_ENT	10913	10968	0
// OP_ADDRESS	10913	208	10969
// OP_LOAD_F	28	208	10970
// OP_STOREP_F	10970	10969	0
// OP_ADDRESS	28	408	10971
// OP_STOREP_FNC	10787	10971	0
// OP_ADDRESS	28	407	10972
// OP_STOREP_FNC	10580	10972	0
// OP_ADDRESS	28	409	10973
// OP_STOREP_FNC	10892	10973	0
// OP_ADDRESS	28	183	10974
// OP_ADDRESS	28	245	10975
// OP_STOREP_F	986	10975	0
// OP_STOREP_F	986	10974	0
// OP_ADDRESS	28	184	10976
// OP_ADDRESS	28	248	10977
// OP_MUL_F	812	113	10978
// OP_STOREP_F	10978	10977	0
// OP_STOREP_F	10978	10976	0
// OP_ADDRESS	28	185	10979
// OP_STOREP_F	619	10979	0
// OP_ADDRESS	28	186	10980
// OP_STOREP_F	619	10980	0
// OP_ADDRESS	28	187	10981
// OP_BITOR	321	322	10982
// OP_STOREP_F	10982	10981	0
// OP_CALL0	527	0	0
// OP_STORE_V	28	4	0
// OP_CALL1	532	0	0
// OP_NOT_F	1	0	10983
// OP_IFNOT	10983	12	0
// OP_LOAD_V	28	130	10984
// OP_STORE_V	10984	4	0
// OP_LOAD_V	28	130	10987
// OP_ADD_V	10987	10990	10993
// OP_STORE_V	10993	7	0
// OP_STORE_V	268	10	0
// OP_STORE_V	28	13	0
// OP_CALL4	510	0	0
// OP_ADDRESS	28	133	10996
// OP_ADD_F	73	1130	10997
// OP_STOREP_F	10997	10996	0
// OP_LOAD_ENT	28	206	10998
// OP_STORE_V	10998	4	0
// OP_LOAD_V	28	130	10999
// OP_STORE_V	10999	7	0
// OP_CALL2	497	0	0
// OP_LOAD_ENT	28	206	11002
// OP_LOAD_ENT	11002	412	11003
// OP_STORE_V	11003	4	0
// OP_LOAD_V	28	130	11004
// OP_STORE_V	11004	7	0
// OP_CALL2	497	0	0
// OP_ADDRESS	28	138	11007
// OP_STOREP_V	607	11007	0
// OP_ADDRESS	28	227	11010
// OP_STOREP_V	607	11010	0
// OP_LOAD_ENT	28	412	11013
// OP_ADDRESS	11013	404	11014
// OP_STOREP_F	815	11014	0
// OP_DONE	0	0	0
void () start_groundveh1 = 
{
    local entity e;
    local entity e2;
    setsize(self, '-16.000 -16.000 -24.000', '16.000 16.000 24.000');
    self.takedamage = DAMAGE_NO;
    e = spawn();
    setmodel(e, "progs/msamba.mdl");
    e2 = self.goalentity;
    setorigin(self, e2.origin);
    setorigin(e, e2.origin);
    e.angles = e2.angles;
    e.classname = "tank";
    e.velocity = '0.000 0.000 0.000';
    e.movetype = MOVETYPE_FLY;
    setsize(e, '-16.000 -16.000 -24.000', '16.000 16.000 16.000');
    e.solid = SOLID_SLIDEBOX;
    e.health = 400;
    e.max_health = e.health;
    e.takedamage = DAMAGE_AIM;
    e.th_die = GV_Die;
    e.netname = self.netname;
    e.speed = 0;
    e.thru = 0;
    self.enemy = e;
    e.goalentity = self;
    e.owner = self;
    e.view_ofs = '0.000 0.000 1.000';
    e.colormap = self.colormap;
    e.armorvalue = 15;
    self.toyview = 0;
    e = spawn();
    setmodel(e, "progs/msamtb.mdl");
    setorigin(e, self.enemy.origin);
    e.owner = self;
    self.enemy.oldenemy = e;
    e.colormap = self.colormap;
    self.th_missile = gv1_attack;
    self.th_run = gv1_steer;
    self.th_melee = gv1_currentammo;
    self.ammo_auto = 200;
    self.ammo_shells = 200;
    self.ammo_nails = self.ammo_amsl = 16 * wepmulti;
    self.ammo_rockets = 0;
    self.ammo_cells = 0;
    self.items = IT_WEP1 | IT_WEP2;
    droptofloor();
    
    if(!checkbottom(self))
    {
        traceline(self.origin, self.origin + '0.000 0.000 -10000.000', TRUE, self);
        self.origin_z = 0 + 30;
    }
    
    setorigin(self.enemy, self.origin);
    setorigin(self.enemy.oldenemy, self.origin);
    self.velocity = '0.000 0.000 0.000';
    self.movedir = '0.000 0.000 0.000';
    self.oldenemy.style = 32;
};

